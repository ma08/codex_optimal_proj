["\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n#print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\nfor i in range(n):\n    print(grid[i])\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "import sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and grid[i][j - 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n#print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                elif grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n            elif i+1 < n:\n                if grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + \"V\" + grid[i+1][j+1:]\n                elif grid[i+1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n            if j-1 >= 0:\n                if grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                elif grid[i][j-1] == '#':\n                    if (i-1 >= 0) and (grid[i-1][j] == '.'):\n                        grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                    if (i+1 < n) and (grid[i+1][j] == '.'):\n                        grid[i+1] = grid[i+1][:j] + \"V\" + grid[i+1][j+1:]\n            elif j+1 < m:\n                if grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n                elif grid[i][j+1] == '#':\n                    if (i-1 >= 0) and (grid[i-1][j] == '.'):\n                        grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                    if (i+1 < n) and (grid[i+1][j] == '.'):\n                        grid[i+1] = grid[i+1][:j] + \"V\" + grid[i+1][j+1:]\n\nfor i in range(n):\n    print(grid[i])\n", "\nN, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\" and row < N-1:\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "\n\n# n = int(input())\n# m = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(list(input()))\n\n# print(grid)\n\n# while True:\n#     new_grid = [['.' for i in range(m)] for j in range(n)]\n#     for i in range(n):\n#         for j in range(m):\n#             if grid[i][j] == '.':\n#                 new_grid[i][j] = '.'\n#             elif grid[i][j] == '#':\n#                 new_grid[i][j] = '#'\n#             elif grid[i][j] == 'V':\n#                 if i == 0:\n#                     new_grid[i][j] = 'V'\n#                 elif grid[i-1][j] == '.':\n#                     new_grid[i-1][j] = 'V'\n#                 elif grid[i-1][j] == '#':\n#                     if j > 0:\n#                         new_grid[i][j-1] = 'V'\n#                     if j < m-1:\n#                         new_grid[i][j+1] = 'V'\n#                 new_grid[i][j] = 'V'\n#     if grid == new_grid:\n#         break\n#     grid = new_grid\n\n# for row in grid:\n#     print(''.join(row))\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                continue\n            elif grid[i][j] == '#':\n                continue\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n\n        for i in range(rows):\n            for j in range(cols):\n\n                if grid[i][j] == 'V':\n\n                    if i == 0:\n                        done = False\n\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n\n                        elif grid[i-1][j] == '#':\n                            done = False\n\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j - 1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols - 1 and grid[i][j + 1] == '.':\n                            grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i - 1] = grid[i - 1][:j] + 'V' + grid[i - 1][j + 1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j - 1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols - 1 and grid[i][j + 1] == '.':\n                                grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j - 1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i - 1] = grid[i - 1][:j] + 'V' + grid[i - 1][j + 1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j - 1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n#print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water, where water spreads:\n    # * if water cell is above air cell, air cell turns into water,\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water,\n    # * each second,\n    # * water stops spreading,\n    # print grid when water stops spreading,\n    # assume that all cells outside of the grid behave as air cells,\n    #   e.g. if water cell is at bottommost row, water will not spread to sides,\n    # grid is N rows and M columns,\n    # 2 <= N, M <= 50,\n    # each of N lines contains a string S of length M,\n    # S represents one of the rows in the grid,\n    # S consists of the symbols \".\", \"#\", and \"V\",\n    #   . = air,\n    #   # = stone,\n    #   V = water,\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # spread water starting from the bottom row\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n\n    # print final grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    # \n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j - 1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols - 1 and grid[i][j + 1] == '.':\n                            grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n                    else:\n                        if grid[i - 1][j] == '.':\n                            done = False\n                            grid[i - 1] = grid[i - 1][:j] + 'V' + grid[i - 1][j + 1:]\n                        elif grid[i - 1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j - 1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols - 1 and grid[i][j + 1] == '.':\n                                grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n\n        if done:\n            break\n\n    # Print the grid\n\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nprint(grid)\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input().strip()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    # print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    # print(grid)\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    # print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    # print(grid)\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    #print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    #print(grid)\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    #print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    #print(grid)\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input().split()\n    rows = int(input_[0]) # number of rows\n    cols = int(input_[1]) # number of cols\n\n    grid = [] # 2D array for the grid\n    for i in range(rows):\n        row = input() # get a row\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for row in range(rows):\n            for col in range(cols):\n                if grid[row][col] == 'V':\n                    if row == 0: # if on the top row\n                        done = False # then we will make changes\n                        if col > 0 and grid[row][col-1] == '.': # if there is a space to the left\n                            grid[row] = grid[row][:col-1] + 'V' + grid[row][col:] # fill it with a V\n                        if col < cols-1 and grid[row][col+1] == '.': # if there is a space to the right\n                            grid[row] = grid[row][:col+1] + 'V' + grid[row][col+2:] # fill it with a V\n                    else: # if on a row other than the top row\n                        if grid[row-1][col] == '.': # if there is a space above\n                            done = False # then we will make changes\n                            grid[row-1] = grid[row-1][:col] + 'V' + grid[row-1][col+1:] # fill it with a V\n                        elif grid[row-1][col] == '#': # if there is a # above\n                            done = False # then we will make changes\n                            if col > 0 and grid[row][col-1] == '.': # if there is a space to the left\n                                grid[row] = grid[row][:col-1] + 'V' + grid[row][col:] # fill it with a V\n                            if col < cols-1 and grid[row][col+1] == '.': # if there is a space to the right\n                                grid[row] = grid[row][:col+1] + 'V' + grid[row][col+2:] # fill it with a V\n\n        if done:\n            break\n\n    # Print the grid\n    for row in range(rows):\n        print(grid[row])\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n#print(grid)\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\nfor i in range(n):\n    print(grid[i])\n", "\n'''\n    author: Ayush Rout\n    Date: 22/12/2019\n'''\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    # print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    # print(grid)\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i - 1][j] == \".\":\n                        grid[i - 1][j] = \"v\"\n                        changed = True\n                    if i < n - 1 and grid[i + 1][j] == \".\":\n                        grid[i + 1][j] = \"v\"\n                        changed = True\n                    if j < m - 1 and grid[i][j + 1] == \".\":\n                        grid[i][j + 1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j - 1] == \".\":\n                        grid[i][j - 1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    # print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    # print(grid)\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+1:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+1:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n            new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n\n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n\n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\nmain()\n", "\n\nn, m = [int(i) for i in input().split()] #input the number of rows and columns\n\ngrid = [] #initialize the grid\nfor i in range(n):\n    grid.append(input())\n\n#check the grid\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V': #if the current position is a V\n            if i-1 >= 0: #if the row above exists\n                if grid[i-1][j] == '.': #if the row above is a .\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:] #change the . to a V\n                if grid[i-1][j] == '#': #if the row above is a #\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'): #if the column to the left is a .\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:] #change the . to a V\n                    if (j+1 < m) and (grid[i][j+1] == '.'): #if the column to the right is a .\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:] #change the . to a V\n\nfor i in range(n):\n    print(grid[i])\n", "\ndef calc(num):\n    return num * num\n", "\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i - 1 >= 0:\n                if grid[i - 1][j] == '.':\n                    grid[i - 1] = grid[i - 1][:j] + \"V\" + grid[i - 1][j + 1:]\n                if grid[i - 1][j] == '#':\n                    if (j - 1 >= 0) and (grid[i][j - 1] == '.'):\n                        grid[i] = grid[i][:j - 1] + \"V\" + grid[i][j:]\n                    if (j + 1 < m) and (grid[i][j + 1] == '.'):\n                        grid[i] = grid[i][:j + 1] + \"V\" + grid[i][j + 2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n\n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "\nN, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            if grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides (if there are no cells on the bottom row)\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    if N > 1:\n        for i in range(N):\n            for j in range(M):\n                if grid[i][j] == 'V':\n                    grid[i][j] = '.'\n                    if i < N - 1 and grid[i + 1][j] == '.':\n                        grid[i + 1][j] = 'V'\n                    if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                        grid[i][j - 1] = 'V'\n                        grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "\nfrom sys import stdin\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\nif __name__ == '__main__':\n    main()\n", "\na = input()\nb = input()\nc = input()\nprint(a)\nprint(b)\nprint(c)\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nprint(grid)\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                continue\n            elif grid[i][j] == '#':\n                continue\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\nimport sys\nimport math\nfrom itertools import permutations\nfrom itertools import combinations\nfrom itertools import product\nfrom copy import deepcopy\nfrom collections import deque\nfrom collections import Counter\nimport heapq as hpq\nfrom fractions import gcd\nfrom functools import reduce\ndef inpl(): return list(map(int, input().split()))\ndef inpl_s(): return list(input().split())\nMOD = 10**9+7\nINF = 10**20\nLMAX = 10**5\nNMAX = 10**5\ndef main():\n    s = input()\n    n = len(s)\n    a = [0]*n\n    b = [0]*n\n    for i in range(n):\n        if s[i] == \"R\":\n            a[i] = 1\n        if s[i] == \"L\":\n            b[i] = 1\n    for i in range(1,n):\n        a[i] += a[i-1]\n        b[i] += b[i-1]\n    for i in range(n-1,0,-1):\n        a[i-1] += a[i]\n        b[i-1] += b[i]\n    #print(a)\n    #print(b)\n    for i in range(n):\n        if s[i] == \".\":\n            print(a[i],b[i])\nif __name__ == '__main__':\n    main()\n", "\n\n\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n#print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i-1][j-1] == '.'):\n                        grid[i-1] = grid[i-1][:j-1] + \"V\" + grid[i-1][j:]\n                    if (j+1 < m) and (grid[i-1][j+1] == '.'):\n                        grid[i-1] = grid[i-1][:j+1] + \"V\" + grid[i-1][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    #print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    #print(grid)\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    #print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    #print(grid) \n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split(\" \")\n    rows = int(input_[0].strip())\n    cols = int(input_[1].strip())\n\n    grid = []\n    for i in range(rows):\n        row = input().strip()\n\n    print(grid)\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j+1:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j+1:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]  # input the grid\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":  # if the grid is a virus\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":  # if the above grid is empty\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":  # if the above grid is a wall\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "from sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\nn, m = [int(i) for i in input().split()]\n#print(n, m)\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i - 1 >= 0:\n                if grid[i - 1][j] == '.':\n                    grid[i - 1] = grid[i - 1][:j] + \"V\" + grid[i - 1][j + 1:]\n                if grid[i - 1][j] == '#':\n                    if (j - 1 >= 0) and (grid[i][j - 1] == '.'):\n                        grid[i] = grid[i][:j - 1] + \"V\" + grid[i][j:]\n                    if (j + 1 < m) and (grid[i][j + 1] == '.'):\n                        grid[i] = grid[i][:j + 1] + \"V\" + grid[i][j + 2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"]