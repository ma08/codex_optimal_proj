2022-04-16 08:46:17.361899 num operations 1
2022-04-16 08:46:17.361918 size on input set 1
2022-04-16 08:46:24.725820 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right - left - sum(a[left:right+1]))\n"
    },
    {
      "index": 1,
      "text": "# https://practice.geeksforgeeks.org/problems/minimum-flips-to-make-binary-string-alternate/0\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 3,
      "text": "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 4,
      "text": "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 5,
      "text": "# https://www.codechef.com/problems/FLOW006\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 6,
      "text": "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 7,
      "text": "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 8,
      "text": "# cook your dish here\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    }
  ],
  "created": 1650098777,
  "object": "edit"
}
2022-04-16 08:46:24.726130 fix syntax errors 9 ['\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right - left - sum(a[left:right+1]))\n', '# https://practice.geeksforgeeks.org/problems/minimum-flips-to-make-binary-string-alternate/0\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '# https://www.codechef.com/problems/FLOW006\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '# cook your dish here\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right)\n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n']
2022-04-16 08:46:24.726253 size on output set 6
2022-04-16 08:46:24.726266 num operations 1
2022-04-16 08:46:24.726271 size on input set 1
2022-04-16 08:46:41.295261 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end + 1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment of 1s\n# Step 2: count the number of 0s between the start and end of the first contiguous segment of 1s\n# Step 3: find the start and end of the next contiguous segment of 1s\n# Step 4: count the number of 0s between the end of the first contiguous segment of 1s and the start of the next contiguous segment of 1s\n# Step 5: repeat until all contiguous segments of 1s are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 2,
      "text": "\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 3,
      "text": "\n\n# SOLUTION:\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 4,
      "text": "\n\n# SOLUTION\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    # write code here\n    pass\n \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n# SOLUTION \n# Step 1: find the start and end of the first contiguous segment \n# Step 2: count the number of 0s between the start and end of the first contiguous segment \n# Step 3: find the start and end of the next contiguous segment \n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment \n# Step 5: repeat until all contiguous segments are found \n\ndef minimum_moves(n, a): \n    moves = 0 \n    start = 0 \n    end = 0 \n    for i in range(n): \n        if a[i] == 1: \n            end = i \n            break \n\n    for i in range(end+1, n): \n        if a[i] == 1: \n            moves += (i - end - 1) \n            end = i \n    return moves \n\nt = int(input()) \nfor _ in range(t): \n    n = int(input()) \n    a = list(map(int, input().split())) \n    print(minimum_moves(n, a)) \n"
    },
    {
      "index": 7,
      "text": "\n\n# SOLUTION TO THE PROBLEM\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 8,
      "text": "\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment of 1s\n# Step 2: count the number of 0s between the start and end of the first contiguous segment of 1s\n# Step 3: find the start and end of the next contiguous segment of 1s\n# Step 4: count the number of 0s between the end of the first contiguous segment of 1s and the start of the next contiguous segment of 1s\n# Step 5: repeat until all contiguous segments of 1s are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    }
  ],
  "created": 1650098784,
  "object": "edit"
}
2022-04-16 08:46:41.295571 fix syntax errors 9 ['\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end + 1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment of 1s\n# Step 2: count the number of 0s between the start and end of the first contiguous segment of 1s\n# Step 3: find the start and end of the next contiguous segment of 1s\n# Step 4: count the number of 0s between the end of the first contiguous segment of 1s and the start of the next contiguous segment of 1s\n# Step 5: repeat until all contiguous segments of 1s are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n\n# SOLUTION:\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n\n# SOLUTION\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', "\n\ndef main():\n    # write code here\n    pass\n \nif __name__ == '__main__':\n    main()\n", '\n\n# SOLUTION \n# Step 1: find the start and end of the first contiguous segment \n# Step 2: count the number of 0s between the start and end of the first contiguous segment \n# Step 3: find the start and end of the next contiguous segment \n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment \n# Step 5: repeat until all contiguous segments are found \n\ndef minimum_moves(n, a): \n    moves = 0 \n    start = 0 \n    end = 0 \n    for i in range(n): \n        if a[i] == 1: \n            end = i \n            break \n\n    for i in range(end+1, n): \n        if a[i] == 1: \n            moves += (i - end - 1) \n            end = i \n    return moves \n\nt = int(input()) \nfor _ in range(t): \n    n = int(input()) \n    a = list(map(int, input().split())) \n    print(minimum_moves(n, a)) \n', '\n\n# SOLUTION TO THE PROBLEM\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment of 1s\n# Step 2: count the number of 0s between the start and end of the first contiguous segment of 1s\n# Step 3: find the start and end of the next contiguous segment of 1s\n# Step 4: count the number of 0s between the end of the first contiguous segment of 1s and the start of the next contiguous segment of 1s\n# Step 5: repeat until all contiguous segments of 1s are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n']
2022-04-16 08:46:41.295706 size on output set 8
