["n = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(total)\n", "n = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = input()\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i)):\n        if int(i[j]) != 0:\n            result += int(i[:j]) ** int(i[j])\n            break\nprint(result)\n", "\ndef main():\n    N = int(input())\n    X = 0\n    for i in range(N):\n        P = input()\n        X += int(P[-1]) ** int(P[0])\n    print(X)\nif __name__ == \"__main__\":\n    main()\n", "from math import factorial\nfrom math import sqrt\nfrom math import pi\nfrom math import e\nfrom math import sin\nfrom math import cos\nfrom math import tan\nfrom math import asin\nfrom math import acos\nfrom math import atan\nfrom math import sinh\nfrom math import cosh\nfrom math import tanh\nfrom math import asinh\nfrom math import acosh\nfrom math import atanh\nfrom math import log\nfrom math import log2\nfrom math import log10\nfrom math import exp\nfrom math import floor\nfrom math import ceil\n\n\ndef get_input():\n    return input(\"Enter a function: \")\n\ndef get_variables(input):\n    variables = []\n    for i in range(len(input)):\n        if input[i] == \"x\":\n            variables.append(i)\n    return variables\n\ndef get_operators(input):\n    operators = []\n    for i in range(len(input)):\n        if input[i] == \"^\":\n            operators.append(i)\n    return operators\n\ndef get_numbers(input):\n    numbers = []\n    for i in range(len(input)):\n        if input[i] == \"x\":\n            numbers.append(i)\n    return numbers\n\ndef get_sides(input, variables):\n    sides = []\n    for i in range(len(variables)):\n        sides.append(input[:variables[i]])\n        sides.append(input[variables[i]+1:])\n    return sides\n\ndef get_numbers(input, variables):\n    numbers = []\n    for i in range(len(variables)):\n        numbers.append(input[:variables[i]])\n        numbers.append(input[variables[i]+1:])\n    return numbers\n\ndef get_operators(input, variables):\n    operators = []\n    for i in range(len(variables)):\n        operators.append(input[:variables[i]])\n        operators.append(input[variables[i]+1:])\n    return operators\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nn = int(input())\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\nprint(total)\n", "#!/usr/bin/python3\n\nN = int(input())\n\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)\n", "\n\nn = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = input()\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i)):\n        if int(i[j]) != 0 and int(i[j-1]) != 0:\n            result += int(i[:j]) ** int(i[j]) + int(i[j-1])\n            break\nprint(result)\n", "\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1]) + int(str(P)[1])**int(str(P)[0]), end=\"\")\n    else:\n        print(int(str(P)[0])**int(str(P)[1]) + int(str(P)[1])**int(str(P)[2]) + int(str(P)[2])**int(str(P)[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")\n", "N = int(input())\n\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)\n", "\n#!/usr/bin/env python3\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(total)\n", "\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[0]), end=\" \")\n    else:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[2])+int(str(P)[2])**int(str(P)[0]), end=\" \")\n    if i < N-1:\n        print(\"+\", end=\" \")\n", "\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1]) + int(str(P)[1])**int(str(P)[0]), end=\"\")\n    else:\n        print(int(str(P)[0])**int(str(P)[1]) + int(str(P)[1])**int(str(P)[2]) + int(str(P)[2])**int(str(P)[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")\n", "\n#\n# N = int(input())\n# output = 0\n# for i in range(N):\n#     pow = 0\n#     number = input()\n#     for i in range(len(number)):\n#         pow += int(number[i])\n#     output += pow ** len(number)\n# print(output)\n", "\nN = int(input())\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)\n", "\n# Read in the length of the sequence\n# Read in the numbers\n# For each number, if it's the same as the previous, add one to the current streak\n# If it's not the same, add the current streak to the total streak\n# Then, set the current streak to 1\n# Finally, print the total streak\n\nimport math\n\ndef main():\n    length = int(input())\n    numbers = [int(input()) for i in range(length)]\n    currentStreak = 1\n    totalStreak = 0\n    for i in range(length):\n        if i == length-1:\n            break\n        if numbers[i] == numbers[i+1]:\n            currentStreak += 1\n        else:\n            totalStreak += currentStreak\n            currentStreak = 1\n    print(totalStreak)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    list_of_values = []\n    while n > 0:\n        number = input()\n        list_of_values.append(number)\n        n -= 1\n\n    result = 0\n    for i in list_of_values:\n        for j in range(1, len(i)):\n            if int(i[j]) != 0:\n                result += int(i[:j]) ** int(i[j])\n                break\n    print(result)\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(total)\n", "\nn = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = input()\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i) + 1):\n        if int(i[j]) != 0:\n            result += int(i[:j]) ** int(i[j:])\n            break\nprint(result)\n", "n = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = int(input())\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i)):\n        if i[j] != 0:\n            result += i[:j] ** i[j]\n            break\nprint(result)\n", "\nn = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = input()\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i)):\n        if int(i[j]) != 0:\n            result += int(i[:j]) ** int(i[j])\n            break\nprint(result)\n", "\n\nN = int(input())\noutput = 0\nfor i in range(N):\n    pow = 0\n    number = input()\n    for j in range(len(number)):\n        pow += int(number[j])\n    output += pow ** len(number)\nprint(output)\n", "\n\ndef main():\n    num = int(input(\"\"))\n    nums = []\n    for i in range(num):\n        nums.append(int(input(\"\")))\n    total = 0\n    for i in nums:\n        if i >= 10 and i < 100:\n            total += i % 10\n        elif i >= 100 and i < 1000:\n            total += (i // 100) ** 2\n        elif i >= 1000 and i < 10000:\n            total += (i // 1000) ** 3\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(total)\n", "\nimport file\nimport sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    result = 0\n    for num in nums:\n        result += solve(num)\n    print(result)\n\ndef solve(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num)\n    else:\n        return int(num[0])**(length-1) + file.solve(int(num[1:]))\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(\"test\")\nprint(total)\n", "N = int(input())\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)\n", "\n\nwith open('input.txt', 'r') as file:\n    N = int(file.readline())\n    output = 0\n    for i in range(N):\n        pow = 0\n        number = file.readline()\n        for i in range(len(number)):\n            pow += int(number[i])\n        output += pow ** len(number)\n    print(output)\n", "\na = input()\nb = input()\nprint(a)\nprint(b)\n", "\n\nimport math\n\ndef main():\n    n = int(input()) # The number of numbers to be input.\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input())) # The numbers themselves.\n    total = 0\n    for number in numbers:\n        length = len(str(number)) # Work out the length of the number.\n        base = int(length / 2) # Work out the base of the number.\n        power = length - base # Work out the power of the number.\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()\n", "\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number)) # Work out the lengths of the numbers.\n        base = int(length / 2)\n        power = length - base # Then, work out the power of the number by subtracting the base from the length.\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()\n", "\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    P = str(P)\n    print(int(P[0])**int(P[1])+int(P[1])**int(P[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")\n", "import sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    print(sum(solve(num) for num in nums))\n\ndef solve(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num)\n    else:\n        return int(num[0])**(length-1) + int(num[1:])\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input()) \n\nprint(total)\n", "\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[0]), end=\"\")\n    else:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[2])+int(str(P)[2])**int(str(P)[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")\n", "\n\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(total)\n", "\nN = int(input())\noutput = 0\nfor i in range(N):\n    pow = 0\n    number = input()\n    for i in range(len(number)):\n        pow += int(number[i])\n    output += pow ** len(number)\nprint(output)\n", "\n\n# Work out the lengths of the numbers. Then, for each number, work out the base of the number by dividing the length by 2. Then, work out the power of the number by subtracting the base from the length. Finally, work out the value of the number by taking the base to the power of the power. Add up all of those values.\n\nimport math\n\n\n    numbers = []\ndef main():\n    n = int(input())\n    for i in range(n):\n        numbers.append(int(input()))\n\n    total = 0\n    for number in numbers:\n\n        length = len(str(number))\n\n        base = int(length / 2)\n\n        power = length - base\n\n        total += int(math.pow(base, power))\n\n    print(total)\n\nmain()\n", "\n\nN = int(input()) # number of tests\n\nX = 0 # output\n\nfor i in range(N):\n    P = input() # input\n    X += int(P[-1]) ** int(P[0]) # calculation\n\nprint(X)\n", "\n\n# Work out the lengths of the numbers\n# Then, for each number, work out the base of the number by dividing the length by 2\n# Then, work out the power of the number by subtracting the base from the length\n# Finally, work out the value of the number by taking the base to the power of the power\n# Add up all of those values\n\nimport math\n\ndef main():\n    n = int(input()) # number of numbers\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input())) # add each number to list\n    total = 0\n    for number in numbers: # for each number in the list\n        length = len(str(number)) # get the length of the number\n        base = int(length / 2) # divide the length by 2 to get the base\n        power = length - base # subtract the base from the length to get the power\n        total += int(math.pow(base, power)) # add the value to the total\n    print(total)\n\nmain()\n", "\n# Work out the lengths of the numbers.\n# Then, for each number, work out the base of the number by dividing the length by 2.\n# Then, work out the power of the number by subtracting the base from the length.\n# Finally, work out the value of the number by taking the base to the power of the power.\n# Add up all of those values.\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = int(length / 2)\n        power = length - base\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()\n", "\n\nN = int(input())\n\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** (int(P[0]) - 1)\n\nprint(X)\n", "\n\nimport sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    result = 0\n    for num in nums:\n        result += solve(num)\n    print(result)\n\n\ndef solve(num):\n    digits = str(num)\n    if len(digits) == 1:\n        return int(digits)\n    else:\n        return int(digits[0])**(len(digits)-1) + int(digits[1:])\n\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    for i in range(n):\n        a, b = [int(x) for x in input().split()]\n        print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Work out the lengths of the numbers. Then, for each number, work out the base of the number by dividing the length by 2. Then, work out the power of the number by subtracting the base from the length. Finally, work out the value of the number by taking the base to the power of the power. Add up all of those values.\n\nimport math \ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = int(length / 2)\n        power = length - base\n        total += int(math.pow(base, power))\n    print(total)\nmain()\n", "\n\nprint(\"hello world!\")\n", "\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[0]), end=\" \")\n    else:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[2])+int(str(P)[2])**int(str(P)[0]), end=\" \")\n", "\n\n\n# Work out the lengths of the numbers.\n# Then, for each number, work out the base of the number by dividing the length by 2.\n# Then, work out the power of the number by subtracting the base from the length.\n# Finally, work out the value of the number by taking the base to the power of the power.\n# Add up all of those values.\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = int(length / 2)\n        power = length - base\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    result = 0\n    for num in nums:\n        result += solve(num)\n    print(result)\n\ndef solve(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num)\n    else:\n        return int(num[0])**(length-1) + int(num[1:])\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Work out the lengths of the numbers. Then, for each number, work out the base of the number by dividing the length by 2. Then, work out the power of the number by subtracting the base from the length. Finally, work out the value of the number by taking the base to the power of the power. Add up all of those values.\n\nimport math\n\ndef main():\n    n = int(input()) # number of numbers\n    numbers = [] # list of numbers\n    for i in range(n): # for each number\n        numbers.append(int(input())) # add it to the list\n    total = 0 # the total\n    for number in numbers: # for each number in the list\n        length = len(str(number)) # length of the number\n        base = int(length / 2) # base of the number\n        power = length - base # power of the number\n        total += int(math.pow(base, power)) # add the value of the number to the total\n    print(total) # print the total\n\nmain()\n", "\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:  # \u5982\u679c\u8f38\u5165\u7684\u6578\u5b57\u662f\u5169\u4f4d\u6578\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[0]), end=\"\")  # \u547c\u53eb\u51fa\u7b2c\u4e00\u500b\u6578\u5b57\u7684\u6b21\u65b9\u7b2c\u4e8c\u500b\u6578\u5b57\uff0c\u518d\u52a0\u4e0a\u7b2c\u4e8c\u500b\u6578\u5b57\u7684\u6b21\u65b9\u7b2c\u4e00\u500b\u6578\u5b57\n    else:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[2])+int(str(P)[2])**int(str(P)[0]), end=\"\")  # \u547c\u53eb\u51fa\u7b2c\u4e00\u500b\u6578\u5b57\u7684\u6b21\u65b9\u7b2c\u4e8c\u500b\u6578\u5b57\uff0c\u518d\u52a0\u4e0a\u7b2c\u4e8c\u500b\u6578\u5b57\u7684\u6b21\u65b9\u7b2c\u4e09\u500b\u6578\u5b57\uff0c\u6700\u5f8c\u52a0\u4e0a\u7b2c\u4e09\u500b\u6578\u5b57\u7684\u6b21\u65b9\u7b2c\u4e00\u500b\u6578\u5b57\n    if i < N-1:  # \u5982\u679c\u9084\u6c92\u5230\u6700\u5f8c\u4e00\u500b\u6578\u5b57\n        print(\"+\", end=\"\")\n", "\nN = int(input())\n\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)\n", "\ndef main():\n    num = int(input())\n    nums = []\n    for i in range(num):\n        nums.append(int(input()))\n    total = 0\n    for i in nums:\n        if i >= 10 and i < 100:\n            total += i % 10\n        elif i >= 100 and i < 1000:\n            total += (i // 100) ** 2\n        elif i >= 1000 and i < 10000:\n            total += (i // 1000) ** 3\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\noutput = 0\nfor i in range(N):\n    power = 0\n    number = input()\n    for i in range(len(number)):\n        power += int(number[i])\n    output += power ** len(number)\nprint(output)\n"]