2022-04-16 04:44:46.507860 num operations 1
2022-04-16 04:44:46.507876 size on input set 1
2022-04-16 04:45:00.607402 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n    \treturn None\n    if n % 2 == 1:\n    \treturn sorted(lst)[n//2]\n    else:\n    \treturn sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()] \n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef median(l):\n\tn = len(l)\n\tif n < 1:\n\t\treturn None\n\tif n % 2 == 1:\n\t\treturn sorted(l)[n//2]\n\telse:\n\t\treturn sum(sorted(l)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tl = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(l[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650084286,
  "object": "edit"
}
2022-04-16 04:45:00.607681 fix syntax errors 9 ["\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n    \treturn None\n    if n % 2 == 1:\n    \treturn sorted(lst)[n//2]\n    else:\n    \treturn sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()] \n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(l):\n\tn = len(l)\n\tif n < 1:\n\t\treturn None\n\tif n % 2 == 1:\n\t\treturn sorted(l)[n//2]\n\telse:\n\t\treturn sum(sorted(l)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tl = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(l[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-16 04:45:00.607801 size on output set 6
2022-04-16 04:45:00.607817 num operations 1
2022-04-16 04:45:00.607831 size on input set 1
2022-04-16 04:45:28.023944 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 1,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1] * N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 2,
      "text": "\n# def solution(N, M, A):\n#     # calculate prefix sums\n#     prefix_sums = [0]*(N+1)\n#     for i in range(N):\n#         prefix_sums[i+1] = prefix_sums[i] + A[i]\n#\n#     # calculate prefix medians\n#     prefix_medians = [0]*(N+1)\n#     for i in range(N):\n#         prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n#\n#     # calculate suffix medians\n#     suffix_medians = [0]*(N+1)\n#     for i in range(N-1, -1, -1):\n#         suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n#\n#     # calculate total number of pairs\n#     total_pairs = 0\n#\n#     # calculate number of pairs with prefix medians\n#     prefix_medians_count = [0]*(N+1)\n#     for i in range(N+1):\n#         prefix_medians_count[i] = prefix_medians_count[i-1]\n#         if prefix_medians[i] == M:\n#             prefix_medians_count[i] += 1\n#\n#     for i in range(N+1):\n#         total_pairs += prefix_medians_count[i]\n#         if suffix_medians[i] == M:\n#             total_pairs += prefix_medians_count[i]\n#\n#     return total_pairs\n#\n# print(solution(N, M, A))\n"
    },
    {
      "index": 3,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(1, N+1):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(1, N+1):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 4,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n    # calculate total number of pairs\n    total_pairs = 0\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i] * (i+1)\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i] * (N-i)\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 6
    },
    {
      "index": 7,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\nN = 200000\nM = 100000\nA = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N+1):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 8,
      "text": "\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n\n# N, M = 5, 4\n# A = [1, 4, 5, 60, 4]\n\n# N, M = 3, 1\n# A = [1, 1, 1]\n\n# N, M = 15, 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N, M = 200000, 100000\n# A = [1]*200000\n\n# N, M = 200000, 100000\n# A = [i for i in range(1, 200001)]\n\n# N, M = 200000, 100000\n# A = [i for i in range(200000, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    }
  ],
  "created": 1650084300,
  "object": "edit"
}
2022-04-16 04:45:28.024300 NO RESULT
2022-04-16 04:45:28.024310 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 6
}
2022-04-16 04:45:28.024423 fix syntax errors 8 ['\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1] * N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n# def solution(N, M, A):\n#     # calculate prefix sums\n#     prefix_sums = [0]*(N+1)\n#     for i in range(N):\n#         prefix_sums[i+1] = prefix_sums[i] + A[i]\n#\n#     # calculate prefix medians\n#     prefix_medians = [0]*(N+1)\n#     for i in range(N):\n#         prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n#\n#     # calculate suffix medians\n#     suffix_medians = [0]*(N+1)\n#     for i in range(N-1, -1, -1):\n#         suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n#\n#     # calculate total number of pairs\n#     total_pairs = 0\n#\n#     # calculate number of pairs with prefix medians\n#     prefix_medians_count = [0]*(N+1)\n#     for i in range(N+1):\n#         prefix_medians_count[i] = prefix_medians_count[i-1]\n#         if prefix_medians[i] == M:\n#             prefix_medians_count[i] += 1\n#\n#     for i in range(N+1):\n#         total_pairs += prefix_medians_count[i]\n#         if suffix_medians[i] == M:\n#             total_pairs += prefix_medians_count[i]\n#\n#     return total_pairs\n#\n# print(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(1, N+1):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(1, N+1):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n    # calculate total number of pairs\n    total_pairs = 0\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i] * (i+1)\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i] * (N-i)\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\nN = 200000\nM = 100000\nA = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N+1):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n\n# N, M = 5, 4\n# A = [1, 4, 5, 60, 4]\n\n# N, M = 3, 1\n# A = [1, 1, 1]\n\n# N, M = 15, 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N, M = 200000, 100000\n# A = [1]*200000\n\n# N, M = 200000, 100000\n# A = [i for i in range(1, 200001)]\n\n# N, M = 200000, 100000\n# A = [i for i in range(200000, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n']
2022-04-16 04:45:28.024556 size on output set 7
