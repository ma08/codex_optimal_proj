2022-04-16 06:58:19.438004 num operations 1
2022-04-16 06:58:19.438021 size on input set 1
2022-04-16 06:58:42.852073 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    r = int(input())\n    if r < 1200:\n        print(\"ABC\")\n    elif r < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test_main():\n    assert main() == (\n        'ABC',\n        'ARC',\n        'AGC',\n    )\n\n\ndef resolve():\n    r = int(input())\n    if r < 1200:\n        print(\"ABC\")\n    elif r < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1199\"\"\"\n        output = \"\"\"ABC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1200\"\"\"\n        output = \"\"\"ARC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"4208\"\"\"\n        output = \"\"\"AGC\"\"\"\n        self.assertIO(input, output)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1199\"\"\"\n        output = \"\"\"ABC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1200\"\"\"\n        output = \"\"\"ARC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"4208\"\"\"\n        output = \"\"\"AGC\"\"\"\n        self.assertIO(input, output)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n\ndef resolve():\n    r = int(input())\n    if r < 1200:\n    print(\"ABC\")\n    elif r < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n"
    },
    {
      "index": 1,
      "text": "\nr = int(input())\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef get_max_index(arr):\n    max_v = max(arr)\n    for i, v in enumerate(arr):\n        if v == max_v:\n            return i\n\n\ndef get_min_index(arr):\n    min_v = min(arr)\n    for i, v in enumerate(arr):\n        if v == min_v:\n            return i\n\n\na[get_max_index(a)] = -1\na[get_min_index(a)] = -1\n\nprint(max(a))\n"
    },
    {
      "index": 3,
      "text": "\n\nR = int(input())\nif R < 1200:\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 4,
      "text": "\nr = int(input())\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 5,
      "text": "\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
      "index": 6,
      "text": "\n\nr = int(input())  # input\nif r < 1200:  # condition\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 7,
      "text": "r = int(input())\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 8,
      "text": "\n\nr = int(input()) #input\nif r < 1200: #conditions\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\") #output\n"
    }
  ],
  "created": 1650092299,
  "object": "edit"
}
2022-04-16 06:58:42.852345 fix syntax errors 9 ['#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    r = int(input())\n    if r < 1200:\n        print("ABC")\n    elif r < 2800:\n        print("ARC")\n    else:\n        print("AGC")\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test_main():\n    assert main() == (\n        \'ABC\',\n        \'ARC\',\n        \'AGC\',\n    )\n\n\ndef resolve():\n    r = int(input())\n    if r < 1200:\n        print("ABC")\n    elif r < 2800:\n        print("ARC")\n    else:\n        print("AGC")\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_入力例_1(self):\n        input = """1199"""\n        output = """ABC"""\n        self.assertIO(input, output)\n\n    def test_入力例_2(self):\n        input = """1200"""\n        output = """ARC"""\n        self.assertIO(input, output)\n\n    def test_入力例_3(self):\n        input = """4208"""\n        output = """AGC"""\n        self.assertIO(input, output)\n\n\nif __name__ == "__main__":\n    unittest.main()\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_入力例_1(self):\n        input = """1199"""\n        output = """ABC"""\n        self.assertIO(input, output)\n\n    def test_入力例_2(self):\n        input = """1200"""\n        output = """ARC"""\n        self.assertIO(input, output)\n\n    def test_入力例_3(self):\n        input = """4208"""\n        output = """AGC"""\n        self.assertIO(input, output)\n\n\nif __name__ == "__main__":\n    unittest.main()\n\n\ndef resolve():\n    r = int(input())\n    if r < 1200:\n    print("ABC")\n    elif r < 2800:\n        print("ARC")\n    else:\n        print("AGC")\n', '\nr = int(input())\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef get_max_index(arr):\n    max_v = max(arr)\n    for i, v in enumerate(arr):\n        if v == max_v:\n            return i\n\n\ndef get_min_index(arr):\n    min_v = min(arr)\n    for i, v in enumerate(arr):\n        if v == min_v:\n            return i\n\n\na[get_max_index(a)] = -1\na[get_min_index(a)] = -1\n\nprint(max(a))\n', '\n\nR = int(input())\nif R < 1200:\n    print("ABC")\nelif R < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\nr = int(input())\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\na, b = map(int, input().split())\nprint(a + b)\n', '\n\nr = int(input())  # input\nif r < 1200:  # condition\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', 'r = int(input())\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\n\nr = int(input()) #input\nif r < 1200: #conditions\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC") #output\n']
2022-04-16 06:58:42.852414 size on output set 8
2022-04-16 06:58:42.852431 num operations 1
2022-04-16 06:58:42.852436 size on input set 1
2022-04-16 06:59:22.705559 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "r = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 1,
      "text": "\nr = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 2,
      "text": "\n#\nr = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 3,
      "text": "\n\nr = int(input())a\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n\n\n\n\n\n    print(\"AGC\")\n"
    },
    {
      "index": 4,
      "text": "\n\nr = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n\n    print(\"AGC\")\n"
    },
    {
      "index": 5,
      "text": "\n\nr = int(input()) \n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 6,
      "text": "\n\nr = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print(\"AGC\")\n"
    },
    {
      "index": 7,
      "text": "\n# AOJ\nr = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    },
    {
      "index": 8,
      "text": "\nr = int(input())\n\nif r < 1200:\n    print(\"ABC\")\nelif r < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n"
    }
  ],
  "created": 1650092322,
  "object": "edit"
}
2022-04-16 06:59:22.705869 fix syntax errors 9 ['r = int(input())\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\nr = int(input())\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\n#\nr = int(input())\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\n\nr = int(input())a\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n\n\n\n\n\n    print("AGC")\n', '\n\nr = int(input())\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n\n    print("AGC")\n', '\n\nr = int(input()) \n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\n\nr = int(input())\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print("AGC")\n', '\n# AOJ\nr = int(input())\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n', '\nr = int(input())\n\nif r < 1200:\n    print("ABC")\nelif r < 2800:\n    print("ARC")\nelse:\n    print("AGC")\n']
2022-04-16 06:59:22.705919 size on output set 8
