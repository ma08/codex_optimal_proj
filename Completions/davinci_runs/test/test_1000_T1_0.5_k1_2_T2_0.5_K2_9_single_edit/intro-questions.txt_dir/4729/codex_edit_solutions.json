["\ndef check_password(password, message):\n    password = list(password)\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index + 1:]\n    return \"PASS\"\n\n\nprint(check_password(input(), input()))\n", "\n\ndef main():\n    pass_string, message_string = 'abc', 'abcabcd'\n    pass_index = 0\n    for char in message_string:\n        if char == pass_string[pass_index]:\n            pass_index += 1\n        if pass_index == len(pass_string):\n            print('PASS')\n            return\n    print('FAIL')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\npassword, message = input().split(',')\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\n\npassword, message = input().split(' ')\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "'''\n    File name: pw.py\n    Author: xdtianyu@gmail.com\n    Date created: 2015-08-16 18:31:03\n    Date last modified: 2015-08-16 18:31:03\n    Python Version: 2.7.6\n'''\n\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().split()\n    pw_i = 0\n    for i in range(len(msg)):\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\npassword, message = input().split()  # Get input\n\nfor i in range(len(password)):  # Check if the password is in the message\n    if message.find(password[i]) == -1:  # If the password is not in the message print \"FAIL\"\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n# Sets up the variables for the for loop\nj = 0\ni = 0\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\n# Gets the input from the user\npassword = input().strip() #strip removes all spaces\nmessage = input().strip() #strip removes all spaces\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j::]:\n        j = message[j::].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\n# Gets the input from the user and strips it\npassword = input().strip().lower()\nmessage = input().strip().lower()\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "#SOLUTION\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n\n    return False\n\nmain()\n", "\n\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(message)-1):\n        if password.index(message[i])>password.index(message[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password) - 1):\n        if message.index(password[i]) > message.index(password[i + 1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().strip().split()\n    pw_i = 0\n    for i in range(len(msg)):\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\ndef main():\n    pass_string, message_string = input().split(\" \")\n    pass_index = 0\n    for char in message_string:\n        if char == pass_string[pass_index]:\n            pass_index += 1\n        if pass_index == len(pass_string):\n            print('PASS')\n            return\n    print('FAIL')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass_string, message_string = input().split(' ')\n    pass_index = 0\n    for char in message_string:\n        if char == pass_string[pass_index]:\n            pass_index += 1\n        if pass_index == len(pass_string):\n            print('PASS')\n            return\n    print('FAIL')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    if message_validity(password, message):\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\ndef main():\n    # Gets the input from the user\n    password = input().strip()\n    message = input().strip()\n\n    # Sets up the variables for the for loop\n    j = 0\n    i = 0\n\n    # For loop that loops until the end of the password is reached\n    while i < len(password):\n\n        # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n        if password[i] in message[j:]:\n            j = message[j:].index(password[i]) + j + 1\n            i += 1\n\n        # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n        else:\n            print(\"FAIL\")\n            break\n\n    # If the loop completes, it prints pass\n    else:\n        print(\"PASS\")\n\n\nmain()\n", "\ndef main():\n    password = input().strip()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if password_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    return message_validity\n\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n\n    return False\n\nmain()\n", "\n\ndef check_password(password, message, n):\n    for i in range(n):\n        if password[i] not in message:\n            return \"FAIL\"\n        index = message.index(password[i])\n        message = message[index+1:]\n    return \"PASS\\n\"\n\nn = int(input())\npassword = input()\nmessage = input()\nprint(check_password(password, message, n))\n", "\n\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().split()  # pw\uc640 msg\ub97c \uc785\ub825\ubc1b\ub294\ub2e4\n    pw_i = 0\n    for i in range(len(msg)):  # msg\uc758 \uae38\uc774\ub9cc\ud07c \ubc18\ubcf5\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:  # pw_i\uac00 pw\uc758 \uae38\uc774\ubcf4\ub2e4 \uc791\uace0, msg[i]\uc640 pw[pw_i]\uac00 \uac19\uc744 \ub54c\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\ntotal = 0\nfor i in range(n):\n    total += a[i]\nprint(total)\n", "\n\ndef check_password(passw, message):\n    password = list(passw)\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_password(input(), input()))\n", "\n\npassword, message = input().split(\" \")\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\n\npassword, message = input().split() # the password and message are inputted\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\n\ndef main():\n    password = raw_input()\n    message = raw_input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n# SOLUTION\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\n\ndef main():\n    pass_string, message_string = input().split()\n    pass_index = 0\n    for char in message_string:\n        if char == pass_string[pass_index]:\n            pass_index += 1\n        if pass_index == len(pass_string):\n            print('PASS')\n            return\n    print('FAIL')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION\n\np, s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\n# Gets the input from the user\npassword = input()\nmessage = input()\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().split()\n    pw_i = 0\n    for i in range(len(msg)):\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().rstrip().split()\n    pw_i = 0\n    for i in range(len(msg)):\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i])>message.index(password[i + 1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\ndef main():\n    password = input(\"Enter a password: \")\n    message = input(\"Enter a message: \")\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\ndef check_password(password, message):\n    password = list(password)\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\n\nprint(check_password(input(), input()))\n", "#https://open.kattis.com/problems/substring\n\n#SOLUTION\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\npassword = input()\nmessage = input()\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\n\n#SOLUTION 1\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\nimport fileinput\n\n\ndef main():  # main function\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):  # call is_valid_message function\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\n\ndef is_valid_message(password, message):  # function to determine if a message is valid\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i])>message.index(password[i+1]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_password(password, message):\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_password(input(), input()))\n", "\n\npassword, message = input().split()  # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n\nfor i in range(len(password)):  # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c\n    if message.find(password[i]) == -1:  # \u0435\u0441\u043b\u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0438\u0437 \u043f\u0430\u0440\u043e\u043b\u044f\n        print(\"FAIL\")\n        break  # \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\n\n#SOLUTION\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c,i)\n    if i == -1 :\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\n# # Gets the input from the user\n# password = input().strip()\n# message = input().strip()\n\n# # Sets up the variables for the for loop\n# j = 0\n# i = 0\n\n# # For loop that loops until the end of the password is reached\n# while i < len(password):\n\n#     # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n#     if password[i] in message[j:]:\n#         j = message[j:].index(password[i]) + j + 1\n#         i += 1\n\n#     # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n#     else:\n#         print(\"FAIL\")\n#         break\n\n# # If the loop completes, it prints pass\n# else:\n#     print(\"PASS\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().split() # \uacf5\ubc31\uc744 \uae30\uc900\uc73c\ub85c \ub450\uac1c\uc758 \ubb38\uc790\uc5f4\ub85c \ub098\ub208\ub2e4.\n    pw_i = 0\n    for i in range(len(msg)):\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef check_password(password, message):\n    password = list(password)\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index + 1:]\n    return \"PASS\"\n\nprint(check_password(input(), input()))\n", "\n\ndef main():\n    pass_string, message_string = input().split(\" \")\n    pass_index = 0\n    for char in message_string:\n        if char == pass_string[pass_index]:\n            pass_index += 1\n        if pass_index == len(pass_string):\n            print('PASS')\n            return\n    print('FAIL')\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\nprint(input().find(input()))\n", "\n# Gets the input from the user and strips the newline character\npassword = input().rstrip()\nmessage = input().rstrip()\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\ndef check_password(password, message):\n    password = list(password)\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_password(input(), input()))\n", "\n\nprint(\"hello world\")\n", "\n\ndef main():\n    password = input(\"Enter the password: \")\n    message = input(\"Enter the message: \")\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n"]