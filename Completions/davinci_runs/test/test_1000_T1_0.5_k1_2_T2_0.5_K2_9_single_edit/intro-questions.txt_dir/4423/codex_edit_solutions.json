["\n\nN = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))\n    else:\n        d[S] = [(i + 1, P)]\n\nfor S in sorted(d.keys()):\n    for i, P in sorted(d[S], key=lambda x: x[1], reverse=True):\n\n        print(i)\n", "\nn = int(input())\n\nd = {}\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s not in d.keys():\n        d[s] = [p]\n    else:\n        d[s].append(p)\n\n\nfor s in sorted(d.keys()):\n    d[s].sort(reverse=True)\n\n\nfor s in sorted(d.keys()):\n    for p in d[s]:\n        print(s, p)\n", "\nN = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))\n    else:\n        d[S] = [(i + 1, P)]\n\nfor S in sorted(d.keys()):\n    for i, _ in sorted(d[S], key=lambda x: x[1], reverse=True):\n        print(i)\n", "\n\nn = int(input())\nd = {}\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s not in d.keys():\n        d[s] = [p]\n    else:\n        d[s].append(p)\nfor s in sorted(d.keys()):\n    d[s].sort(reverse=True)\nfor s in sorted(d.keys()):\n    for p in d[s]:\n        print(s, p)\n", "\nN = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))\n    else:\n        d[S] = [(i + 1, P)]\n\nfor S in sorted(d.keys()):\n    for i, P in sorted(d[S], key=lambda x: x[1], reverse=True):\n        print(i)\n", "\nN = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))\n    else:\n        d[S] = [(i + 1, P)]\nfor S in sorted(d.keys()):\n    for i, P in sorted(d[S], key=lambda x: x[1], reverse=True):\n        print(i)\n", "\nprint(\"Hello\")\n", "\n\nN = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))\n    else:\n        d[S] = [(i + 1, P)]\n\nfor S in sorted(d.keys()):\n    for i, p in sorted(d[S], key=lambda x: x[1], reverse=True):\n        print(p)\n", "\nn = int(input())\nd = {}\nfor i in range(n):\n    s, p = input().split()  # s = subject, p = point\n    p = int(p)  # convert string to int\n    if s not in d.keys():\n        d[s] = [p]  # create new key and assign list\n    else:\n        d[s].append(p)  # append new point to the list\n\nfor s in sorted(d.keys()):\n    d[s].sort(reverse=True)  # sort each list in descending order\n\nfor s in sorted(d.keys()):\n    for p in d[s]:  # print all points in each list\n        print(p)  # print each point\n\nprint(d)\n", "\n\nn = int(input())\nd = {}\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s not in d:\n        d[s] = [p]\n    else:\n        d[s].append(p)\n\nfor s in sorted(d):\n    d[s].sort(reverse=True)\n\nfor s in sorted(d):\n    for p in d[s]:\n        print(s, p)\n", "\n\nN = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))  # \u6587\u5b57\u5217S\u3092\u30ad\u30fc\u3068\u3057\u3066\u3001\u30ea\u30b9\u30c8\u3092\u5024\u3068\u3059\u308b\u8f9e\u66f8\u3092\u4f5c\u6210\n    else:\n        d[S] = [(i + 1, P)]\n\nfor S in sorted(d.keys()):\n    for i, P in sorted(d[S], key=lambda x: x[1], reverse=True):  # \u6570\u5024\u3067\u30bd\u30fc\u30c8\n        print(i)\n", "\nn = int(input())\nd = {}\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s not in d.keys():\n        d[s] = [p]\n    else:\n        d[s].append(p)\n\nfor s in sorted(d.keys()):\n    d[s].sort(reverse=True)\n\nfor s in sorted(d.keys()):\n    for p in d[s]:\n        print(p)\n", "\n\nN = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))\n    else:\n        d[S] = [(i + 1, P)]\n\nfor S in sorted(d.keys()):\n    for i, P in sorted(d[S], key=lambda x: x[1], reverse=True):\n        print(i) \n", "\n\nn = int(input())\nd = {}\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s not in d.keys():\n        d[s] = [p, ]\n    else:\n        d[s].append(p)\n\nfor s in sorted(d.keys()):\n    d[s].sort(reverse=True)\n\nfor s in sorted(d.keys()):\n    for p in d[s]:\n        print(p)\n", "\n\nn = int(input())\nd = {}\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    if s in d.keys():\n        d[s].append(p)\n    else:\n        d[s] = [p]\n\nfor s in sorted(d.keys()):\n    d[s].sort(reverse=True)\n\nfor s in sorted(d.keys()):\n    for p in d[s]:\n        print(s, p)\n", "N = int(input())\n\nd = {}\nfor i in range(N):\n    S, P = input().split()\n    P = int(P)\n    if S in d:\n        d[S].append((i + 1, P))\n    else:\n        d[S] = [(i + 1, P)]\nfor S in sorted(d.keys()):\n    for i, P in sorted(d[S], key=lambda x: x[1], reverse=True):\n        print(i)\n", "\nn = int(input())\nd = {}\nfor i in range(n):\n    s, p = input().split()\n    p = int(p)\n    d[s] = d.get(s, []) + [p]\n\nfor s in sorted(d.keys()):\n    d[s].sort(reverse=True)\n\nfor s in sorted(d.keys()):\n    for p in d[s]:\n        print(p)\n"]