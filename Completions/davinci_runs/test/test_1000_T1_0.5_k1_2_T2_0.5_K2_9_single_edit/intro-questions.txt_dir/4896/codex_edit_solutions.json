["\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    towers += 1\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input(\"Enter number of bricks: \"))\n    if n > 0:\n        bricks = [int(x) for x in input(\"Enter bricks: \").split()]\n        towers = []\n        for brick in bricks:\n            if len(towers) == 0:\n                towers.append(brick)\n            else:\n                if brick > towers[-1]:\n                    towers.append(brick)\n        print(len(towers))\n    else:\n        print(\"Invalid input\")\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip())\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    min_width = bricks[0]\n    num_towers = 1\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip())\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    min_width = bricks[0]\n    num_towers = 1\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    print(N)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main(n, bricks):\n    bricks = [int(x) for x in bricks.split()]\n    towers = 1\n    base = bricks[0]\n\n    for brick in bricks[1:]:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    return towers\n\nif __name__ == '__main__':\n    n = int(input())\n    bricks = input()\n    print(main(n, bricks))\n", "import sys\n\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\"\"\"\nhttps://www.acmicpc.net/problem/2294\n\"\"\"\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main()\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    num_bricks = int(input())\n    bricks = [int(x) for x in input().split()]\n\n    min_width = bricks[0]\n    num_towers = 1\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0:1]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\nf = sys.stdin\no = sys.stdout\n\n\nN = int(input())\nbricks = list(map(int, f.readline().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip())\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    min_width = bricks[0]\n    num_towers = 1\n\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\nbricks = list(map(int, input().split()))\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\n\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline()) # number of bricks\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]: # check if there is a taller tower than the current one\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip()) # number of bricks\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()] # width of the bricks\n\n    min_width = bricks[0] # minimum width of the tower\n    num_towers = 1 # number of towers\n\n    for brick in bricks[1:]:\n        if brick >= min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input(\"Enter the number of bricks: \"))\nbricks = list(map(int, input(\"Enter the heights of the bricks: \").split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n\nprint(\"The number of towers that can be built is: \", towers)\n", "\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())  # number of rows\n    m = int(input())  # number of columns\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in input().split()])\n    # print(matrix)\n    # print(n, m)\n    # for row in matrix:\n    #     print(row)\n    for row in matrix:\n        for i in range(len(row)):\n            if i == 0:\n                print(row[i], end=\" \")\n            elif i == len(row)-1:\n                print(row[i])\n            else:\n                print(row[i], end=\" \")\n\nmain()\n", "\nfrom collections import defaultdict\nimport sys\n\ndef main():\n    # Read input \n\n    n,k = map(int,sys.stdin.readline().split())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    d = defaultdict(int)\n    for i in a:\n        d[i]+=1\n    l = list(d.keys())\n    l.sort()\n    for i in range(len(l)):\n        if d[l[i]]>k:\n            print(l[i])\n            sys.exit()\n    print(-1)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert len(bricks) == n\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if i == 0 or bricks[i] > bricks[i-1]:\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\nprint(towers)\n", "\nN = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = bricks[0]  # base of the current tower\n    for i in range(1, n):  # iterate over the bricks\n        if bricks[i] > base:  # if current brick is greater than the base\n            towers += 1\n            base = bricks[i]  # update the base\n    towers += 1\n    print(towers)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    num_bricks = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n\n    min_width = bricks[0]\n    num_towers = 1\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport re\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline().strip())\n\n    for _ in range(num_cases):\n        num_bricks = int(sys.stdin.readline().strip())\n        bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n        min_width = bricks[0]\n        num_towers = 1\n\n        for brick in bricks[1:]:\n            if brick > min_width:\n                num_towers += 1\n                min_width = brick\n\n        print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    print(len(set(bricks)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Oct  9 13:45:12 2017\n\"\"\"\n", "import sys\n\n\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip())\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    min_width = bricks[0]\n    num_towers = 1\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibonacci(n-1) + fibonacci(n-2)\nfor n in range(1, 10):\n    print(n, \":\", fibonacci(n))\n", "\n\nimport math\n\ndef main():\n    N = int(input())\n    bricks = list(map(int, input().split()))\n\n    towers = 1\n\n    for i in range(1, N):\n        if bricks[i] > bricks[i-1]:\n            towers += 1\n\n    print(towers)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_valid(prev, cur):\n    if cur > prev:\n        return True\n    return False\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if is_valid(towers[-1], brick):\n                towers.append(brick)\n    print(len(towers))\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    count = 0\n    while len(bricks) > 0:\n        base = bricks[0]\n        i = 1\n        while i < len(bricks) and bricks[i] > base:\n            base = bricks[i]\n            i += 1\n        bricks = bricks[i:]\n        count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    a = int(input())\n    b = int(input())\n\n    print(a+b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if i == 0 or bricks[i] > bricks[i-1]:\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(towers)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    assert len(bricks) == n\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if i == 0 or bricks[i] > bricks[i-1]:\n            towers += 1\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = [bricks[0]]\n    for brick in bricks:\n        if brick > towers[-1]:\n            towers.append(brick)\n    print(len(towers))\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\n\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\n\nmain()\nmain()\n"]