2022-04-16 06:34:47.184874 num operations 1
2022-04-16 06:34:47.184891 size on input set 1
2022-04-16 06:34:55.995477 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # a, p = map(int, input().split())\n    # print(p // 2 + (a + p % 2) * 3 // 2)\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    x = int(input())\n    count = 0\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if x == 500 * i + 100 * j + 50 * k:\n                    count += 1\n    print(count)\n\n\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\n\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "# https://atcoder.jp/contests/abc139/tasks/abc139_a\n\n\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "def main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "# https://atcoder.jp/contests/abc038/tasks/abc038_a\n\n\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650090887,
  "object": "edit"
}
2022-04-16 06:34:55.995734 fix syntax errors 9 ["\ndef main():\n    # a, p = map(int, input().split())\n    # print(p // 2 + (a + p % 2) * 3 // 2)\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    x = int(input())\n    count = 0\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if x == 500 * i + 100 * j + 50 * k:\n                    count += 1\n    print(count)\n\n\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "# https://atcoder.jp/contests/abc139/tasks/abc139_a\n\n\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "# https://atcoder.jp/contests/abc038/tasks/abc038_a\n\n\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, p = map(int, input().split())\n    print(p // 2 + (a + p % 2) * 3 // 2)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 06:34:55.995771 size on output set 6
2022-04-16 06:34:55.995780 num operations 1
2022-04-16 06:34:55.995785 size on input set 1
2022-04-16 06:35:36.647389 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A * 3 + P // 2\n\n# Print the result\nprint(apple_pies)\n"
    },
    {
      "index": 2,
      "text": "\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n"
    },
    {
      "index": 3,
      "text": "\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n"
    },
    {
      "index": 4,
      "text": "#! /usr/bin/env python3\n\n\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n"
    },
    {
      "index": 5,
      "text": "\n\n# # Receive input\n# A, P = map(int, input().split())\n\n# # Calculate the maximum number of apple pies we can make with what we have now\n# apple_pies = A*3 + P//2\n\n# # Print the result\n# print(apple_pies)\n\n# N, M = map(int, input().split())\n# a = map(int, input().split())\n# a = list(a)\n# a.sort(reverse=True)\n# print(a)\n# print(sum(a[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n"
    },
    {
      "index": 6,
      "text": "\n# Receive input\na, p = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = a*3 + p//2\n\n# Print the result\nprint(apple_pies)\n"
    },
    {
      "index": 7,
      "text": "\n\n# Receive input\na, p = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = a*3 + p//2\n\n# Print the result\nprint(apple_pies)\n"
    },
    {
      "index": 8,
      "text": "\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n"
    }
  ],
  "created": 1650090896,
  "object": "edit"
}
2022-04-16 06:35:36.647712 fix syntax errors 9 ['\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n', '\n\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A * 3 + P // 2\n\n# Print the result\nprint(apple_pies)\n', '\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n', '\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n', '#! /usr/bin/env python3\n\n\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n', '\n\n# # Receive input\n# A, P = map(int, input().split())\n\n# # Calculate the maximum number of apple pies we can make with what we have now\n# apple_pies = A*3 + P//2\n\n# # Print the result\n# print(apple_pies)\n\n# N, M = map(int, input().split())\n# a = map(int, input().split())\n# a = list(a)\n# a.sort(reverse=True)\n# print(a)\n# print(sum(a[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# A.sort(reverse=True)\n# print(sum(A[:M]))\n', '\n# Receive input\na, p = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = a*3 + p//2\n\n# Print the result\nprint(apple_pies)\n', '\n\n# Receive input\na, p = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = a*3 + p//2\n\n# Print the result\nprint(apple_pies)\n', '\n# Receive input\nA, P = map(int, input().split())\n\n# Calculate the maximum number of apple pies we can make with what we have now\napple_pies = A*3 + P//2\n\n# Print the result\nprint(apple_pies)\n']
2022-04-16 06:35:36.647771 size on output set 6
