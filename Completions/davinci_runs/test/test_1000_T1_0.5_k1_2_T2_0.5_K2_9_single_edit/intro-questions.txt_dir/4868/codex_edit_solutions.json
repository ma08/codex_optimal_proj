["\n\ndef main():\n    white = input().split(\";\")\n    black = input().split(\";\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(7, -1, -1)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(len(white)):\n        if white[i] != \"\":\n            chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(len(black)):\n        if black[i] != \"\":\n            chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().strip().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].strip().split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2], piece[3]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str(index / 8 + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef get_piece(piece):\n    piece_dict = {\n        'K': 'K',\n        'Q': 'Q',\n        'R': 'R',\n        'B': 'B',\n        'N': 'N',\n        'P': 'P',\n        'a': 'P',\n        'b': 'P',\n        'c': 'P',\n        'd': 'P',\n        'e': 'P',\n        'f': 'P',\n        'g': 'P',\n        'h': 'P'\n    }\n    return piece_dict[piece]\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if len(piece) == 3:\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = get_piece(piece[0])\n        else:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = get_piece(piece[0])\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] != '.' and board[i][j].isupper():\n            board[i][j] = board[i][j].lower()\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    line = sys.stdin.readline().split(':')\n    for j in range(1, len(line)):\n        piece = line[j].split(',')\n        for k in range(len(piece)):\n            if piece[k] == '':\n                continue\n            if piece[k][0] != ' ':\n                piece[k] = ' ' + piece[k]\n            row = int(piece[k][2]) - 1\n            if piece[k][3].isalpha():\n                col = ord(piece[k][3]) - ord('a')\n            else:\n                col = int(piece[k][3]) - 1\n            board[row][col] = piece[k][1].lower()\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+', end='\\n')\n        print('|' + '|'.join(board[i][0:8]) + '|', end='\\n')\n    print('+---+---+---+---+---+---+---+---+', end='\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a' and len(piece) == 2:\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b' and len(piece) == 2:\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c' and len(piece) == 2:\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd' and len(piece) == 2:\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e' and len(piece) == 2:\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f' and len(piece) == 2:\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g' and len(piece) == 2:\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h' and len(piece) == 2:\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K' and color == 'Black':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q' and color == 'Black':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R' and color == 'Black':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B' and color == 'Black':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N' and color == 'Black':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P' and color == 'Black':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')   \n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|', end='')\n        print()\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1].upper()\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for piece in pieces[1].split(\",\"):\n            if piece == \"\":\n                continue\n            board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n            if piece[0].isupper():\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2], piece[3]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index // 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - ord(\"a\")] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "\n\ndef main():\n    white_pieces = input().split(':')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(':')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([' ' + piece + ' ' if piece != '.' else '   ' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+', flush=True)\n        for i in range(8):\n            print('|', end='', flush=True)\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='', flush=True)\n            print('|', flush=True)\n        print('+---+---+---+---+---+---+---+---+', flush=True)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2], piece[3]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n        print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n    \n    for line in sys.stdin.readlines():\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            else:\n                board[row][column] = piece_type.lower() if color == 'W' else piece_type.upper()\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white = input(\"White: \").split(\":\")\n    black = input(\"Black: \").split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][1])-1][ord(white[i][0])-97] = white[i][2].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][1])-1][ord(black[i][0])-97] = black[i][2].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()    \n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].lower() + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper() + piece[1]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0] + piece[1]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nboard = [['.'] * 8 for _ in range(8)]\n\nfor _ in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor _ in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor _ in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[6][i] = 'p'\n        board[1][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        if piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        if piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        if piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        if piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        if piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        if piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        if piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        if piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        if piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        if piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        if piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        if piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        if piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        if board[i][j] == 'Q':\n            board[i][j] = 'q'\n        if board[i][j] == 'R':\n            board[i][j] = 'r'\n        if board[i][j] == 'B':\n            board[i][j] = 'b'\n        if board[i][j] == 'N':\n            board[i][j] = 'n'\n        if board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(len(white)):\n        if i != 0:\n            chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(len(black)):\n        if i != 0:\n            chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\"] * 8 for i in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0], board[7][7] = 'r', 'r'\n    board[0][0], board[0][7] = 'R', 'R'\n    board[7][1], board[7][6] = 'n', 'n'\n    board[0][1], board[0][6] = 'N', 'N'\n    board[7][2], board[7][5] = 'b', 'b'\n    board[0][2], board[0][5] = 'B', 'B'\n    board[7][3], board[0][3] = 'q', 'Q'\n    board[7][4], board[0][4] = 'k', 'K'\n    for i in range(8):\n        board[1][i], board[6][i] = 'p', 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::'\n                             for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces if len(piece) == 2]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces if len(piece) == 2]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+\\n')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|\\n')\n        print('+---+---+---+---+---+---+---+---+\\n')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nboard = [['+---+'] * 8 for i in range(8)]\nfor i in range(8):\n    board[i][0] = '+'\n    board[i][7] = '+'\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "\n\n\ndef print_board(board):\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print_board(board)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[1:2], piece[2:3]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[3]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('A'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('A'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n        print index\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nclass Piece:\n    def __init__(self, color, kind, x, y):\n        self.color = color\n        self.kind = kind\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return self.color + self.kind + chr(97 + self.x) + str(self.y + 1)\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = Piece(piece[0].lower(), piece[1], ord(piece[2]) - 97, int(piece[3]) - 1)\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = Piece(piece[0].upper(), piece[1], ord(piece[2]) - 97, int(piece[3]) - 1)\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()+\"w\"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()+\"b\"\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a' and len(piece) == 2:\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b' and len(piece) == 2:\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c' and len(piece) == 2:\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd' and len(piece) == 2:\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e' and len(piece) == 2:\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\ndef main():\n    try:\n        white_pieces = input().split(': ')[1].split(',')\n        white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n        black_pieces = input().split(': ')[1].split(',')\n        black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n        for row in board:\n            print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n            print('+---+---+---+---+---+---+---+---+')\n    except Exception:\n        pass\n\nif __name__ == '__main__':\n    main()\n", "\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a')),\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n        print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    line = sys.stdin.readline().split(':')\n    for j in range(1, len(line)):\n        piece = line[j].split(',')\n        for k in range(len(piece)):\n            if piece[k] == '':\n                continue\n            if piece[k][0] != ' ':\n                piece[k] = ' ' + piece[k]\n            row = int(piece[k][2]) - 1\n            if piece[k][3].isalpha():\n                col = ord(piece[k][3]) - ord('a')\n            else:\n                col = int(piece[k][3]) - 1\n            board[row][col] = piece[k][1].lower()\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2]) - 1][ord(white[i][1]) - 97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2]) - 1][ord(black[i][1]) - 97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\" + \"|\".join(chessboard[i]) + \"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\n\nif __name__ == '__main__':\n    main()\n"]