2022-04-16 07:07:50.370194 num operations 1
2022-04-16 07:07:50.370217 size on input set 1
2022-04-16 07:08:14.742548 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 3,
      "text": "\n\n# SOLUTION 1\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == \"1\"]\n    differences = [indices[i + 1] - indices[i] for i in range(len(indices) - 1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\n\n# SOLUTION 2\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by keeping track of the number of 1's we have seen so far.\n# We also keep track of the number of contiguous groups of 1's.\n# The number of contiguous groups is incremented whenever we see a 0\n# and the number of 1's we have seen so far is greater than 0.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(1)\n\ndef max_num_tables_2(n, k, s):\n    num_seen = 0\n    num_contiguous_groups = 0\n    for i in range(n):\n        if s[i] == \"1\":\n            num_seen += 1\n        else:\n            if num_seen > 0:\n                num_contiguous_groups += 1\n                num_seen = 0\n    if num_seen > 0:\n        num_contiguous_groups += 1\n    return max(num_contiguous_groups, sum(int(x) for x in s))\n\n\nnum_tests = int(input().strip())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 4,
      "text": "\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 5,
      "text": "\n\n#\n"
    },
    {
      "index": 6,
      "text": "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n).\n# The space complexity of this solution is O(n).\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 7,
      "text": "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n).\n# The space complexity of this solution is O(n).\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 8,
      "text": "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string, which is the length of the first\n# list.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n), where n is the length of the\n# string.\n# The space complexity of this solution is O(n), where n is the length of the\n# string.\n\ndef max_num_tables(k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(k, s))\n"
    }
  ],
  "created": 1650092870,
  "object": "edit"
}
2022-04-16 07:08:14.742927 fix syntax errors 9 ['\n', "#!/usr/bin/env python3\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", "#!/usr/bin/env python3\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", '\n\n# SOLUTION 1\n# First we find the number of contiguous groups of 1\'s in the string.\n# We do this by creating a list of the indices of where the 1\'s occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1\'s is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1\'s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == "1"]\n    differences = [indices[i + 1] - indices[i] for i in range(len(indices) - 1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\n\n# SOLUTION 2\n# First we find the number of contiguous groups of 1\'s in the string.\n# We do this by keeping track of the number of 1\'s we have seen so far.\n# We also keep track of the number of contiguous groups of 1\'s.\n# The number of contiguous groups is incremented whenever we see a 0\n# and the number of 1\'s we have seen so far is greater than 0.\n\n# Then we find the number of 1\'s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(1)\n\ndef max_num_tables_2(n, k, s):\n    num_seen = 0\n    num_contiguous_groups = 0\n    for i in range(n):\n        if s[i] == "1":\n            num_seen += 1\n        else:\n            if num_seen > 0:\n                num_contiguous_groups += 1\n                num_seen = 0\n    if num_seen > 0:\n        num_contiguous_groups += 1\n    return max(num_contiguous_groups, sum(int(x) for x in s))\n\n\nnum_tests = int(input().strip())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n', "\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", '\n\n#\n', "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n).\n# The space complexity of this solution is O(n).\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n).\n# The space complexity of this solution is O(n).\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1's in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1's is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1's in the string, which is the length of the first\n# list.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n), where n is the length of the\n# string.\n# The space complexity of this solution is O(n), where n is the length of the\n# string.\n\ndef max_num_tables(k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(k, s))\n"]
2022-04-16 07:08:14.743042 size on output set 8
