2022-04-16 09:02:10.644243 num operations 1
2022-04-16 09:02:10.644261 size on input set 1
2022-04-16 09:02:34.533347 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z,\n                      self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    arr = list(arr)\n    arr.sort()\n    arr = list(arr)\n    max = 0\n    for i in range(1,n):\n        if arr[i] == arr[i-1]:\n            max = max + 1\n    print(max)\n"
    },
    {
      "index": 2,
      "text": "import math\n\nab = int(input())\nbc = int(input())\nprint(str(int(round(math.degrees(math.atan2(ab, bc)))))+'\u00b0')\n"
    },
    {
      "index": 3,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 4,
      "text": "import math\nimport numpy as np\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        point = list(map(float, input().split()))\n        points.append(point)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])    \n    x = (b - a).cross(c - b)    \n    y = (c - b).cross(d - c)    \n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))    \n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 5,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 6,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 7,
      "text": "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def absolute(self): #norm\n        return math.sqrt(self.x * self.x + self.y * self.y)\n\n\nif __name__ == '__main__':\n    a = Point(*map(int, input().split()))\n    b = Point(*map(int, input().split()))\n    c = Point(*map(int, input().split()))\n    d = Point(*map(int, input().split()))\n\n    x = (b - a).cross(c - b) \n    y = (c - b).cross(d - c) \n    angle = math.degrees(math.acos(x * y / ((b - a).absolute() * (c - b).absolute())))\n\n    print(\"%.2f\" % angle)\n"
    },
    {
      "index": 8,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1650099730,
  "object": "edit"
}
2022-04-16 09:02:34.533712 fix syntax errors 9 ['\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z,\n                      self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = map(float, input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    arr = list(arr)\n    arr.sort()\n    arr = list(arr)\n    max = 0\n    for i in range(1,n):\n        if arr[i] == arr[i-1]:\n            max = max + 1\n    print(max)\n", "import math\n\nab = int(input())\nbc = int(input())\nprint(str(int(round(math.degrees(math.atan2(ab, bc)))))+'Â°')\n", '\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\nimport numpy as np\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        point = list(map(float, input().split()))\n        points.append(point)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])    \n    x = (b - a).cross(c - b)    \n    y = (c - b).cross(d - c)    \n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))    \n\n    print("%.2f" % math.degrees(angle))\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def absolute(self): #norm\n        return math.sqrt(self.x * self.x + self.y * self.y)\n\n\nif __name__ == \'__main__\':\n    a = Point(*map(int, input().split()))\n    b = Point(*map(int, input().split()))\n    c = Point(*map(int, input().split()))\n    d = Point(*map(int, input().split()))\n\n    x = (b - a).cross(c - b) \n    y = (c - b).cross(d - c) \n    angle = math.degrees(math.acos(x * y / ((b - a).absolute() * (c - b).absolute())))\n\n    print("%.2f" % angle)\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-16 09:02:34.533809 size on output set 8
2022-04-16 09:02:34.533820 num operations 1
2022-04-16 09:02:34.533825 size on input set 1
2022-04-16 09:02:46.530611 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z): \n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no): \n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no): \n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no): \n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self): \n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list() \n    for i in range(4):\n        a = list(map(float, input().split())) \n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]) \n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        points.append(list(map(float, input().split())))\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), \\\n        Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\nclass Points:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z),\n                      (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 5,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 6,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 7,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 8,
      "text": "\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1650099754,
  "object": "edit"
}
2022-04-16 09:02:46.530996 fix syntax errors 9 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z): \n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no): \n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no): \n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no): \n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self): \n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list() \n    for i in range(4):\n        a = list(map(float, input().split())) \n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]) \n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        points.append(list(map(float, input().split())))\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), \\\n        Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '\nimport math\n\nclass Points:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z),\n                      (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-16 09:02:46.531127 size on output set 7
