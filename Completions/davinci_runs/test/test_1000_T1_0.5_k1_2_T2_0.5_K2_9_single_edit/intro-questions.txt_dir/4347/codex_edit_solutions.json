["#Solution\n\nn = int(input())\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(n) // (factorial(n // 2) ** 2))\n", "\nimport math\n\ndef round_dances(n):\n    return math.factorial(n) // (2 * math.factorial(n // 2))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(round_dances(n))\n", "\nimport math\n", "import math\n\ndef round_dance(n):\n    return math.factorial(n) // (2 * math.factorial(n // 2)) if n >= 2 else 1\n\nif __name__ == '__main__':\n    n = int(input())\n    print(round_dances(n))\n", "\n#Solution\n\nn = int(input())\n\n\ndef factorial(n1):\n    if n1 == 0:\n        return 1\n    else:\n        return n1 * factorial(n1 - 1)\n\nprint(factorial(n) // (factorial(n // 2) ** 2))\n", "\n#Solution\n\nn = int(input())\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(n) // (factorial(n // 2) ** 2))\n", "\n# Solution\n\nn = int(input())\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(n) // (factorial(n // 2) ** 2))\n", "\n#Solution\nn = int(input())\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\nprint(factorial(n) // (factorial(n // 2) ** 2))\n", "\n\n# Solution\n\nn = int(input())\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(n) // (factorial(n // 2) ** 2))\n", "\"\"\"\nSolution:\n\n\n\"\"\"\n\ndef run():\n    n = int(input())\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    print(factorial(n) // (factorial(n // 2) ** 2))\n\n\nif __name__ == \"__main__\":\n    run()\n", "import math\n\ndef round_dances(n):\n    return math.factorial(n) // (2 * math.factorial(n // 2))\nif __name__ == '__main__':\n    n = int(input())\n    print(round_dances(n))\n", "\nimport math\n\ndef round_dances(n):\n    return math.factorial(n) // (2 * math.factorial(n // 2))\nif __name__ == '__main__':\n    n = int(input())\n    print(round_dances(n))\n", "\n#!/bin/python3\n#Solution\n\nn = int(input())\n\ndef factorial(n) :\n    if n == 0 :\n        return 1 \n    else :\n        return n * factorial(n - 1) \n\nprint(factorial(n) // (factorial(n // 2) ** 2)) \n"]