2022-04-16 13:51:15.275051 num operations 1
2022-04-16 13:51:15.275067 size on input set 1
2022-04-16 13:51:38.616955 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = float(num_infected_vaccinated) / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = float(num_infected_control) / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100.0)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline().strip()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / float(num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / float(num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100.0)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    # Read input\n    num_participants = int(sys.stdin.readline())\n    vaccinated = []\n    infected = []\n    for i in range(num_participants):\n        participant = sys.stdin.readline()\n        vaccinated.append(participant[0])\n        infected.append(participant[1:])\n\n    # Calculate vaccine efficacy\n    efficacy = []\n    for i in range(3):\n        # Count infected and not infected for each group\n        num_infected_vaccinated = 0\n        num_not_infected_vaccinated = 0\n        num_infected_control = 0\n        num_not_infected_control = 0\n        for j in range(num_participants):\n            if infected[j][i] == 'Y':\n                if vaccinated[j] == 'Y':\n                    num_infected_vaccinated += 1\n                else:\n                    num_infected_control += 1\n            else:\n                if vaccinated[j] == 'Y':\n                    num_not_infected_vaccinated += 1\n                else:\n                    num_not_infected_control += 1\n        # Calculate percentage infected for each group\n        percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n        percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n        # Calculate vaccine efficacy\n        if percent_infected_vaccinated < percent_infected_control:\n            efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n        else:\n            efficacy.append(\"Not Effective\")\n\n    # Print vaccine efficacy\n    print(efficacy[0])\n    print(efficacy[1])\n    print(efficacy[2])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = 100.0 * num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = 100.0 * num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100.0 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / float(num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / float(num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / float(percent_infected_control) * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python3\n\n\nimport sys\n\n# Read input from STDIN\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy for each strain\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each strain\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each strain\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print results to STDOUT\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 8,
      "text": "import sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    }
  ],
  "created": 1650117075,
  "object": "edit"
}
2022-04-16 13:51:38.617435 fix syntax errors 9 ['import sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = float(num_infected_vaccinated) / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = float(num_infected_control) / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100.0)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline().strip()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / float(num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / float(num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100.0)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\n\nimport sys\n\ndef main():\n    # Read input\n    num_participants = int(sys.stdin.readline())\n    vaccinated = []\n    infected = []\n    for i in range(num_participants):\n        participant = sys.stdin.readline()\n        vaccinated.append(participant[0])\n        infected.append(participant[1:])\n\n    # Calculate vaccine efficacy\n    efficacy = []\n    for i in range(3):\n        # Count infected and not infected for each group\n        num_infected_vaccinated = 0\n        num_not_infected_vaccinated = 0\n        num_infected_control = 0\n        num_not_infected_control = 0\n        for j in range(num_participants):\n            if infected[j][i] == \'Y\':\n                if vaccinated[j] == \'Y\':\n                    num_infected_vaccinated += 1\n                else:\n                    num_infected_control += 1\n            else:\n                if vaccinated[j] == \'Y\':\n                    num_not_infected_vaccinated += 1\n                else:\n                    num_not_infected_control += 1\n        # Calculate percentage infected for each group\n        percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n        percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n        # Calculate vaccine efficacy\n        if percent_infected_vaccinated < percent_infected_control:\n            efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n        else:\n            efficacy.append("Not Effective")\n\n    # Print vaccine efficacy\n    print(efficacy[0])\n    print(efficacy[1])\n    print(efficacy[2])\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = 100.0 * num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = 100.0 * num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100.0 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / float(num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / float(num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / float(percent_infected_control) * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '#!/usr/bin/env python3\n\n\nimport sys\n\n# Read input from STDIN\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy for each strain\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each strain\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each strain\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print results to STDOUT\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', 'import sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacy\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacy\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n']
2022-04-16 13:51:38.617584 size on output set 8
2022-04-16 13:51:38.617595 num operations 1
2022-04-16 13:51:38.617600 size on input set 1
2022-04-16 13:51:48.249245 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate / rate2 * 100))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(str(100 - rate / rate2 * 100) + \"%\")\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(round(100 - rate / rate2 * 100, 2))\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'V':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\n\nfor i in range(3):\n    count = 0\n    for person in vaccinated:\n        if person[i + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[i + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate / rate2 * 100)\n"
    },
    {
      "index": 4,
      "text": "import math\n\ndef read_file(filename):\n    with open(filename) as input_file:\n        data = input_file.readlines()\n    return data\n\n\ndef write_file(filename, data):\n    with open(filename, 'w') as output_file:\n        output_file.write(data)\n\n\ndef process_data(data):\n    return data\n\n\ndef main():\n    data = read_file('file.in')\n    processed_data = process_data(data)\n    write_file('file.out', processed_data)\n\n\nif __name__ == '__main__':\n    main()\n\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - (rate / rate2 * 100))\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(round(100 - rate / rate2 * 100, 2))\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0.0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / float(len(vaccinated))\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / float(len(control))\n    print(100 - rate / rate2 * 100)\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate / rate2 * 100))\n"
    },
    {
      "index": 8,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate / rate2 * 100))\n"
    }
  ],
  "created": 1650117098,
  "object": "edit"
}
2022-04-16 13:51:48.249506 fix syntax errors 9 ['\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate / rate2 * 100))\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(str(100 - rate / rate2 * 100) + "%")\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(round(100 - rate / rate2 * 100, 2))\n', '\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'V\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\n\nfor i in range(3):\n    count = 0\n    for person in vaccinated:\n        if person[i + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[i + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate / rate2 * 100)\n', 'import math\n\ndef read_file(filename):\n    with open(filename) as input_file:\n        data = input_file.readlines()\n    return data\n\n\ndef write_file(filename, data):\n    with open(filename, \'w\') as output_file:\n        output_file.write(data)\n\n\ndef process_data(data):\n    return data\n\n\ndef main():\n    data = read_file(\'file.in\')\n    processed_data = process_data(data)\n    write_file(\'file.out\', processed_data)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - (rate / rate2 * 100))\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(round(100 - rate / rate2 * 100, 2))\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0.0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / float(len(vaccinated))\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / float(len(control))\n    print(100 - rate / rate2 * 100)\n', '\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate / rate2 * 100))\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate / rate2 * 100))\n']
2022-04-16 13:51:48.249648 size on output set 7
2022-04-16 13:51:48.249664 num operations 1
2022-04-16 13:51:48.249669 size on input set 1
2022-04-16 13:52:32.847868 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / float(len(control)) * 100 for x in control_infections]\n    vaccine_percent = [x / float(len(vaccine)) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = [0, 0, 0]\n    vaccine = [0, 0, 0]\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j + 1] == 'Y':\n                    vaccine[j] += 1\n        else:\n            for j in range(3):\n                if line[j + 1] == 'Y':\n                    control[j] += 1\n    \n    # Find the number of infected people in the control and vaccine groups\n\n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / N * 100 for x in control]\n    vaccine_percent = [x / N * 100 for x in vaccine]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n\n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n\n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n\n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n\n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = (100 - vaccine_percent[i]) / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the inputn\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\n# Read the input\nN = int(sys.stdin.readline())\ncontrol = []\nvaccine = []\nfor i in range(N):\n    line = sys.stdin.readline().strip()\n    if line[0] == 'Y':\n        vaccine.append(line[1:])\n    else:\n        control.append(line[1:])\n# Find the number of infected people in the control and vaccine groups\ncontrol_infections = [0, 0, 0]\nvaccine_infections = [0, 0, 0]\nfor i in range(len(control)):\n    for j in range(3):\n        if control[i][j] == 'Y':\n            control_infections[j] += 1\nfor i in range(len(vaccine)):\n    for j in range(3):\n        if vaccine[i][j] == 'Y':\n            vaccine_infections[j] += 1\n# Calculate the percentage of infected people in the control and vaccine groups\ncontrol_percent = [x / len(control) * 100 for x in control_infections]\nvaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n# Calculate the efficacy\nefficacy = [0, 0, 0]\nfor i in range(3):\n    if control_percent[i] == 0:\n        efficacy[i] = 'Not Effective'\n    else:\n        efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n# Output the result\nfor i in range(3):\n    print(efficacy[i])\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650117108,
  "object": "edit"
}
2022-04-16 13:52:32.848335 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / float(len(control)) * 100 for x in control_infections]\n    vaccine_percent = [x / float(len(vaccine)) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = [0, 0, 0]\n    vaccine = [0, 0, 0]\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j + 1] == 'Y':\n                    vaccine[j] += 1\n        else:\n            for j in range(3):\n                if line[j + 1] == 'Y':\n                    control[j] += 1\n    \n    # Find the number of infected people in the control and vaccine groups\n\n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / N * 100 for x in control]\n    vaccine_percent = [x / N * 100 for x in vaccine]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n\n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n\n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n\n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n\n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = (100 - vaccine_percent[i]) / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the inputn\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n# Read the input\nN = int(sys.stdin.readline())\ncontrol = []\nvaccine = []\nfor i in range(N):\n    line = sys.stdin.readline().strip()\n    if line[0] == 'Y':\n        vaccine.append(line[1:])\n    else:\n        control.append(line[1:])\n# Find the number of infected people in the control and vaccine groups\ncontrol_infections = [0, 0, 0]\nvaccine_infections = [0, 0, 0]\nfor i in range(len(control)):\n    for j in range(3):\n        if control[i][j] == 'Y':\n            control_infections[j] += 1\nfor i in range(len(vaccine)):\n    for j in range(3):\n        if vaccine[i][j] == 'Y':\n            vaccine_infections[j] += 1\n# Calculate the percentage of infected people in the control and vaccine groups\ncontrol_percent = [x / len(control) * 100 for x in control_infections]\nvaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n# Calculate the efficacy\nefficacy = [0, 0, 0]\nfor i in range(3):\n    if control_percent[i] == 0:\n        efficacy[i] = 'Not Effective'\n    else:\n        efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n# Output the result\nfor i in range(3):\n    print(efficacy[i])\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 13:52:32.848728 size on output set 7
2022-04-16 13:52:32.848740 num operations 1
2022-04-16 13:52:32.848745 size on input set 1
2022-04-16 13:52:42.558392 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not effective\")\n        else:\n            print(\"{:.6f}%\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0, 0]\n    ctrl = [0, 0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(4):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(4):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(4):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0]\n    ctrl = [0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        for j in range(2):\n            if line[j] == 'Y':\n                if line[-1] == 'Y':\n                    vax[j] += 1\n                else:\n                    ctrl[j] += 1\n    for i in range(2):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n# This is a comment\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vax[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650117152,
  "object": "edit"
}
2022-04-16 13:52:42.558632 fix syntax errors 9 ['\n#\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not effective")\n        else:\n            print("{:.6f}%".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0, 0]\n    ctrl = [0, 0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(4):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(4):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(4):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0]\n    ctrl = [0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        for j in range(2):\n            if line[j] == \'Y\':\n                if line[-1] == \'Y\':\n                    vax[j] += 1\n                else:\n                    ctrl[j] += 1\n    for i in range(2):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\n# This is a comment\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vax = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vax[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vax[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 13:52:42.558770 size on output set 7
2022-04-16 13:52:42.558787 num operations 1
2022-04-16 13:52:42.558792 size on input set 1
2022-04-16 13:52:50.287802 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=' ')\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end = ' ')\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated)) * 100)\n"
    },
    {
      "index": 3,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == '1':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == '1':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == '1':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100)\n"
    },
    {
      "index": 4,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated)) * 100)\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\" \")\nprint()\n"
    },
    {
      "index": 6,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\"\")\n"
    },
    {
      "index": 7,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated)) * 100)\n"
    },
    {
      "index": 8,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=' ')\n"
    }
  ],
  "created": 1650117162,
  "object": "edit"
}
2022-04-16 13:52:50.288081 fix syntax errors 9 ['\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\' \')\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end = \' \')\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated)) * 100)\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'1\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'1\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'1\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100)\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated)) * 100)\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=" ")\nprint()\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end="")\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated)) * 100)\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\' \')\n']
2022-04-16 13:52:50.288221 size on output set 6
2022-04-16 13:52:50.288232 num operations 1
2022-04-16 13:52:50.288238 size on input set 1
2022-04-16 13:53:02.031332 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection / control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\n\nvaccinated = []\ncontrol = []\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 3,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection <= control_infection:\n        return 'Not Effective'\n    else:\n        return str(round((1 - vaccinated_infection/control_infection) * 100, 1))\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 4,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / float(len(vaccinated))\n    control_infection = sum(map(lambda x: x[infection], control)) / float(len(control))\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y': vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:]) \n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection: return 'Not Effective'\n    else: return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i)) \n"
    },
    {
      "index": 6,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == \"Y\":\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return \"Not Effective\"\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 7,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + '%')\n"
    },
    {
      "index": 8,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == \"Y\":\n        vaccinated.append(participant[1:]) #slice the 'Y'\n    else:\n        control.append(participant[1:]) #slice the 'N'\n\ndef efficacy(infection_type):\n    vaccinated_infection = sum(map(lambda x: int(x[infection_type]), vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: int(x[infection_type]), control)) / len(control)\n    if vaccinated_infection < control_infection:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n    return \"Not Effective\"\n\nfor i in range(3):\n    print(efficacy(i))\n"
    }
  ],
  "created": 1650117170,
  "object": "edit"
}
2022-04-16 13:53:02.031688 fix syntax errors 9 ["\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection / control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n", "\nN = int(input())\n\nvaccinated = []\ncontrol = []\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\nfor i in range(3):\n    print(efficacy(i))\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection <= control_infection:\n        return 'Not Effective'\n    else:\n        return str(round((1 - vaccinated_infection/control_infection) * 100, 1))\n\nfor i in range(3):\n    print(efficacy(i))\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / float(len(vaccinated))\n    control_infection = sum(map(lambda x: x[infection], control)) / float(len(control))\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y': vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:]) \n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection: return 'Not Effective'\n    else: return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i)) \n", '\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == "Y":\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return "Not Effective"\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n', "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + '%')\n", '\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == "Y":\n        vaccinated.append(participant[1:]) #slice the \'Y\'\n    else:\n        control.append(participant[1:]) #slice the \'N\'\n\ndef efficacy(infection_type):\n    vaccinated_infection = sum(map(lambda x: int(x[infection_type]), vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: int(x[infection_type]), control)) / len(control)\n    if vaccinated_infection < control_infection:\n        return str((1 - vaccinated_infection/control_infection) * 100) + \'%\'\n    return "Not Effective"\n\nfor i in range(3):\n    print(efficacy(i))\n']
2022-04-16 13:53:02.031861 size on output set 9
2022-04-16 13:53:02.031886 num operations 1
2022-04-16 13:53:02.031894 size on input set 1
2022-04-16 13:53:10.023243 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100), end = '\\n')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%')\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100), end='\\n')\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100)) \n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100))\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100.0))\n"
    },
    {
      "index": 7,
      "text": "import sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100))\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n"
    }
  ],
  "created": 1650117182,
  "object": "edit"
}
2022-04-16 13:53:10.023514 fix syntax errors 9 ["\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100), end = '\\n')\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%')\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100), end='\\n')\n", "\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100)) \n", "\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100))\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100.0))\n", "import sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100))\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n"]
2022-04-16 13:53:10.023653 size on output set 8
2022-04-16 13:53:10.023665 num operations 1
2022-04-16 13:53:10.023670 size on input set 1
2022-04-16 13:53:21.667970 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nN = int(input())\nvaccinated = [0,0,0]\ncontrol = [0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\nvaccinated = [0, 0, 0, 0]\ncontrol = [0, 0, 0, 0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1] / vaccinated[0]) / (control[1] / control[0]) * 100, '.6f'))\nprint(format((vaccinated[2] / vaccinated[0]) / (control[2] / control[0]) * 100, '.6f'))\nprint(format((vaccinated[3] / vaccinated[0]) / (control[3] / control[0]) * 100, '.6f'))\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 3,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.2f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.2f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.2f'))\n"
    },
    {
      "index": 4,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 6,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 7,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 8,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    }
  ],
  "created": 1650117190,
  "object": "edit"
}
2022-04-16 13:53:21.668231 fix syntax errors 9 ["\n\n\nN = int(input())\nvaccinated = [0,0,0]\ncontrol = [0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n", "\nN = int(input())\nvaccinated = [0, 0, 0, 0]\ncontrol = [0, 0, 0, 0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1] / vaccinated[0]) / (control[1] / control[0]) * 100, '.6f'))\nprint(format((vaccinated[2] / vaccinated[0]) / (control[2] / control[0]) * 100, '.6f'))\nprint(format((vaccinated[3] / vaccinated[0]) / (control[3] / control[0]) * 100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.2f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.2f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.2f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"]
2022-04-16 13:53:21.668370 size on output set 5
