2022-04-16 04:51:16.204034 num operations 1
2022-04-16 04:51:16.204050 size on input set 1
2022-04-16 04:51:28.264187 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input().strip()\n        m = int(input())\n        b = list(map(int, input().strip().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[b[j]] = j\n\n        # create the result string\n        res = ''\n        for j in range(len(s)):\n            res += chr(ord('a') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        n = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(n):\n            mapping[j] = b[j]\n\n        # create the result string\n        res = ''\n        for j in range(len(s)):\n            res += chr(ord('a') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = str(input())\n        m = int(input())\n        b = list(map(int, str(input()).split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[b[j]] = j\n\n        # create the result string\n        res = ''\n        for j in range(len(s)):\n            res += chr(ord('a') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = int(input())\n        m = int(input())\n        b = input().split()\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(s)):\n            mapping[s[j]] = b[j]\n\n        # create the result string\n        res = ''\n        for j in range(len(b)):\n            res += mapping[b[j]]\n\n        # print the result\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[b[j]] = j\n\n        # create the result string\n        res = ''\n        for j in range(len(s)):\n            res += chr(ord('a') + mapping[j])\n\n        # print the result\n        print(res, end=' ')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(m):\n            mapping[j] = b[j]\n\n        # create the result string\n        res = ''\n        for j in range(len(s)):\n            res += chr(ord('a') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    # read the input\n    s = input()\n    m = int(input())\n    b = list(map(int, input().split()))\n\n    # create a dictionary for the mappings\n    mapping = {}\n    for j in range(len(b)):\n        mapping[b[j]] = j\n\n    # create the result string\n    res = ''\n    for j in range(len(s)):\n        res += chr(ord('a') + mapping[j])\n\n    # print the result\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    # read the number of elements\n    n = int(input())\n\n    # read the elements\n    a = list(map(int, input().split()))\n\n    # find the maximum element\n    max_elem = max(a)\n\n    # print the result\n    print(max_elem)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[j] = b[j]\n\n        # create the result string\n        res = ''\n        for j in range(len(s)):\n            res += chr(ord('a') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650084676,
  "object": "edit"
}
2022-04-16 04:51:28.264469 fix syntax errors 9 ['\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input().strip()\n        m = int(input())\n        b = list(map(int, input().strip().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[b[j]] = j\n\n        # create the result string\n        res = \'\'\n        for j in range(len(s)):\n            res += chr(ord(\'a\') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        n = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(n):\n            mapping[j] = b[j]\n\n        # create the result string\n        res = \'\'\n        for j in range(len(s)):\n            res += chr(ord(\'a\') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = str(input())\n        m = int(input())\n        b = list(map(int, str(input()).split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[b[j]] = j\n\n        # create the result string\n        res = \'\'\n        for j in range(len(s)):\n            res += chr(ord(\'a\') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = int(input())\n        m = int(input())\n        b = input().split()\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(s)):\n            mapping[s[j]] = b[j]\n\n        # create the result string\n        res = \'\'\n        for j in range(len(b)):\n            res += mapping[b[j]]\n\n        # print the result\n        print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[b[j]] = j\n\n        # create the result string\n        res = \'\'\n        for j in range(len(s)):\n            res += chr(ord(\'a\') + mapping[j])\n\n        # print the result\n        print(res, end=\' \')\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(m):\n            mapping[j] = b[j]\n\n        # create the result string\n        res = \'\'\n        for j in range(len(s)):\n            res += chr(ord(\'a\') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the input\n    s = input()\n    m = int(input())\n    b = list(map(int, input().split()))\n\n    # create a dictionary for the mappings\n    mapping = {}\n    for j in range(len(b)):\n        mapping[b[j]] = j\n\n    # create the result string\n    res = \'\'\n    for j in range(len(s)):\n        res += chr(ord(\'a\') + mapping[j])\n\n    # print the result\n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the number of elements\n    n = int(input())\n\n    # read the elements\n    a = list(map(int, input().split()))\n\n    # find the maximum element\n    max_elem = max(a)\n\n    # print the result\n    print(max_elem)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read the number of test cases\n    t = int(input())\n\n    # iterate over test cases\n    for i in range(t):\n        # read the input\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n\n        # create a dictionary for the mappings\n        mapping = {}\n        for j in range(len(b)):\n            mapping[j] = b[j]\n\n        # create the result string\n        res = \'\'\n        for j in range(len(s)):\n            res += chr(ord(\'a\') + mapping[j])\n\n        # print the result\n        print(res)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 04:51:28.264604 size on output set 9
2022-04-16 04:51:28.264614 num operations 1
2022-04-16 04:51:28.264620 size on input set 1
2022-04-16 04:51:40.499094 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * (len(s) + 1)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i]) + b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s) # initialize with dummy values\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef read_int():\n    return int(input())\n\ndef read_line():\n    return input().strip()\n\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n\ndef read_line():\n    return sys.stdin.readline().strip()\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n\ndef read_int_array(n):\n    return list(map(int, sys.stdin.readline().split()))\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys;read_int=lambda:int(sys.stdin.readline());read_line=lambda:sys.stdin.readline().strip();read_ints=lambda:list(map(int,sys.stdin.readline().split()));solve=lambda:read_line();q=read_int();print('\\n'.join(map(solve,range(q))))\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650084688,
  "object": "edit"
}
2022-04-16 04:51:40.499364 fix syntax errors 9 ["\n\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * (len(s) + 1)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i]) + b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s) # initialize with dummy values\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef read_int():\n    return int(input())\n\ndef read_line():\n    return input().strip()\n\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef read_line():\n    return sys.stdin.readline().strip()\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n\ndef read_int_array(n):\n    return list(map(int, sys.stdin.readline().split()))\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys;read_int=lambda:int(sys.stdin.readline());read_line=lambda:sys.stdin.readline().strip();read_ints=lambda:list(map(int,sys.stdin.readline().split()));solve=lambda:read_line();q=read_int();print('\\n'.join(map(solve,range(q))))\n", "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    s = read_line()\n    m = read_int()\n    b = read_ints()\n    t = ['a'] * len(s)\n    for i in range(len(s)-1, -1, -1):\n        t[i] = chr(ord(s[i])+b[i])\n    return ''.join(t)\n\ndef main():\n    q = read_int()\n    for _ in range(q):\n        print(solve())\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 04:51:40.499488 size on output set 7
