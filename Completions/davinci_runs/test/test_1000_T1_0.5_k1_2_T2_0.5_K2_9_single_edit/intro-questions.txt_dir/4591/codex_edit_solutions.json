["\n\ndef pizza_at(a, b, c, x, y):\n    return min(a * x + b * y, a * (x + y) + (x - (x + y) / 2) * a, b * (x + y) + (y - (x + y) / 2) * b, c * (x + y))\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\nimport sys\n\ndef main():\n    # Read input and convert to integers\n    A, B, C, X, Y = [int(x) for x in input().split()]\n\n    # Calculate minimum cost of buying pizzas\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and split them into one A-pizza and one B-pizza\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n\n    # Buy remaining A-pizzas and B-pizzas as normal\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible, then buy B pizzas\n    if a <= b: return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible, then buy A pizzas\n    if b <= a: return a * x + b * y\n\n    # If A and B are the same price, buy as many AB pizzas as possible, then buy A pizzas\n    if a == b: return c * (x + y)\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AB pizzas\n        if x > (x + y) // 2:\n            # If AB is cheaper than A, buy AB pizzas\n            if a < c:\n                return a * (x + y) + (x - (x + y) // 2) * a\n            # If AB is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > (x + y) // 2:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                return b * (x + y) + (y - (x + y) // 2) * b\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\nimport sys\n\ndef main():\n    a, b, c, x, y = [int(x) for x in sys.stdin.readline().split()]\n\n    cost = 0\n\n    if A + B > 2 * C:\n        if X > Y:\n            cost += 2 * c * x\n            y -= x\n            x = 0\n        else:\n            cost += 2 * c * y\n            x -= y\n            y = 0\n\n    cost += a * x\n    cost += b * y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read input and create list\n    input_list = [int(x) for x in sys.stdin.readline().split()]\n\n    # Sort the list\n    input_list.sort()\n\n    # Calculate maximum area\n    max_area = input_list[0] * input_list[2]\n\n    print(max_area)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read input\n    A, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza and one B-pizza\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A-pizzas and B-pizzas\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n\t# Read input\n\tA, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n\t# Calculate minimum cost\n\tcost = 0\n\n\tif A + B > 2 * C:\n\t\t# It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza and one B-pizza\n\t\tif X > Y:\n\t\t\t# Buy AB-pizzas until X - Y = 0\n\t\t\tcost += 2 * C * Y\n\t\t\tX -= Y\n\t\t\tY = 0\n\t\telse:\n\t\t\t# Buy AB-pizzas until Y - X = 0\n\t\t\tcost += 2 * C * X\n\t\t\tY -= X\n\t\t\tX = 0\n\n\t# Buy remaining A-pizzas and B-pizzas\n\tcost += A * X\n\tcost += B * Y\n\n\tprint(cost)\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\ndef main():\n    a, b, c, x, y = map(int, input().split())\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AB pizzas\n        if x > (x + y) / 2:\n            # If AB is cheaper than A, buy AB pizzas\n            if a < c:\n                print(a * (x + y) + (x - (x + y) / 2) * a)\n            # If AB is more expensive than A, buy A pizzas\n            else:\n                print(c * (x + y))\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            print(b * y + a * x)\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > (x + y) / 2:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                print(b * (x + y) + (y - (x + y) / 2) * b)\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                print(c * (x + y))\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            print(a * x + b * y)\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the input\n    A, B, C, X, Y = [int(x) for x in input().split()]\n\n    # Calculate the minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB pizzas and rearrange them into one A pizza and one B pizza\n        if X > Y:\n            # Buy AB pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A pizzas and B pizzas\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input\n    A, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n        if X < Y:\n            X, Y = Y, X\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza and one B-pizza\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0, then buy A-pizzas\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0, then buy B-pizzas\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A-pizzas and B-pizzas\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input and convert to integers\n    A, B, C, X, Y = [int(x) for x in input().split()]\n\n    print(A + B + C)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    # Read input\n    A, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza and one B-pizza\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A-pizzas and B-pizzas\n    cost += A * X\n\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AB pizzas\n        if x > (x + y) // 2:\n            # If AB is cheaper than A, buy AB pizzas\n            if a < c:\n                return a * (x + y) + (x - (x + y) // 2) * a\n            # If AB is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > (x + y) // 2:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                return b * (x + y) + (y - (x + y) // 2) * b\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\ndef pizza_at(a, b, c, x, y, z):\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AB pizzas\n        if x > z:\n            # If AB is cheaper than A, buy AB pizzas\n            if a < c:\n                return a * (x + y) + (x - z) * a\n            # If AB is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > z:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                return b * (x + y) + (y - z) * b\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nz = (x + y) / 2\nprint(pizza_at(a, b, c, x, y, z))\n", "\n\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible, and vice versa\n    if a <= b and x > (x + y) / 2:\n        # If AB is cheaper than A, buy AB pizzas, and vice versa\n        if a < c:\n            return a * (x + y) + (x - (x + y) / 2) * a\n        else:\n            return c * (x + y)\n    elif b < a and y > (x + y) / 2:\n        # If AB is cheaper than B, buy AB pizzas, and vice versa\n        if b < c:\n            return b * (x + y) + (y - (x + y) / 2) * b\n        else:\n            return c * (x + y)\n    # If there are no more A pizzas needed, buy B pizzas, and vice versa\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > (x + y) / 2:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                return b * (x + y) + (y - (x + y) / 2) * b\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\ndef pizza_at(a, b, c, x, y, z):\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AB pizzas\n        if x > z:\n            # If AB is cheaper than A, buy AB pizzas\n            if a < c:\n                return a * (x + y) + (x - z) * a\n            # If AB is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > z:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                return b * (x + y) + (y - z) * b\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y, z = map(int, input().split())\nprint(pizza_at(a, b, c, x, y, z))\n"]