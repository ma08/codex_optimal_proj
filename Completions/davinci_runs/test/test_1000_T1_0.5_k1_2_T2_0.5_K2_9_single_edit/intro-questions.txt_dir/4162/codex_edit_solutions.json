["\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "import sys\n\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    nums.sort()\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j])\n    print(ret)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binarySearch(arr, 1))\n\ndef binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - math.gcd(A[i], A[j]))\n    print(max_f)\n", "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j])\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "from math import gcd\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "N = int(input())\nA = list(map(int, input().split()))\nmax_f = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        max_f = max(max_f, A[i] + A[j] - __gcd(A[i], A[j]))\nprint(max_f)\n", "\n#\n# def gcd(a, b):\n#     while b != 0:\n#         a, b = b, a % b\n#     return a\n#\n# def lcm(a, b):\n#     return a * b // gcd(a, b)\n#\n# def main():\n#     n = int(input())\n#     nums = list(map(int, input().split()))\n#     ret = 0\n#     for i in range(n):\n#         for j in range(i + 1, n):\n#             ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j])\n#     print(ret)\n#\n# if __name__ == '__main__':\n#     main()\n", "\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(raw_input())\n    nums = list(map(int, raw_input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j])\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j] + 1)\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "from math import gcd\n\n\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "from fractions import gcd\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n", "\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j] + 2)\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ret = max(ret, (lcm(nums[i], nums[j]) - 1) % nums[i] + (lcm(nums[i], nums[j]) - 1) % nums[j]) \n    print(ret)\n\nif __name__ == '__main__':\n    main()\n", "\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_f = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_f = max(max_f, A[i] + A[j] - gcd(A[i], A[j]))\n    print(max_f)\n"]