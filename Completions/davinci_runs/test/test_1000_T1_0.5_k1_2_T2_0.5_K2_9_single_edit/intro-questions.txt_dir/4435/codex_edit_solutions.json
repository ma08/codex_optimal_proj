["\n# SOLUTION\n\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "\n# SOLUTION\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "#!/usr/bin/env python3\n\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\nq = queue.Queue()\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\ndist = 0\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n    dist = max(dist, dist + 1)\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n", "\n\n# SOLUTION\n", "\n\nimport queue \n\nn = int(input()) \na = list(map(int, input().split())) \n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n", "\n#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    d = [0] * n\n\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            d[i] = d[i + a[i]] + 1\n        if i - a[i] >= 0:\n            d[i] = min(d[i], d[i - a[i]] + 1)\n        if d[i] == 0:\n            d[i] = -1\n\n    print(*d)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(' '.join(map(str, d)))\n", "\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nvisited = [False] * n \ndistance = [0] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n    distance[curr] = dist\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(distance[i])\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(distance[i])\n        else:\n            print(-1)\n", "\n#\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n", "\n\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if visited[i]:\n        print(dist)\n    else:\n        print(-1)\n", "\nimport sys\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\ndist = -1\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            dist = dist + 1\n    else:\n        if visited[i]:\n            dist = dist + 1\n\nprint(dist)\n", "\n# SOLUTION\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\nd = [0] * n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\nvisited = [False] * n\n\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\ndist = -1\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            dist = 0\n    else:\n        if visited[i]:\n            dist = 0\n\nprint(dist)\n", "\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    q.put((i, 0))\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n", "\n# SOLUTION\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\nd = [0] * n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\nprint(*d)\n", "\n\nfrom queue import Queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n"]