2022-04-16 05:53:55.226132 num operations 1
2022-04-16 05:53:55.226151 size on input set 1
2022-04-16 05:54:07.428460 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import itertools\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n"
    },
    {
      "index": 1,
      "text": "K = int(input())\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True) # \u30bf\u30d7\u30eb\u306e2\u3064\u76ee\u306e\u5024\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n    return sum(card[1] for card in cards[:K]) # \u30bf\u30d7\u30eb\u306e2\u3064\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u5408\u8a08\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards, K))\n"
    },
    {
      "index": 3,
      "text": "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K]) + min(cards[K:])[1]\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom operator import itemgetter\n\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1), reverse=True)  # \u964d\u9806\n    return sum(card[1] for card in cards[:K])  # \u964d\u9806\u306b\u4e26\u3093\u3060K\u679a\u306e\u30ab\u30fc\u30c9\u306e\u5408\u8a08\u5024\n\n\nA, B, C, K = map(int, input().split())  # \u5165\u529b\ncards = [('A', A), ('B', B), ('C', C)]  # \u30ab\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\nprint(get_max_possible_sum(cards, K))  # \u51fa\u529b\n"
    },
    {
      "index": 5,
      "text": "\n#\n# from operator import itemgetter\n#\n# def get_max_possible_sum(cards):\n#     cards.sort(key=itemgetter(1), reverse=True)\n#     return sum(card[1] for card in cards[:K])\n#\n# A, B, C, K = map(int, input().split())\n# cards = [('A', A), ('B', B), ('C', C)]\n# print(get_max_possible_sum(cards))\n"
    },
    {
      "index": 6,
      "text": "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:int(K)])\n\nA, B, C, K = input().split()\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n"
    },
    {
      "index": 7,
      "text": "\nfrom operator import itemgetter\n\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n"
    },
    {
      "index": 8,
      "text": "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K + 1])\n\nA, B, C, K = map(int, input().split())  # A, B, C: \u5404\u30ab\u30fc\u30c9\u306e\u679a\u6570\u3001K: \u6700\u5927\u3067\u4f55\u679a\u307e\u3067\u9078\u3079\u308b\u304b\ncards = [('A', A), ('B', B), ('C', C)]  # \u30ab\u30fc\u30c9\u540d\u3068\u679a\u6570\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\nprint(get_max_possible_sum(cards))\n"
    }
  ],
  "created": 1650088435,
  "object": "edit"
}
2022-04-16 05:54:07.428730 fix syntax errors 9 ["import itertools\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "K = int(input())\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True) # タプルの2つ目の値で降順にソート\n    return sum(card[1] for card in cards[:K]) # タプルの2つ目を取り出して合計\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards, K))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K]) + min(cards[K:])[1]\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom operator import itemgetter\n\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1), reverse=True)  # 降順\n    return sum(card[1] for card in cards[:K])  # 降順に並んだK枚のカードの合計値\n\n\nA, B, C, K = map(int, input().split())  # 入力\ncards = [('A', A), ('B', B), ('C', C)]  # カードのリスト\nprint(get_max_possible_sum(cards, K))  # 出力\n", "\n#\n# from operator import itemgetter\n#\n# def get_max_possible_sum(cards):\n#     cards.sort(key=itemgetter(1), reverse=True)\n#     return sum(card[1] for card in cards[:K])\n#\n# A, B, C, K = map(int, input().split())\n# cards = [('A', A), ('B', B), ('C', C)]\n# print(get_max_possible_sum(cards))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:int(K)])\n\nA, B, C, K = input().split()\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\nfrom operator import itemgetter\n\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K + 1])\n\nA, B, C, K = map(int, input().split())  # A, B, C: 各カードの枚数、K: 最大で何枚まで選べるか\ncards = [('A', A), ('B', B), ('C', C)]  # カード名と枚数のタプルのリスト\nprint(get_max_possible_sum(cards))\n"]
2022-04-16 05:54:07.428790 size on output set 9
2022-04-16 05:54:07.428799 num operations 1
2022-04-16 05:54:07.428804 size on input set 1
2022-04-16 05:54:15.306807 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"
    },
    {
      "index": 1,
      "text": "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 1\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"
    },
    {
      "index": 2,
      "text": "\n\n# n = int(input())\nn = 5\na = [int(input()) for _ in range(n)]\n\nprint(a)\n"
    },
    {
      "index": 3,
      "text": "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"
    },
    {
      "index": 4,
      "text": "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"
    },
    {
      "index": 5,
      "text": "\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"
    },
    {
      "index": 6,
      "text": "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"
    },
    {
      "index": 7,
      "text": "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"
    },
    {
      "index": 8,
      "text": "\n\nA, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B) + C)\n"
    }
  ],
  "created": 1650088447,
  "object": "edit"
}
2022-04-16 05:54:15.307149 fix syntax errors 9 ['\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n', '\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 1\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n', '\n\n# n = int(input())\nn = 5\na = [int(input()) for _ in range(n)]\n\nprint(a)\n', '\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n', '\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n', '\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n', '\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n', '\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n', '\n\nA, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B) + C)\n']
2022-04-16 05:54:15.307182 size on output set 6
