["\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K]) + min(cards[K:])[1]\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "K = int(input())\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True) # \u30bf\u30d7\u30eb\u306e2\u3064\u76ee\u306e\u5024\u3067\u964d\u9806\u306b\u30bd\u30fc\u30c8\n    return sum(card[1] for card in cards[:K]) # \u30bf\u30d7\u30eb\u306e2\u3064\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u5408\u8a08\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "import itertools\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom operator import itemgetter\n\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1), reverse=True)  # \u964d\u9806\n    return sum(card[1] for card in cards[:K])  # \u964d\u9806\u306b\u4e26\u3093\u3060K\u679a\u306e\u30ab\u30fc\u30c9\u306e\u5408\u8a08\u5024\n\n\nA, B, C, K = map(int, input().split())  # \u5165\u529b\ncards = [('A', A), ('B', B), ('C', C)]  # \u30ab\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\nprint(get_max_possible_sum(cards, K))  # \u51fa\u529b\n", "\n\n# n = int(input())\nn = 5\na = [int(input()) for _ in range(n)]\n\nprint(a)\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K + 1])\n\nA, B, C, K = map(int, input().split())  # A, B, C: \u5404\u30ab\u30fc\u30c9\u306e\u679a\u6570\u3001K: \u6700\u5927\u3067\u4f55\u679a\u307e\u3067\u9078\u3079\u308b\u304b\ncards = [('A', A), ('B', B), ('C', C)]  # \u30ab\u30fc\u30c9\u540d\u3068\u679a\u6570\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\nprint(get_max_possible_sum(cards))\n", "\n\nA, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B) + C)\n", "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 1\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:int(K)])\n\nA, B, C, K = input().split()\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards, K))\n", "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n#\n# from operator import itemgetter\n#\n# def get_max_possible_sum(cards):\n#     cards.sort(key=itemgetter(1), reverse=True)\n#     return sum(card[1] for card in cards[:K])\n#\n# A, B, C, K = map(int, input().split())\n# cards = [('A', A), ('B', B), ('C', C)]\n# print(get_max_possible_sum(cards))\n", "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"]