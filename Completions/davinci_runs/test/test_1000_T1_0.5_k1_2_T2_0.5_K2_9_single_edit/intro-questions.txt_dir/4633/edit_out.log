2022-04-16 08:45:46.295582 num operations 1
2022-04-16 08:45:46.295601 size on input set 1
2022-04-16 08:46:06.853245 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n\n    else:\n        moves = 0\n        i = 0\n\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s: \n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n"
    },
    {
      "index": 3,
      "text": "\ndef sumOfDigits(n):\n    sum_ = 0\n    for i in n:\n        sum_ += int(i)\n    return sum_\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i + 1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef sumOfDigits(n):\n    s = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef sumOfDigits(n):\n    s = 0\n    for i in n:\n        s += int(i)\n    return s\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n"
    },
    {
      "index": 6,
      "text": "\n\n# def sumOfDigits(n):\n#     sum = 0\n#     for i in n:\n#         sum += int(i)\n#     return sum\n\n# def getMinMoves(n):\n#     n = str(n)\n#     nSum = sumOfDigits(n)\n#     if nSum <= s:\n#         return 0\n#     else:\n#         moves = 0\n#         i = 0\n#         while nSum > s:\n#             if i == len(n) - 1:\n#                 n = str(int(n) + 1)\n#                 i = 0\n#                 moves += 1\n#             else:\n#                 n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n#                 i += 1\n#             nSum = sumOfDigits(n)\n#         return moves\n\n# t = int(input())\n\n# for i in range(t):\n#     n, s = map(int, input().split())\n#     print(getMinMoves(n))\n\n# def getLcm(a, b):\n#     i = 2\n#     while i <= min(a,b):\n#         if a % i == 0 and b % i == 0:\n#             return i\n#         i += 1\n#     return 1\n\n# def getGcd(a,b):\n#     while b:\n#         a, b = b, a % b\n#     return a\n\n# t = int(input())\n\n# for i in range(t):\n#     a, b = map(int, input().split())\n#     lcm = getLcm(a, b)\n#     gcd = getGcd(a, b)\n#     print(lcm * gcd)\n\ndef getFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    factors = getFactors(n)\n    print(len(factors))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    nSum = sumOfDigits(n)    \n    if nSum <= 1:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > 1:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n"
    },
    {
      "index": 8,
      "text": "\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n) # convert to string\n    nSum = sumOfDigits(n)\n    if nSum <= s: # if sum of digits is less than s\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1) # increase the number by 1\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n"
    }
  ],
  "created": 1650098746,
  "object": "edit"
}
2022-04-16 08:46:06.853551 NO RESULT
2022-04-16 08:46:06.853560 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-16 08:46:06.853610 fix syntax errors 8 ['\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n\n    else:\n        moves = 0\n        i = 0\n\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n', '\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s: \n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n', '\ndef sumOfDigits(n):\n    sum_ = 0\n    for i in n:\n        sum_ += int(i)\n    return sum_\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i + 1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n', '\n\ndef sumOfDigits(n):\n    s = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n', '\n\ndef sumOfDigits(n):\n    s = 0\n    for i in n:\n        s += int(i)\n    return s\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n', '\n\n# def sumOfDigits(n):\n#     sum = 0\n#     for i in n:\n#         sum += int(i)\n#     return sum\n\n# def getMinMoves(n):\n#     n = str(n)\n#     nSum = sumOfDigits(n)\n#     if nSum <= s:\n#         return 0\n#     else:\n#         moves = 0\n#         i = 0\n#         while nSum > s:\n#             if i == len(n) - 1:\n#                 n = str(int(n) + 1)\n#                 i = 0\n#                 moves += 1\n#             else:\n#                 n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n#                 i += 1\n#             nSum = sumOfDigits(n)\n#         return moves\n\n# t = int(input())\n\n# for i in range(t):\n#     n, s = map(int, input().split())\n#     print(getMinMoves(n))\n\n# def getLcm(a, b):\n#     i = 2\n#     while i <= min(a,b):\n#         if a % i == 0 and b % i == 0:\n#             return i\n#         i += 1\n#     return 1\n\n# def getGcd(a,b):\n#     while b:\n#         a, b = b, a % b\n#     return a\n\n# t = int(input())\n\n# for i in range(t):\n#     a, b = map(int, input().split())\n#     lcm = getLcm(a, b)\n#     gcd = getGcd(a, b)\n#     print(lcm * gcd)\n\ndef getFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    factors = getFactors(n)\n    print(len(factors))\n', '\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    nSum = sumOfDigits(n)    \n    if nSum <= 1:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > 1:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n', '\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n) # convert to string\n    nSum = sumOfDigits(n)\n    if nSum <= s: # if sum of digits is less than s\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1) # increase the number by 1\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n']
2022-04-16 08:46:06.853768 size on output set 8
2022-04-16 08:46:06.853779 num operations 1
2022-04-16 08:46:06.853784 size on input set 1
2022-04-16 08:46:16.999589 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    n += 1\n    while sum_of_digits(n) != s:\n        n += 1\n    return n\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n"
    },
    {
      "index": 1,
      "text": "\ndef sum_of_digits(n):\n\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n"
    },
    {
      "index": 2,
      "text": "\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n"
    },
    {
      "index": 3,
      "text": "\ndef sum_of_digits(n):\n\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n"
    },
    {
      "index": 4,
      "text": "\n"
    },
    {
      "index": 5,
      "text": "\n\n# def sum_of_digits(n):\n#     return sum(map(int, str(n)))\n#\n# def min_moves(n, s):\n#     moves = 0\n#     while sum_of_digits(n) > s:\n#         moves += 1\n#         n += 1\n#     return moves\n#\n# t = int(input())\n# for i in range(t):\n#     n, s = map(int, input().split())\n#     print(min_moves(n, s))\n"
    },
    {
      "index": 6,
      "text": "\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n"
    },
    {
      "index": 7,
      "text": "\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\n\ndef min_moves(n, s, i):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n = n + (10**i)\n\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    i = 0\n    while sum_of_digits(n) > s:\n        i += 1\n        n = n + (10**i)\n    print(min_moves(n, s, i))\n"
    },
    {
      "index": 8,
      "text": "\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n"
    }
  ],
  "created": 1650098766,
  "object": "edit"
}
2022-04-16 08:46:16.999927 fix syntax errors 9 ['\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    n += 1\n    while sum_of_digits(n) != s:\n        n += 1\n    return n\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n', '\ndef sum_of_digits(n):\n\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n', '\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n', '\ndef sum_of_digits(n):\n\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n', '\n', '\n\n# def sum_of_digits(n):\n#     return sum(map(int, str(n)))\n#\n# def min_moves(n, s):\n#     moves = 0\n#     while sum_of_digits(n) > s:\n#         moves += 1\n#         n += 1\n#     return moves\n#\n# t = int(input())\n# for i in range(t):\n#     n, s = map(int, input().split())\n#     print(min_moves(n, s))\n', '\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n', '\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\n\ndef min_moves(n, s, i):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n = n + (10**i)\n\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    i = 0\n    while sum_of_digits(n) > s:\n        i += 1\n        n = n + (10**i)\n    print(min_moves(n, s, i))\n', '\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n']
2022-04-16 08:46:16.999975 size on output set 7
