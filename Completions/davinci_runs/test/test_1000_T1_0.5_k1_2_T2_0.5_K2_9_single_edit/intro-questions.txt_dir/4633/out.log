2022-04-09 21:13:18.771027 """
You are given a positive integer $n$. In one move, you can increase $n$ by one (i.e. make $n := n + 1$). Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 2 \cdot 10^4$) â€” the number of test cases. Then $t$ test cases follow.

The only line of the test case contains two integers $n$ and $s$ ($1 \le n \le 10^{18}$; $1 \le s \le 162$).


-----Output-----

For each test case, print the answer: the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.


-----Example-----
Input
5
2 1
1 1
500 4
217871987498122 10
100000000000000001 1

Output
8
0
500
2128012501878
899999999999999999
"""
2022-04-09 21:13:18.771094 --------------------------
2022-04-09 21:13:36.255213 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))"
    }
  ],
  "created": 1649553199,
  "id": "cmpl-4vGQhgEWTpB27dvx5FtiZNLLOKrum",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:13:36.255515 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))"
}
2022-04-09 21:13:36.255586 REASON stop
2022-04-09 21:13:36.257049 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))"
}
2022-04-09 21:13:36.257199 REASON stop
