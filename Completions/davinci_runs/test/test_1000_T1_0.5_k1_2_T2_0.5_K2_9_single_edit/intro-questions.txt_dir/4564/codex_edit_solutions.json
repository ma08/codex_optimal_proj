["import sys\n\n\n\ndef is_unique(s):\n    if len(s) > 26:\n        return False\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        seen.add(c)\n    return True\n\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    if is_unique(s):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nif __name__ == '__main__':\n    print(\"Hello, world!\")\n", "\n\nif __name__ == '__main__':\n    S = input()\n    if len(S) == len(set(S))\n        print(\"yes\")\n    else:\n        print(\"no\")\n", "\nimport re\n\nif __name__ == '__main__':\n    S = input()\n    if re.search(r'^[a-zA-Z]', S):\n        print(\"yes\")\n    else:\n        print(\"no\")\n", "\n\nif __name__ == '__main__':\n    S = input()\n    if len(S) == len(set(S)):  # set()\u3067\u96c6\u5408\u306b\u3059\u308b\u3068\u91cd\u8907\u3092\u7121\u304f\u3059\n        print(\"yes\")\n    else:\n        print(\"no\")\n", "\nimport sys\n\ndef is_unique(s):\n    if len(s) > 26:\n        return False\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        seen.add(c)\n    return True\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    if is_unique(s):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef is_unique(s):\n    if len(s) > 26:\n        return False\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        seen.add(c)\n    return True\n\ndef main():\n    s = sys.stdin.readline().rstrip() \n    if is_unique(s):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef is_unique(s):\n    if len(s) > 26:\n        return False\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        seen.add(c)\n    return True\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    if is_unique(s):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    S = input()\n    if len(S) == len(set(S)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport os\n\n\ndef main():\n    if len(sys.argv) != 2:\n        print(\"Usage: python bleep.py dictionary\")\n        exit(1)\n\n    # TODO\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    if is_unique(s):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef is_unique(s):\n    # Fill this in.\n    pass\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(is_unique(s))\n    # True\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef is_unique(s):\n\tif len(s) > 26:\n\t\treturn False\n\tseen = set()\n\tfor c in s:\n\t\tif c in seen:\n\t\t\treturn False\n\t\tseen.add(c)\n\treturn True\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tif is_unique(s):\n\t\tprint(\"yes\")\n\telse:\n\t\tprint(\"no\")\n\nif __name__ == \"__main__\":\n\tmain()\n", "\nimport sys\n\ndef is_unique(s):\n    if len(s) > 26:\n        return False\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        seen.add(c)\n    return True\n\ndef main():\n    s = sys.stdin.readline().strip()\n    if is_unique(s):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nif __name__ == '__main__':\n    S = input()\n    if len(S) == len(set(S)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  unique.py\n#  \n#  Copyright 2018 nick <nick@nick-VirtualBox>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#  \n\nif __name__ == '__main__':\n    S = input()\n    if len(S) == len(set(S)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n", "import sys\n\n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    print(A[-1] - A[0])\n", "\n\nif __name__ == '__main__':\n    S = input()\n    print(any(c.isalnum() for c in S))\n    print(any(c.isalpha() for c in S))\n    print(any(c.isdigit() for c in S))\n    print(any(c.islower() for c in S))\n    print(any(c.isupper() for c in S))\n"]