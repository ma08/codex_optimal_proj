2022-04-16 06:03:56.160252 num operations 1
2022-04-16 06:03:56.160271 size on input set 1
2022-04-16 06:04:04.519152 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "print('Hello World')\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0)) \n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(A * B)\n"
    },
    {
      "index": 3,
      "text": "\n\n# import sys\n\n# A, B = map(int, sys.stdin.readline().rstrip().split())\n# print(B // A + (B % A != 0))\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())  # \uacf5\ubc31 \uae30\uc900\uc73c\ub85c \uad6c\ubd84\ud558\uc5ec \uc785\ub825 \ubc1b\uae30\nprint(B // A + (B % A != 0))  # \ubaab + \ub098\uba38\uc9c0\uac00 \uc788\uc73c\uba74 1 \ucd94\uac00\n"
    },
    {
      "index": 5,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\na, b = map(int, sys.stdin.readline().rstrip().split())\nprint(b // a + (b % a != 0))\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n"
    },
    {
      "index": 8,
      "text": "import sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n"
    }
  ],
  "created": 1650089036,
  "object": "edit"
}
2022-04-16 06:04:04.519526 fix syntax errors 9 ["print('Hello World')\n", '\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0)) \n', '\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(A * B)\n', '\n\n# import sys\n\n# A, B = map(int, sys.stdin.readline().rstrip().split())\n# print(B // A + (B % A != 0))\n', '\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())  # 공백 기준으로 구분하여 입력 받기\nprint(B // A + (B % A != 0))  # 몫 + 나머지가 있으면 1 추가\n', '# -*- coding: utf-8 -*-\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n', '\n\nimport sys\n\na, b = map(int, sys.stdin.readline().rstrip().split())\nprint(b // a + (b % a != 0))\n', '\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n', 'import sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n']
2022-04-16 06:04:04.519573 size on output set 9
2022-04-16 06:04:04.519587 num operations 1
2022-04-16 06:04:04.519593 size on input set 1
2022-04-16 06:04:12.481278 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A) \n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main() \n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef minPowerStrips(a, b):\n    return math.ceil(b / a)\n\ndef main():\n    line = input().split()\n    a = int(line[0])\n    b = int(line[1])\n    print(minPowerStrips(a, b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B/A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B/A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport math\n\ndef minPowerStrips(A, B):\n    return int(math.ceil(B / A))\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650089044,
  "object": "edit"
}
2022-04-16 06:04:12.481505 fix syntax errors 9 ["import math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A) \n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main() \n", "\nimport math\n\ndef minPowerStrips(a, b):\n    return math.ceil(b / a)\n\ndef main():\n    line = input().split()\n    a = int(line[0])\n    b = int(line[1])\n    print(minPowerStrips(a, b))\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B/A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B/A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef minPowerStrips(A, B):\n    return int(math.ceil(B / A))\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 06:04:12.481541 size on output set 7
