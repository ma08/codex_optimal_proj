2022-04-16 15:54:23.910903 num operations 1
2022-04-16 15:54:23.910913 size on input set 1
2022-04-16 15:54:33.809461 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n"
    },
    {
      "index": 1,
      "text": "\nprint(\"Hello World!\")\n"
    },
    {
      "index": 2,
      "text": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n"
    },
    {
      "index": 3,
      "text": "#include <stdio.h>\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nint main()\n{\n    int n, i;\n    unsigned long long fact = 1;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\",&n);\n\n    // shows error if the user enters a negative integer\n    if (n < 0)\n        printf(\"Error! Factorial of a negative number doesn't exist.\");\n\n    else\n    {\n        for(i=1; i<=n; ++i)\n        {\n            fact *= i;              // fact = fact*i;\n        }\n        printf(\"Factorial of %d = %llu\", n, fact);\n    }\n\n    return 0;\n}\n"
    },
    {
      "index": 4,
      "text": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        print(factorial(int(input())) % 10)\n"
    },
    {
      "index": 5,
      "text": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n"
    },
    {
      "index": 6,
      "text": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n"
    },
    {
      "index": 7,
      "text": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n"
    },
    {
      "index": 8,
      "text": "\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n"
    }
  ],
  "created": 1650124464,
  "object": "edit"
}
2022-04-16 15:54:33.809743 fix syntax errors 9 ['\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n', '\nprint("Hello World!")\n', '\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n', '#include <stdio.h>\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nint main()\n{\n    int n, i;\n    unsigned long long fact = 1;\n\n    printf("Enter an integer: ");\n    scanf("%d",&n);\n\n    // shows error if the user enters a negative integer\n    if (n < 0)\n        printf("Error! Factorial of a negative number doesn\'t exist.");\n\n    else\n    {\n        for(i=1; i<=n; ++i)\n        {\n            fact *= i;              // fact = fact*i;\n        }\n        printf("Factorial of %d = %llu", n, fact);\n    }\n\n    return 0;\n}\n', '\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\nif __name__ == "__main__":\n    for _ in range(int(input())):\n        print(factorial(int(input())) % 10)\n', '\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n', '\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n', '\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n', '\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nfor _ in range(int(input())):\n    print(factorial(int(input())) % 10)\n']
2022-04-16 15:54:33.809782 size on output set 6
2022-04-16 15:54:33.809794 num operations 1
2022-04-16 15:54:33.809799 size on input set 1
2022-04-16 15:54:41.958519 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef factorial(n):\n    pass\n\ndef last_digit(n):\n    pass\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n, m):\n    return (factorial(n) % m)\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n, 10))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n)\n    return factorial(n) % 10;\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n)) \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef factorial(n):\n    return 1 if n == 1 else n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    for i in range(int(input().strip())):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650124473,
  "object": "edit"
}
2022-04-16 15:54:41.959058 fix syntax errors 9 ["\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef factorial(n):\n    pass\n\ndef last_digit(n):\n    pass\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n", "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n, m):\n    return (factorial(n) % m)\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n, 10))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n)\n    return factorial(n) % 10;\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n)) \n\nif __name__ == '__main__':\n    main()\n", "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n\n    main()\n", "\n\ndef factorial(n):\n    return 1 if n == 1 else n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    for i in range(int(input().strip())):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n", "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    num_cases = int(input().strip())\n    for i in range(num_cases):\n        n = int(input().strip())\n        print(last_digit(n))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:54:41.959124 size on output set 8
2022-04-16 15:54:41.959135 num operations 1
2022-04-16 15:54:41.959140 size on input set 1
2022-04-16 15:54:51.134156 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    num_test_cases = int(raw_input())\n    for _ in range(num_test_cases):\n        n = int(raw_input())\n        print(factorial(n))\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n))\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n))\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    num_test_cases = int(raw_input())\n    for _ in xrange(num_test_cases):\n        n = int(raw_input())\n        print factorial(n)\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    if n < 2:    \n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10 \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    num_test_cases = int(input()) # Reads the number of test cases\n    for _ in range(num_test_cases): # For each test case\n        n = int(input()) # Reads the test case\n        print(factorial(n))\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main(file_name):\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    file = open(file_name, 'r')\n    num_test_cases = int(file.readline())\n    for _ in range(num_test_cases):\n        n = int(file.readline())\n    file.close()\n        print(factorial(n))\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n) % 10)\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n))\n\ndef factorial(n):\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\ndef main():\n    '''\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    '''\n    num_test_cases = int(sys.stdin.readline())\n    for _ in range(num_test_cases):\n        n = int(sys.stdin.readline())\n        print(factorial(n))\n\ndef factorial(n):\n    '''\n    Computes the last digit of n!\n    '''\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650124481,
  "object": "edit"
}
2022-04-16 15:54:51.134440 fix syntax errors 9 ['\n\ndef main():\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    num_test_cases = int(raw_input())\n    for _ in range(num_test_cases):\n        n = int(raw_input())\n        print(factorial(n))\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n))\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n))\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    num_test_cases = int(raw_input())\n    for _ in xrange(num_test_cases):\n        n = int(raw_input())\n        print factorial(n)\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    if n < 2:    \n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10 \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    num_test_cases = int(input()) # Reads the number of test cases\n    for _ in range(num_test_cases): # For each test case\n        n = int(input()) # Reads the test case\n        print(factorial(n))\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main(file_name):\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    file = open(file_name, \'r\')\n    num_test_cases = int(file.readline())\n    for _ in range(num_test_cases):\n        n = int(file.readline())\n    file.close()\n        print(factorial(n))\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == "__main__":\n    main(sys.argv[1])\n', '\n\ndef main():\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n) % 10)\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        n = int(input())\n        print(factorial(n))\n\ndef factorial(n):\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\ndef main():\n    \'\'\'\n    Reads the number of test cases, then reads each test case, and prints the\n    last digit of the factorial of the test case.\n    \'\'\'\n    num_test_cases = int(sys.stdin.readline())\n    for _ in range(num_test_cases):\n        n = int(sys.stdin.readline())\n        print(factorial(n))\n\ndef factorial(n):\n    \'\'\'\n    Computes the last digit of n!\n    \'\'\'\n    if n < 2:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 15:54:51.134606 size on output set 9
2022-04-16 15:54:51.134622 num operations 1
2022-04-16 15:54:51.134628 size on input set 1
2022-04-16 15:55:00.426108 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 2]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]  # 0! = 1\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10  # n! = (n // 10)! * (n % 10)!\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n#\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8] # last digits of factorials\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip()) # number of cases\n    for _ in range(num_cases): # loop through cases\n        n = int(stdin.readline().strip()) # input\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 4]\n\ndef last_digit_factorial(n):\n    if n < 11:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 11]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10]\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 8]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650124491,
  "object": "edit"
}
2022-04-16 15:55:00.426441 fix syntax errors 9 ["\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 2]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]  # 0! = 1\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10  # n! = (n // 10)! * (n % 10)!\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\nif __name__ == '__main__':\n    main()\n", "\n#\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8] # last digits of factorials\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip()) # number of cases\n    for _ in range(num_cases): # loop through cases\n        n = int(stdin.readline().strip()) # input\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 4]\n\ndef last_digit_factorial(n):\n    if n < 11:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 11]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10]\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 8]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nfactorials = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]\n\ndef last_digit_factorial(n):\n    if n < 10:\n        return factorials[n]\n    else:\n        return (last_digit_factorial(n // 10) * factorials[n % 10]) % 10\n\ndef main():\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        print(last_digit_factorial(n))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:55:00.426497 size on output set 9
2022-04-16 15:55:00.426508 num operations 1
2022-04-16 15:55:00.426513 size on input set 1
2022-04-16 15:55:09.648118 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(input())):\n        print(factorial(int(input())))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys \n\ndef factorial(n): \n    if n == 1: \n        return 1 \n    else: \n        return (n * factorial(n-1)) % 10 \n\ndef main(): \n    for i in range(int(sys.stdin.readline())): \n        print(factorial(int(sys.stdin.readline()))) \n\nmain() \n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n"
    },
    {
      "index": 7,
      "text": "\n# -*- coding: utf-8 -*-\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650124500,
  "object": "edit"
}
2022-04-16 15:55:09.648347 fix syntax errors 9 ['\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(input())):\n        print(factorial(int(input())))\n\nmain()\n', '\n\nimport sys \n\ndef factorial(n): \n    if n == 1: \n        return 1 \n    else: \n        return (n * factorial(n-1)) % 10 \n\ndef main(): \n    for i in range(int(sys.stdin.readline())): \n        print(factorial(int(sys.stdin.readline()))) \n\nmain() \n', '\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n', 'import sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n', '\n\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n - 1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n', '\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n', '\n# -*- coding: utf-8 -*-\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nmain()\n', "\n\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) % 10\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        print(factorial(int(sys.stdin.readline())))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:55:09.648494 size on output set 9
2022-04-16 15:55:09.648509 num operations 1
2022-04-16 15:55:09.648515 size on input set 1
2022-04-16 15:55:18.956672 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef factorial(n):\n    return n*factorial(n-1) if n > 1 else 1\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    },
    {
      "index": 3,
      "text": "\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == \"__main__\":\n\n\n    def count_substring(string, sub_string):\n        count = 0\n        for i in range(len(string)):\n\n            if string[i] == sub_string[0]:\n                flag = 1\n\n                for j in range(len(sub_string)):\n                    if string[i + j] != sub_string[j]:\n                        flag = 0\n                        break\n\n                if flag == 1:\n                    count += 1\n\n        return count\n\n    if __name__ == '__main__':\n        string = input().strip()\n        sub_string = input().strip()\n\n        count = count_substring(string, sub_string)\n        print(count)\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1]) # print the last digit of the factorial\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef factorial(N):\n    if N <= 1:\n        return 1 \n    else: \n        return N*factorial(N-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1]) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650124509,
  "object": "edit"
}
2022-04-16 15:55:18.957213 NO RESULT
2022-04-16 15:55:18.957241 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-16 15:55:18.957321 fix syntax errors 8 ['\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    return n*factorial(n-1) if n > 1 else 1\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == "__main__":\n    main()\n', '\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == "__main__":\n\n\n    def count_substring(string, sub_string):\n        count = 0\n        for i in range(len(string)):\n\n            if string[i] == sub_string[0]:\n                flag = 1\n\n                for j in range(len(sub_string)):\n                    if string[i + j] != sub_string[j]:\n                        flag = 0\n                        break\n\n                if flag == 1:\n                    count += 1\n\n        return count\n\n    if __name__ == \'__main__\':\n        string = input().strip()\n        sub_string = input().strip()\n\n        count = count_substring(string, sub_string)\n        print(count)\n    main()\n', '\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1]) # print the last digit of the factorial\n\nif __name__ == "__main__":\n    main()\n', '\ndef factorial(N):\n    if N <= 1:\n        return 1 \n    else: \n        return N*factorial(N-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1]) \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(str(factorial(N))[-1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 15:55:18.957365 size on output set 8
2022-04-16 15:55:18.957375 num operations 1
2022-04-16 15:55:18.957380 size on input set 1
2022-04-16 15:55:33.258818 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n\t#number of test cases\n\tT = int(sys.stdin.readline())\n\n\t#digit array\n\tdigits = [1]\n\t#last digit\n\tlast = 1\n\n\t#for each test case\n\tfor i in range(T):\n\t\t#read in the number\n\t\tN = int(sys.stdin.readline())\n\t\t#if we need more digits\n\t\tif N > len(digits):\n\t\t\t#compute all of the digits\n\t\t\tfor j in range(len(digits), N):\n\t\t\t\tlast *= j+1\n\t\t\t\tdigits.append(last % 10)\n\t\t#print out the last digit\n\t\tprint(digits[N-1])\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast = (last * (j+1)) % 10\n\t\t\tdigits.append(last)\n\t#print out the last digit\n\tprint(digits[N-1])\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(0, T):\n    #read in the number\n    N = int(sys.stdin.readline())\n    #if we need more digits\n    if N > len(digits):\n        #compute all of the digits\n        for j in range(len(digits), N):\n            last *= j+1\n            digits.append(last % 10)\n    #print out the last digit\n    print(digits[N-1])\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n\t#number of test cases\n\tT = int(sys.stdin.readline())\n\n\t#digit array\n\tdigits = [1]\n\t#last digit\n\tlast = 1\n\n\t#for each test case\n\tfor i in range(T):\n\t\t#read in the number\n\t\tN = int(sys.stdin.readline())\n\t\t#if we need more digits\n\t\tif N > len(digits):\n\t\t\t#compute all of the digits\n\t\t\tfor j in range(len(digits), N):\n\t\t\t\tlast *= j+1\n\t\t\t\tdigits.append(last % 10)\n\t\t#print out the last digit\n\t\tprint(digits[N-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast = last * (j+1)\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast *= (j+1)\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast = last * (j+1)\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/python\n\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast *= j+1\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n\t#number of test cases\n\tT = int(sys.stdin.readline())\n\n\t#digit array\n\tdigits = [1]\n\t#last digit\n\tlast = 1\n\n\t#for each test case\n\tfor i in range(T):\n\t\t#read in the number\n\t\tN = int(sys.stdin.readline())\n\t\t#if we need more digits\n\t\tif N > len(digits):\n\t\t\t#compute all of the digits\n\t\t\tfor j in range(len(digits), N):\n\t\t\t\tlast *= j+1\n\t\t\t\tdigits.append(last % 10)\n\t\t#print out the last digit\n\t\tprint(digits[N-1])\n\nif __name__ == \"__main__\":\n\tmain()\n"
    }
  ],
  "created": 1650124518,
  "object": "edit"
}
2022-04-16 15:55:33.259173 fix syntax errors 9 ["\nimport sys\n\ndef main():\n\t#number of test cases\n\tT = int(sys.stdin.readline())\n\n\t#digit array\n\tdigits = [1]\n\t#last digit\n\tlast = 1\n\n\t#for each test case\n\tfor i in range(T):\n\t\t#read in the number\n\t\tN = int(sys.stdin.readline())\n\t\t#if we need more digits\n\t\tif N > len(digits):\n\t\t\t#compute all of the digits\n\t\t\tfor j in range(len(digits), N):\n\t\t\t\tlast *= j+1\n\t\t\t\tdigits.append(last % 10)\n\t\t#print out the last digit\n\t\tprint(digits[N-1])\n\nif __name__ == '__main__':\n\tmain()\n", '\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast = (last * (j+1)) % 10\n\t\t\tdigits.append(last)\n\t#print out the last digit\n\tprint(digits[N-1])\n', 'import sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(0, T):\n    #read in the number\n    N = int(sys.stdin.readline())\n    #if we need more digits\n    if N > len(digits):\n        #compute all of the digits\n        for j in range(len(digits), N):\n            last *= j+1\n            digits.append(last % 10)\n    #print out the last digit\n    print(digits[N-1])\n', 'import sys\n\ndef main():\n\t#number of test cases\n\tT = int(sys.stdin.readline())\n\n\t#digit array\n\tdigits = [1]\n\t#last digit\n\tlast = 1\n\n\t#for each test case\n\tfor i in range(T):\n\t\t#read in the number\n\t\tN = int(sys.stdin.readline())\n\t\t#if we need more digits\n\t\tif N > len(digits):\n\t\t\t#compute all of the digits\n\t\t\tfor j in range(len(digits), N):\n\t\t\t\tlast *= j+1\n\t\t\t\tdigits.append(last % 10)\n\t\t#print out the last digit\n\t\tprint(digits[N-1])\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast = last * (j+1)\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n', '\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast *= (j+1)\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n', '\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast = last * (j+1)\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n', '#!/usr/bin/python\n\nimport sys\n\n#number of test cases\nT = int(sys.stdin.readline())\n\n#digit array\ndigits = [1]\n#last digit\nlast = 1\n\n#for each test case\nfor i in range(T):\n\t#read in the number\n\tN = int(sys.stdin.readline())\n\t#if we need more digits\n\tif N > len(digits):\n\t\t#compute all of the digits\n\t\tfor j in range(len(digits), N):\n\t\t\tlast *= j+1\n\t\t\tdigits.append(last % 10)\n\t#print out the last digit\n\tprint(digits[N-1])\n', '\nimport sys\n\ndef main():\n\t#number of test cases\n\tT = int(sys.stdin.readline())\n\n\t#digit array\n\tdigits = [1]\n\t#last digit\n\tlast = 1\n\n\t#for each test case\n\tfor i in range(T):\n\t\t#read in the number\n\t\tN = int(sys.stdin.readline())\n\t\t#if we need more digits\n\t\tif N > len(digits):\n\t\t\t#compute all of the digits\n\t\t\tfor j in range(len(digits), N):\n\t\t\t\tlast *= j+1\n\t\t\t\tdigits.append(last % 10)\n\t\t#print out the last digit\n\t\tprint(digits[N-1])\n\nif __name__ == "__main__":\n\tmain()\n']
2022-04-16 15:55:33.259234 size on output set 9
2022-04-16 15:55:33.259245 num operations 1
2022-04-16 15:55:33.259250 size on input set 1
2022-04-16 15:55:41.615417 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(raw_input())\n    for i in xrange(test_cases):\n        n = int(raw_input())\n        print(last_digit(n))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef factorial(n):\n    return n * factorial(n-1) if n > 1 else 1\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef test():\n    print(\"test\")\n"
    }
  ],
  "created": 1650124533,
  "object": "edit"
}
2022-04-16 15:55:41.615667 fix syntax errors 9 ['\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(raw_input())\n    for i in xrange(test_cases):\n        n = int(raw_input())\n        print(last_digit(n))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef factorial(n):\n    return n * factorial(n-1) if n > 1 else 1\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == "__main__":\n    main()\n', '\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef last_digit(n):\n\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == "__main__":\n    main()\n', '\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(n):\n    return factorial(n) % 10\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        n = int(input())\n        print(last_digit(n))\n\nif __name__ == "__main__":\n    main()\n', '\ndef test():\n    print("test")\n']
2022-04-16 15:55:41.615782 size on output set 9
