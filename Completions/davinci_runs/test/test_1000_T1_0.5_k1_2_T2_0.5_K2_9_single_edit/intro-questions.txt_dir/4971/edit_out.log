2022-04-16 15:22:40.089637 num operations 1
2022-04-16 15:22:40.089647 size on input set 1
2022-04-16 15:22:49.286708 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))):\n        for b in range(1,int(math.ceil(m**(1/3)))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\nimport math\n\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1, math.ceil(m**(1/3))):\n        for b in range(1, math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m: x = max(x, a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n\n\n        print(x)\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"None\")\n    else:\n        print(x)\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3.0))):\n        for b in range(1,math.ceil(m**(1/3.0))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))):\n        for b in range(1,int(math.ceil(m**(1/3)))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))+1):\n        for b in range(1,int(math.ceil(m**(1/3)))+1):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n"
    }
  ],
  "created": 1650122560,
  "object": "edit"
}
2022-04-16 15:22:49.286978 fix syntax errors 9 ['import sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n        print(x)\nmain()\n', '\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n        print(x)\nmain()\n', '#!/usr/bin/python3\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))):\n        for b in range(1,int(math.ceil(m**(1/3)))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n        print(x)\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\nimport math\n\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1, math.ceil(m**(1/3))):\n        for b in range(1, math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m: x = max(x, a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n\n\n        print(x)\nmain()\n', '\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n        print(x)\nmain()\n', '\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("None")\n    else:\n        print(x)\nmain()\n', '\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3.0))):\n        for b in range(1,math.ceil(m**(1/3.0))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n        print(x)\nmain()\n', '\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))):\n        for b in range(1,int(math.ceil(m**(1/3)))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n        print(x)\nmain()\n', '\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))+1):\n        for b in range(1,int(math.ceil(m**(1/3)))+1):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print("none")\n    else:\n        print(x)\nmain()\n']
2022-04-16 15:22:49.287025 size on output set 8
2022-04-16 15:22:49.287034 num operations 1
2022-04-16 15:22:49.287039 size on input set 1
2022-04-16 15:23:03.989794 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#Program: Taxi Bus Numbers\n\nimport math\n\ndef taxi_numbers(m):\n    taxi_numbers = []\n    for i in range(1, int(math.sqrt(m)+1)):\n        for j in range(i, int(math.sqrt(m)+1)):\n            if i != j and i**3 + j**3 < m:\n                taxi_numbers.append(i**3 + j**3)\n    return taxi_numbers\n\ndef bus_numbers(m):\n    bus_numbers = []\n    for n in taxi_numbers(m):\n        if taxi_numbers(m).count(n) > 1:\n            bus_numbers.append(n)\n    return bus_numbers\n\ndef max_bus_number(m):\n    if len(bus_numbers(m)) > 0:\n        return max(bus_numbers(m))\n    else:\n        return \"none\"\n\nprint(max_bus_number(int(input())))\n"
    },
    {
      "index": 2,
      "text": "\n\n#Program:Taxi and Bus Numbers\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 3,
      "text": "\n# Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 4,
      "text": "\n\n#Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m ** 0.5) + 1):\n        for j in range(i, int(m ** 0.5) + 1):\n            if i != j:\n                n = i ** 3 + j ** 3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 5,
      "text": "\n# Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 6,
      "text": "\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 7,
      "text": "\n\n# Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 8,
      "text": "\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5) + 1):\n        for j in range(i, int(m**0.5) + 1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1650122569,
  "object": "edit"
}
2022-04-16 15:23:03.990171 fix syntax errors 9 ['\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n', '\n\n#Program: Taxi Bus Numbers\n\nimport math\n\ndef taxi_numbers(m):\n    taxi_numbers = []\n    for i in range(1, int(math.sqrt(m)+1)):\n        for j in range(i, int(math.sqrt(m)+1)):\n            if i != j and i**3 + j**3 < m:\n                taxi_numbers.append(i**3 + j**3)\n    return taxi_numbers\n\ndef bus_numbers(m):\n    bus_numbers = []\n    for n in taxi_numbers(m):\n        if taxi_numbers(m).count(n) > 1:\n            bus_numbers.append(n)\n    return bus_numbers\n\ndef max_bus_number(m):\n    if len(bus_numbers(m)) > 0:\n        return max(bus_numbers(m))\n    else:\n        return "none"\n\nprint(max_bus_number(int(input())))\n', '\n\n#Program:Taxi and Bus Numbers\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n', '\n# Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n', '\n\n#Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m ** 0.5) + 1):\n        for j in range(i, int(m ** 0.5) + 1):\n            if i != j:\n                n = i ** 3 + j ** 3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n', '\n# Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n', '\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n', '\n\n# Program:\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n', '\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5) + 1):\n        for j in range(i, int(m**0.5) + 1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print("none")\n']
2022-04-16 15:23:03.990234 size on output set 8
2022-04-16 15:23:03.990247 num operations 1
2022-04-16 15:23:03.990252 size on input set 1
2022-04-16 15:23:18.823805 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n        \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    print(m)\n        \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n\tm = int(sys.stdin.readline())\n\tbus_numbers = set()\n\tcubes = set()\n\tcube_sums = set()\n\ti = 1\n\twhile True:\n\t\tcube = i**3\n\t\tcubes.add(cube)\n\t\tnew_sums = set(map(lambda x: x + cube, cube_sums))\n\t\tfor s in new_sums:\n\t\t\tif s in cubes:\n\t\t\t\tbus_numbers.add(s)\n\t\tcube_sums = cube_sums.union(new_sums)\n\t\tif cube > m:\n\t\t\tbreak\n\t\ti += 1\n\tbus_numbers = list(bus_numbers)\n\tbus_numbers.sort()\n\tif bus_numbers[-1] <= m:\n\t\tprint(bus_numbers[-1])\n\telse:\n\t\tprint(\"none\")\n        \nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n        \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline()) + 1\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, list(cube_sums)))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube >= m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n        \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    print(m)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650122584,
  "object": "edit"
}
2022-04-16 15:23:18.824173 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print("none")\n        \nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    print(m)\n        \nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n\tm = int(sys.stdin.readline())\n\tbus_numbers = set()\n\tcubes = set()\n\tcube_sums = set()\n\ti = 1\n\twhile True:\n\t\tcube = i**3\n\t\tcubes.add(cube)\n\t\tnew_sums = set(map(lambda x: x + cube, cube_sums))\n\t\tfor s in new_sums:\n\t\t\tif s in cubes:\n\t\t\t\tbus_numbers.add(s)\n\t\tcube_sums = cube_sums.union(new_sums)\n\t\tif cube > m:\n\t\t\tbreak\n\t\ti += 1\n\tbus_numbers = list(bus_numbers)\n\tbus_numbers.sort()\n\tif bus_numbers[-1] <= m:\n\t\tprint(bus_numbers[-1])\n\telse:\n\t\tprint("none")\n        \nif __name__ == "__main__":\n\tmain()\n', '\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print("none")\n        \nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline()) + 1\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, list(cube_sums)))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube >= m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print("none")\n        \nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    print(m)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 15:23:18.824238 size on output set 7
2022-04-16 15:23:18.824250 num operations 1
2022-04-16 15:23:18.824256 size on input set 1
2022-04-16 15:23:41.744299 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as a^3 + b^3 = a^3 +\n    b^3 + c^3 - c^3. This can be further simplified to a^3 - c^3 = c^3 - a^3.\n    This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >=\n    0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a !=\n    c and a, c >= 0. It then uses a dictionary to store the number of ways that\n    a number can be expressed as the sum of two positive cubes. The largest bus\n    number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >=\n    0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can\n    be proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d\n    by considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or\n    b = d = 1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c\n    >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of\n    ways that a number can be expressed as the sum of two positive cubes. The\n    largest bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as a^3 + b^3 = a^3 +\n    b^3 + c^3 - c^3. This can be further simplified to a^3 - c^3 = c^3 - a^3.\n    This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as a^3 + b^3 = a^3 +\n    b^3 + c^3 - c^3. This can be further simplified to a^3 - c^3 = c^3 - a^3.\n    This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d = 1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to (a - c)(a^2\n    + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since $a \\ne c$ and $b \\ne d$, the equation can be rewritten as\n    $a^3 + b^3 = a^3 + b^3 + c^3 - c^3$. This can be further simplified to\n    $a^3 - c^3 = c^3 - a^3$. This equation has solutions for $a \\ne c$ and $a, c\n    \\ge 0$.\n\n    This solution works by generating all the possible $a^3 - c^3$ values for $a\n    \\ne c$ and $a, c \\ge 0$. It then uses a dictionary to store the number of\n    ways that a number can be expressed as the sum of two positive cubes. The\n    largest bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650122598,
  "object": "edit"
}
2022-04-16 15:23:41.744688 fix syntax errors 9 ['\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as a^3 + b^3 = a^3 +\n    b^3 + c^3 - c^3. This can be further simplified to a^3 - c^3 = c^3 - a^3.\n    This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >=\n    0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a !=\n    c and a, c >= 0. It then uses a dictionary to store the number of ways that\n    a number can be expressed as the sum of two positive cubes. The largest bus\n    number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >=\n    0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can\n    be proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d\n    by considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or\n    b = d = 1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c\n    >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of\n    ways that a number can be expressed as the sum of two positive cubes. The\n    largest bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as a^3 + b^3 = a^3 +\n    b^3 + c^3 - c^3. This can be further simplified to a^3 - c^3 = c^3 - a^3.\n    This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as a^3 + b^3 = a^3 +\n    b^3 + c^3 - c^3. This can be further simplified to a^3 - c^3 = c^3 - a^3.\n    This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d = 1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    """\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to (a - c)(a^2\n    + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since $a \\ne c$ and $b \\ne d$, the equation can be rewritten as\n    $a^3 + b^3 = a^3 + b^3 + c^3 - c^3$. This can be further simplified to\n    $a^3 - c^3 = c^3 - a^3$. This equation has solutions for $a \\ne c$ and $a, c\n    \\ge 0$.\n\n    This solution works by generating all the possible $a^3 - c^3$ values for $a\n    \\ne c$ and $a, c \\ge 0$. It then uses a dictionary to store the number of\n    ways that a number can be expressed as the sum of two positive cubes. The\n    largest bus number that is less than the input is then printed.\n    """\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest bus number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print "none"\n    else:\n        print max_bus_num\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 15:23:41.744850 size on output set 7
2022-04-16 15:23:41.744862 num operations 1
2022-04-16 15:23:41.744868 size on input set 1
2022-04-16 15:23:49.236682 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    max = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > max:\n                        max = i + j\n    return max\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef foo(m):\n    max = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > max:\n                        max = i + j\n    return max\n\nstdout.write(str(foo(int(stdin.readline()))))\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    max = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > max:\n                        max = i + j\n    return max\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    },
    {
      "index": 8,
      "text": "\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maxim = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maxim:\n                        maxim = i + j\n    return maxim\n\nstdout.write(str(bus(int(stdin.readline()))))\n"
    }
  ],
  "created": 1650122621,
  "object": "edit"
}
2022-04-16 15:23:49.236987 fix syntax errors 9 ['\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    max = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > max:\n                        max = i + j\n    return max\n\nstdout.write(str(bus(int(stdin.readline()))))\n', '\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n', '\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef foo(m):\n    max = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > max:\n                        max = i + j\n    return max\n\nstdout.write(str(foo(int(stdin.readline()))))\n', '\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n', '\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n', '\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n', '\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maximum = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximum:\n                        maximum = i + j\n    return maximum\n\nstdout.write(str(bus(int(stdin.readline()))))\n', '\n\nfrom sys import stdin\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    max = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > max:\n                        max = i + j\n    return max\n\nstdout.write(str(bus(int(stdin.readline()))))\n', '\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef bus(m):\n    maxim = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maxim:\n                        maxim = i + j\n    return maxim\n\nstdout.write(str(bus(int(stdin.readline()))))\n']
2022-04-16 15:23:49.237040 size on output set 5
2022-04-16 15:23:49.237055 num operations 1
2022-04-16 15:23:49.237061 size on input set 1
2022-04-16 15:24:06.037444 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline()) #m is the input\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)] \n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort() #sorting the list\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i]) #printing the largest sum that appears at least twice\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit \n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n# Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n#Program\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline()) \n\n    # Generate a list of all the cubes up to the limit \n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)] \n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit.\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes.\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears.\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice.\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\n# Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1650122629,
  "object": "edit"
}
2022-04-16 15:24:06.037772 fix syntax errors 9 ['\n\n# Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n', '\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n', '\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline()) #m is the input\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)] \n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort() #sorting the list\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i]) #printing the largest sum that appears at least twice\n            break\n    else:\n        print("none")\n\nmain()\n', '\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit \n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n', '\n# Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n', '\n#Program\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline()) \n\n    # Generate a list of all the cubes up to the limit \n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)] \n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n', '\n\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit.\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes.\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears.\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice.\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n', '\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n', '\n\n# Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print("none")\n\nmain()\n']
2022-04-16 15:24:06.037865 size on output set 8
2022-04-16 15:24:06.037891 num operations 1
2022-04-16 15:24:06.037897 size on input set 1
2022-04-16 15:24:27.412696 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef is_cube(n):\n    return round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n    cubes = []\n    for i in range(1, max_n+1):\n        if is_cube(i):\n            cubes.append(i)\n    return cubes\n\ndef find_bus_numbers(m):\n    cubes = find_cubes(m)\n    numbers = {}\n    for c1 in cubes:\n        for c2 in cubes:\n            if c1 + c2 <= m:\n                if c1 + c2 in numbers:\n                    numbers[c1 + c2] += 1\n                else:\n                    numbers[c1 + c2] = 1\n    return numbers\n\ndef find_max_bus_number(numbers):\n    max_bus_number = 0\n    for number in numbers:\n        if numbers[number] >= 2 and number > max_bus_number:\n            max_bus_number = number\n    return max_bus_number\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    numbers = find_bus_numbers(m)\n    max_bus_number = find_max_bus_number(numbers)\n    if max_bus_number == 0:\n        print(\"none\")\n    else:\n        print(max_bus_number)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint(\"none\")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint(\"none\")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n    cubes = find_cubes(m)\n    numbers = {}\n    for c1 in cubes:\n        for c2 in cubes:\n            if c1 + c2 <= m:\n                if c1 + c2 in numbers:\n                    numbers[c1 + c2] += 1\n                else:\n                    numbers[c1 + c2] = 1\n    return numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint(\"none\")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint(\"none\")\n\telse:\n\t\tprint(max_bus_number)\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef is_cube(n):\n        return round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n        cubes = []\n        for i in range(1, max_n+1):\n                if is_cube(i):\n                        cubes.append(i)\n        return cubes\n\ndef find_bus_numbers(m):\n        numbers = {}\n        for c1 in cubes:\n                for c2 in cubes:\n                        if c1 + c2 <= m:\n                                if c1 + c2 in numbers:\n                                        numbers[c1 + c2] += 1\n                                else:\n                                        numbers[c1 + c2] = 1\n        return numbers\n\ndef find_max_bus_number(numbers):\n        max_bus_number = 0\n        for number in numbers:\n                if numbers[number] >= 2 and number > max_bus_number:\n                        max_bus_number = number\n        return max_bus_number\n\ndef main():\n        m = int(sys.stdin.readline().strip())\n        numbers = find_bus_numbers(m)\n        max_bus_number = find_max_bus_number(numbers)\n        if max_bus_number == 0:\n                print(\"none\")\n        else:\n                print(max_bus_number)\n\nif __name__ == \"__main__\":\n        main()\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint(\"none\")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint(\"none\")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n \n\ndef find_cubes(max_n): \n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i): \n\t\t\tcubes.append(i) \n\treturn cubes\n\ndef find_bus_numbers(m): \n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m: \n\t\t\t\tif c1 + c2 in numbers: \n\t\t\t\t\tnumbers[c1 + c2] += 1 \n\t\t\t\telse: \n\t\t\t\t\tnumbers[c1 + c2] = 1 \n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number: \n\t\t\tmax_bus_number = number \n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip()) \n\tnumbers = find_bus_numbers(m) \n\tmax_bus_number = find_max_bus_number(numbers) \n\tif max_bus_number == 0: \n\t\tprint(\"none\") \n\telse: \n\t\tprint(max_bus_number) \n\nif __name__ == \"__main__\":\n\tmain() \n"
    }
  ],
  "created": 1650122646,
  "object": "edit"
}
2022-04-16 15:24:27.413091 fix syntax errors 9 ['\n\nimport sys\n\ndef is_cube(n):\n    return round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n    cubes = []\n    for i in range(1, max_n+1):\n        if is_cube(i):\n            cubes.append(i)\n    return cubes\n\ndef find_bus_numbers(m):\n    cubes = find_cubes(m)\n    numbers = {}\n    for c1 in cubes:\n        for c2 in cubes:\n            if c1 + c2 <= m:\n                if c1 + c2 in numbers:\n                    numbers[c1 + c2] += 1\n                else:\n                    numbers[c1 + c2] = 1\n    return numbers\n\ndef find_max_bus_number(numbers):\n    max_bus_number = 0\n    for number in numbers:\n        if numbers[number] >= 2 and number > max_bus_number:\n            max_bus_number = number\n    return max_bus_number\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    numbers = find_bus_numbers(m)\n    max_bus_number = find_max_bus_number(numbers)\n    if max_bus_number == 0:\n        print("none")\n    else:\n        print(max_bus_number)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint("none")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == "__main__":\n\tmain()\n', '\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint("none")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == "__main__":\n\tmain()\n', '\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n    cubes = find_cubes(m)\n    numbers = {}\n    for c1 in cubes:\n        for c2 in cubes:\n            if c1 + c2 <= m:\n                if c1 + c2 in numbers:\n                    numbers[c1 + c2] += 1\n                else:\n                    numbers[c1 + c2] = 1\n    return numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint("none")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == "__main__":\n\tmain()\n', '\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint("none")\n\telse:\n\t\tprint(max_bus_number)\n', '\nimport sys\n\ndef is_cube(n):\n        return round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n        cubes = []\n        for i in range(1, max_n+1):\n                if is_cube(i):\n                        cubes.append(i)\n        return cubes\n\ndef find_bus_numbers(m):\n        numbers = {}\n        for c1 in cubes:\n                for c2 in cubes:\n                        if c1 + c2 <= m:\n                                if c1 + c2 in numbers:\n                                        numbers[c1 + c2] += 1\n                                else:\n                                        numbers[c1 + c2] = 1\n        return numbers\n\ndef find_max_bus_number(numbers):\n        max_bus_number = 0\n        for number in numbers:\n                if numbers[number] >= 2 and number > max_bus_number:\n                        max_bus_number = number\n        return max_bus_number\n\ndef main():\n        m = int(sys.stdin.readline().strip())\n        numbers = find_bus_numbers(m)\n        max_bus_number = find_max_bus_number(numbers)\n        if max_bus_number == 0:\n                print("none")\n        else:\n                print(max_bus_number)\n\nif __name__ == "__main__":\n        main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint("none")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == "__main__":\n\tmain()\n', '\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint("none")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == "__main__":\n\tmain()\n', '\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1./3.)) ** 3 == n \n\ndef find_cubes(max_n): \n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i): \n\t\t\tcubes.append(i) \n\treturn cubes\n\ndef find_bus_numbers(m): \n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m: \n\t\t\t\tif c1 + c2 in numbers: \n\t\t\t\t\tnumbers[c1 + c2] += 1 \n\t\t\t\telse: \n\t\t\t\t\tnumbers[c1 + c2] = 1 \n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number: \n\t\t\tmax_bus_number = number \n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip()) \n\tnumbers = find_bus_numbers(m) \n\tmax_bus_number = find_max_bus_number(numbers) \n\tif max_bus_number == 0: \n\t\tprint("none") \n\telse: \n\t\tprint(max_bus_number) \n\nif __name__ == "__main__":\n\tmain() \n']
2022-04-16 15:24:27.413200 size on output set 7
2022-04-16 15:24:27.413211 num operations 1
2022-04-16 15:24:27.413216 size on input set 1
2022-04-16 15:24:35.571406 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(a, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'None'\n\nprint(main)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n'''\n    This is a demo program showing the use of the RobotDrive class,\n    specifically it contains the code necessary to operate a robot with\n    a single joystick\n'''\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(a, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            print(x)\n        x += 1\n    return 'none'\n\nprint(main())\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x + 1)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    for x in range(1, m):\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) == x:\n            return x - 1\n    return 'none'\n\nprint(main())\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n"
    }
  ],
  "created": 1650122667,
  "object": "edit"
}
2022-04-16 15:24:35.571640 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(a, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'None'\n\nprint(main)\n", "#!/usr/bin/env python3\n'''\n    This is a demo program showing the use of the RobotDrive class,\n    specifically it contains the code necessary to operate a robot with\n    a single joystick\n'''\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n", "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(a, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n", "import sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            print(x)\n        x += 1\n    return 'none'\n\nprint(main())\n", "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n", "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x + 1)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n", "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    for x in range(1, m):\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) == x:\n            return x - 1\n    return 'none'\n\nprint(main())\n", "import sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n"]
2022-04-16 15:24:35.571684 size on output set 8
