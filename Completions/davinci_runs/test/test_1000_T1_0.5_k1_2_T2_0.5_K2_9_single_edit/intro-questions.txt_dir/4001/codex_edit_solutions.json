["\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers and count\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers with odd count\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0])\n", "\nimport math\nN, X = map(int, input().split())\nx = list(map(int, input().split()))\nx.sort()\nprint(int(math.ceil((X - sum(x)) / min(x))))\n", "\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2 != 0:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n# print numbers\nprint(X[0], X[1])\n", "\n\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if i != N - 1 and divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n\n\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\n\nN = int(input())\ndivisors = [int(i) for i in input().split()]\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "\n\n\n# N = int(input())\n# divisors = list(map(int, input().split()))\n# x = 1\n# y = 1\n# for i in range(N):\n#     if divisors[i] == 1:\n#         continue\n#     if divisors[i] == divisors[i + 1]:\n#         x *= divisors[i]\n#         i += 1\n#     else:\n#         y *= divisors[i]\n# print(x, y)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = y = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "N = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "\n# read N\n\n# read list\n\nN = int(input())\nL = list(map(int, input().split()))\n\n# create dictionary for numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\n\nprint(X[0], X[1])\n", "\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers and calculate frequency\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers with odd frequency\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\nN = int(input())\ndivisors = list(map(int, input().split())\nx, y = 1, 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "\n\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if i < N - 1 and divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "\n\n", "\n\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(x, y)\n"]