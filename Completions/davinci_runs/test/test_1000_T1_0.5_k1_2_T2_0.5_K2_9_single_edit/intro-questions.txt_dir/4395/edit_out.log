2022-04-16 07:01:20.014761 num operations 1
2022-04-16 07:01:20.014780 size on input set 1
2022-04-16 07:01:32.986584 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green. We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# If we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n# If we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# If we have \"RRRR\", we should change it to \"GRGR\", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {'R': -1, 'G': -1, 'B': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = 'R' if c != 'R' else 'G' if last['G'] < last['B'] else 'B' # furthest color\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = 'G' if c != 'G' else 'R' if last['R'] < last['B'] else 'B' # furthest color\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = 'B' if c != 'B' else 'R' if last['R'] < last['G'] else 'G'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(''.join(ans[:res]))\n\nmain()\n"
    }
  ],
  "created": 1650092480,
  "object": "edit"
}
2022-04-16 07:01:32.987037 fix syntax errors 9 ['\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have "RRRR", we should change it to "GRGR", since the color furthest away is green. We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# If we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n# If we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n# If we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurrence of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\'\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\'\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n', '\n\n# SOLUTION\n# We know that there are three colors, so we can just try all three colors and see which one gives us the best answer.\n# We can do this by iterating through the string and checking if the current color is the same as the next color.\n# If it is, we need to change it to one of the other colors.\n# The only question is which color should we change it to.\n# We can use the color that is the furthest away.\n# For example, if we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# If we have "RRRR", we should change it to "GRGR", since the color furthest away is green.\n# We can do this by keeping track of the index of the last occurance of each color.\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    s = input()\n    last = {\'R\': -1, \'G\': -1, \'B\': -1}\n    ans = [None] * n\n    res = n\n    for i in range(n):\n        c = s[i]\n        a = \'R\' if c != \'R\' else \'G\' if last[\'G\'] < last[\'B\'] else \'B\' # furthest color\n        if last[a] < i - 1:\n            last[a] = i\n            ans[i] = a\n        else:\n            a = \'G\' if c != \'G\' else \'R\' if last[\'R\'] < last[\'B\'] else \'B\' # furthest color\n            if last[a] < i - 1:\n                last[a] = i\n                ans[i] = a\n            else:\n                a = \'B\' if c != \'B\' else \'R\' if last[\'R\'] < last[\'G\'] else \'G\'\n                if last[a] < i - 1:\n                    last[a] = i\n                    ans[i] = a\n                else:\n                    res = min(res, i + 1)\n                    break\n    if res == n:\n        print(0)\n        print(s)\n    else:\n        print(res)\n        print(\'\'.join(ans[:res]))\n\nmain()\n']
2022-04-16 07:01:32.987207 size on output set 6
2022-04-16 07:01:32.987218 num operations 1
2022-04-16 07:01:32.987223 size on input set 1
2022-04-16 07:01:42.583258 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ns = input()\n    \nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\n\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 2] + 'G' + t[n - 1]\n\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\n\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 2] + 'G' + t[n - 2:]\n\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G' + t[n - 1:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\n\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 2] + 'G' + t[n - 1:]\n\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G' + t[n:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 2] + 'G' + t[n - 1:]\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G' + t[n:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\n\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 2] + 'G' + t[n - 1]\n\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\n"
    },
    {
      "index": 5,
      "text": "\nprint(\"Hello World\")\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\n\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G' + t[n - 1:]\n\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G' + t[n - 1:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\n\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 2] + 'G' + t[n - 1]\n\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\n"
    },
    {
      "index": 8,
      "text": "\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = \"RGB\" * (n // 3)\n\nelif n % 3 == 1:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 2] + 'G' + t[n - 1]\n\nelse:\n    t = \"RGB\" * (n // 3)\n    t = t[:n - 1] + 'G'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n"
    }
  ],
  "created": 1650092493,
  "object": "edit"
}
2022-04-16 07:01:42.583543 fix syntax errors 9 ['\n\nn = int(input())\ns = input()\n    \nif n % 3 == 0:\n    t = "RGB" * (n // 3)\n\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 2] + \'G\' + t[n - 1]\n\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n', '\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = "RGB" * (n // 3)\n\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 2] + \'G\' + t[n - 2:]\n\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\' + t[n - 1:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n', '\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = "RGB" * (n // 3)\n\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 2] + \'G\' + t[n - 1:]\n\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\' + t[n:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n', '\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = "RGB" * (n // 3)\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 2] + \'G\' + t[n - 1:]\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\' + t[n:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n', '\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = "RGB" * (n // 3)\n\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 2] + \'G\' + t[n - 1]\n\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\n', '\nprint("Hello World")\n', '\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = "RGB" * (n // 3)\n\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\' + t[n - 1:]\n\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\' + t[n - 1:]\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n', '\n\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = "RGB" * (n // 3)\n\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 2] + \'G\' + t[n - 1]\n\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\n', '\nn = int(input())\ns = input()\n\nif n % 3 == 0:\n    t = "RGB" * (n // 3)\n\nelif n % 3 == 1:\n    t = "RGB" * (n // 3)\n    t = t[:n - 2] + \'G\' + t[n - 1]\n\nelse:\n    t = "RGB" * (n // 3)\n    t = t[:n - 1] + \'G\'\n\nr = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        r += 1\n\nprint(r)\nprint(t)\n']
2022-04-16 07:01:42.583589 size on output set 8
