2022-04-16 07:54:36.479045 num operations 1
2022-04-16 07:54:36.479066 size on input set 1
2022-04-16 07:54:54.339739 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split()) - 1\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][1]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]  # (shovel_cost, shovel_amount)\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))  # (x, y)\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    shovel_amount, shovel_cost = 0, 0\n    while shovel_amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    heappush(heap, (x, y)) # x is the number of shovels to be bought, y is the discount\n\nshovels.sort(reverse=True)\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap) # x is the number of shovels to be bought, y is the discount\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, -y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost + y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = []\nfor i in range(n):\n    heappush(shovels, (a[i], i))\nheap_of_transporters = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap_of_transporters, (x, y))\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u043f\u0430\u043d\u043d\u044b\u0445 \u043b\u043e\u043f\u0430\u0442\u0430\u043c\u0438 \u044f\u043c\n    while amount < k and shovels:\n        shovel_cost = heappop(shovels)[0]\n        amount += 1\n        cost += shovel_cost\n    if not heap_of_transporters:\n        ans += cost\n        break\n    x, y = heappop(heap_of_transporters)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[0][0]\n        k -= x\n\nprint(ans)\n"
    },
    {
      "index": 8,
      "text": "\n"
    }
  ],
  "created": 1650095676,
  "object": "edit"
}
2022-04-16 07:54:54.340050 fix syntax errors 9 ['\n\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split()) - 1\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][1]\n        k -= x\n\nprint(ans)\n', '\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n', '\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]  # (shovel_cost, shovel_amount)\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))  # (x, y)\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    shovel_amount, shovel_cost = 0, 0\n    while shovel_amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n', '\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n', '\n\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    heappush(heap, (x, y)) # x is the number of shovels to be bought, y is the discount\n\nshovels.sort(reverse=True)\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap) # x is the number of shovels to be bought, y is the discount\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n', '\n\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, -y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost + y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n', '\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)\n', '\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = []\nfor i in range(n):\n    heappush(shovels, (a[i], i))\nheap_of_transporters = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap_of_transporters, (x, y))\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0  # количество и стоимость копанных лопатами ям\n    while amount < k and shovels:\n        shovel_cost = heappop(shovels)[0]\n        amount += 1\n        cost += shovel_cost\n    if not heap_of_transporters:\n        ans += cost\n        break\n    x, y = heappop(heap_of_transporters)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[0][0]\n        k -= x\n\nprint(ans)\n', '\n']
2022-04-16 07:54:54.340219 size on output set 8
2022-04-16 07:54:54.340230 num operations 1
2022-04-16 07:54:54.340235 size on input set 1
2022-04-16 07:55:07.222635 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    cnt = 0\n    while True:\n        if arr[0][0] == arr[0][1] == arr[1][0] == arr[1][1]:\n            break\n        arr.sort()\n        cnt += 1\n        if arr[0][0] < arr[1][0]:\n            arr[0][0] += 1\n            arr[0][1] += 1\n        else:\n            arr[1][0] += 1\n            arr[1][1] += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in sorted(offers):\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n    import sys\n    sys.setrecursionlimit(10 ** 7)\n    \ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[::-1]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[-offer[0] + i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[-k+i:]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer_index, offer in enumerate(offers):\n        for i in range(offer):\n            index = offer_index - i\n            b[index] = min(b[index], a[offer_index])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650095694,
  "object": "edit"
}
2022-04-16 07:55:07.222996 fix syntax errors 9 ['\n\ndef main():\n    n = int(input())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    cnt = 0\n    while True:\n        if arr[0][0] == arr[0][1] == arr[1][0] == arr[1][1]:\n            break\n        arr.sort()\n        cnt += 1\n        if arr[0][0] < arr[1][0]:\n            arr[0][0] += 1\n            arr[0][1] += 1\n        else:\n            arr[1][0] += 1\n            arr[1][1] += 1\n    print(cnt)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in sorted(offers):\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\n    import sys\n    sys.setrecursionlimit(10 ** 7)\n    \ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[::-1]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[-offer[0] + i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[-k+i:]))\n    \n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer_index, offer in enumerate(offers):\n        for i in range(offer):\n            index = offer_index - i\n            b[index] = min(b[index], a[offer_index])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 07:55:07.223159 size on output set 6
