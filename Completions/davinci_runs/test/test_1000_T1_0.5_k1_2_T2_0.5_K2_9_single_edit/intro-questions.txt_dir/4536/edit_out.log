2022-04-16 08:07:08.607609 num operations 1
2022-04-16 08:07:08.607626 size on input set 1
2022-04-16 08:07:16.512625 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits): # USE THIS\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "#\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 2017/4/17\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650096428,
  "object": "edit"
}
2022-04-16 08:07:16.512928 fix syntax errors 9 ['\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n', '\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n', '\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n', '\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n', '\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits): # USE THIS\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n', '#\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n', '\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# 2017/4/17\n\nclass Solution(object):\n    def plusOne(self, digits):\n        """\n        :type digits: List[int]\n        :rtype: List[int]\n        """\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 08:07:16.513099 size on output set 6
2022-04-16 08:07:16.513112 num operations 1
2022-04-16 08:07:16.513117 size on input set 1
2022-04-16 08:07:23.967422 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 1,
      "text": "\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus_one = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus_one == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus_one = 0\n        else:\n            break\n    if plus_one == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 3,
      "text": "\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 4,
      "text": "\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 5,
      "text": "\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 6,
      "text": "\n# add one to a given number\n\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 7,
      "text": "\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    },
    {
      "index": 8,
      "text": "\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n"
    }
  ],
  "created": 1650096436,
  "object": "edit"
}
2022-04-16 08:07:23.967679 fix syntax errors 9 ['\n\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n', '\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus_one = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus_one == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus_one = 0\n        else:\n            break\n    if plus_one == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n', '\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n', '\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n', '\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n', '\n# add one to a given number\n\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\nprint(plusOne([9, 9, 9]))\n', '\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n', '\ndef plusOne(digits):\n    """\n    :type digits: List[int]\n    :rtype: List[int]\n    """\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n']
2022-04-16 08:07:23.967796 size on output set 4
