["\n\nM, N, C = input().split() # read M, N and C\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)] # read frame 1\ninput()\nframe2 = [input() for i in range(M)] # read frame 2\n\ndef findFalcon(frame, C): # find the position of the falcon\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\nimport sys\n\ndef main():\n    m, n, c = map(int, input().split())\n    frame1 = [input() for _ in range(m)]\n    frame2 = [input() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    while True:\n        # read input\n        n, m, char = sys.stdin.readline().split()\n        n = int(n)\n        m = int(m)\n        char = char[1]\n        image = ['']*n\n        for i in range(n):\n            image[i] = sys.stdin.readline().rstrip()\n        sys.stdin.readline() # empty line\n        for i in range(n):\n            image[i] += sys.stdin.readline().rstrip()\n\n        # find the falcon\n        falcon = []\n        for i in range(n):\n            for j in range(m*2):\n                if image[i][j] == char:\n                    falcon.append((i,j))\n\n        right = falcon[0]\n        for i in range(1, len(falcon)):\n            if falcon[i][1] < left[1]:\n                left = falcon[i]\n            if falcon[i][1] > right[1]:\n                right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().rstrip() for _ in range(m)]\n    input()\n    frame2 = [input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input().strip() for i in range(M)]\ninput()\nframe2 = [input().strip() for i in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + [' '*N]*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "#!/usr/bin/env python3\n\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split(\" \")\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(N):\n            second.append(sys.stdin.readline())\n        for i in range(N):\n            for j in range(M):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    a, b = map(int, input().split())\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame\n    # falcon1 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame1[i][j] == C:\n    #             falcon1.append((i, j))\n    # print(falcon1)\n\n    # find the falcon in the second frame\n    # falcon2 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame2[i][j] == C:\n    #             falcon2.append((i, j))\n    # print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    # print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    # print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    # print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    # print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    # print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    # print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    # print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:3*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][dy:] + ' '*dy for i in range(dx, M)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if shiftedFrame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M): first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M): second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N): sys.stdout.write(first[i][j] if second[i][j] == C else second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:3*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:3*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline().strip())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline().strip())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    m, n, c = raw_input().split()\n    m, n = int(m), int(n)\n    frame1 = [raw_input().rstrip() for _ in range(m)]\n    raw_input()\n    frame2 = [raw_input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = [' ']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = [' ']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:3*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    M, N, C = map(int, input().split())\n    M = int(M)\n    N = int(N)\n    first = []\n    second = []\n    for i in range(M):\n        first.append(list(map(str, input())))\n    for i in range(M):\n        second.append(list(map(str, input())))\n    for i in range(M):\n        for j in range(N):\n            if first[i][j] != str(C):\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != str(C):\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = str(C)\n    for i in range(M):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split() \n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline()) \n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline()) \n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j]) \n                else:\n                    sys.stdout.write(second[i][j]) \n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['' for i in range(n)]\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline()\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    shift = (bottom[0] - top[0])//2\n\n    result = ['' for i in range(n)]\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n    first = []\n    second = []\n    for i in range(M):\n        first.append(list(input()))\n    for i in range(M):\n        second.append(list(input()))\n    for i in range(M):\n        for j in range(N):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = C\n    for i in range(M):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for _ in range(M)]\ninput()\nframe2 = [input() for _ in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = set()\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.add((i,j))\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = m\n    right = 0\n    for i in falcon:\n        if i[1] < left:\n            left = i[1]\n        if i[1] > right:\n            right = i[1]\n\n    # calculate the center of the falcon\n    center = (0, left + (right - left)//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = n\n    bottom = 0\n    for i in falcon:\n        if i[0] < top:\n            top = i[0]\n        if i[0] > bottom:\n            bottom = i[0]\n\n    # calculate the vertical shift\n    shift = (bottom - top)//2\n\n    # create the result image\n    result = ['']*(n+shift)\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in falcon:\n        result[i[0]+shift][i[1]-m] = char\n\n    # shift the falcon horizontally\n    for i in falcon:\n        result[i[0]+shift][i[1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    for i in range(len(falcon)):\n        falcon[i] = (falcon[i][0] - shift, falcon[i][1])\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        falcon[i] = (falcon[i][0], falcon[i][1] - center[1])\n\n    # create the result image\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon vertically\n    #for i in range(len(falcon)):\n    #    result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + [' '*N]*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\n\ndef main():\n    try:\n        m, n, c = input().split()\n        m, n = int(m), int(n)\n        frame1 = [input().rstrip() for _ in range(m)]\n        input()\n        frame2 = [input().rstrip() for _ in range(m)]\n\n        frame3 = []\n        for i in range(m):\n            frame3.append(\"\")\n            for j in range(n):\n                if frame1[i][j] == frame2[i][j]:\n                    frame3[i] += frame2[i][j]\n                elif frame1[i][j] == c:\n                    frame3[i] += frame1[i][j]\n                else:\n                    frame3[i] += frame2[i][j]\n\n        for line in frame3:\n            print(line)\n        print()\n    except EOFError:\n        pass\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = C\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame2 = []\n        for i in range(m):\n        \n        sys.stdin.readline()\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    print(frame1)\n    print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n    print(falcon1)\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n    print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    first_frame = lines[1:M + 1]\n    second_frame = lines[M + 1:3 * M + 1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n    for point in falcon2:\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:3*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    m, n, c = raw_input().split()\n    m, n, c = int(m), int(n), str(c)\n    frame1 = [raw_input().rstrip() for _ in range(m)]\n    raw_input()\n    frame2 = [raw_input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame\n    # falcon1 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame1[i][j] == C:\n    #             falcon1.append((i, j))\n    # print(falcon1)\n\n    # find the falcon in the second frame\n    # falcon2 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame2[i][j] == C:\n    #             falcon2.append((i, j))\n    # print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    while True:\n        try:\n            m, n, c = input().split()\n            m, n = int(m), int(n)\n            frame1 = [input().rstrip() for _ in range(m)]\n            input()\n            frame2 = [input().rstrip() for _ in range(m)]\n\n            frame3 = []\n            for i in range(m):\n                frame3.append(\"\")\n                for j in range(n):\n                    if frame1[i][j] == frame2[i][j]:\n                        frame3[i] += frame2[i][j]\n                    elif frame1[i][j] == c:\n                        frame3[i] += frame1[i][j]\n                    else:\n                        frame3[i] += frame2[i][j]\n\n            for line in frame3:\n                print(line)\n            print()\n        except EOFError:\n            break\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    M, N, C = input().split() # input three numbers\n    M = int(M) # first number\n    N = int(N) # second number\n    first = [] # first list\n    second = [] # second list\n    for i in range(M): # loop for first list\n        first.append(list(input())) # append the first list\n    for i in range(M): # loop for second list\n        second.append(list(input())) # append the second list\n    for i in range(M): # loop for the first list\n        for j in range(N): # loop for the first list\n            if first[i][j] != C: # check if the first list is not equal to C\n                first[i][j] = '.' # replace the first list with '.'\n            else: # if the first list is equal to C\n                first[i][j] = 'X' # replace the first list with 'X'\n            if second[i][j] != C: # check if the second list is not equal to C\n                second[i][j] = '.' # replace the second list with '.'\n            else: # if the second list is equal to C\n                second[i][j] = 'X' # replace the second list with 'X'\n    for i in range(M): # loop for the second list\n        for j in range(N): # loop for the second list\n            if second[i][j] == 'X' and first[i][j] != 'X': # check if the second list is equal to 'X' and the first list is not equal to 'X'\n                second[i][j] = '^' # replace the second list with '^'\n    for i in range(M): # loop for the second list\n        for j in range(N): # loop for the second list\n            if second[i][j] == '^': # check if the second list is equal to '^'\n                second[i][j] = '.' # replace the second list with '.'\n            if second[i][j] == 'X': # check if the second list is equal to 'X'\n                second[i][j] = C # replace the second list with C\n    for i in range(M): # loop for the second list\n        print(''.join(second[i])) # print the second list\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n    first = []\n    second = []\n    for i in range(M):\n        first.append(list(input()))\n    for i in range(M):\n        second.append(list(input()))\n        for i in range(M):\n            for j in range(N):\n                if first[i][j] != C:\n                    first[i][j] = '.'\n                else:\n                    first[i][j] = 'X'\n                if second[i][j] != C:\n                    second[i][j] = '.'\n                else:\n                    second[i][j] = 'X'\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == 'X' and first[i][j] != 'X':\n                    second[i][j] = '^'\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == '^':\n                    second[i][j] = '.'\n                if second[i][j] == 'X':\n                    second[i][j] = C\n        for i in range(M):\n            print(''.join(second[i]))\n        print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:3*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    while True:\n        m, n, c = input().split()\n        m, n = int(m), int(n)\n        if m == 0 and n == 0 and c == '0':\n            break\n        frame1 = [input().rstrip() for _ in range(m)]\n        input()\n        frame2 = [input().rstrip() for _ in range(m)]\n\n        frame3 = []\n        for i in range(m):\n            frame3.append(\"\")\n            for j in range(n):\n                if frame1[i][j] == frame2[i][j]:\n                    frame3[i] += frame2[i][j]\n                elif frame1[i][j] == c:\n                    frame3[i] += frame1[i][j]\n                else:\n                    frame3[i] += frame2[i][j]\n\n        for line in frame3:\n            print(line)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\nfirst = []\nsecond = []\nfor i in range(M):\n    first.append(list(input()))\nfor i in range(M):\n    second.append(list(input()))\nfor i in range(M):\n    for j in range(N):\n        if first[i][j] != C:\n            first[i][j] = '.'\n        else:\n            first[i][j] = 'X'\n        if second[i][j] != C:\n            second[i][j] = '.'\n        else:\n            second[i][j] = 'X'\nfor i in range(M):\n    for j in range(N):\n        if second[i][j] == 'X' and first[i][j] != 'X':\n            second[i][j] = '^'\nfor i in range(M):\n    for j in range(N):\n        if second[i][j] == '^':\n            second[i][j] = '.'\n        if second[i][j] == 'X':\n            second[i][j] = C\nfor i in range(M):\n    print(''.join(second[i]))\nprint()\n", "\n\ndef main():\n    M, N, C = input().split() # get the input\n    M = int(M)\n    N = int(N)\n\n    frame1 = [] # initialize the frame1\n    frame2 = [] # initialize the frame2\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame\n    #falcon1 = []\n    #for i in range(M):\n    #    for j in range(N):\n    #        if frame1[i][j] == C:\n    #            falcon1.append((i, j))\n    #print(falcon1)\n\n    # find the falcon in the second frame\n    #falcon2 = []\n    #for i in range(M):\n    #    for j in range(N):\n    #        if frame2[i][j] == C:\n    #            falcon2.append((i, j))\n    #print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][dy:] + ' '*dy for i in range(dx, M)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().rstrip() for _ in range(m)]\n    input()\n    frame2 = [input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n*2):\n        image[i] = sys.stdin.readline().rstrip()[1:]\n    #sys.stdin.readline() # empty line\n    #for i in range(n):\n    #    image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n*2):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    #left = falcon[0]\n    #right = falcon[0]\n    #for i in range(1, len(falcon)):\n    #    if falcon[i][1] < left[1]:\n    #        left = falcon[i]\n    #    if falcon[i][1] > right[1]:\n    #        right = falcon[i]\n\n    # calculate the center of the falcon\n    #center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    #top = falcon[0]\n    #bottom = falcon[0]\n    #for i in range(1, len(falcon)):\n    #    if falcon[i][0] < top[0]:\n    #        top = falcon[i]\n    #    if falcon[i][0] > bottom[0]:\n    #        bottom = falcon[i]\n\n    # calculate the vertical shift\n    #shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n*2):\n        result[i] = image[i][m:]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = [\"\"]*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = [\"\"]*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    C = str(C)\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == str(C):\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == str(C):\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = str(C)\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()  # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n    M = int(M)\n    N = int(N)\n    first = []  # \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    second = []  # \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    for i in range(M):\n        first.append(list(input()))  # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n    for i in range(M):\n        second.append(list(input()))  # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n    for i in range(M):\n        for j in range(N):\n            if first[i][j] != C:  # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u0446\u0432\u0435\u0442\u0443\n                first[i][j] = '.'  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u0442\u043e\u0447\u043a\u0443\n            else:\n                first[i][j] = 'X'  # \u0438\u043d\u0430\u0447\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 X\n            if second[i][j] != C:  # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u0446\u0432\u0435\u0442\u0443\n                second[i][j] = '.'  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u0442\u043e\u0447\u043a\u0443\n            else:\n                second[i][j] = 'X'  # \u0438\u043d\u0430\u0447\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 X\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == 'X' and first[i][j] != 'X':  # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u0435\u043d X, \u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043d\u0435\u0442\n                second[i][j] = '^'  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044d\u0442\u043e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430 \u043a\u0430\u0440\u0435\u0442\u043a\u0443\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == '^':  # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u0435\u043d \u043a\u0430\u0440\u0435\u0442\u043a\u0435\n                second[i][j] = '.'  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u0442\u043e\u0447\u043a\u0443\n            if second[i][j] == 'X':  # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u0435\u043d X\n                second[i][j] = C  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u0446\u0432\u0435\u0442\n    for i in range(M):\n        print(''.join(second[i]))  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n    print()  # \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c \u043a\u0443\u0440\u0441\u043e\u0440 \u043d\u0430 \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != c:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = c\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input \n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][dy:] + ' '*dy for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if shiftedFrame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\n\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"]