2022-04-16 07:18:44.092079 num operations 1
2022-04-16 07:18:44.092098 size on input set 1
2022-04-16 07:18:59.493077 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n"
    },
    {
      "index": 1,
      "text": "\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n"
    },
    {
      "index": 2,
      "text": "\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for _ in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n"
    },
    {
      "index": 3,
      "text": "\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n\n    while l < r:\n        mid = (l + r) // 2\n        if pack(a[:mid], k, m) < mid:\n            l = mid + 1\n        else:\n            r = mid\n    print(l)\n"
    },
    {
      "index": 4,
      "text": "\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n"
    },
    {
      "index": 5,
      "text": "\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef pack(a, k):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n"
    },
    {
      "index": 6,
      "text": "\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n"
    },
    {
      "index": 7,
      "text": "\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef pack(a, m, k):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k and res < m:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m - res\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n"
    },
    {
      "index": 8,
      "text": "\n# @Author: aaronmishkin\n# @Email:  amishkin@cs.ubc.ca\n\n# MIT License\n# Copyright (c) 2017 Aaron Mishkin\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nimport math\n\n# This is a binary search solution to the problem.\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m, l):\n    res = 0\n    j = 0\n    for i in range(l):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k and i < l:\n            i += 1\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m - (l - i)\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m, mid) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n"
    }
  ],
  "created": 1650093524,
  "object": "edit"
}
2022-04-16 07:18:59.493381 fix syntax errors 9 ['#!/usr/bin/env python3\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n', '\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n', '\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for _ in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n', "\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n\n    while l < r:\n        mid = (l + r) // 2\n        if pack(a[:mid], k, m) < mid:\n            l = mid + 1\n        else:\n            r = mid\n    print(l)\n", '\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n', '\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef pack(a, k):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n', '\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n', '\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef pack(a, m, k):\n    res = 0\n    j = 0\n    for i in range(m):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k and res < m:\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m - res\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n', '\n# @Author: aaronmishkin\n# @Email:  amishkin@cs.ubc.ca\n\n# MIT License\n# Copyright (c) 2017 Aaron Mishkin\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the "Software"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nimport math\n\n# This is a binary search solution to the problem.\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef pack(a, k, m, l):\n    res = 0\n    j = 0\n    for i in range(l):\n        if j >= len(a):\n            break\n        while j < len(a) and a[j] <= k and i < l:\n            i += 1\n            k -= a[j]\n            j += 1\n            res += 1\n        k = m - (l - i)\n    return res\n\nl = 0\nr = n\nwhile l < r:\n    mid = (l + r) // 2\n    if pack(a[:mid], k, m, mid) < mid:\n        l = mid + 1\n    else:\n        r = mid\nprint(l)\n']
2022-04-16 07:18:59.493532 size on output set 8
2022-04-16 07:18:59.493547 num operations 1
2022-04-16 07:18:59.493553 size on input set 1
2022-04-16 07:19:10.034975 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 2,
      "text": "# coding=utf-8\n\n\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 3,
      "text": "\n\n\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse = True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 4,
      "text": "\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 5,
      "text": "\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i + 1\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 6,
      "text": "\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\uff0c\u6240\u4ee5\u7b54\u6848\u662f\u4ece\u540e\u5f80\u524d\u6570i\u4e2a\n    return n - i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    },
    {
      "index": 8,
      "text": "\ndef solve(n, m, k, a):\n    # \u5148\u6309\u7167\u7bb1\u5b50\u91cd\u91cf\u6392\u5e8f\n    a.sort(reverse=True)\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u653e\u4e0d\u4e0b\u7684\u7bb1\u5b50\u7684\u4f4d\u7f6e\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # \u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u7bb1\u5b50\u90fd\u4e0d\u80fd\u653e\u4e0b\n    # \u6240\u4ee5\u4ece\u524d\u5f80\u540e\u6392\u5e8f\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7bb1\u5b50\u653e\u4e0d\u4e0b\u7684\u4f4d\u7f6e\u5c31\u662f\u7b54\u6848\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"
    }
  ],
  "created": 1650093539,
  "object": "edit"
}
2022-04-16 07:19:10.035326 fix syntax errors 9 ["\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse=True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse=True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "# coding=utf-8\n\n\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse=True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "\n\n\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse = True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse=True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse=True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i + 1\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse=True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下，所以答案是从后往前数i个\n    return n - i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "\ndef solve(n, m, k, a):\n    # 先按照箱子排序\n    a.sort(reverse=True)\n    # 找到第一个箱子放不下的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n", "\ndef solve(n, m, k, a):\n    # 先按照箱子重量排序\n    a.sort(reverse=True)\n    # 找到第一个放不下的箱子的位置\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    if i == n:\n        return n\n    # 找到第一个箱子放不下的位置，这个位置以后的箱子都不能放下\n    # 所以从前往后排序，找到第一个箱子放不下的位置就是答案\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > k:\n            break\n        i += 1\n    return i\n\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, m, k, a))\n"]
2022-04-16 07:19:10.035421 size on output set 6
