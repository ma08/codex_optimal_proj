["\n\ndef hammingWeight(n):\n    n = n & 0xffffffff\n    count = 0\n    while n > 0:\n        n &= n - 1\n        count += 1\n    return count\n\n\ndef hammingWeight_bit_operation(n):\n    n = n & 0xffffffff\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count\n\n\ndef hammingWeight_bin(n):\n    return bin(n & 0xffffffff).count(\"1\")\n\n\nif __name__ == '__main__':\n    print(hammingWeight(11))\n    print(hammingWeight_bit_operation(11))\n    print(hammingWeight_bin(11))\n", "\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n\n\n\n        return bin(n).count('1')\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n", "\n\nclass Solution:\n    def isPowerOfFour(self, num: int) -> bool:\n        if num == 1:\n            return True\n        elif num < 4:\n            return False\n        else:\n            return (num % 4 == 0) and self.isPowerOfFour(num / 4)\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff # convert to 32-bit int\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff # convert to 32-bit int\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count('1')\n", "\n\nclass Solution:\n\n\ns = Solution()\nprint(s.hammingWeight(11))\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n", "\n\n"]