2022-04-16 10:39:03.484650 num operations 1
2022-04-16 10:39:03.484671 size on input set 1
2022-04-16 10:39:15.970182 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    print(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = [sys.stdin.readline().strip() for i in range(R)]\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2 and word not in words:\n            words.append(word)\n    for j in range(1, C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2 and word not in words:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    r = int(line[0])\n    c = int(line[1])\n    crossword = list()\n    for i in range(r):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(r):\n        word = ''\n        for j in range(c):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(r):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = [sys.stdin.readline().strip() for i in range(R)]\n    words = list()\n    for i in range(R):\n        words.extend([word for word in crossword[i].split('#') if len(word) >= 2])\n    for j in range(C):\n        words.extend([word for word in ''.join([crossword[i][j] for i in range(R)]).split('#') if len(word) >= 2])\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650105543,
  "object": "edit"
}
2022-04-16 10:39:15.970544 fix syntax errors 9 ["\nimport sys\n\ndef main():\n    print(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = [sys.stdin.readline().strip() for i in range(R)]\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2 and word not in words:\n            words.append(word)\n    for j in range(1, C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2 and word not in words:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    r = int(line[0])\n    c = int(line[1])\n    crossword = list()\n    for i in range(r):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(r):\n        word = ''\n        for j in range(c):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(r):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = [sys.stdin.readline().strip() for i in range(R)]\n    words = list()\n    for i in range(R):\n        words.extend([word for word in crossword[i].split('#') if len(word) >= 2])\n    for j in range(C):\n        words.extend([word for word in ''.join([crossword[i][j] for i in range(R)]).split('#') if len(word) >= 2])\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:39:15.970627 size on output set 6
2022-04-16 10:39:15.970638 num operations 1
2022-04-16 10:39:15.970647 size on input set 1
2022-04-16 10:39:51.498119 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n"
    },
    {
      "index": 1,
      "text": "\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
      "index": 2,
      "text": "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n"
    },
    {
      "index": 3,
      "text": "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    R, C = map(int, input().split())\n\n    crossword = []\n    for _ in range(R):\n        crossword.append(input())\n\n    lex_min = '~'\n\n    for i in range(R):\n        for j in range(C):\n            if crossword[i][j] == '#':\n                continue\n            if j < C - 1 and crossword[i][j + 1] != '#':\n                lex_min = min(lex_min, crossword[i][j:j + 2])\n            if i < R - 1 and crossword[i + 1][j] != '#':\n                lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\n    print(lex_min)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = 'z'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2], key=str.lower)\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j], key=str.lower)\n\nprint(lex_min)\n"
    },
    {
      "index": 6,
      "text": "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n"
    },
    {
      "index": 7,
      "text": "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'  # lexicographically largest character\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n"
    },
    {
      "index": 8,
      "text": "# https://www.hackerrank.com/challenges/crossword-puzzle/problem\n\n\ndef find_words(board, words):\n    # find all the locations of the first word\n    word = words[0]\n    locations = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == word[0]:\n                locations.append((i, j))\n    # check if the word can be placed in the board\n    for location in locations:\n        if check_word(board, word, location):\n            # if it can, add it to the board\n            add_word(board, word, location)\n            # if this is the last word, return the board\n            if len(words) == 1:\n                return board\n            # otherwise, try to find the next word\n            result = find_words(board, words[1:])\n            if result is not None:\n                return result\n            # if it didn't work, remove the word from the board\n            remove_word(board, word, location)\n    # if none of the locations worked, return None\n    return None\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n"
    }
  ],
  "created": 1650105556,
  "object": "edit"
}
2022-04-16 10:39:51.498437 fix syntax errors 9 ["#!/usr/bin/python3\n\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", '\na, b = map(int, input().split())\nprint(a + b)\n', "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\n\nimport sys\n\ndef main():\n    R, C = map(int, input().split())\n\n    crossword = []\n    for _ in range(R):\n        crossword.append(input())\n\n    lex_min = '~'\n\n    for i in range(R):\n        for j in range(C):\n            if crossword[i][j] == '#':\n                continue\n            if j < C - 1 and crossword[i][j + 1] != '#':\n                lex_min = min(lex_min, crossword[i][j:j + 2])\n            if i < R - 1 and crossword[i + 1][j] != '#':\n                lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\n    print(lex_min)\n\nmain()\n", "\n\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = 'z'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2], key=str.lower)\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j], key=str.lower)\n\nprint(lex_min)\n", "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'  # lexicographically largest character\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "# https://www.hackerrank.com/challenges/crossword-puzzle/problem\n\n\ndef find_words(board, words):\n    # find all the locations of the first word\n    word = words[0]\n    locations = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == word[0]:\n                locations.append((i, j))\n    # check if the word can be placed in the board\n    for location in locations:\n        if check_word(board, word, location):\n            # if it can, add it to the board\n            add_word(board, word, location)\n            # if this is the last word, return the board\n            if len(words) == 1:\n                return board\n            # otherwise, try to find the next word\n            result = find_words(board, words[1:])\n            if result is not None:\n                return result\n            # if it didn't work, remove the word from the board\n            remove_word(board, word, location)\n    # if none of the locations worked, return None\n    return None\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n"]
2022-04-16 10:39:51.498502 size on output set 7
2022-04-16 10:39:51.498513 num operations 1
2022-04-16 10:39:51.498519 size on input set 1
2022-04-16 10:40:05.131468 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] == crossword[r][c + 1]:\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] == crossword[r + 1][c]:\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] == crossword[r][c + 1]:\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] == crossword[r + 1][c]:\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 1,
      "text": "\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n                \nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 2,
      "text": "#!/bin/python3\n\n\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 3,
      "text": "\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 4,
      "text": "\n\nR, C = map(int, input().split()) \ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 5,
      "text": "\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 6,
      "text": "\nR, C = map(int, input().split())\ncrossword = [list(input()) for _ in range(R)]\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] != crossword[r][c + 1]:\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] != crossword[r + 1][c]:\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] != crossword[r][c + 1]:\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] != crossword[r + 1][c]:\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 7,
      "text": "\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    },
    {
      "index": 8,
      "text": "\nR, C = map(int, input().split())\ncrossword = [input() for i in range(R)]\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return ''.join(crossword[r][c:c + 2])\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return ''.join(list(map(lambda x: x[c], crossword[r:r + 2])))\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"
    }
  ],
  "created": 1650105591,
  "object": "edit"
}
2022-04-16 10:40:05.131823 fix syntax errors 9 ['#!/usr/bin/env python3\n\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] == crossword[r][c + 1]:\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] == crossword[r + 1][c]:\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] == crossword[r][c + 1]:\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] == crossword[r + 1][c]:\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', '\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n                \nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', '#!/bin/python3\n\n\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', '\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', '\n\nR, C = map(int, input().split()) \ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', '\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', '\nR, C = map(int, input().split())\ncrossword = [list(input()) for _ in range(R)]\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] != crossword[r][c + 1]:\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] != crossword[r + 1][c]:\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha() and crossword[r][c] != crossword[r][c + 1]:\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha() and crossword[r][c] != crossword[r + 1][c]:\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', '\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n', "\nR, C = map(int, input().split())\ncrossword = [input() for i in range(R)]\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return ''.join(crossword[r][c:c + 2])\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return ''.join(list(map(lambda x: x[c], crossword[r:r + 2])))\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n"]
2022-04-16 10:40:05.132048 size on output set 7
2022-04-16 10:40:05.132081 num operations 1
2022-04-16 10:40:05.132087 size on input set 1
2022-04-16 10:40:16.297388 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    # for j in range(m):\n    #     word = ''\n    #     for i in range(n):\n    #         if puzzle[i][j].isalpha():\n    #             word += puzzle[i][j]\n    #         else:\n    #             if len(word) > 1:\n    #                 words.append(word)\n    #             word = ''\n    #     if len(word) > 1:\n    #         words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m = [int(i) for i in raw_input().split()]\n    puzzle = [raw_input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(input())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = set()\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.add(word)\n                word = ''\n        if len(word) > 1:\n            words.add(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.add(word)\n                word = ''\n        if len(word) > 1:\n            words.add(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    if len(words) > 0:\n        words.sort()\n        print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    puzzle = [input() for _ in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = \"\"\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = \"\"\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650105605,
  "object": "edit"
}
2022-04-16 10:40:16.297660 fix syntax errors 9 ["\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    # for j in range(m):\n    #     word = ''\n    #     for i in range(n):\n    #         if puzzle[i][j].isalpha():\n    #             word += puzzle[i][j]\n    #         else:\n    #             if len(word) > 1:\n    #                 words.append(word)\n    #             word = ''\n    #     if len(word) > 1:\n    #         words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(i) for i in raw_input().split()]\n    puzzle = [raw_input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(input())\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = set()\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.add(word)\n                word = ''\n        if len(word) > 1:\n            words.add(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.add(word)\n                word = ''\n        if len(word) > 1:\n            words.add(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    if len(words) > 0:\n        words.sort()\n        print(words[0])\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    n, m = map(int, input().split())\n    puzzle = [input() for _ in range(n)]\n    words = []\n    for i in range(n):\n        word = \'\'\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ""\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = \'\'\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ""\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 10:40:16.297806 size on output set 9
2022-04-16 10:40:16.297827 num operations 1
2022-04-16 10:40:16.297832 size on input set 1
2022-04-16 10:40:34.378225 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys, math\n\ndef main():\n    N = int(input())\n    if N == 1:\n        print(0)\n        return\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "#! /usr/bin/python3\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nr, c = map(int, sys.stdin.readline().split())\ngrid = [sys.stdin.readline().strip() for _ in range(r)]\nwords = []\n\n# horizontal words\nfor row in grid:\n    word = ''\n    for char in row:\n        if char == '#':\n            if len(word) > 1:\n                words.append(word)\n            word = ''\n        else:\n            word += char\n    if len(word) > 1:\n        words.append(word)\n\n# vertical words\nfor col in range(c):\n    word = ''\n    for row in range(r):\n        char = grid[row][col]\n        if char == '#':\n            if len(word) > 1:\n                words.append(word)\n            word = ''\n        else:\n            word += char\n    if len(word) > 1:\n        words.append(word)\n\nprint(sorted(words)[0])\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0]) \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n\tR, C = map(int, sys.stdin.readline().split())\n\tgrid = [sys.stdin.readline().strip() for _ in range(R)]\n\twords = []\n\n\t# horizontal words\n\tfor row in grid:\n\t\tword = ''\n\t\tfor char in row:\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\t# vertical words\n\tfor col in range(C):\n\t\tword = ''\n\t\tfor row in range(R):\n\t\t\tchar = grid[row][col]\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\tprint(sorted(words)[0])\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n\tR, C = map(int, sys.stdin.readline().split())\n\tgrid = [sys.stdin.readline().strip() for _ in range(R)]\n\twords = []\n\n\t# horizontal words\n\tfor row in grid:\n\t\tword = ''\n\t\tfor char in row:\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\t# vertical words\n\tfor col in range(C):\n\t\tword = ''\n\t\tfor row in range(R):\n\t\t\tchar = grid[row][col]\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\tprint(sorted(words)[0])\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650105616,
  "object": "edit"
}
2022-04-16 10:40:34.378549 fix syntax errors 9 ["\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys, math\n\ndef main():\n    N = int(input())\n    if N == 1:\n        print(0)\n        return\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "#! /usr/bin/python3\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nr, c = map(int, sys.stdin.readline().split())\ngrid = [sys.stdin.readline().strip() for _ in range(r)]\nwords = []\n\n# horizontal words\nfor row in grid:\n    word = ''\n    for char in row:\n        if char == '#':\n            if len(word) > 1:\n                words.append(word)\n            word = ''\n        else:\n            word += char\n    if len(word) > 1:\n        words.append(word)\n\n# vertical words\nfor col in range(c):\n    word = ''\n    for row in range(r):\n        char = grid[row][col]\n        if char == '#':\n            if len(word) > 1:\n                words.append(word)\n            word = ''\n        else:\n            word += char\n    if len(word) > 1:\n        words.append(word)\n\nprint(sorted(words)[0])\n", "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0]) \n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\tR, C = map(int, sys.stdin.readline().split())\n\tgrid = [sys.stdin.readline().strip() for _ in range(R)]\n\twords = []\n\n\t# horizontal words\n\tfor row in grid:\n\t\tword = ''\n\t\tfor char in row:\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\t# vertical words\n\tfor col in range(C):\n\t\tword = ''\n\t\tfor row in range(R):\n\t\t\tchar = grid[row][col]\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\tprint(sorted(words)[0])\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n\tR, C = map(int, sys.stdin.readline().split())\n\tgrid = [sys.stdin.readline().strip() for _ in range(R)]\n\twords = []\n\n\t# horizontal words\n\tfor row in grid:\n\t\tword = ''\n\t\tfor char in row:\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\t# vertical words\n\tfor col in range(C):\n\t\tword = ''\n\t\tfor row in range(R):\n\t\t\tchar = grid[row][col]\n\t\t\tif char == '#':\n\t\t\t\tif len(word) > 1:\n\t\t\t\t\twords.append(word)\n\t\t\t\tword = ''\n\t\t\telse:\n\t\t\t\tword += char\n\t\tif len(word) > 1:\n\t\t\twords.append(word)\n\n\tprint(sorted(words)[0])\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-16 10:40:34.378634 size on output set 6
2022-04-16 10:40:34.378645 num operations 1
2022-04-16 10:40:34.378650 size on input set 1
2022-04-16 10:40:52.163017 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j + 1] != '#':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i + 1][j] != '#':\n                    word = matrix[i][j]\n                    k = i + 1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col - 1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row - 1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split()) #input row and column\n    matrix = []\n    for i in range(row):\n        matrix.append(input()) #input matrix\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#': #check if not a wall\n                if j < col-1 and matrix[i][j+1] != '#': #check if next is not a wall\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#': #check if next is not a wall\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#': #check if next is not a wall\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n\ndef get_word(matrix, i, j, row, col):\n    \"\"\"\n    Function to get word\n    \"\"\"\n    word = matrix[i][j]\n    k = j+1\n    while k < col and matrix[i][k] != '#':\n        word += matrix[i][k]\n        k += 1\n    return word\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = get_word(matrix, i, j, row, col)\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    if word not in words:\n                        words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col - 1 and matrix[i][j + 1] != '#':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row - 1 and matrix[i + 1][j] != '#':\n                    word = matrix[i][j]\n                    k = i + 1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650105634,
  "object": "edit"
}
2022-04-16 10:40:52.163402 fix syntax errors 9 ['\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col-1 and matrix[i][j+1] != \'#\':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != \'#\':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col-1 and matrix[i][j + 1] != \'#\':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < col and matrix[i][k] != \'#\':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i + 1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i + 1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col - 1 and matrix[i][j+1] != \'#\':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < col and matrix[i][k] != \'#\':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row - 1 and matrix[i+1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split()) #input row and column\n    matrix = []\n    for i in range(row):\n        matrix.append(input()) #input matrix\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\': #check if not a wall\n                if j < col-1 and matrix[i][j+1] != \'#\': #check if next is not a wall\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != \'#\': #check if next is not a wall\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != \'#\': #check if next is not a wall\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef get_word(matrix, i, j, row, col):\n    """\n    Function to get word\n    """\n    word = matrix[i][j]\n    k = j+1\n    while k < col and matrix[i][k] != \'#\':\n        word += matrix[i][k]\n        k += 1\n    return word\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col-1 and matrix[i][j+1] != \'#\':\n                    word = get_word(matrix, i, j, row, col)\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    if word not in words:\n                        words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col-1 and matrix[i][j+1] != \'#\':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != \'#\':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col-1 and matrix[i][j+1] != \'#\':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != \'#\':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col - 1 and matrix[i][j + 1] != \'#\':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < col and matrix[i][k] != \'#\':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row - 1 and matrix[i + 1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i + 1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != \'#\':\n                if j < col-1 and matrix[i][j+1] != \'#\':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != \'#\':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != \'#\':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != \'#\':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:40:52.163518 size on output set 6
2022-04-16 10:40:52.163532 num operations 1
2022-04-16 10:40:52.163537 size on input set 1
2022-04-16 10:41:09.042260 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n\ndef main():\n    row, col = sys.stdin.readline().split()\n    row = int(row)\n    col = int(col)\n    crossword = []\n    for i in range(row):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(row):\n        for c in range(col):\n            if crossword[r][c] != \"#\":\n                if r + 1 < row:\n                    if crossword[r + 1][c] != \"#\":\n                        word = crossword[r][c] + crossword[r + 1][c] + crossword[r + 2][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < col:\n                    if crossword[r][c + 1] != \"#\":\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n\n# def main():\nR, C = sys.stdin.readline().split()\nR = int(R)\nC = int(C)\ncrossword = []\nfor i in range(R):\n    row = sys.stdin.readline().strip()\n    crossword.append(row)\n\nsmallest_word = 'z'\nfor r in range(R):\n    for c in range(C):\n        if crossword[r][c] != '#':\n            if r + 1 < R:\n                if crossword[r + 1][c] != '#':\n                    word = crossword[r][c] + crossword[r + 1][c]\n                    if word < smallest_word:\n                        smallest_word = word\n            if c + 1 < C:\n                if crossword[r][c + 1] != '#':\n                    word = crossword[r][c] + crossword[r][c + 1]\n                    if word < smallest_word:\n                        smallest_word = word\n\nprint(smallest_word)\n\n\n# if __name__ == '__main__':\n#     main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\n\ndef main(R,C):\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main(R,C)\n"
    },
    {
      "index": 4,
      "text": "import sys\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\n\ndef main():\n    r, c = sys.stdin.readline().split()\n    r = int(r)\n    c = int(c)\n    crossword = []\n    for i in range(r):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for i in range(r):\n        for j in range(c):\n            if crossword[i][j] != '#':\n                if i + 1 < r:\n                    if crossword[i + 1][j] != '#':\n                        word = crossword[i][j] + crossword[i + 1][j]\n                        if word < smallest_word:\n                            smallest_word = word\n                if j + 1 < c:\n                    if crossword[i][j + 1] != '#':\n                        word = crossword[i][j] + crossword[i][j + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n    print(smallest_word)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for _ in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R and crossword[r + 1][c] != '#':\n                    word = crossword[r][c] + crossword[r + 1][c]\n                    if word < smallest_word:\n                        smallest_word = word\n                if c + 1 < C and crossword[r][c + 1] != '#':\n                    word = crossword[r][c] + crossword[r][c + 1]\n                    if word < smallest_word:\n                        smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650105652,
  "object": "edit"
}
2022-04-16 10:41:09.042576 fix syntax errors 9 ["\nimport sys\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\n\ndef main():\n    row, col = sys.stdin.readline().split()\n    row = int(row)\n    col = int(col)\n    crossword = []\n    for i in range(row):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = \'z\'\n    for r in range(row):\n        for c in range(col):\n            if crossword[r][c] != "#":\n                if r + 1 < row:\n                    if crossword[r + 1][c] != "#":\n                        word = crossword[r][c] + crossword[r + 1][c] + crossword[r + 2][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < col:\n                    if crossword[r][c + 1] != "#":\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == \'__main__\':\n    main()\n', "\n\nimport sys\n\n\n# def main():\nR, C = sys.stdin.readline().split()\nR = int(R)\nC = int(C)\ncrossword = []\nfor i in range(R):\n    row = sys.stdin.readline().strip()\n    crossword.append(row)\n\nsmallest_word = 'z'\nfor r in range(R):\n    for c in range(C):\n        if crossword[r][c] != '#':\n            if r + 1 < R:\n                if crossword[r + 1][c] != '#':\n                    word = crossword[r][c] + crossword[r + 1][c]\n                    if word < smallest_word:\n                        smallest_word = word\n            if c + 1 < C:\n                if crossword[r][c + 1] != '#':\n                    word = crossword[r][c] + crossword[r][c + 1]\n                    if word < smallest_word:\n                        smallest_word = word\n\nprint(smallest_word)\n\n\n# if __name__ == '__main__':\n#     main()\n", "\n\nimport sys\n\n\ndef main(R,C):\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main(R,C)\n", "import sys\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    r, c = sys.stdin.readline().split()\n    r = int(r)\n    c = int(c)\n    crossword = []\n    for i in range(r):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for i in range(r):\n        for j in range(c):\n            if crossword[i][j] != '#':\n                if i + 1 < r:\n                    if crossword[i + 1][j] != '#':\n                        word = crossword[i][j] + crossword[i + 1][j]\n                        if word < smallest_word:\n                            smallest_word = word\n                if j + 1 < c:\n                    if crossword[i][j + 1] != '#':\n                        word = crossword[i][j] + crossword[i][j + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n    print(smallest_word)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for _ in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R and crossword[r + 1][c] != '#':\n                    word = crossword[r][c] + crossword[r + 1][c]\n                    if word < smallest_word:\n                        smallest_word = word\n                if c + 1 < C and crossword[r][c + 1] != '#':\n                    word = crossword[r][c] + crossword[r][c + 1]\n                    if word < smallest_word:\n                        smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:41:09.042680 size on output set 9
2022-04-16 10:41:09.042690 num operations 1
2022-04-16 10:41:09.042696 size on input set 1
2022-04-16 10:41:20.596547 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Accepted after 2nd attempt (wrong answer on first attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Accepted after 2nd attempt (wrong answer on first attempt)\nimport sys\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nsys.stdout.write(min(words))\n"
    },
    {
      "index": 2,
      "text": "\n\n# Accepted after 2nd attempt (wrong answer on first attempt) \n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"
    },
    {
      "index": 3,
      "text": "\n\n# Accepted after 2nd attempt (wrong answer on first attempt) \n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"
    },
    {
      "index": 4,
      "text": "\n# Accepted after 2nd attempt (wrong answer on first attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"
    },
    {
      "index": 5,
      "text": "\n# Accepted after 2nd attempt (wrong answer on first attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#' and grid[r][c+1] != grid[r][c]:\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#' and grid[r+1][c] != grid[r][c]:\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"
    },
    {
      "index": 6,
      "text": "\n"
    },
    {
      "index": 7,
      "text": "\n\n# Accepted after 3rd attempt (wrong answer on first and second attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':  # Need to check for out-of-bounds again\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':  # Need to check for out-of-bounds again\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"
    },
    {
      "index": 8,
      "text": "\n\n# Accepted after 2nd attempt (wrong answer on first attempt) \n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"
    }
  ],
  "created": 1650105669,
  "object": "edit"
}
2022-04-16 10:41:20.596904 fix syntax errors 9 ["\n# Accepted after 2nd attempt (wrong answer on first attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "\n\n# Accepted after 2nd attempt (wrong answer on first attempt)\nimport sys\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nsys.stdout.write(min(words))\n", "\n\n# Accepted after 2nd attempt (wrong answer on first attempt) \n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "\n\n# Accepted after 2nd attempt (wrong answer on first attempt) \n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "\n# Accepted after 2nd attempt (wrong answer on first attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "\n# Accepted after 2nd attempt (wrong answer on first attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#' and grid[r][c+1] != grid[r][c]:\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#' and grid[r+1][c] != grid[r][c]:\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", '\n', "\n\n# Accepted after 3rd attempt (wrong answer on first and second attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':  # Need to check for out-of-bounds again\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':  # Need to check for out-of-bounds again\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "\n\n# Accepted after 2nd attempt (wrong answer on first attempt) \n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n"]
2022-04-16 10:41:20.596997 size on output set 6
