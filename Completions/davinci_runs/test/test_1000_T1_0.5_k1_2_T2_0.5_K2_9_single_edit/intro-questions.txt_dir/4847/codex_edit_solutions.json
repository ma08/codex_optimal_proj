["\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n", "\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\nimport sys\n\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nmain()\n", "\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\n\nimport sys\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2, count)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n", "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % (a))\n    print(count)\n\nmain()\n", "\n# fix syntax errors\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y) -> bool:\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n", "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0)\n    print(count)\n\nmain()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{s:.1f}\\n{count}\\n'.format(s=s, count=count))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(abs(area(a, b, c))))\nprint(trees)\n", "\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = abs(compute_area(a, b, tree))\n    area_b = abs(compute_area(a, c, tree))\n    area_c = abs(compute_area(b, c, tree))\n    return area == area_a + area_b + area_c\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n", "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2, end=' ')\n    print(count)\n\nmain()\n", "import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))  # Add to the list\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)  # A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)  # A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)  # A3 = area(x1, y1, x2, y2, x, y)\n\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\n\ndef compute_area(a, b, c):\n\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % float(a))\n    print(count)\n\nmain()\n", "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\n\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n", "\n\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) <= 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\n\ndef compute_area(x, y):\n    return abs((x[0] * (y[1] - z[1]) + y[0] * (z[1] - x[1]) + z[0] * (x[1] - y[1])) / 2)\n\ndef is_inside(x, y, z, tree):\n    area = compute_area(x, y, z)\n    area_a = compute_area(x, y, tree)\n    area_b = compute_area(x, z, tree)\n    area_c = compute_area(y, z, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    x = [int(x) for x in input().split()]\n    y = [int(x) for x in input().split()]\n    z = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(x, y, z, tree):\n            count += 1\n    area = compute_area(x, y, z)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and \\\n            (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and \\\n            (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\n    sys.stdin = open('input.txt', 'r')\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{0:.1f}\\n{1}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = tuple([int(x) for x in input().split()])\n    b = tuple([int(x) for x in input().split()])\n    c = tuple([int(x) for x in input().split()])\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append(tuple([int(x) for x in input().split()]))\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % area(x1, y1, x2, y2, x3, y3))\n    print(count)\n\nmain()\n", "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n", "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for _ in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n", "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, d):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, d)\n    area_b = compute_area(a, c, d)\n    area_c = compute_area(b, c, d)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Feb  5 11:37:30 2020\n\n@author: j-bd\n\"\"\"\n\nimport sys\n\ndef area(point_a, point_b, point_c):\n    \"\"\"Compute the area of a triangle\"\"\"\n    return abs(point_a[0]*(point_b[1] - point_c[1]) + point_b[0]*(point_c[1] - point_a[1]) + point_c[0]*(point_a[1] - point_b[1]))/2\n\ndef contains(point_a, point_b, point_c, point_p):\n    \"\"\"Check if a point is in a triangle\"\"\"\n    return area(point_a, point_b, point_c) == area(point_a, point_b, point_p) + area(point_a, point_p, point_c) + area(point_p, point_b, point_c)\n\nPOINT_A = tuple(map(int, sys.stdin.readline().split()))\nPOINT_B = tuple(map(int, sys.stdin.readline().split()))\nPOINT_C = tuple(map(int, sys.stdin.readline().split()))\n\nNUMBER_POINTS = int(sys.stdin.readline())\n\nCOUNT = 0\nfor _ in range(NUMBER_POINTS):\n    POINT_P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(POINT_A, POINT_B, POINT_C, POINT_P):\n        COUNT += 1\n\nprint(\"%.1f\" % area(POINT_A, POINT_B, POINT_C))\nprint(COUNT)\n", "\n\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001 \n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "# -*- coding: utf-8 -*-\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n", "\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\n\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\n\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a, end='')\n    print(count)\n\nmain()\n", "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area_abc = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area_abc == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area_abc = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area_abc))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]