["# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Mar 30 15:42:05 2020\n\n@author: tjtur\n\"\"\"\n# https://www.hackerrank.com/challenges/xml-1-find-the-score/problem\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node]) \n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "import xml.etree.ElementTree as etree\n\n\nmaxdepth = 0\n\n\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    if level == maxdepth:\n        maxdepth += 1\n    for child in elem:\n        depth(child, level + 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    xml = \"\"\n    for i in range(n):\n        xml = xml + input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print(maxdepth)\n", "\ndef depth(tree):\n    if tree is None:\n        return -1\n    return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml += input() + \"\\n\"\n    tree = xml.strip()\n    depth = depth(tree)\n    print(depth)\n", "\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    tree = \"\"\n    for i in range(int(input())):\n        tree = tree + input() + \"\\n\"\n    tree = tree.strip()\n    depth = depth(tree)\n    print(depth)\n", "\nimport sys\nimport xml.etree.ElementTree as etree\n\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "\ndef depth(xml):\n    return 0\n\nif __name__ == '__main__':\n    xml = ''\n    for i in range(int(input())):\n        xml = xml + input() + '\\n'\n    tree = xml.strip()\n    d = depth(tree)\n    print(d)\n", "import sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "import xml.etree.ElementTree as etree\n\n\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree[0]), depth(tree[1])) + 1\n\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml = xml + input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml.strip())).getroot()\n    depth = depth(tree)\n    print(depth)\n", "# https://www.hackerrank.com/challenges/xml-1-find-the-score/problem\n\nimport sys\nimport xml.etree.ElementTree as etree\n\n\ndef get_attr_number(node):\n\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "def depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    print(depth(input()))\n", "import xml.etree.ElementTree as etree\n\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth = depth(tree)\n    print(depth)\n", "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node.iter()])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "def depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n    tree = xml.strip()\n    depth = depth(tree)\n    print(depth)\n", "\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "class Node:\n    def __init__(self, info):\n        self.info = info\n        self.left = None\n        self.right = None\n        self.level = None\n    def __str__(self):\n        return str(self.info)\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    def create(self, val):\n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\ndef depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n    tree = BinarySearchTree()\n    t = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(t):\n        tree.create(arr[i])\n    depth = depth(tree)\n    print(depth)\n", "import sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n"]