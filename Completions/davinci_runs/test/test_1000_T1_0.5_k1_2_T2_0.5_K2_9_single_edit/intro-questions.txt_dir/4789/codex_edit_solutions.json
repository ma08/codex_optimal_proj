["\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, k)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses = passes + (desk - current_desk)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)] # _ means we don't care about the value\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses = passes + (desk - current_desk)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d))), end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport fileinput\n\nlines = fileinput.input()\n\nk = int(sys.stdin.readline())\ndesks = list(map(int, sys.stdin.readline().split()))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk >= current_desk for desk in desks):\n        current_desk = max(desk for desk in desks if desk <= current_desk)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_passes = 1\n    for i in range(K):\n        min_passes = max(min_passes, (desk_positions[clerks[i]] - i) // 2 + 1)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)) if d[i] - d[i - 1] != 0))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)))) \n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n \ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    #print(clerks)\n    clerks.sort()\n    #print(clerks)\n    max_val = max(clerks)\n    #print(max_val)\n    max_index = clerks.index(max_val)\n    #print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    # print(clerks)\n    clerks.sort()\n    # print(clerks)\n    max_val = max(clerks)\n    # print(max_val)\n    max_index = clerks.index(max_val)\n    # print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    print(desks)\n    pos = 0\n    passes = 0\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks):\n        current_desk = max(desk for desk in desks if desk <= current_desk)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    # print(desks)\n    pos = 1\n    passes = 0\n    while pos <= K:\n        if desks[pos-1] == pos:\n            pos += 1\n        else:\n            passes += 1\n            pos = 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    # print(desks)\n    pos = 0\n    passes = 0\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i + 1:\n                pos += 1\n        passes += 1\n    print(passes)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d))))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    # print(clerks)\n    clerks.sort()\n    # print(clerks)\n    max_val = max(clerks)\n    # print(max_val)\n    max_index = clerks.index(max_val)\n    # print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main()\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks):\n        current_desk = max(desk for desk in desks if desk <= current_desk)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)) if d[i] - d[i - 1] > k))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks, 1)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, k)))\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {i: desk for i, desk in enumerate(clerks)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(sorted(clerks))}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n# import sys\n\n# def main():\n#     K = int(sys.stdin.readline().strip())\n#     desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n#     desks.sort()\n#     count = 0\n#     for i in range(K):\n#         count += 1\n#         if desks[i] < i+1:\n#             count += i - desks[i]\n#     print(count)\n\n# main()\n\ndef get_sum(n):\n    if n == 1:\n        return 1\n    return n + get_sum(n-1)\n\nprint(get_sum(100))\n", "import fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n# Sort the desks in ascending order\ndesks.sort()\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "import sys\nimport math\n\ndef calc_fac(n):\n    if n == 0:\n        return 1\n    else:\n        return n * calc_fac(n-1)\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    M = int(sys.stdin.readline().strip())\n    print(calc_fac(N) // (calc_fac(N-M)*calc_fac(M)))\n\nmain()\n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tprint(k)\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count\n\nmain()\n", "\nimport fileinput\n\nlines = fileinput.input(files=('input.txt'))\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k+1)))\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    print(clerks)\n    clerks.sort()\n    print(clerks)\n    max_val = max(clerks)\n    print(max_val)\n    max_index = clerks.index(max_val)\n    print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    #print(clerks)\n    clerks.sort()\n    #print(clerks)\n    max_val = max(clerks)\n    #print(max_val)\n    max_index = clerks.index(max_val)\n    #print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i - 1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    n = int(input())\n    d = list(map(int, input().split()))[:n]\n    d.sort()\n    print(d[-1] - d[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = input()\n    if N % 2 == 1:\n        print('No')\n        return\n    else:\n        for i in range(N//2):\n            if S[i] != S[i + N//2]:\n                print('No')\n                return\n        print('Yes')\n        return\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses = passes + (desk - current_desk)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks)\n        current_desk = max(desk for desk in desks if desk <= current_desk)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses += (desk - current_desk)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k + 1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i - 1] for i in range(1, k)))\n", "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 0\n    passes = 0\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    #print(clerks)\n    clerks.sort()\n    #print(clerks)\n    max_val = max(clerks)\n    #print(max_val)\n    max_index = clerks.index(max_val)\n    #print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "a = int(input())\nif a < 0:\n    print('Negative')\nelif a == 0:\n    print('Zero')\nelse:\n    print('Positive')\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks) and current_desk < K:\n        current_desk = max(desk for desk in desks if desk <= current_desk) + 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i + 1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline())\n    desks = [int(sys.stdin.readline()) for _ in range(k)]\n    current_desk = 1\n    passes = 0\n    for desk in desks:\n        if desk > current_desk:\n            passes = passes + (desk - current_desk)\n        current_desk = desk\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K, N = map(int, input().split())\n    desks = list(map(int, input().split()))\n    # print(desks)\n    # pos = 0\n    # passes = 0\n    # while pos < K:\n    #     for i in range(pos, K):\n    #         if desks[i] == i+1:\n    #             pos += 1\n    #     passes += 1\n    # print(passes)\n    for i in range(K):\n        print(desks[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(b > current_desk for b in desks):\n        current_desk = max(b for b in desks if b <= current_desk)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nif __name__ == '__main__':\n    k = int(sys.stdin.readline())\n    desks = [int(sys.stdin.readline()) for _ in range(k)]\n    current_desk = 1\n    passes = 0\n    for desk in desks:\n        if desk > current_desk:\n            passes = passes + (desk - current_desk)\n        current_desk = desk\n    print(passes)\n", "\n\nimport sys\nimport math\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    for i in range(N):\n        n = int(sys.stdin.readline().strip())\n        print(n)\n    \nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\nlines = fileinput.input(files=(\"input.txt\"))\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\nimport fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n# Sort the desks in ascending order\ndesks.sort()\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks) }\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks):  # while there are desks that are higher than the current desk\n        current_desk = max(desk for desk in desks if desk <= current_desk)  # find the highest desk that is lower than the current desk\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 0\n    passes = 0\n    while pos < K:\n        if desks[pos] == pos+1:\n            pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n"]