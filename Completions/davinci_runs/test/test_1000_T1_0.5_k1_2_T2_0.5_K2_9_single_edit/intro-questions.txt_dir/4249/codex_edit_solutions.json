["\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na.reverse()\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n and pages > 0:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncups = 0\npages = 0\ndays = 0\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\nif pages < m:\n    days = -1\nprint(days)\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n#sorted_cups = sorted(cups, reverse=True)\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\n\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\nsorted_cups = sorted(cups, reverse=True)\n\ndef get_pages_written(day):\n    if day == 0:\n        return cups[0]\n    else:\n        return sorted_cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n#sorted_cups = sorted(cups, reverse=True)\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n# sorted_cups = sorted(cups, reverse=True)\n\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day + 1):\n        pages += get_pages_written(cups, i)\n    return pages\n\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n + 1):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\n\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n#sorted_cups = sorted(cups)\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\n\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n#sorted_cups = sorted(cups, reverse=True) \n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "\n\nn, k = map(int, input().split())\ndays = list(map(int, input().split()))\n\n#sorted_days = sorted(days, reverse=True)\n\ndef get_pages_written(days, day):\n    if day == 0:\n        return days[0]\n    else:\n        return days[day] - day\n\ndef get_pages_written_for_day(days, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(days, i)\n    return pages\n\ndef get_pages_written_for_n_days(days, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(days, i)\n    return pages\n\ndef get_min_days(days, k):\n    if get_pages_written_for_n_days(days, 1) >= k:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(days, mid) >= k:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(days, left) >= k:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(days, k))\n", "n, m = map(int, input().split())\n\n\ncups = list(map(int, input().split()))\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n", "import math\nimport os\nimport random\nimport re\nimport sys\n\n\n# Complete the hourglassSum function below.\ndef hourglassSum(arr):\n    maxSum = -63\n    for i in range(1, 5):\n        for j in range(1, 5):\n            sum = arr[i-1][j-1] + arr[i-1][j] + arr[i-1][j+1] + arr[i][j] + arr[i+1][j-1] + arr[i+1][j] + arr[i+1][j+1]\n            if sum > maxSum:\n                maxSum = sum\n    return maxSum\n\n\ncups = 0\npages = 0\ndays = 0\n\nwhile cups < n:\n    pages += a[cups]\n    days += 1\n    cups += 1\n    if pages >= m:\n        break\n    if cups < n:\n        pages -= days - 1\n\nif pages < m:\n    days = -1\n\nprint(days)\n", "\nn, m = map(int, input().split())\ncups = list(map(int, input().split()))\n\n#sorted_cups = sorted(cups, reverse=True)\n\ndef get_pages_written(cups, day):\n    if day == 0:\n        return cups[0]\n    else:\n        return cups[day] - day\n\ndef get_pages_written_for_day(cups, day):\n    pages = 0\n    for i in range(day+1):\n        pages += get_pages_written(cups, i)\n    return pages\n\ndef get_pages_written_for_n_days(cups, n):\n    pages = 0\n    for i in range(n):\n        pages += get_pages_written_for_day(cups, i)\n    return pages\n\ndef get_min_days(cups, m):\n    if get_pages_written_for_n_days(cups, 1) >= m:\n        return 1\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if get_pages_written_for_n_days(cups, mid) >= m:\n            right = mid\n        else:\n            left = mid + 1\n    if get_pages_written_for_n_days(cups, left) >= m:\n        return left\n    else:\n        return -1\n\nprint(get_min_days(cups, m))\n"]