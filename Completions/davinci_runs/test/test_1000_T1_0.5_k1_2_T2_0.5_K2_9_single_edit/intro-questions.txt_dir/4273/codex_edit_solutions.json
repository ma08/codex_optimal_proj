["\n\n# TODO: https://atcoder.jp/contests/abc117/tasks/abc117_d\n", "\n\ndef dfs(idx, lst, cnt):\n    if idx == n:\n        return cnt\n    else:\n        return min(dfs(idx+1, lst, cnt), dfs(idx+1, lst, cnt+1))\n\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nans = dfs(0, a, 0)\nprint(ans)\n", "import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = {}\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d.py\n", "\n# coding: utf-8\n\n# TODO\n# https://atcoder.jp/contests/abc121/tasks/abc121_a\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = {}\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO https://atcoder.jp/contests/abc117/tasks/abc117_d\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = dict()\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    names = [sys.stdin.readline().strip() for _ in range(N-1)]\n    dic = {}\n    for name in names:\n        if name[0] in dic:\n            dic[name[0]] += 1\n        else:\n            dic[name[0]] = 1\n    keys = list(dic.keys())\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans % (10**9 + 7))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(40, -1, -1):\n    # i\u6841\u76ee\u306e1\u306e\u500b\u6570\n    cnt = 0\n    for a in A:\n        if (a >> i) & 1:\n            cnt += 1\n    if cnt < N/2:\n        # i\u6841\u76ee\u304c0\u306b\u306a\u308b\u65b9\u304c\u3044\u3044\n        ans += (N - cnt) * (1 << i)\n    else:\n        # i\u6841\u76ee\u304c1\u306b\u306a\u308b\u65b9\u304c\u3044\u3044\n        ans += cnt * (1 << i)\n        # i\u6841\u76ee\u304c1\u3068\u306a\u308b\u500b\u6570\u306eA\u3092\u4f5c\u308b\n        B = []\n        for a in A:\n            if (a >> i) & 1:\n                B.append(a)\n        A = B\nprint(ans)\n", "\n\nimport sys, collections\n\ndef main():\n    N = int(sys.stdin.readline())\n    names = [sys.stdin.readline().strip() for _ in range(N)]\n    dic = collections.defaultdict(int)\n    for name in names:\n        dic[name[0]] += 1\n    keys = dic.keys()\n    ans = 0\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            for k in range(j+1, len(keys)):\n                ans += dic[keys[i]] * dic[keys[j]] * dic[keys[k]]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d \n", "\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d\n", "\n\n# TODO\n# https://atcoder.jp/contests/abc117/tasks/abc117_d \n"]