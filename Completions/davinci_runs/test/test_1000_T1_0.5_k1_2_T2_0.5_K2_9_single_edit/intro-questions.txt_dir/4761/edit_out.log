2022-04-16 10:21:36.354413 num operations 1
2022-04-16 10:21:36.354430 size on input set 1
2022-04-16 10:21:47.828401 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, raw_input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    '''\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(low, high):\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    low, high = map(int, input().split())\n    main(low, high)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split())\n    numbers = list(range(low, high+1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number%d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits))!=len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split()) #pylint: disable=unused-variable\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    1. Get input number\n    2. Get the sum of all digits\n    \"\"\"\n    number = int(input())\n\n    print(sum([int(c) for c in str(number)]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    1. Get input number\n    2. Create a list of all divisors\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list of divisors\n    \"\"\"\n    number = int(input())\n    numbers = list(range(1, number + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650104496,
  "object": "edit"
}
2022-04-16 10:21:47.828697 fix syntax errors 9 ['\n\ndef main():\n    """\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    """\n    low, high = map(int, raw_input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    \'\'\'\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \'\'\'\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main(low, high):\n    """\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    """\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == "__main__":\n    low, high = map(int, input().split())\n    main(low, high)\n', '\n\ndef main():\n    """\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    """\n    low, high = map(int, input().split())\n    numbers = list(range(low, high+1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number%d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits))!=len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    """\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n\n    print(len(numbers))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    """\n    low, high = map(int, input().split()) #pylint: disable=unused-variable\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    1. Get input number\n    2. Get the sum of all digits\n    """\n    number = int(input())\n\n    print(sum([int(c) for c in str(number)]))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    1. Get input number\n    2. Create a list of all divisors\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list of divisors\n    """\n    number = int(input())\n    numbers = list(range(1, number + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:21:47.828857 size on output set 9
2022-04-16 10:21:47.828878 num operations 1
2022-04-16 10:21:47.828884 size on input set 1
2022-04-16 10:21:57.455344 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d != 0]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all(\n            [c % d == 0 for d in c_list]\n        ):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n\n\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and sum(c_list) % 3 == 0:\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and 0 not in c_list:\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d != 0]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c) if int(d) != 0]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and len(c_list) > 1:\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d > 0]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and all([d != 0 for d in c_list]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650104507,
  "object": "edit"
}
2022-04-16 10:21:57.455644 fix syntax errors 9 ['\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d != 0]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all(\n            [c % d == 0 for d in c_list]\n        ):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n\n\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and sum(c_list) % 3 == 0:\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and 0 not in c_list:\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d != 0]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c) if int(d) != 0]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and len(c_list) > 1:\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d > 0]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and all([d != 0 for d in c_list]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:21:57.455695 size on output set 8
2022-04-16 10:21:57.455706 num operations 1
2022-04-16 10:21:57.455711 size on input set 1
2022-04-16 10:22:06.380774 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in range(len(n)):\n        if int(n) % int(n[i]) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef check(n):\n    num = str(n)\n    if len(set(num)) != 6:\n        return False\n    for i in num:\n        if int(num) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\na = int(input())\nb = int(input())\nprint(a+b)\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef check(n):\n    n_str = str(n)\n    if len(set(n_str)) != 6:\n        return False\n    for i in n_str:\n        if int(n_str) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650104517,
  "object": "edit"
}
2022-04-16 10:22:06.381106 fix syntax errors 9 ["#!/usr/bin/python3\n\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in range(len(n)):\n        if int(n) % int(n[i]) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef check(n):\n    num = str(n)\n    if len(set(num)) != 6:\n        return False\n    for i in num:\n        if int(num) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", '\na = int(input())\nb = int(input())\nprint(a+b)\n', "import sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef check(n):\n    n_str = str(n)\n    if len(set(n_str)) != 6:\n        return False\n    for i in n_str:\n        if int(n_str) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:22:06.381156 size on output set 9
2022-04-16 10:22:06.381167 num operations 1
2022-04-16 10:22:06.381172 size on input set 1
2022-04-16 10:22:16.429208 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 7):\n        if n.count(str(i)) > 1:\n            return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in range(len(n)):\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in range(1, 10):\n        if int(n) % i != 0:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 7):\n        if n.count(str(i)) > 1:\n            return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(10):\n        if n.count(str(i)) > 1 and str(i) != \"0\":\n            return False \n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main(): \n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if n.count(i) > 1:\n            return False\n        if int(n) % int(i) != 0: \n            return False \n    return True \n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    pass\n\n\nmain()\n"
    }
  ],
  "created": 1650104526,
  "object": "edit"
}
2022-04-16 10:22:16.429481 fix syntax errors 9 ['\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 7):\n        if n.count(str(i)) > 1:\n            return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in range(len(n)):\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in range(1, 10):\n        if int(n) % i != 0:\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 7):\n        if n.count(str(i)) > 1:\n            return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(10):\n        if n.count(str(i)) > 1 and str(i) != "0":\n            return False \n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n', '\n\ndef main(): \n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if n.count(i) > 1:\n            return False\n        if int(n) % int(i) != 0: \n            return False \n    return True \n\nmain()\n', '\n\ndef main():\n    pass\n\n\nmain()\n']
2022-04-16 10:22:16.429772 size on output set 8
2022-04-16 10:22:16.429815 num operations 1
2022-04-16 10:22:16.429822 size on input set 1
2022-04-16 10:22:30.457989 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# def is_valid(c, l, h):\n#     if c < l or c > h:\n#         return False\n#     if len(set(str(c))) != 6:\n#         return False\n#     if any(c % int(d) != 0 for d in str(c)):\n#         return False\n#     return True\n#\n# def num_valid(l, h):\n#     return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    # l, h = map(int, input().split())\n    # print(num_valid(l, h))\n    print(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport itertools\n\nprint('it works')\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport itertools\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\n\ndef num_valid(l, h):\n\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "def is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\nimport itertools\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "def is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n#\n# import itertools\n#\n# def is_valid(c, l, h):\n#     if c < l or c > h:\n#         return False\n#     if len(set(str(c))) != 6:\n#         return False\n#     if any(c % int(d) != 0 for d in str(c)):\n#         return False\n#     return True\n#\n# def num_valid(l, h):\n#     return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n#\n# def main():\n#     l, h = map(int, input().split())\n#     print(num_valid(l, h))\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    }
  ],
  "created": 1650104536,
  "object": "edit"
}
2022-04-16 10:22:30.458247 fix syntax errors 9 ['\n\n# def is_valid(c, l, h):\n#     if c < l or c > h:\n#         return False\n#     if len(set(str(c))) != 6:\n#         return False\n#     if any(c % int(d) != 0 for d in str(c)):\n#         return False\n#     return True\n#\n# def num_valid(l, h):\n#     return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    # l, h = map(int, input().split())\n    # print(num_valid(l, h))\n    print("Hello world")\n\nif __name__ == "__main__":\n    main()\n', "\nimport itertools\n\nprint('it works')\n", '\n\n\nimport itertools\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\n\ndef num_valid(l, h):\n\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == "__main__":\n    main()\n', 'def is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport itertools\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == "__main__":\n    main()\n', '\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == "__main__":\n    main()\n', 'def is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == "__main__":\n    main()\n', '\n#\n# import itertools\n#\n# def is_valid(c, l, h):\n#     if c < l or c > h:\n#         return False\n#     if len(set(str(c))) != 6:\n#         return False\n#     if any(c % int(d) != 0 for d in str(c)):\n#         return False\n#     return True\n#\n# def num_valid(l, h):\n#     return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n#\n# def main():\n#     l, h = map(int, input().split())\n#     print(num_valid(l, h))\n#\n# if __name__ == "__main__":\n#     main()\n']
2022-04-16 10:22:30.458298 size on output set 8
2022-04-16 10:22:30.458310 num operations 1
2022-04-16 10:22:30.458315 size on input set 1
2022-04-16 10:22:37.352906 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in combination]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip().split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "import fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650104550,
  "object": "edit"
}
2022-04-16 10:22:37.353229 fix syntax errors 9 ["\n\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in combination]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip().split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:22:37.353294 size on output set 6
2022-04-16 10:22:37.353310 num operations 1
2022-04-16 10:22:37.353315 size on input set 1
2022-04-16 10:22:46.891961 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 1 == 0 and i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n            count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 3 != 0:\n            count += 1\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1650104557,
  "object": "edit"
}
2022-04-16 10:22:46.892254 fix syntax errors 9 ['\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 1 == 0 and i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n            count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n', '\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 3 != 0:\n            count += 1\n    print(count)\n\nmain()\n']
2022-04-16 10:22:46.892297 size on output set 6
2022-04-16 10:22:46.892309 num operations 1
2022-04-16 10:22:46.892314 size on input set 1
2022-04-16 10:22:57.506088 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()] # pylint: disable=C0103\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]) or len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6:\n        return False\n    if len(set(c)) != 6 or any([x == '0' for x in c]):\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any(x == '0' for x in c):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    if l > h:\n        l, h = h, l\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "def main():\n    l, h = [int(x) for x in input().split()]\n\n\n\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\n\ndef is_valid(c):    \n    if len(c) != 6 or any([x == '0' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]) or len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]  # pylint: disable=C0103\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]):  # pylint: disable=C0103\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650104566,
  "object": "edit"
}
2022-04-16 10:22:57.506320 fix syntax errors 9 ['\n\ndef main():\n    """\n    """\n    l, h = [int(x) for x in input().split()] # pylint: disable=C0103\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6 or any([x == \'0\' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    """\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6 or any([x == \'0\' for x in c]) or len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    """\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6:\n        return False\n    if len(set(c)) != 6 or any([x == \'0\' for x in c]):\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    """\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6 or any(x == \'0\' for x in c):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    """\n    if l > h:\n        l, h = h, l\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6 or any([x == \'0\' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', "def main():\n    l, h = [int(x) for x in input().split()]\n\n\n\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\n\ndef is_valid(c):    \n    if len(c) != 6 or any([x == '0' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    """\n    """\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6 or any([x == \'0\' for x in c]) or len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    """\n    l, h = [int(x) for x in input().split()]  # pylint: disable=C0103\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6 or any([x == \'0\' for x in c]):  # pylint: disable=C0103\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    """\n    """\n    if len(c) != 6 or any([x == \'0\' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 10:22:57.506463 size on output set 8
