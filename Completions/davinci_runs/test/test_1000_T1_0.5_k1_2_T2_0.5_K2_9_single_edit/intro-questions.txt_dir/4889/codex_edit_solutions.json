["\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting javelin\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\nimport sys\n\ndef main():\n    # Read the number of coins\n    N = int(sys.stdin.readline()) \n\n    # Read the values of the coins\n    coins = []\n    for i in range(N):\n        coins.append(int(sys.stdin.readline()))\n\n    # Sort the coins from lowest to highest value\n    coins.sort()\n\n    # Iterate over the coins\n    while len(coins) > 1:\n        # Fuse the two lowest valued coins\n        coins[0] = coins[0] + coins[1] - 1\n        # Remove the second lowest valued coin\n        del coins[1]\n        # Sort the coins from lowest to highest value\n        coins.sort()\n\n    # Print the value of the resulting coin\n    print(coins[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop())\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n", "\n\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\nprint(output)\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop() - 1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\"\"\"\nFile\n\"\"\"\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_rods = int(input())\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n    rod_lengths.sort()\n    total_length = rod_lengths[0] + rod_lengths[1] - 1\n    rod_lengths.pop(0)\n    rod_lengths.pop(0)\n    rod_lengths.append(total_length)\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1: # pylint: disable=C0200\n        total_length += rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    print('Hello World!')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))  # noqa: E701\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)  # noqa: E701\n        rod_lengths.pop(0)  # noqa: E701\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read in the number of steel rods\n    num_rods = int(input(\"Number of rods: \"))\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input(\"Rod length: \")) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop()\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "n = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\nprint(output)\n", "\n\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\nprint(output)\n", "\n\n#n = int(input())\n#l = [int(x) for x in input().split()]\n#l = [21,34,18,9]\n#n = len(l)\n\ndef max_javelin(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javelin(l[:-1]) - 1\n\n#print(max_javelin(l))\n", "#!/usr/bin/env python3\n\ndef main():\n\t# read in the number of steel rods\n\tnum_rods = int(input())\n\n\t# read in the lengths of the steel rods\n\trod_lengths = [int(input()) for _ in range(num_rods)]\n\n\t# sort the rod lengths in descending order\n\trod_lengths = sorted(rod_lengths, reverse=True)\n\n\t# fuse the rods together\n\tjavelin_length = 0\n\tfor i in range(num_rods - 1):\n\t\tjavelin_length += rod_lengths[i]\n\t\tjavelin_length -= 1\n\n\t# add the last rod to the javelin\n\tjavelin_length += rod_lengths[-1]\n\n\t# print the length of the javelin\n\tprint(javelin_length)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    # read in the number of steel rods.\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods.\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order.\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together.\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin.\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the number of rods and the target length\n    N, T = map(int, sys.stdin.readline().strip().split())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods while the target length is not reached\n    while rods[0] < T:\n        # If there is only one rod left, the target length cannot be reached\n        if len(rods) == 1:\n            print(\"impossible\")\n            return\n\n        # If there are two or more rods left, fuse the two shortest rods\n        else:\n            rods[0] = rods[0] + rods[1] - 1\n            # Remove the second shortest rod\n            del rods[1]\n            # Sort the rods from shortest to longest\n            rods.sort()\n\n    # If the target length is reached, print the number of operations\n    print(N - len(rods))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys, math\n\ndef main():\n    # Read the number of rods\n    N = int(input())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(input()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1 #-1 to account for the overlap\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting javelin\n    print(math.ceil(rods[0]/2)) #/2 because of the overlap\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\n#n = int(input())\n#l = [int(x) for x in input().split()]\n#l = [1,2,3,4,5,6,7,8,9,10]\n#l = [21,34,18,9]\n#n = len(l)\n\ndef max_javelin(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javelin(l[:-1]) -1\n\n#print(max_javelin(l, n))\n", "\n\ndef main():\n    # read in the number of steel rods\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input()) for _ in range(num_rods)] \n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1] \n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    # read in the number of steel rods\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#n = int(input())\n#l = [int(x) for x in input().split()]\n\n#l = [21,34,18,9]\n#n = len(l)\n\ndef max_javelin(l):\n    if len(l) == 1: \n        return l[0]\n    else:\n        l = sorted(l) \n        return l[-1] + max_javelin(l[:-1]) - 1 \n\n#print(max_javelin(l))\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n\n        total += rods[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys, os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        s = sys.stdin.readline().strip()\n        print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\n#l = [21,34,18,9]\n#n = len(l)\n\ndef max_javelin(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javelin(l[:-1]) - 1\n\nprint(max_javelin(l))\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    rods = []\n    for i in range(n):\n        rods.append(int(input()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n,k = [int(i) for i in sys.stdin.readline().split()]\n    print(n,k)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse=True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\nprint(output)\n", "\nimport sys\n\ndef main():\n    #N = int(sys.stdin.readline())\n    #rods = []\n    #for i in range(N):\n    #    rods.append(int(sys.stdin.readline()))\n    #rods.sort()\n    #while len(rods) > 1:\n    #    rods.append(rods.pop() + rods.pop() - 1)\n    #    rods.sort()\n    #print(rods[0])\n    print(sys.stdin.readline())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\nl = [21,34,18,9]\nn = len(l)\n\ndef max_javelin(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javelin(l[:-1]) - 1\n\nprint(max_javelin(l))\n", "\n\ndef main():\n    # read in the number of steel rods, the length of the javelin, and the number of steel rods to remove\n    num_rods, javelin_length, num_to_remove = [int(x) for x in input().split()]\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # remove the rods\n    for _ in range(num_to_remove):\n        javelin_length -= rod_lengths.pop()\n        javelin_length -= 1\n\n    # fuse the remaining rods together\n    for rod_length in rod_lengths:\n        javelin_length += rod_length\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Nov 21 15:18:22 2019\n@author: y56\n\"\"\"\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort(reverse = True)\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop() - 1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop() - 1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main(rod_lengths):\n    # read in the number of steel rods\n    #num_rods = int(input())\n\n    # read in the lengths of the steel rods\n    #rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(len(rod_lengths) - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main([1,2,3,4])\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]-1\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the number of rods \n    N = int(sys.stdin.readline()) \n\n    # Read the lengths of the rods \n    rods = [] \n    for i in range(N): \n        rods.append(int(sys.stdin.readline())) \n\n    # Sort the rods from shortest to longest \n    rods.sort() \n\n    # Iterate over the rods \n    while len(rods) > 1: \n        # Fuse the two shortest rods \n        rods[0] = rods[0] + rods[1] - 1 \n        # Remove the second shortest rod \n        del rods[1] \n        # Sort the rods from shortest to longest \n        rods.sort() \n\n    # Print the length of the resulting javelin \n    print(rods[0]) \n\nif __name__ == \"__main__\": \n    main() \n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop() - 1)\n        rods.sort()\n    print(rods[0] - 1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main(steel_rods, rod_lengths):\n\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    return rod_lengths[0]\n\nif __name__ == \"__main__\":\n    steel_rods = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))\n\n    print(main(steel_rods, rod_lengths))\n", "\n\ndef main():\n    steel_rods = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read in the number of steel rods\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods\n\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    if N == 1:\n        print(rods[0])\n    else:\n        rods.sort()\n        while len(rods) > 1:\n            rods.append(rods.pop() + rods.pop() - 1)\n            rods.sort()\n        print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# import sys\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     rods = []\n#     for i in range(n):\n#         rods.append(int(sys.stdin.readline()))\n#     rods.sort()\n#     total = rods[0]\n#     for i in range(1,n):\n#         total += rods[i]-1\n#     print(total)\n#\n# if __name__ == '__main__':\n#     main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = [int(sys.stdin.readline().strip()) for i in range(n)]\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\nprint(output)\n", "\n\nimport sys\n\ndef main(n):\n    rods = []\n    for i in range(n):\n        rods.append(i)\n\n    rods.sort()\n\n    while len(rods) > 1:\n        rods[0] = rods[0] + rods[1]\n        del rods[1]\n        rods.sort()\n\n    return rods[0]\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(main(n))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting javelin\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    file = open(\"input.txt\", \"r\")\n    steel_rods = int(file.readline())\n    rod_lengths = [int(line) for line in file]\n    rod_lengths.sort()\n\n    total_length = 0\n\n    for i in range(steel_rods - 1):\n        total_length += rod_lengths[i] + rod_lengths[i + 1] - 1\n        rod_lengths[i + 1] = total_length\n\n    print(total_length)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    print(\"Hello world!\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    steel_rods = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length = rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#n = int(input())\n#l = [int(x) for x in input().split()]\n\n#l = [21,34,18,9]\n#n = len(l)\n\ndef max_javelin(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javelin(l[:-1]) - 1\n\n\n\n\ndef is_palindrome(s):\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n\n#print(is_palindrome(\"racecar\"))\n#print(is_palindrome(\"a\"))\n#print(is_palindrome(\"\"))\n#print(is_palindrome(\"ab\"))\n#print(is_palindrome(\"aa\"))\n#print(is_palindrome(\"aba\"))\n#print(is_palindrome(\"abba\"))\n#print(is_palindrome(\"abcba\"))\n#print(is_palindrome(\"abccba\"))\n#print(is_palindrome(\"abcdba\"))\n\n\n\ndef reverse_string(s):\n    if len(s) == 0:\n        return \"\"\n    else:\n        return reverse_string(s[1:]) + s[0]\n\n#print(reverse_string(\"abcdefg\"))\n\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#print(factorial(0))\n#print(factorial(1))\n#print(factorial(3))\n#print(factorial(5))\n\n\n\ndef sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n#print(sum_digits(0))\n#print(sum_digits(1))\n#print(sum_digits(3))\n#print(sum_digits(5))\n#print(sum_digits(10))\n#print(sum_digits(123))\n#print(sum_digits(12345))\n\n\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n#print(fibonacci(0))\n#print(fibonacci(1))\n#print(fibonacci(2))\n#print(fibonacci(3))\n#print(fibonacci(4))\n#print(fibonacci(5))\n#print(fibonacci(6))\n\n\n\ndef is_power_of(x, n):\n    if x == n:\n        return True\n    elif x < n:\n        return False\n    else:\n        return is_power_of(x/n, n)\n\n#print(is_power_of(1, 2))\n#print(is_power_of(2, 2))\n#print(is_power_of(3, 2))\n#print(is_power_of(4, 2))\n#print(is_power_of(5, 2))\n#print(is_power_of(8, 2))\n#print(is_power_of(16, 2))\n#print(is_power_of(17, 2))\n#print(is_power_of(1, 3))\n#print(is_power_of(3, 3))\n#print(is_power_of(9, 3))\n#print(is_power_of(27, 3))\n#print(is_power_of(28, 3))\n\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n#print(gcd(1, 1))\n#print(gcd(2, 1))\n#print(gcd(3, 1))\n#print(gcd(4, 1))\n#print(gcd(5, 1))\n#print(gcd(1, 2))\n#print(gcd(2, 2))\n#print(gcd(3, 2))\n#print(gcd(4, 2))\n#print(gcd(5, 2))\n#print(gcd(1, 3))\n#print(gcd(3, 3))\n#print(gcd(5, 3))\n#print(gcd(9, 3))\n#print(gcd(15, 3))\n#print(gcd(16, 8))\n#print(gcd(16, 4))\n#print(gcd(16, 2))\n#print(gcd(16, 1))\n#print(gcd(16, 3))\n#print(gcd(16, 5))\n#print(gcd(16, 7))\n#print(gcd(16, 9))\n#print(gcd(16, 11))\n#print(gcd(16, 13))\n#print(gcd(16, 15))\n#print(max_javelin(l))\n", "\ndef main():\n\t# read in the number of steel rods\n\tnum_rods = int(input())\n\n\t# read in the lengths of the steel rods\n\trod_lengths = [int(input()) for _ in range(num_rods)]\n\n\t# sort the rod lengths in descending order\n\trod_lengths = sorted(rod_lengths, reverse=True)\n\n\t# fuse the rods together\n\tjavelin_length = 0\n\tfor i in range(num_rods - 1):\n\t\tjavelin_length += rod_lengths[i]\n\t\tjavelin_length -= 1\n\n\t# add the last rod to the javelin\n\tjavelin_length += rod_lengths[-1]\n\n\t# print the length of the javelin\n\tprint(javelin_length)\n\nif __name__ == '__main__':\n\tmain()\n"]