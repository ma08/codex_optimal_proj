2022-04-16 12:35:45.494136 num operations 1
2022-04-16 12:35:45.494152 size on input set 1
2022-04-16 12:35:51.164974 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 3,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 4,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 5,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 6,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 7,
      "text": "\n#\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 8,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    }
  ],
  "created": 1650112545,
  "object": "edit"
}
2022-04-16 12:35:51.165236 fix syntax errors 9 ["\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n#\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"]
2022-04-16 12:35:51.165274 size on output set 3
2022-04-16 12:35:51.165286 num operations 1
2022-04-16 12:35:51.165291 size on input set 1
2022-04-16 12:36:03.921462 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# WORKS \n \n[n, c] = [int(i) for i in input().split()] \nseq = [int(i) for i in input().split()] \n \nfreq_dict = {} \n \nfor i in range(c+1): \n    freq_dict[i] = 0 \n \nfor i in seq: \n    freq_dict[i] += 1 \n \nnew_seq = [] \n \nfor key in freq_dict: \n    if freq_dict[key] != 0: \n        new_seq.extend([key]*freq_dict[key]) \n \nprint(\" \".join([str(i) for i in new_seq])) \n"
    },
    {
      "index": 1,
      "text": "\n\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c):\n    freq_dict[i+1] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 2,
      "text": "\n\n# WORKS ON PYTHON 3\n\nn, c = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()][:n]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 3,
      "text": "\nprint(\"hello\")\n"
    },
    {
      "index": 4,
      "text": "\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 5,
      "text": "# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 6,
      "text": "\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 7,
      "text": "\n#\n# # WORKS\n#\n# [n, c] = [int(i) for i in input().split()]\n# seq = [int(i) for i in input().split()]\n#\n# freq_dict = {}\n#\n# for i in range(c+1):\n#     freq_dict[i] = 0\n#\n# for i in seq:\n#     freq_dict[i] += 1\n#\n# new_seq = []\n#\n# for key in freq_dict:\n#     if freq_dict[key] != 0:\n#         new_seq.extend([key]*freq_dict[key])\n#\n# print(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 8,
      "text": "\n#\n# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    }
  ],
  "created": 1650112551,
  "object": "edit"
}
2022-04-16 12:36:03.921779 fix syntax errors 9 ['\n# WORKS \n \n[n, c] = [int(i) for i in input().split()] \nseq = [int(i) for i in input().split()] \n \nfreq_dict = {} \n \nfor i in range(c+1): \n    freq_dict[i] = 0 \n \nfor i in seq: \n    freq_dict[i] += 1 \n \nnew_seq = [] \n \nfor key in freq_dict: \n    if freq_dict[key] != 0: \n        new_seq.extend([key]*freq_dict[key]) \n \nprint(" ".join([str(i) for i in new_seq])) \n', '\n\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c):\n    freq_dict[i+1] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n# WORKS ON PYTHON 3\n\nn, c = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()][:n]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\nprint("hello")\n', '\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n#\n# # WORKS\n#\n# [n, c] = [int(i) for i in input().split()]\n# seq = [int(i) for i in input().split()]\n#\n# freq_dict = {}\n#\n# for i in range(c+1):\n#     freq_dict[i] = 0\n#\n# for i in seq:\n#     freq_dict[i] += 1\n#\n# new_seq = []\n#\n# for key in freq_dict:\n#     if freq_dict[key] != 0:\n#         new_seq.extend([key]*freq_dict[key])\n#\n# print(" ".join([str(i) for i in new_seq]))\n', '\n#\n# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n']
2022-04-16 12:36:03.921827 size on output set 9
2022-04-16 12:36:03.921836 num operations 1
2022-04-16 12:36:03.921841 size on input set 1
2022-04-16 12:36:13.118151 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\na, b = input().split()\nprint(a)\nprint(b)\n"
    },
    {
      "index": 1,
      "text": "\n\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n\n\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 2,
      "text": "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 3,
      "text": "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 4,
      "text": "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1) # c = max(arr)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='') # print(i, end=' ') * freq[i]\n"
    },
    {
      "index": 5,
      "text": "\n\nn, c = map(int, input().split()) # n is the number of elements in the array, c is the range of numbers in the array\narr = list(map(int, input().split())) # input array\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 6,
      "text": "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 7,
      "text": "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 8,
      "text": "# https://www.spoj.com/problems/TEST/\n\nn, c = map(int, input().split())\narr = list(map(int, input().split())) # spliting the input into a list\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    }
  ],
  "created": 1650112563,
  "object": "edit"
}
2022-04-16 12:36:13.118456 fix syntax errors 9 ['\na, b = input().split()\nprint(a)\nprint(b)\n', "\n\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n\n\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n        print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1) # c = max(arr)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='') # print(i, end=' ') * freq[i]\n", "\n\nn, c = map(int, input().split()) # n is the number of elements in the array, c is the range of numbers in the array\narr = list(map(int, input().split())) # input array\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "# https://www.spoj.com/problems/TEST/\n\nn, c = map(int, input().split())\narr = list(map(int, input().split())) # spliting the input into a list\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"]
2022-04-16 12:36:13.118558 size on output set 7
2022-04-16 12:36:13.118576 num operations 1
2022-04-16 12:36:13.118582 size on input set 1
2022-04-16 12:36:26.683344 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N = sys.stdin.readline().split()\n    N = int(N)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split(\" \")\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split(\" \")\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split(' ')\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split(' ')\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print('')\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split(\" \")\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    }
  ],
  "created": 1650112573,
  "object": "edit"
}
2022-04-16 12:36:26.683655 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    # read the input\n    N = sys.stdin.readline().split()\n    N = int(N)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split(" ")\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split(" ")\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split(\' \')\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split(\' \')\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print(\'\')\n\nmain()\n', '\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split(" ")\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', 'import sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n']
2022-04-16 12:36:26.683759 size on output set 7
2022-04-16 12:36:26.683770 num operations 1
2022-04-16 12:36:26.683775 size on input set 1
2022-04-16 12:36:38.802418 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = []\n    for i in range(C + 1):\n        count.append([0] * 2)\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(len(count)):\n        if count[i][1] != 0:\n            output.extend([count[i][0]] * count[i][1]) \n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split()) # N is length of the message and C is the number of distinct characters\n    message = list(map(int, sys.stdin.readline().rstrip().split())) # message is the input string\n\n    # Create a list of lists where each element represents a number and its frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n        print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())  # N = number of elements, C = max value of elements\n    message = list(map(int, sys.stdin.readline().rstrip().split()))  # input\n\n    count = [[0] * 2 for _ in range(C + 1)]  # Create a list of lists where each element represents a number and its frequency.\n\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)  # The list is sorted in descending order of frequency.\n\n    output = []  # Append each number to the output in order of frequency.\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    print(count)\n    for i in range(C + 1):\n        if count[i][1] != 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650112586,
  "object": "edit"
}
2022-04-16 12:36:38.802663 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = []\n    for i in range(C + 1):\n        count.append([0] * 2)\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(len(count)):\n        if count[i][1] != 0:\n            output.extend([count[i][0]] * count[i][1]) \n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split()) # N is length of the message and C is the number of distinct characters\n    message = list(map(int, sys.stdin.readline().rstrip().split())) # message is the input string\n\n    # Create a list of lists where each element represents a number and its frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n        print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())  # N = number of elements, C = max value of elements\n    message = list(map(int, sys.stdin.readline().rstrip().split()))  # input\n\n    count = [[0] * 2 for _ in range(C + 1)]  # Create a list of lists where each element represents a number and its frequency.\n\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)  # The list is sorted in descending order of frequency.\n\n    output = []  # Append each number to the output in order of frequency.\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    print(count)\n    for i in range(C + 1):\n        if count[i][1] != 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 12:36:38.802832 size on output set 8
2022-04-16 12:36:38.802844 num operations 1
2022-04-16 12:36:38.802849 size on input set 1
2022-04-16 12:36:47.860072 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((i, end=\" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + \" \") * freq[i], end = \"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, c = map(int, input().split())\n    nums = list(map(int, input().split()))\n    freq = [0] * (c + 1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c + 1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, c = map(int, input().split())\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c + 1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c + 1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    n, c = map(int, input().split())\n    a = [0] * c\n    for i in map(int, input().split()):\n        a[i - 1] += 1\n    print(' '.join(map(str, a)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650112598,
  "object": "edit"
}
2022-04-16 12:36:47.860296 fix syntax errors 9 ["\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", '\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + " ") * freq[i], end="")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((i, end=" ") * freq[i], end="")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + " ") * freq[i], end = "")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n, c = map(int, input().split())\n    nums = list(map(int, input().split()))\n    freq = [0] * (c + 1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c + 1):\n        print((str(i) + " ") * freq[i], end="")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n, c = map(int, input().split())\n    nums = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + " ") * freq[i], end="")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    n, c = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    freq = [0] * (c + 1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c + 1):\n        print((str(i) + " ") * freq[i], end="")\n    print()\n\n\nif __name__ == \'__main__\':\n    main()\n', "\ndef main():\n    n, c = map(int, input().split())\n    a = [0] * c\n    for i in map(int, input().split()):\n        a[i - 1] += 1\n    print(' '.join(map(str, a)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 12:36:47.860352 size on output set 8
2022-04-16 12:36:47.860369 num operations 1
2022-04-16 12:36:47.860374 size on input set 1
2022-04-16 12:36:58.865452 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(i * freq[i], end=' ')\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    import sys\n    n, c = map(int, sys.stdin.readline().split())\n\n    message = list(map(int, sys.stdin.readline().split()))\n\n    freq = [0] * (c + 1)\n\n    for i in message:\n        freq[i] += 1\n\n    for i in range(len(freq)):\n        if freq[i] > 0:\n            print(str(i) * freq[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python\n# coding: utf-8\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i, c in enumerate(freq):\n    if c > 0:\n        print(str(i) * c, end=' ')\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 8,
      "text": "import sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    }
  ],
  "created": 1650112607,
  "object": "edit"
}
2022-04-16 12:36:58.865751 fix syntax errors 9 ["\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n\nimport sys\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "import sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(i * freq[i], end=' ')\n", "\n\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n\ndef main():\n    import sys\n    n, c = map(int, sys.stdin.readline().split())\n\n    message = list(map(int, sys.stdin.readline().split()))\n\n    freq = [0] * (c + 1)\n\n    for i in message:\n        freq[i] += 1\n\n    for i in range(len(freq)):\n        if freq[i] > 0:\n            print(str(i) * freq[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "#!/usr/bin/env python\n# coding: utf-8\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i, c in enumerate(freq):\n    if c > 0:\n        print(str(i) * c, end=' ')\n", "\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "import sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"]
2022-04-16 12:36:58.865794 size on output set 9
2022-04-16 12:36:58.865804 num operations 1
2022-04-16 12:36:58.865809 size on input set 1
2022-04-16 12:37:17.107236 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#message = \"1 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8\"\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \"\")\n"
    },
    {
      "index": 1,
      "text": "\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end=\" \")\n            count = 1\n    else:\n        print(message[i], end=\" \")\n"
    },
    {
      "index": 2,
      "text": "\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\n#message.sort()\n\n#print(message)\n\nfor i in range(0,len(message)):\n    for j in range(i+1,len(message)):\n        if message[i] == message[j]:\n            message[j] = -1\n\nfor i in range(0,len(message)):\n    if message[i] != -1:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 3,
      "text": "\n\nmessage = input().split()\n\nfor i in range(0,len(message)):\n    message[i] = float(message[i])\n\n#message.sort()\n\nprint(message)\n\ncount = 1\n\n#for i in range(0,len(message)):\n#    if i != len(message) - 1:\n#        if message[i] == message[i+1]:\n#            count += 1\n#        else:\n#            print(message[i], end = \" \")\n#            count = 1\n#    else:\n#        print(message[i], end = \" \")\n"
    },
    {
      "index": 4,
      "text": "\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\ncount = 1\n\nfor i in range(0, len(message)):\n    if i != len(message) - 1 and count < 3:\n        if message[i] == message[i+1]:\n            count += 1\n        elif count == 1:\n            print(message[i], end = \" \")\n            count = 1\n        elif count == 2:\n            print(message[i], end = \" \")\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        if count == 1:\n            print(message[i], end = \" \")\n        elif count == 2:\n            print(message[i], end = \" \")\n            print(message[i], end = \" \")\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep  3 16:35:47 2020\n\n\n@author: mauricio\n\"\"\"\nimport sys\n\ndef main():\n    message = input()\n    message = message.split(\" \")\n\n    for i in range(0,len(message)):\n        message[i] = int(message[i])\n\n    message.sort()\n\n    #print(message)\n\n    count = 1\n\n    for i in range(0,len(message)):\n        if i != len(message) - 1:\n            if message[i] == message[i+1]:\n                count += 1\n            else:\n                print(message[i], end = \" \")\n                count = 1\n        else:\n            print(message[i], end = \" \")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nmessage = input()\nmessage = message.split(\" \") \n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 7,
      "text": "\n\nmessage = input().split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\nprint(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 8,
      "text": "\n\ndef delete_same_numbers(message):\n    message = message.split(\" \")\n\n    for i in range(0, len(message)):\n        message[i] = int(message[i])\n\n    message.sort()\n\n    # print(message)\n\n    count = 1\n\n    for i in range(0, len(message)):\n        if i != len(message) - 1:\n            if message[i] == message[i + 1]:\n                count += 1\n            else:\n                print(message[i], end=\" \")\n                count = 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    }
  ],
  "created": 1650112618,
  "object": "edit"
}
2022-04-16 12:37:17.107519 fix syntax errors 9 ['\n\n#message = "1 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8"\n\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = "")\n', '\n\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end=" ")\n            count = 1\n    else:\n        print(message[i], end=" ")\n', '\n\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\n#message.sort()\n\n#print(message)\n\nfor i in range(0,len(message)):\n    for j in range(i+1,len(message)):\n        if message[i] == message[j]:\n            message[j] = -1\n\nfor i in range(0,len(message)):\n    if message[i] != -1:\n        print(message[i], end = " ")\n', '\n\nmessage = input().split()\n\nfor i in range(0,len(message)):\n    message[i] = float(message[i])\n\n#message.sort()\n\nprint(message)\n\ncount = 1\n\n#for i in range(0,len(message)):\n#    if i != len(message) - 1:\n#        if message[i] == message[i+1]:\n#            count += 1\n#        else:\n#            print(message[i], end = " ")\n#            count = 1\n#    else:\n#        print(message[i], end = " ")\n', '\n\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\ncount = 1\n\nfor i in range(0, len(message)):\n    if i != len(message) - 1 and count < 3:\n        if message[i] == message[i+1]:\n            count += 1\n        elif count == 1:\n            print(message[i], end = " ")\n            count = 1\n        elif count == 2:\n            print(message[i], end = " ")\n            print(message[i], end = " ")\n            count = 1\n    else:\n        if count == 1:\n            print(message[i], end = " ")\n        elif count == 2:\n            print(message[i], end = " ")\n            print(message[i], end = " ")\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Thu Sep  3 16:35:47 2020\n\n\n@author: mauricio\n"""\nimport sys\n\ndef main():\n    message = input()\n    message = message.split(" ")\n\n    for i in range(0,len(message)):\n        message[i] = int(message[i])\n\n    message.sort()\n\n    #print(message)\n\n    count = 1\n\n    for i in range(0,len(message)):\n        if i != len(message) - 1:\n            if message[i] == message[i+1]:\n                count += 1\n            else:\n                print(message[i], end = " ")\n                count = 1\n        else:\n            print(message[i], end = " ")\n\nif __name__ == "__main__":\n    main()\n', '\n\nmessage = input()\nmessage = message.split(" ") \n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n', '\n\nmessage = input().split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\nprint(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n', '\n\ndef delete_same_numbers(message):\n    message = message.split(" ")\n\n    for i in range(0, len(message)):\n        message[i] = int(message[i])\n\n    message.sort()\n\n    # print(message)\n\n    count = 1\n\n    for i in range(0, len(message)):\n        if i != len(message) - 1:\n            if message[i] == message[i + 1]:\n                count += 1\n            else:\n                print(message[i], end=" ")\n                count = 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n']
2022-04-16 12:37:17.107656 size on output set 9
