2022-04-16 14:12:15.871883 num operations 1
2022-04-16 14:12:15.871903 size on input set 1
2022-04-16 14:12:24.472015 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, p, q = map(int, input().split())\n\nif (q - p) % (2 * n) < n:\n    print(\"opponent\")\nelse:\n    print(\"paul\")\n"
    },
    {
      "index": 1,
      "text": "\n\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 2,
      "text": "\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\nif (q - p) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 3,
      "text": "\n#\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 4,
      "text": "\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    if s == '0':\n        print('0')\n    elif s == '1':\n        print('1')\n    else:\n        print(s)\n\n"
    },
    {
      "index": 6,
      "text": "\n\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print(\"paul\")\nelse:\n\n\n    print(\"opponent\")\n"
    },
    {
      "index": 7,
      "text": "\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 8,
      "text": "\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    }
  ],
  "created": 1650118336,
  "object": "edit"
}
2022-04-16 14:12:24.472318 fix syntax errors 9 ['\nn, p, q = map(int, input().split())\n\nif (q - p) % (2 * n) < n:\n    print("opponent")\nelse:\n    print("paul")\n', '\n\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\nif (q - p) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', '\n#\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', "\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    if s == '0':\n        print('0')\n    elif s == '1':\n        print('1')\n    else:\n        print(s)\n\n", '\n\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print("paul")\nelse:\n\n\n    print("opponent")\n', '\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print("paul")\nelse:\n    print("opponent")\n']
2022-04-16 14:12:24.472356 size on output set 8
2022-04-16 14:12:24.472367 num operations 1
2022-04-16 14:12:24.472371 size on input set 1
2022-04-16 14:12:51.723048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n\nN, P, Q = map(int, sys.stdin.readline().split())\n\n\nrounds_played = P + Q\n\n\nrounds_per_player = 2 * N\n\n\nrounds_before_first_player_serves = N\n\n\nrounds_before_second_player_serves = 2 * N\n\n\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Grab the input\n    N, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n# Calculate the number of rounds played\nrounds_played = P + Q\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < 3 * N:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 2 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 3 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n# Grab the input.\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played.\nrounds_played = P + Q\n\n# Calculate the number of rounds per player.\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves.\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves.\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again.\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again.\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 8,
      "text": "\n\n# import sys\n\n# # Grab the input\n# N, P, Q = map(int, sys.stdin.readline().split())\n\n# # Calculate the number of rounds played\n# rounds_played = P + Q\n\n# # Calculate the number of rounds per player\n# rounds_per_player = 2 * N\n\n# # Calculate the number of rounds before the first player serves\n# rounds_before_first_player_serves = N\n\n# # Calculate the number of rounds before the second player serves\n# rounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    }
  ],
  "created": 1650118344,
  "object": "edit"
}
2022-04-16 14:12:51.723431 fix syntax errors 9 ['\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\n\nN, P, Q = map(int, sys.stdin.readline().split())\n\n\nrounds_played = P + Q\n\n\nrounds_per_player = 2 * N\n\n\nrounds_before_first_player_serves = N\n\n\nrounds_before_second_player_serves = 2 * N\n\n\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\ndef main():\n    # Grab the input\n    N, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n# Calculate the number of rounds played\nrounds_played = P + Q\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print("paul")\nelse:\n    print("opponent")\n', '\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < 3 * N:\n    print("paul")\nelse:\n    print("opponent")\n', '\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 2 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 3 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\n# Grab the input.\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played.\nrounds_played = P + Q\n\n# Calculate the number of rounds per player.\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves.\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves.\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again.\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again.\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print("paul")\nelse:\n    print("opponent")\n', '\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the second player serves\nrounds_before_second_player_serves = 2 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves:\n    print("paul")\nelse:\n    print("opponent")\n', '\n\n# import sys\n\n# # Grab the input\n# N, P, Q = map(int, sys.stdin.readline().split())\n\n# # Calculate the number of rounds played\n# rounds_played = P + Q\n\n# # Calculate the number of rounds per player\n# rounds_per_player = 2 * N\n\n# # Calculate the number of rounds before the first player serves\n# rounds_before_first_player_serves = N\n\n# # Calculate the number of rounds before the second player serves\n# rounds_before_second_player_serves = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print("paul")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print("paul")\nelse:\n    print("opponent")\n']
2022-04-16 14:12:51.723533 size on output set 9
2022-04-16 14:12:51.723543 num operations 1
2022-04-16 14:12:51.723548 size on input set 1
2022-04-16 14:13:00.118132 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 1,
      "text": "\nN, P, Q = map(int, input().split())\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nP = int(input())\nQ = int(input())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= 1\n    else:\n        Q -= 1\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 3,
      "text": "# paul and the box\n\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 4,
      "text": "N, P, Q = map(int, input().split())\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 5,
      "text": "\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P > 0 and Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    pass\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q >= 0:\n    if pauls_turn:\n        P -= N if P >= N else P\n    else:\n        Q -= N if Q >= N else Q\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 8,
      "text": "\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    }
  ],
  "created": 1650118371,
  "object": "edit"
}
2022-04-16 14:13:00.118362 fix syntax errors 9 ['\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n', '\nN, P, Q = map(int, input().split())\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n', '\nN = int(input())\nP = int(input())\nQ = int(input())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= 1\n    else:\n        Q -= 1\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n', '# paul and the box\n\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n', 'N, P, Q = map(int, input().split())\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n', '\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P > 0 and Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n', "\ndef main():\n    pass\nif __name__ == '__main__':\n    main()\n", '\n\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q >= 0:\n    if pauls_turn:\n        P -= N if P >= N else P\n    else:\n        Q -= N if Q >= N else Q\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n', '\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print("paul")\nelse:\n    print("opponent")\n']
2022-04-16 14:13:00.118405 size on output set 8
2022-04-16 14:13:00.118416 num operations 1
2022-04-16 14:13:00.118421 size on input set 1
2022-04-16 14:13:08.758356 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python\n\n# https://codeforces.com/problemset/problem/1360/A\n\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    },
    {
      "index": 2,
      "text": "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    },
    {
      "index": 3,
      "text": "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    },
    {
      "index": 4,
      "text": "\nN, P, Q = map(int, input().split())\nif P % N == 0 or Q % N == 0:\n    print('paul')\nelse:\n    print('opponent')\n"
    },
    {
      "index": 5,
      "text": "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    },
    {
      "index": 6,
      "text": "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    },
    {
      "index": 7,
      "text": "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    },
    {
      "index": 8,
      "text": "\n\nN, P, Q = map(int, input().split())\nif P % N == 0 or Q % N == 0:\n    print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"
    }
  ],
  "created": 1650118380,
  "object": "edit"
}
2022-04-16 14:13:08.758594 fix syntax errors 9 ["\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\n#!/usr/bin/env python\n\n# https://codeforces.com/problemset/problem/1360/A\n\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\nN, P, Q = map(int, input().split())\nif P % N == 0 or Q % N == 0:\n    print('paul')\nelse:\n    print('opponent')\n", "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\n\nN, P, Q = map(int, input().split())\nif P % N == 0 or Q % N == 0:\n    print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"]
2022-04-16 14:13:08.758689 size on output set 4
2022-04-16 14:13:08.758699 num operations 1
2022-04-16 14:13:08.758704 size on input set 1
2022-04-16 14:13:18.553242 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Program to find the winner of the game\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 1,
      "text": "\n#Program\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 2,
      "text": "# Program\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 3,
      "text": "\n\n# Program\n\nn, p, q = map(int, input().split())\n\nif p // n == q // n:\n    if p % n == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if p // n > q // n:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 4,
      "text": "\n\n#Program\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0 or q%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 5,
      "text": "\n\n#Program for Paul and opponent\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 6,
      "text": "\n\n# Program\n\nn, p, q = map(int, input().split())\n\nif(p // n == q // n):\n    if(p % n == 0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p // n > q // n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 7,
      "text": "\n\n#Program\n\nn,p,q=map(int,input().split(\" \"))\n\nif(p%n==q%n):\n    if(p//n==q//n):\n        if(p%n==0):\n            print(\"opponent\")\n        else:\n            print(\"paul\")\n    else:\n        if(p//n>q//n):\n            print(\"opponent\")\n        else:\n            print(\"paul\")\nelse:\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 8,
      "text": "\n\n#Program\n\nn, p, q = map(int, input().split())\n\nif(p // n == q // n):\n    if(p % n == 0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p // n > q // n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    }
  ],
  "created": 1650118388,
  "object": "edit"
}
2022-04-16 14:13:18.553471 fix syntax errors 9 ['\n\n#Program to find the winner of the game\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if(p//n>q//n):\n        print("opponent")\n    else:\n        print("paul")\n', '\n#Program\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if(p//n>q//n):\n        print("opponent")\n    else:\n        print("paul")\n', '# Program\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if(p//n>q//n):\n        print("opponent")\n    else:\n        print("paul")\n', '\n\n# Program\n\nn, p, q = map(int, input().split())\n\nif p // n == q // n:\n    if p % n == 0:\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if p // n > q // n:\n        print("opponent")\n    else:\n        print("paul")\n', '\n\n#Program\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0 or q%n==0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if(p//n>q//n):\n        print("opponent")\n    else:\n        print("paul")\n', '\n\n#Program for Paul and opponent\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if(p//n>q//n):\n        print("opponent")\n    else:\n        print("paul")\n', '\n\n# Program\n\nn, p, q = map(int, input().split())\n\nif(p // n == q // n):\n    if(p % n == 0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if(p // n > q // n):\n        print("opponent")\n    else:\n        print("paul")\n', '\n\n#Program\n\nn,p,q=map(int,input().split(" "))\n\nif(p%n==q%n):\n    if(p//n==q//n):\n        if(p%n==0):\n            print("opponent")\n        else:\n            print("paul")\n    else:\n        if(p//n>q//n):\n            print("opponent")\n        else:\n            print("paul")\nelse:\n    if(p%n==0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    print("opponent")\n', '\n\n#Program\n\nn, p, q = map(int, input().split())\n\nif(p // n == q // n):\n    if(p % n == 0):\n        print("opponent")\n    else:\n        print("paul")\nelse:\n    if(p // n > q // n):\n        print("opponent")\n    else:\n        print("paul")\n']
2022-04-16 14:13:18.553515 size on output set 9
2022-04-16 14:13:18.553527 num operations 1
2022-04-16 14:13:18.553532 size on input set 1
2022-04-16 14:13:28.322863 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\n\ndef main():\n    n, p, q = map(int, input().split())\n    print(whoServes(n, p, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n#SOLUTION \n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    },
    {
      "index": 3,
      "text": "\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    },
    {
      "index": 4,
      "text": "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n\tif p + q == 0:\n\t\treturn 'paul'\n\telif (p + q) % (2 * n) < n:\n\t\tif (p + q) % 2 == 0:\n\t\t\treturn 'paul'\n\t\telse:\n\t\t\treturn 'opponent'\n\telse:\n\t\tif (p + q) % 2 == 0:\n\t\t\treturn 'opponent'\n\t\telse:\n\t\t\treturn 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    },
    {
      "index": 6,
      "text": "\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    },
    {
      "index": 7,
      "text": "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    },
    {
      "index": 8,
      "text": "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"
    }
  ],
  "created": 1650118398,
  "object": "edit"
}
2022-04-16 14:13:28.323181 fix syntax errors 9 ["\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", '\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return \'paul\'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return \'paul\'\n        else:\n            return \'opponent\'\n    else:\n        if (p + q) % 2 == 0:\n            return \'opponent\'\n        else:\n            return \'paul\'\n\n\ndef main():\n    n, p, q = map(int, input().split())\n    print(whoServes(n, p, q))\n\n\nif __name__ == "__main__":\n    main()\n', "\n\n#SOLUTION \n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n\tif p + q == 0:\n\t\treturn 'paul'\n\telif (p + q) % (2 * n) < n:\n\t\tif (p + q) % 2 == 0:\n\t\t\treturn 'paul'\n\t\telse:\n\t\t\treturn 'opponent'\n\telse:\n\t\tif (p + q) % 2 == 0:\n\t\t\treturn 'opponent'\n\t\telse:\n\t\t\treturn 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\n\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n"]
2022-04-16 14:13:28.323234 size on output set 5
2022-04-16 14:13:28.323244 num operations 1
2022-04-16 14:13:28.323249 size on input set 1
2022-04-16 14:13:35.882620 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nprint(n, p, q)\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().rstrip().split())\n\nprint(\"paul\" if (p + q) % (2 * n) < n else \"opponent\")\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n and (p + q) % (2 * n) > 0:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 5,
      "text": "#! /usr/bin/env python\n\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 7,
      "text": "#! /usr/bin/env python3\n\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n"
    }
  ],
  "created": 1650118408,
  "object": "edit"
}
2022-04-16 14:13:35.882845 fix syntax errors 9 ['\n\nimport sys\nprint(n, p, q)\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) <= n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().rstrip().split())\n\nprint("paul" if (p + q) % (2 * n) < n else "opponent")\n', '\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n and (p + q) % (2 * n) > 0:\n    print("paul")\nelse:\n    print("opponent")\n', '#! /usr/bin/env python\n\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', '#! /usr/bin/env python3\n\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n', '\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print("paul")\nelse:\n    print("opponent")\n']
2022-04-16 14:13:35.882876 size on output set 7
2022-04-16 14:13:35.882897 num operations 1
2022-04-16 14:13:35.882905 size on input set 1
2022-04-16 14:13:45.083738 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P % (N + 1) > Q % (N + 1):\n        print(\"paul\")\n    else:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 1,
      "text": "\n\nN, P, Q = [int(x) for x in input().split()]  # input()\n\nif P % (N + 1) == 0:\n    print(\"opponent\")  # print()\nelif Q % (N + 1) == 0:\n    print(\"paul\")  # print()\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")  # print()\n    else:\n        print(\"paul\")  # print()\n"
    },
    {
      "index": 2,
      "text": "\"\"\"\nhttps://codeforces.com/contest/1369/problem/A\n\"\"\"\n\n\n\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0 or Q % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 3,
      "text": "\n\nn, p, q = [int(x) for x in input().split()]\n\nif p % (n + 1) == 0:\n    print(\"opponent\")\nelif q % (n + 1) == 0:\n    print(\"paul\")\nelse:\n    if p // (n + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 4,
      "text": "\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 5,
      "text": "\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 1:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 6,
      "text": "\n\nN, P, Q = list(map(int, input().split()))\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 7,
      "text": "\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n"
    },
    {
      "index": 8,
      "text": "\nprint(\"hello\")\n"
    }
  ],
  "created": 1650118415,
  "object": "edit"
}
2022-04-16 14:13:45.084034 fix syntax errors 9 ['\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print("opponent")\nelif Q % (N + 1) == 0:\n    print("paul")\nelse:\n    if P % (N + 1) > Q % (N + 1):\n        print("paul")\n    else:\n        print("opponent")\n    else:\n        print("paul")\n', '\n\nN, P, Q = [int(x) for x in input().split()]  # input()\n\nif P % (N + 1) == 0:\n    print("opponent")  # print()\nelif Q % (N + 1) == 0:\n    print("paul")  # print()\nelse:\n    if P // (N + 1) % 2 == 0:\n        print("opponent")  # print()\n    else:\n        print("paul")  # print()\n', '"""\nhttps://codeforces.com/contest/1369/problem/A\n"""\n\n\n\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0 or Q % (N + 1) == 0:\n    print("opponent")\nelif Q % (N + 1) == 0:\n    print("paul")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print("opponent")\n    else:\n        print("paul")\n', '\n\nn, p, q = [int(x) for x in input().split()]\n\nif p % (n + 1) == 0:\n    print("opponent")\nelif q % (n + 1) == 0:\n    print("paul")\nelse:\n    if p // (n + 1) % 2 == 0:\n        print("opponent")\n    else:\n        print("paul")\n', '\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print("opponent")\nelif Q % (N + 1) == 0:\n    print("paul")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print("opponent")\n    else:\n        print("paul")\n', '\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print("opponent")\nelif Q % (N + 1) == 0:\n    print("paul")\nelse:\n    if P // (N + 1) % 2 == 1:\n        print("opponent")\n    else:\n        print("paul")\n', '\n\nN, P, Q = list(map(int, input().split()))\n\nif P % (N + 1) == 0:\n    print("opponent")\nelif Q % (N + 1) == 0:\n    print("paul")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print("opponent")\n    else:\n        print("paul")\n', '\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print("opponent")\nelif Q % (N + 1) == 0:\n    print("paul")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print("opponent")\n    else:\n        print("paul")\n', '\nprint("hello")\n']
2022-04-16 14:13:45.084075 size on output set 8
