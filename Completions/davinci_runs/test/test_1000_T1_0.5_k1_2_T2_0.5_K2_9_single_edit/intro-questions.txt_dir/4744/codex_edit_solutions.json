["\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    for line in lines:\n        line = line.strip()\n        V = int(line)\n        # Find the smallest integer that is a factor of V\n        for i in range(2, int(math.sqrt(V)) + 1):\n            if V % i == 0:\n                # The cost of the box is the perimeter of the rectangle\n                print(2 * (V // i + i))\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = round(math.sqrt(V))\n        b = round(V / a)\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V\n    while True:\n        if V % 2 == 0:\n            V = V / 2\n        else:\n            break\n    print(int(V))\n    \n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\nn = int(input())\ns = 0\nfor i in range(1, n+1):\n    s += i\n\nprint(s)\n", "import math\nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\nprint(2*(a*b + b*c + a*c))\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    n = int(v**(1/3))\n    while n**3 < v:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != v:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*2)\n\nmain()\n", "\nimport math\n\ndef main():\n    V = int(input('Enter a number: '))\n    # Find the smallest integer that is a factor of V\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print('The smallest integer that is a factor of V is: ', 2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2*(V // i + i))\n            break\nif __name__ == \"__main__\":\n    main()\n", "\n\n#CODE\nn = int(input())\n\nside1 = n\nside2 = 1\n\nwhile side1 * side2 != n:\n    if side1 * side2 > n:\n        side1 -= 1\n    else:\n        side2 += 1\n\nprint(2 * (side1 + side2))\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3)) = 2*(V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3) + V^(1/3)*V^(2/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\n\nimport math\n\n# \u0412\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nV = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0431\u044a\u0451\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0435\u043f\u0438\u043f\u0435\u0434\u0430: \"))\n# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0435\u043f\u0438\u043f\u0435\u0434\u0430\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\n\n# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0435\u043f\u0438\u043f\u0435\u0434\u0430\nprint(\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0435\u043f\u0438\u043f\u0435\u0434\u0430 \u0440\u0430\u0432\u043d\u0430: \", 2*(a*b + b*c + a*c))\n", "\n# CODE:\nn = int(input())\nside1 = n\nside2 = 1\nwhile side1 * side2 != n:\n    if side1 * side2 > n:\n        side1 -= 1\n    else:\n        side2 += 1\nprint(2 * (side1 + side2))\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(a^2 + a + 1) * V^(1/3)\n# 2*(a*b + a*c + b*c) = 2*(a^2 + a + 1) * V^(1/3) = 2*(a(a+1) + 1) * V^(1/3)\n# 2*(a*b + a*c + b*c) = 2*(a(a+1) + 1) * V^(1/3) = 2*(a^2 + a + a + 1) * V^(1/3)\n# 2*(a*b + a*c + b*c) = 2*(a^2 + a + a + 1) * V^(1/3) = 2*(a^2 + 2a + 1) * V^(1/3)\n# 2*(a*b + a*c + b*c) = 2*(a^2 + 2a + 1) * V^(1/3) = 2*(a^2 + 2a + 1) * V^(1/3)\n# 2*(a*b + a*c + b*c) = 2*(a^2 + 2a + 1) * V^(1/3) = 2*(a^2 + 2a + 1) * V^(1/3)\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*4)\n\nmain()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\n\nimport math\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(V))\n        b = math.floor(V / a)\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main(v):\n    return find_cost(v)\n\ndef find_cost(v):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0:\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n    v = int(input())\n    print(main(v))\n", "\nimport math\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(V))\n        b = math.floor(V / a)\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*6)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*6)\n\nmain()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(4/3) + V^(2/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(4/3) + V^(2/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(4/3) + V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(4/3) + V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(4/3) + V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + V^(4/3) + V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + 2*V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + 2*V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + 2*V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + 2*V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + 2*V^(4/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + 2*V^(4/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\n\nimport math\n\ndef main():\n    v = int(input())\n    print(find_cost(v))\n\ndef find_cost(v):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0:\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n\n\n    main()\n", "\nimport math\n\ndef main():\n    v = int(input())\n    print(find_cost(v))\n\ndef find_cost(v):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0:\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1/3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n        if x*y*z == V:\n            break\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# import math\n\n# V = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n\n# print(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n\n# More efficient solution\n# V = int(input())\n# print(2*(V**(1/3))**2)\n\n# Even more efficient solution\nprint(2*(int(input())**(1/3))**2)\n", "\n\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1/3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n        while x*y*z != V:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v * 6)\n\n\nmain()\n", "import math\n\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(V))\n        b = math.floor(V / a)\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1/3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*V^(5/3) + 2*V^(4/3) + 2*V^(5/3)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*V^(5/3) + 2*V^(4/3) + 2*V^(5/3)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3)) = 2*V^(5/3) + 2*V^(4/3) + 2*V^(5/3)\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1/3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V and x > 0 and y > 0 and z > 0:\n        x -= 1\n        y -= 1\n    if x < 0 or y < 0 or z < 0:\n        print(-1)\n        return\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*7)\n\nmain()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = c = b = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3) + V^(2/3) + V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(3*V^(2/3))\n# 2*(a*b + a*c + b*c) = 6*V^(2/3)\n# 2*(a*b + a*c + b*c)/6 = V^(2/3)\n# (2*(a*b + a*c + b*c)/6)^3 = V\n# (2*(a*b + a*c + b*c)/6)^3 = V\n# (2*(a*b + a*c + b*c)/6)^3 = V\n\n# print(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\nprint(math.pow((2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2)/6), 3))\n", "\nimport math\n\nV = int(input())\n\na = math.ceil(V**(1 / 3))\nb = math.ceil((V / a)**(1 / 2))\nc = math.ceil(V / (a * b))\n\nprint(2 * (a * b + b * c + a * c))\n", "\n\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n    v = int(input().strip())\n    print(cost(v))\n\ndef cost(v):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0:\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\nimport math\n\nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\n\nprint(2*(a*b + b*c + a*c))\n", "\n\n# CODE:\nn = int(input())\n\nside1 = n\nside2 = 1\n\nwhile side1 * side2 != n:\n    if side1 * side2 > n:\n        side1 -= 1\n    else:\n        side2 += 1\n\nprint(2 * (side1 + side2))\n", "\n\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1.0/3.0))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\nV = int(input())\n\na = int(math.ceil(V**(1/3)))\nb = int(math.ceil((V/a)**(1/2)))\nc = int(math.ceil(V/(a*b)))\n\nprint(2*(a*b + b*c + a*c))\n", "import math\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(V))\n        b = math.floor(V / a)\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V.\n    for i in range(2, int(math.sqrt(V)) + 1): \n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle.\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = int(math.ceil(math.sqrt(V)))\n        b = int(math.floor(V / a))\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1.0/3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\nprint(2*(a*b + b*c + a*c))\n", "\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())  # get the input\n    print(v*6)  # print the answer\n\nmain()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (2/3)) + math.pow(V, (2/3))*math.pow(V, (1/3))))\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v * 6)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1./3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef main():\n    v = int(input())\n    print(find_cost(v))\n\ndef find_cost(v):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0:\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n    main()\n"]