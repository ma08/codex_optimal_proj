2022-04-09 20:35:43.162139 """
Polycarp has three sisters: Alice, Barbara, and Cerene. They're collecting coins. Currently, Alice has $a$ coins, Barbara has $b$ coins and Cerene has $c$ coins. Recently Polycarp has returned from the trip around the world and brought $n$ coins.

He wants to distribute all these $n$ coins between his sisters in such a way that the number of coins Alice has is equal to the number of coins Barbara has and is equal to the number of coins Cerene has. In other words, if Polycarp gives $A$ coins to Alice, $B$ coins to Barbara and $C$ coins to Cerene ($A+B+C=n$), then $a + A = b + B = c + C$.

Note that A, B or C (the number of coins Polycarp gives to Alice, Barbara and Cerene correspondingly) can be 0.

Your task is to find out if it is possible to distribute all $n$ coins between sisters in a way described above.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases.

The next $t$ lines describe test cases. Each test case is given on a new line and consists of four space-separated integers $a, b, c$ and $n$ ($1 \le a, b, c, n \le 10^8$) — the number of coins Alice has, the number of coins Barbara has, the number of coins Cerene has and the number of coins Polycarp has.


-----Output-----

For each test case, print "YES" if Polycarp can distribute all $n$ coins between his sisters and "NO" otherwise.


-----Example-----
Input
5
5 3 2 8
100 101 102 105
3 2 1 100000000
10 20 15 14
101 101 101 3

Output
YES
YES
NO
NO
YES
"""
2022-04-09 20:35:43.162161 --------------------------
2022-04-09 20:37:21.803582 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# t = int(input())\n# for _ in range(t):\n#     a, b, c, n = map(int, input().split())\n#     if (a + b + c) == n:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Game\n\nPolycarp has a game. He has a board with $n$ cells. There are $n$ coins on the board. The coins are numbered from 1 to $n$.\n\nThe game is played in turns. In each turn Polycarp chooses one coin and drops it. Polycarp wins if he can drop all the coins and the last coin he drops is the coin number $n$.\n\nYou have to determine if Polycarp can win the game.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^9$) \u2014 the number of cells on the board.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if Polycarp can win and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n1\n2\n3\n4\n5\n\nOutput\nYES\nYES\nYES\nNO\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     if n == 1:\n#         print('YES')\n#     elif n % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Function\n\nPolycarp has a function $f(x)$. He has $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nPolycarp wants to find $x$ such that $f(x) = a_1 + a_2 + \\ldots + a_n$.\n\nYou have to determine if it is possible to find such $x$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of two space-separated integers $n$ and $k$ ($1 \\le n \\le 100$, $1 \\le k \\le 10^9$) \u2014 the number of integers Polycarp has and the sum of all these integers.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the integers Polycarp has.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to find such $x$ and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3 10\n1 2 7\n3 10\n1 2 8\n3 10\n1 2 9\n3 10\n1 2 10\n3 10\n1 2 11\n\nOutput\nYES\nNO\nNO\nYES\nNO\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n, k = map(int, input().split())\n#     a = list(map(int, input().split()))\n#     if k == sum(a):\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Array\n\nPolycarp has an array $a$ of length $n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the array.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Sequence\n\nPolycarp has a sequence $a_1, a_2, \\ldots, a_n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the sequence.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the sequence.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Tree\n\nPolycarp has a tree. There are $n$ vertices in the tree ($1 \\le n \\le 10^5$). Each vertex is colored either red or blue. Polycarp wants to perform the following operation:\n\nFor each vertex $v$:\n\nIf $v$ is blue, color all its children red.\n\nIf $v$ is red, color all its children blue.\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of vertices in the tree.\n\nThe next $n-1$ lines describe the edges of the tree. Each edge is given on a new line and consists of two space-separated integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) \u2014 the numbers of vertices connected by the edge.\n\nThe next line contains $n$ space-separated integers $c_1, c_2, \\ldots, c_n$ ($0 \\le c_i \\le 1$) \u2014 the colors of vertices. $c_i=0$ means that the $i$-th vertex is red and $c_i=1$ means that the $i$-th vertex is blue.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2\n2 3\n1 0 0\n3\n1 2\n2 3\n0 1 0\n3\n1 2\n2 3\n0 0 1\n3\n1 2\n2 3\n1 1 1\n3\n1 2\n2 3\n0 1 1\n\nOutput\nNO\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     edges = []\n#     for _ in range(n - 1):\n#         edges.append(list(map(int, input().split())))\n#     colors = list(map(int, input().split()))\n#     if colors.count(0) > 1:\n#         print('NO')\n#     else:\n#         print('YES')\n\n\"\"\"\nPolycarp and the Matrix\n\nPolycarp has a matrix $a$ of size $n$ by $m$ ($1 \\le n, m \\le 10^5$). He wants to perform the following operation:\n\nFor each row $i$:\n\nFor each column $j$:\n\n$a_{i,j}$ = $a_{i,j}$ XOR $i$ XOR $j$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of two space-separated integers $n$ and $m$ ($1 \\le n, m \\le 10^5$) \u2014 the sizes of the matrix.\n\nThe next $n$ lines describe the matrix. The $i$-th line contains $m$ space-separated integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ ($0 \\le a_{i,j} \\le 1$) \u2014 the elements of the matrix.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3 3\n1 0 1\n1 1 1\n1 0 1\n3 3\n1 1 1\n1 0 1\n1 0 1\n3 3\n0 0 0\n0 0 0\n0 0 0\n3 3\n1 1 1\n1 1 1\n1 1 1\n3 3\n0 0 0\n0 0 1\n0 0 0\n\nOutput\nNO\nNO\nYES\nYES\nNO\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n, m = map(int, input().split())\n#     a = [list(map(int, input().split())) for _ in range(n)]\n#     if sum(sum(a, [])) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Graph\n\nPolycarp has a graph. There are $n$ vertices in the graph ($1 \\le n \\le 10^5$). Each vertex is colored either red or blue. Polycarp wants to perform the following operation:\n\nFor each vertex $v$:\n\nIf $v$ is blue, color all its neighbours red.\n\nIf $v$ is red, color all its neighbours blue.\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of vertices in the graph.\n\nThe next $n-1$ lines describe the edges of the graph. Each edge is given on a new line and consists of two space-separated integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) \u2014 the numbers of vertices connected by the edge.\n\nThe next line contains $n$ space-separated integers $c_1, c_2, \\ldots, c_n$ ($0 \\le c_i \\le 1$) \u2014 the colors of vertices. $c_i=0$ means that the $i$-th vertex is red and $c_i=1$ means that the $i$-th vertex is blue.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2\n2 3\n1 0 0\n3\n1 2\n2 3\n0 1 0\n3\n1 2\n2 3\n0 0 1\n3\n1 2\n2 3\n1 1 1\n3\n1 2\n2 3\n0 1 1\n\nOutput\nNO\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     edges = []\n#     for _ in range(n - 1):\n#         edges.append(list(map(int, input().split())))\n#     colors = list(map(int, input().split()))\n#     if colors.count(0) > 1:\n#         print('NO')\n#     else:\n#         print('YES')\n\n\"\"\"\nPolycarp and the Array\n\nPolycarp has an array $a$ of length $n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the array.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Sequence\n\nPolycarp has a sequence $a_1, a_2, \\ldots, a_n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the sequence.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the sequence.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin\nfrom math import gcd\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    a, b, c, n = map(int, stdin.readline().split())\n    d = gcd(gcd(a, b), c)\n    print(\"YES\" if n % d == 0 else \"NO\")"
    }
  ],
  "created": 1649550943,
  "id": "cmpl-4vFqJPhkXY1zr3CAxO1DtYriSVhpe",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:37:21.804055 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# t = int(input())\n# for _ in range(t):\n#     a, b, c, n = map(int, input().split())\n#     if (a + b + c) == n:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Game\n\nPolycarp has a game. He has a board with $n$ cells. There are $n$ coins on the board. The coins are numbered from 1 to $n$.\n\nThe game is played in turns. In each turn Polycarp chooses one coin and drops it. Polycarp wins if he can drop all the coins and the last coin he drops is the coin number $n$.\n\nYou have to determine if Polycarp can win the game.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^9$) \u2014 the number of cells on the board.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if Polycarp can win and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n1\n2\n3\n4\n5\n\nOutput\nYES\nYES\nYES\nNO\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     if n == 1:\n#         print('YES')\n#     elif n % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Function\n\nPolycarp has a function $f(x)$. He has $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nPolycarp wants to find $x$ such that $f(x) = a_1 + a_2 + \\ldots + a_n$.\n\nYou have to determine if it is possible to find such $x$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of two space-separated integers $n$ and $k$ ($1 \\le n \\le 100$, $1 \\le k \\le 10^9$) \u2014 the number of integers Polycarp has and the sum of all these integers.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the integers Polycarp has.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to find such $x$ and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3 10\n1 2 7\n3 10\n1 2 8\n3 10\n1 2 9\n3 10\n1 2 10\n3 10\n1 2 11\n\nOutput\nYES\nNO\nNO\nYES\nNO\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n, k = map(int, input().split())\n#     a = list(map(int, input().split()))\n#     if k == sum(a):\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Array\n\nPolycarp has an array $a$ of length $n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the array.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Sequence\n\nPolycarp has a sequence $a_1, a_2, \\ldots, a_n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the sequence.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the sequence.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Tree\n\nPolycarp has a tree. There are $n$ vertices in the tree ($1 \\le n \\le 10^5$). Each vertex is colored either red or blue. Polycarp wants to perform the following operation:\n\nFor each vertex $v$:\n\nIf $v$ is blue, color all its children red.\n\nIf $v$ is red, color all its children blue.\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of vertices in the tree.\n\nThe next $n-1$ lines describe the edges of the tree. Each edge is given on a new line and consists of two space-separated integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) \u2014 the numbers of vertices connected by the edge.\n\nThe next line contains $n$ space-separated integers $c_1, c_2, \\ldots, c_n$ ($0 \\le c_i \\le 1$) \u2014 the colors of vertices. $c_i=0$ means that the $i$-th vertex is red and $c_i=1$ means that the $i$-th vertex is blue.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2\n2 3\n1 0 0\n3\n1 2\n2 3\n0 1 0\n3\n1 2\n2 3\n0 0 1\n3\n1 2\n2 3\n1 1 1\n3\n1 2\n2 3\n0 1 1\n\nOutput\nNO\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     edges = []\n#     for _ in range(n - 1):\n#         edges.append(list(map(int, input().split())))\n#     colors = list(map(int, input().split()))\n#     if colors.count(0) > 1:\n#         print('NO')\n#     else:\n#         print('YES')\n\n\"\"\"\nPolycarp and the Matrix\n\nPolycarp has a matrix $a$ of size $n$ by $m$ ($1 \\le n, m \\le 10^5$). He wants to perform the following operation:\n\nFor each row $i$:\n\nFor each column $j$:\n\n$a_{i,j}$ = $a_{i,j}$ XOR $i$ XOR $j$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of two space-separated integers $n$ and $m$ ($1 \\le n, m \\le 10^5$) \u2014 the sizes of the matrix.\n\nThe next $n$ lines describe the matrix. The $i$-th line contains $m$ space-separated integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ ($0 \\le a_{i,j} \\le 1$) \u2014 the elements of the matrix.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3 3\n1 0 1\n1 1 1\n1 0 1\n3 3\n1 1 1\n1 0 1\n1 0 1\n3 3\n0 0 0\n0 0 0\n0 0 0\n3 3\n1 1 1\n1 1 1\n1 1 1\n3 3\n0 0 0\n0 0 1\n0 0 0\n\nOutput\nNO\nNO\nYES\nYES\nNO\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n, m = map(int, input().split())\n#     a = [list(map(int, input().split())) for _ in range(n)]\n#     if sum(sum(a, [])) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Graph\n\nPolycarp has a graph. There are $n$ vertices in the graph ($1 \\le n \\le 10^5$). Each vertex is colored either red or blue. Polycarp wants to perform the following operation:\n\nFor each vertex $v$:\n\nIf $v$ is blue, color all its neighbours red.\n\nIf $v$ is red, color all its neighbours blue.\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of vertices in the graph.\n\nThe next $n-1$ lines describe the edges of the graph. Each edge is given on a new line and consists of two space-separated integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) \u2014 the numbers of vertices connected by the edge.\n\nThe next line contains $n$ space-separated integers $c_1, c_2, \\ldots, c_n$ ($0 \\le c_i \\le 1$) \u2014 the colors of vertices. $c_i=0$ means that the $i$-th vertex is red and $c_i=1$ means that the $i$-th vertex is blue.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2\n2 3\n1 0 0\n3\n1 2\n2 3\n0 1 0\n3\n1 2\n2 3\n0 0 1\n3\n1 2\n2 3\n1 1 1\n3\n1 2\n2 3\n0 1 1\n\nOutput\nNO\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     edges = []\n#     for _ in range(n - 1):\n#         edges.append(list(map(int, input().split())))\n#     colors = list(map(int, input().split()))\n#     if colors.count(0) > 1:\n#         print('NO')\n#     else:\n#         print('YES')\n\n\"\"\"\nPolycarp and the Array\n\nPolycarp has an array $a$ of length $n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the array.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp and the Sequence\n\nPolycarp has a sequence $a_1, a_2, \\ldots, a_n$ ($1 \\le n \\le 10^5$). He wants to perform the following operation:\n\nFor $i$ from 1 to $n$:\n\n$a_i$ = $a_i$ XOR $i$\n\nYou have to determine if it is possible to perform the operation.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the sequence.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the sequence.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to perform the operation and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 3\n3\n1 2 4\n3\n1 3 2\n3\n1 3 4\n3\n3 2 1\n\nOutput\nYES\nNO\nNO\nYES\nYES\n\"\"\"\n\n# t = int(input())\n# for _ in range(t):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     if sum(a) % 2 == 0:\n#         print('YES')\n#     else:\n#         print('NO')\n\n\"\"\"\nPolycarp"
}
2022-04-09 20:37:21.804199 REASON length
2022-04-09 20:37:21.804205 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin\nfrom math import gcd\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    a, b, c, n = map(int, stdin.readline().split())\n    d = gcd(gcd(a, b), c)\n    print(\"YES\" if n % d == 0 else \"NO\")"
}
2022-04-09 20:37:21.804235 REASON stop
