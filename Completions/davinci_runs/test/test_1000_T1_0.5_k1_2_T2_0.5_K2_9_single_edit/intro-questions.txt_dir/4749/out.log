2022-04-09 21:54:37.316167 """
You are given an $n$-by-$n$ grid where each square is colored either black or white. A grid is correct if all of the following conditions are satisfied:
 - Every row has the same number of black squares as it has white squares.
 - Every column has the same number of black squares as it has white squares.
 - No row or column has $3$ or more consecutive squares of the same color.

Given a grid, determine whether it is correct.

-----Input-----
The first line contains an integer $n$ ($2\le n\le 24$; $n$ is even). Each of the next $n$ lines contains a string of length $n$ consisting solely of the characters ‘B’ and ‘W’, representing the colors of the grid squares.

-----Output-----
If the grid is correct, print the number $1$ on a single line. Otherwise, print the number $0$ on a single line.

-----Examples-----
Sample Input 1:
4
WBBW
WBWB
BWWB
BWBW
Sample Output 1:
1

Sample Input 2:
4
BWWB
BWBB
WBBW
WBWW
Sample Output 2:
0

Sample Input 3:
6
BWBWWB
WBWBWB
WBBWBW
BBWBWW
BWWBBW
WWBWBB
Sample Output 3:
0
"""
2022-04-09 21:54:37.316185 --------------------------
2022-04-09 21:55:14.837418 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)"
    }
  ],
  "created": 1649555677,
  "id": "cmpl-4vH4fWyHxGParEXri0bfOem6brpoN",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:55:14.837779 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)"
}
2022-04-09 21:55:14.837889 REASON stop
2022-04-09 21:55:14.849041 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
2022-04-09 21:55:14.849081 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)"
}
2022-04-09 21:55:14.849151 REASON stop
2022-04-09 21:55:14.849618 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
2022-04-09 21:55:14.849648 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)"
}
2022-04-09 21:55:14.849730 REASON stop
2022-04-09 21:55:14.850137 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
2022-04-09 21:55:14.850184 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)"
}
2022-04-09 21:55:14.850255 REASON stop
2022-04-09 21:55:14.850637 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
2022-04-09 21:55:14.850669 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)"
}
2022-04-09 21:55:14.850734 REASON stop
2022-04-09 21:55:14.851109 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
2022-04-09 21:55:14.851140 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)"
}
2022-04-09 21:55:14.851210 REASON stop
2022-04-09 21:55:14.851418 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
2022-04-09 21:55:14.851424 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)"
}
2022-04-09 21:55:14.851454 REASON stop
2022-04-09 21:55:14.851751 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
2022-04-09 21:55:14.851833 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)"
}
2022-04-09 21:55:14.851890 REASON stop
2022-04-09 21:55:14.852107 test/intro-questions.txt_dir/4749/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4749/solutions.json'
