2022-04-16 10:05:50.731456 num operations 1
2022-04-16 10:05:50.731471 size on input set 1
2022-04-16 10:06:02.839331 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(2)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input().strip())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        if grid[j][i] == 'B':\n            col_count[i] += 1\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 3,
      "text": "n = int(input())\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('1'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == '1' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('111') > 0 or grid[i].count('000') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n    if grid[i].count('B') != n//2 or grid[i].count('W') != n//2:\n        print(0)\n        exit()\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input().strip())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 8,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] and grid[i][j] == grid[i][j + 2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n // 2:\n        print(0)\n        exit()\n    if col_count[i] != n // 2:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1650103550,
  "object": "edit"
}
2022-04-16 10:06:02.839789 fix syntax errors 9 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(2)\n", "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input().strip())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        if grid[j][i] == 'B':\n            col_count[i] += 1\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "n = int(input())\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('1'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == '1' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('111') > 0 or grid[i].count('000') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n    if grid[i].count('B') != n//2 or grid[i].count('W') != n//2:\n        print(0)\n        exit()\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input().strip())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] and grid[i][j] == grid[i][j + 2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n // 2:\n        print(0)\n        exit()\n    if col_count[i] != n // 2:\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-16 10:06:02.839937 size on output set 9
2022-04-16 10:06:02.839952 num operations 1
2022-04-16 10:06:02.839959 size on input set 1
2022-04-16 10:06:15.953799 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import Counter\na = input()\nb = input()\na = Counter(a)\nb = Counter(b)\nc = a & b\nprint(len(list(c.elements())))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid(grid):\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid(grid):\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row, n):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column, n):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i], n):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column, n):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n\n# #!/bin/python3\n\n# import math\n# import os\n# import random\n# import re\n# import sys\n\n# # Complete the countApplesAndOranges function below.\n# def countApplesAndOranges(s, t, a, b, apples, oranges):\n#     num_apples = 0\n#     num_oranges = 0\n#     for i in range(len(apples)):\n#         if s <= a + apples[i] <= t:\n#             num_apples += 1\n#     for i in range(len(oranges)):\n#         if s <= b + oranges[i] <= t:\n#             num_oranges += 1\n#     print(num_apples)\n#     print(num_oranges)\n\n# if __name__ == '__main__':\n#     st = input().split()\n\n#     s = int(st[0])\n\n#     t = int(st[1])\n\n#     ab = input().split()\n\n#     a = int(ab[0])\n\n#     b = int(ab[1])\n\n#     mn = input().split()\n\n#     m = int(mn[0])\n\n#     n = int(mn[1])\n\n#     apples = list(map(int, input().rstrip().split()))\n\n#     oranges = list(map(int, input().rstrip().split()))\n\n#     countApplesAndOranges(s, t, a, b, apples, oranges)\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\ndef check_row(grid):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(grid):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\ndef check_grid(grid):\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\nif check_grid(grid):\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 8,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    }
  ],
  "created": 1650103562,
  "object": "edit"
}
2022-04-16 10:06:15.954156 fix syntax errors 9 ['\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\n\nfrom collections import Counter\na = input()\nb = input()\na = Counter(a)\nb = Counter(b)\nc = a & b\nprint(len(list(c.elements())))\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid(grid):\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid(grid):\n    print(1)\nelse:\n    print(0)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row, n):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column, n):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i], n):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column, n):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n\n# #!/bin/python3\n\n# import math\n# import os\n# import random\n# import re\n# import sys\n\n# # Complete the countApplesAndOranges function below.\n# def countApplesAndOranges(s, t, a, b, apples, oranges):\n#     num_apples = 0\n#     num_oranges = 0\n#     for i in range(len(apples)):\n#         if s <= a + apples[i] <= t:\n#             num_apples += 1\n#     for i in range(len(oranges)):\n#         if s <= b + oranges[i] <= t:\n#             num_oranges += 1\n#     print(num_apples)\n#     print(num_oranges)\n\n# if __name__ == \'__main__\':\n#     st = input().split()\n\n#     s = int(st[0])\n\n#     t = int(st[1])\n\n#     ab = input().split()\n\n#     a = int(ab[0])\n\n#     b = int(ab[1])\n\n#     mn = input().split()\n\n#     m = int(mn[0])\n\n#     n = int(mn[1])\n\n#     apples = list(map(int, input().rstrip().split()))\n\n#     oranges = list(map(int, input().rstrip().split()))\n\n#     countApplesAndOranges(s, t, a, b, apples, oranges)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\ndef check_row(grid):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(grid):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\ndef check_grid(grid):\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\nif check_grid(grid):\n    print(1)\nelse:\n    print(0)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n']
2022-04-16 10:06:15.954268 size on output set 7
2022-04-16 10:06:15.954280 num operations 1
2022-04-16 10:06:15.954285 size on input set 1
2022-04-16 10:06:52.170346 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 1\n    for i in range(n-1):\n        if row[i] == row[i+1] and row[i]!='.':\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 1\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i] and grid[j][i]!='.':\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\ndef f(x):\n    return x**2\ndef g(x):\n    return x**3\ndef h(x):\n    return x**4\ndef k(x):\n    return x**5\n"
    },
    {
      "index": 2,
      "text": "\n#\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# # check rows\n# for row in grid:\n#     count = 0\n#     for i in range(n-1):\n#         if row[i] == row[i+1]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # check columns\n# for i in range(n):\n#     count = 0\n#     for j in range(n-1):\n#         if grid[j][i] == grid[j+1][i]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # if all conditions are satisfied\n# print(1)\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 3
    },
    {
      "index": 4,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n - 1):\n        if row[i] == row[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n - 1):\n        if grid[j][i] == grid[j + 1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 6,
      "text": "\n\n\ndef check_rows(grid):\n    for row in grid:\n        count = 0\n        for i in range(n-1):\n            if row[i] == row[i+1]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n\n\ndef check_columns(grid):\n    for i in range(n):\n        count = 0\n        for j in range(n-1):\n            if grid[j][i] == grid[j+1][i]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ncheck_rows(grid)\ncheck_columns(grid)\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for j in range(n-1):\n        if row[j] == row[j+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 8,
      "text": "\n\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# # check rows\n# for row in grid:\n#     count = 0\n#     for i in range(n-1):\n#         if row[i] == row[i+1]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # check columns\n# for i in range(n):\n#     count = 0\n#     for j in range(n-1):\n#         if grid[j][i] == grid[j+1][i]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # if all conditions are satisfied\n# print(1)\n\nn = int(input()) # 3\ngrid = [input() for i in range(n)] # [111,101,101]\n# grid = [['1', '1', '1'], ['1', '0', '1'], ['1', '0', '1']]\n# print(grid)\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] == '1':\n            if i < n - 1 and grid[i + 1][j] == '1':\n                print(0)\n                exit()\n            if j < n - 1 and grid[i][j + 1] == '1':\n                print(0)\n                exit()\nprint(1)\n"
    }
  ],
  "created": 1650103575,
  "object": "edit"
}
2022-04-16 10:06:52.170580 NO RESULT
2022-04-16 10:06:52.170587 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 3
}
2022-04-16 10:06:52.170626 fix syntax errors 8 ["\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 1\n    for i in range(n-1):\n        if row[i] == row[i+1] and row[i]!='.':\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 1\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i] and grid[j][i]!='.':\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n", '\ndef f(x):\n    return x**2\ndef g(x):\n    return x**3\ndef h(x):\n    return x**4\ndef k(x):\n    return x**5\n', '\n#\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# # check rows\n# for row in grid:\n#     count = 0\n#     for i in range(n-1):\n#         if row[i] == row[i+1]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # check columns\n# for i in range(n):\n#     count = 0\n#     for j in range(n-1):\n#         if grid[j][i] == grid[j+1][i]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # if all conditions are satisfied\n# print(1)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n - 1):\n        if row[i] == row[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n - 1):\n        if grid[j][i] == grid[j + 1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\n\n\ndef check_rows(grid):\n    for row in grid:\n        count = 0\n        for i in range(n-1):\n            if row[i] == row[i+1]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n\n\ndef check_columns(grid):\n    for i in range(n):\n        count = 0\n        for j in range(n-1):\n            if grid[j][i] == grid[j+1][i]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ncheck_rows(grid)\ncheck_columns(grid)\n\n# if all conditions are satisfied\nprint(1)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for j in range(n-1):\n        if row[j] == row[j+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', "\n\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# # check rows\n# for row in grid:\n#     count = 0\n#     for i in range(n-1):\n#         if row[i] == row[i+1]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # check columns\n# for i in range(n):\n#     count = 0\n#     for j in range(n-1):\n#         if grid[j][i] == grid[j+1][i]:\n#             count += 1\n#         else:\n#             count = 0\n#         if count == 2:\n#             print(0)\n#             exit()\n#\n# # if all conditions are satisfied\n# print(1)\n\nn = int(input()) # 3\ngrid = [input() for i in range(n)] # [111,101,101]\n# grid = [['1', '1', '1'], ['1', '0', '1'], ['1', '0', '1']]\n# print(grid)\nfor i in range(n):\n    for j in range(n):\n        if grid[i][j] == '1':\n            if i < n - 1 and grid[i + 1][j] == '1':\n                print(0)\n                exit()\n            if j < n - 1 and grid[i][j + 1] == '1':\n                print(0)\n                exit()\nprint(1)\n"]
2022-04-16 10:06:52.170764 size on output set 8
2022-04-16 10:06:52.170776 num operations 1
2022-04-16 10:06:52.170781 size on input set 1
2022-04-16 10:07:17.535716 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row\nfor i in range(n):\n    num_black = sum([grid[i][j] == 'B' for j in range(n)])\n    num_white = sum([grid[i][j] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for equal number of black and white squares in each column\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any column\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n    print(0)\n    exit()\n\nprint(1)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input().strip())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input().strip()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 6,
      "text": "\n'''\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n'''\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 8,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if grid[i][0] == grid[i][1] == grid[i][2]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n    if grid[i][n-3] == grid[i][n-2] == grid[i][n-1]:\n        print(0)\n        exit()\n\nfor i in range(n):\n    if grid[0][i] == grid[1][i] == grid[2][i]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[j][i] == grid[j+1][i] == grid[j+2][i]:\n            print(0)\n            exit()\n    if grid[n-3][i] == grid[n-2][i] == grid[n-1][i]:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1650103612,
  "object": "edit"
}
2022-04-16 10:07:17.536128 fix syntax errors 9 ["\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row\nfor i in range(n):\n    num_black = sum([grid[i][j] == 'B' for j in range(n)])\n    num_white = sum([grid[i][j] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for equal number of black and white squares in each column\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any column\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n    print(0)\n    exit()\n\nprint(1)\n", "\n\nn = int(input().strip())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input().strip()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n'''\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n'''\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if grid[i][0] == grid[i][1] == grid[i][2]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n    if grid[i][n-3] == grid[i][n-2] == grid[i][n-1]:\n        print(0)\n        exit()\n\nfor i in range(n):\n    if grid[0][i] == grid[1][i] == grid[2][i]:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[j][i] == grid[j+1][i] == grid[j+2][i]:\n            print(0)\n            exit()\n    if grid[n-3][i] == grid[n-2][i] == grid[n-1][i]:\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-16 10:07:17.536258 size on output set 7
2022-04-16 10:07:17.536270 num operations 1
2022-04-16 10:07:17.536275 size on input set 1
2022-04-16 10:07:37.317841 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# read the input data and store it in a list\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each column should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (no three black or white cells should be in a row)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef main():\n\n    # read the input data\n    n = int(input())\n    grid = [list(input()) for i in range(n)]\n\n    # check the first condition\n    black_white_count = 0\n    for i in range(n):\n        black_white_count += grid[i].count('B') - grid[i].count('W')\n    if black_white_count != 0:\n        print(0)\n        exit()\n\n    # check the second condition\n    black_white_count = 0\n    for i in range(n):\n        black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\n    if black_white_count != 0:\n        print(0)\n        exit()\n\n    # check the third condition\n    for i in range(n):\n        for j in range(n-2):\n            if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n                print(0)\n                exit()\n\n    # if the grid is correct, print 1\n    print(1)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 4,
      "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] \\\n                or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 5,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 6,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    quit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    quit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            quit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 7,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 8,
      "text": "\n\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n"
    }
  ],
  "created": 1650103637,
  "object": "edit"
}
2022-04-16 10:07:37.318168 fix syntax errors 9 ["\n\n# read the input data and store it in a list\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each column should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (no three black or white cells should be in a row)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n\n\ndef main():\n\n    # read the input data\n    n = int(input())\n    grid = [list(input()) for i in range(n)]\n\n    # check the first condition\n    black_white_count = 0\n    for i in range(n):\n        black_white_count += grid[i].count('B') - grid[i].count('W')\n    if black_white_count != 0:\n        print(0)\n        exit()\n\n    # check the second condition\n    black_white_count = 0\n    for i in range(n):\n        black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\n    if black_white_count != 0:\n        print(0)\n        exit()\n\n    # check the third condition\n    for i in range(n):\n        for j in range(n-2):\n            if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n                print(0)\n                exit()\n\n    # if the grid is correct, print 1\n    print(1)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] \\\n                or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    quit()\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    quit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            quit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n\n# if the grid is correct, print 1\nprint(1)\n", "\n\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n"]
2022-04-16 10:07:37.318251 size on output set 8
2022-04-16 10:07:37.318268 num operations 1
2022-04-16 10:07:37.318274 size on input set 1
2022-04-16 10:07:51.616590 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\ngrid = [input() for i in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 3,
      "text": "n = int(input())\ngrid = [input() for _ in range(n)]  # \u5165\u529b\u3092\u884c\u3054\u3068\u306b\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\n\n\n# \u884c\u3092\u30c1\u30a7\u30c3\u30af\nfor row in grid:\n    # \u8272\u306e\u6570\u3092\u30c1\u30a7\u30c3\u30af\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # \u9023\u7d9a\u3059\u308b\u8272\u3092\u30c1\u30a7\u30c3\u30af\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# \u5217\u3092\u30c1\u30a7\u30c3\u30af\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]  # \u5217\u3092\u53d6\u308a\u51fa\u3059\n    # \u8272\u306e\u6570\u3092\u30c1\u30a7\u30c3\u30af\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # \u9023\u7d9a\u3059\u308b\u8272\u3092\u30c1\u30a7\u30c3\u30af\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 5,
      "text": "\n# check row\ndef check_row(n, grid):\n    for row in grid:\n        # check color\n        if row.count('B') != row.count('W'):\n            print(0)\n            exit()\n        # check consecutive\n        for i in range(n-2):\n            if row[i] == row[i+1] == row[i+2]:\n                print(0)\n                exit()\n\n# check column\ndef check_column(n, grid):\n    for j in range(n):\n        column = [grid[i][j] for i in range(n)]\n        # check color\n        if column.count('B') != column.count('W'):\n            print(0)\n            exit()\n        # check consecutive\n        for i in range(n-2):\n            if column[i] == column[i+1] == column[i+2]:\n                print(0)\n                exit()\n\n# main\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\ncheck_row(n, grid)\ncheck_column(n, grid)\n\nprint(1)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 7,
      "text": "\n# https://atcoder.jp/contests/abc142/tasks/abc142_c\n\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 8,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1650103657,
  "object": "edit"
}
2022-04-16 10:07:51.616963 fix syntax errors 9 ["\n#\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for i in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "n = int(input())\ngrid = [input() for _ in range(n)]  # 入力を行ごとにリストに格納\n\n\n# 行をチェック\nfor row in grid:\n    # 色の数をチェック\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # 連続する色をチェック\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# 列をチェック\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]  # 列を取り出す\n    # 色の数をチェック\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # 連続する色をチェック\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n# check row\ndef check_row(n, grid):\n    for row in grid:\n        # check color\n        if row.count('B') != row.count('W'):\n            print(0)\n            exit()\n        # check consecutive\n        for i in range(n-2):\n            if row[i] == row[i+1] == row[i+2]:\n                print(0)\n                exit()\n\n# check column\ndef check_column(n, grid):\n    for j in range(n):\n        column = [grid[i][j] for i in range(n)]\n        # check color\n        if column.count('B') != column.count('W'):\n            print(0)\n            exit()\n        # check consecutive\n        for i in range(n-2):\n            if column[i] == column[i+1] == column[i+2]:\n                print(0)\n                exit()\n\n# main\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\ncheck_row(n, grid)\ncheck_column(n, grid)\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n# https://atcoder.jp/contests/abc142/tasks/abc142_c\n\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-16 10:07:51.617058 size on output set 6
2022-04-16 10:07:51.617069 num operations 1
2022-04-16 10:07:51.617074 size on input set 1
2022-04-16 10:08:36.012579 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal numbers of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal numbers of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 3,
      "text": "\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 4,
      "text": "\n# check if row has equal number of black and white squares\n\ndef is_correct(grid):\n    n = len(grid)\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n\n# check if column has equal number of black and white squares\ndef is_equal(grid):\n    n = len(grid)\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n\n# check if no more than two consecutive squares of the same color\ndef is_consecutive(grid):\n    n = len(grid)\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid) and is_equal(grid) and is_consecutive(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 5,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of 'B' and 'W'\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of 'B' and 'W'\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color in row\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n    # check if no more than two consecutive squares of the same color in column\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 6,
      "text": "\ndef is_correct_sudoku(sudoku):\n    # check if each row has unique numbers\n    for row in sudoku:\n        if not is_unique(row):\n            return False\n    # check if each column has unique numbers\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        if not is_unique(column):\n            return False\n    # check if each 3x3 square has unique numbers\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            square = []\n            for k in range(3):\n                square += sudoku[i + k][j:j + 3]\n            if not is_unique(square):\n                return False\n    return True  # if all checks passed, the sudoku is correct\n\nif __name__ == '__main__':\n    sudoku = [list(map(int, input().split())) for _ in range(9)]\n    if is_correct_sudoku(sudoku):\n        print(1)\n    else:\n        print(0)\n\n\ndef is_unique(lst):\n    return len(set(lst)) == len(lst)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 7,
      "text": "\n\n\ndef is_correct(grid, n):\n    n = len(grid)\n    if n % 2 == 1:\n        # check if row has equal number of black and white squares\n        for row in grid:\n            if row.count('B') != row.count('W'):\n                return False\n        # check if column has equal number of black and white squares\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if column.count('B') != column.count('W'):\n                return False\n        # check if no more than two consecutive squares of the same color\n        for row in grid:\n            if 'BBB' in row or 'WWW' in row:\n                return False\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if 'BBB' in column or 'WWW' in column:\n                return False\n        return True\n    else:\n        # check if row has equal number of black and white squares\n        for row in grid:\n            if row.count('B') != row.count('W'):\n                return False\n        # check if column has equal number of black and white squares\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if column.count('B') != column.count('W'):\n                return False\n        # check if no more than two consecutive squares of the same color\n        for row in grid:\n            if 'BBB' in row or 'WWW' in row:\n                return False\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if 'BBB' in column or 'WWW' in column:\n                return False\n        return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid, n):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 8,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n): # i = 0, 1, 2, 3\n        column = [row[i] for row in grid] # column = ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B']\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n): # i = 0, 1, 2, 3\n        column = [row[i] for row in grid] # column = ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B']\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1650103671,
  "object": "edit"
}
2022-04-16 10:08:36.012934 fix syntax errors 9 ["\n\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal numbers of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal numbers of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n# check if row has equal number of black and white squares\n\ndef is_correct(grid):\n    n = len(grid)\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n\n# check if column has equal number of black and white squares\ndef is_equal(grid):\n    n = len(grid)\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n\n# check if no more than two consecutive squares of the same color\ndef is_consecutive(grid):\n    n = len(grid)\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid) and is_equal(grid) and is_consecutive(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of 'B' and 'W'\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of 'B' and 'W'\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color in row\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n    # check if no more than two consecutive squares of the same color in column\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\ndef is_correct_sudoku(sudoku):\n    # check if each row has unique numbers\n    for row in sudoku:\n        if not is_unique(row):\n            return False\n    # check if each column has unique numbers\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        if not is_unique(column):\n            return False\n    # check if each 3x3 square has unique numbers\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            square = []\n            for k in range(3):\n                square += sudoku[i + k][j:j + 3]\n            if not is_unique(square):\n                return False\n    return True  # if all checks passed, the sudoku is correct\n\nif __name__ == '__main__':\n    sudoku = [list(map(int, input().split())) for _ in range(9)]\n    if is_correct_sudoku(sudoku):\n        print(1)\n    else:\n        print(0)\n\n\ndef is_unique(lst):\n    return len(set(lst)) == len(lst)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\ndef is_correct(grid, n):\n    n = len(grid)\n    if n % 2 == 1:\n        # check if row has equal number of black and white squares\n        for row in grid:\n            if row.count('B') != row.count('W'):\n                return False\n        # check if column has equal number of black and white squares\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if column.count('B') != column.count('W'):\n                return False\n        # check if no more than two consecutive squares of the same color\n        for row in grid:\n            if 'BBB' in row or 'WWW' in row:\n                return False\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if 'BBB' in column or 'WWW' in column:\n                return False\n        return True\n    else:\n        # check if row has equal number of black and white squares\n        for row in grid:\n            if row.count('B') != row.count('W'):\n                return False\n        # check if column has equal number of black and white squares\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if column.count('B') != column.count('W'):\n                return False\n        # check if no more than two consecutive squares of the same color\n        for row in grid:\n            if 'BBB' in row or 'WWW' in row:\n                return False\n        for i in range(n):\n            column = [row[i] for row in grid]\n            if 'BBB' in column or 'WWW' in column:\n                return False\n        return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid, n):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n): # i = 0, 1, 2, 3\n        column = [row[i] for row in grid] # column = ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B']\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n): # i = 0, 1, 2, 3\n        column = [row[i] for row in grid] # column = ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B'], ['B', 'W', 'W', 'B']\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-16 10:08:36.013058 size on output set 9
2022-04-16 10:08:36.013070 num operations 1
2022-04-16 10:08:36.013076 size on input set 1
2022-04-16 10:09:01.600317 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef is_valid(grid):\n    n = len(grid)\n    for i in range(n):\n        if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n            return False\n\n    # Check columns\n    for j in range(n):\n        countB = 0\n        countW = 0\n        for i in range(n):\n            if grid[i][j] == 'B':\n                countB += 1\n            elif grid[i][j] == 'W':\n                countW += 1\n        if countB != n // 2 or countB != countW:\n            return False\n\n    # Check rows for consecutive squares\n    for i in range(n):\n        for j in range(n-2):\n            if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n                return False\n\n    # Check columns for consecutive squares\n    for j in range(n):\n        for i in range(n-2):\n            if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n                return False\n\n    return True\n\ndef solve(grid, i, j):\n    if i == n:\n        return is_valid(grid)\n\n    if j == n:\n        return solve(grid, i+1, 0)\n\n    if grid[i][j] == '-':\n        grid[i] = grid[i][:j] + 'B' + grid[i][j+1:]\n        if solve(grid, i, j+1):\n            return True\n        grid[i] = grid[i][:j] + 'W' + grid[i][j+1:]\n        if solve(grid, i, j+1):\n            return True\n        grid[i] = grid[i][:j] + '-' + grid[i][j+1:]\n        return False\n\n    return solve(grid, i, j+1)\n\n\nn = int(input())\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nprint(1 if solve(grid, 0, 0) else 0)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\nn = int(input('Enter a number: '))\nif is_prime(n):\n    print('Prime')\nelse:\n    print('Not prime')\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('W') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countW != n // 2:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') == 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB == 0:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if (grid[i].count('B') != n // 2) or (grid[i].count('B') != grid[i].count('W')):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if (countB != n // 2) or (countB != countW):\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input()) # Get the number of elements\nnums = list(map(int, input().split())) # Get the elements\nprint(min(nums)) # Print the minimum\n"
    },
    {
      "index": 8,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1650103716,
  "object": "edit"
}
2022-04-16 10:09:01.600647 fix syntax errors 9 ["\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "import sys\n\ndef is_valid(grid):\n    n = len(grid)\n    for i in range(n):\n        if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n            return False\n\n    # Check columns\n    for j in range(n):\n        countB = 0\n        countW = 0\n        for i in range(n):\n            if grid[i][j] == 'B':\n                countB += 1\n            elif grid[i][j] == 'W':\n                countW += 1\n        if countB != n // 2 or countB != countW:\n            return False\n\n    # Check rows for consecutive squares\n    for i in range(n):\n        for j in range(n-2):\n            if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n                return False\n\n    # Check columns for consecutive squares\n    for j in range(n):\n        for i in range(n-2):\n            if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n                return False\n\n    return True\n\ndef solve(grid, i, j):\n    if i == n:\n        return is_valid(grid)\n\n    if j == n:\n        return solve(grid, i+1, 0)\n\n    if grid[i][j] == '-':\n        grid[i] = grid[i][:j] + 'B' + grid[i][j+1:]\n        if solve(grid, i, j+1):\n            return True\n        grid[i] = grid[i][:j] + 'W' + grid[i][j+1:]\n        if solve(grid, i, j+1):\n            return True\n        grid[i] = grid[i][:j] + '-' + grid[i][j+1:]\n        return False\n\n    return solve(grid, i, j+1)\n\n\nn = int(input())\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nprint(1 if solve(grid, 0, 0) else 0)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\nn = int(input('Enter a number: '))\nif is_prime(n):\n    print('Prime')\nelse:\n    print('Not prime')\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('W') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countW != n // 2:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') == 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB == 0:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if (grid[i].count('B') != n // 2) or (grid[i].count('B') != grid[i].count('W')):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if (countB != n // 2) or (countB != countW):\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", '\nn = int(input()) # Get the number of elements\nnums = list(map(int, input().split())) # Get the elements\nprint(min(nums)) # Print the minimum\n', "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-16 10:09:01.600743 size on output set 8
