2022-04-16 07:27:36.492146 num operations 1
2022-04-16 07:27:36.492161 size on input set 1
2022-04-16 07:27:58.874516 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Solution 2\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 2,
      "text": "\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Solution 2\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 4,
      "text": "\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Solution 2\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 5,
      "text": "\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Solution 2\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Solution 2\n\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 7,
      "text": "\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Solution 2\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
      "index": 8,
      "text": "\n# Solution 1\n\nimport sys\n\ndef find_min_time(n, a, b, c):\n    min_time = sys.maxsize\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and j != k and i != k:\n                    time = abs(a[i]-b[j]) + abs(b[j]-c[k]) + abs(c[k]-a[i])\n                    min_time = min(min_time, time)\n    return min_time\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(find_min_time(n, a, b, c))\n\n# Solution 2\n\nimport sys\n\ndef find_min_time(n, a, b, c):\n    a.sort()\n    b.sort()\n    c.sort()\n    min_time = sys.maxsize\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and j != k and i != k:\n                    time = abs(a[i]-b[j]) + abs(b[j]-c[k]) + abs(c[k]-a[i])\n                    min_time = min(min_time, time)\n    return min_time\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(find_min_time(n, a, b, c))\n"
    }
  ],
  "created": 1650094056,
  "object": "edit"
}
2022-04-16 07:27:58.874928 fix syntax errors 9 ['\n\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n\n\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n\n# Solution 2\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n\n# Solution 2\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n\n# Solution 2\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n\n# Solution 2\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n\n# Solution 2\n\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n# Solution 1\n\nimport sys\n\ndef is_possible(sticks, n):\n    for i in range(4*n):\n        for j in range(i+1, 4*n):\n            if sticks[i] != sticks[j] and sticks[i]*sticks[j] % (sticks[i]+sticks[j]) == 0:\n                sticks[i] = sticks[j] = sticks[i]+sticks[j]\n                return True\n    return False\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n\n# Solution 2\n\nimport sys\n\ndef is_possible(sticks, n):\n    sticks.sort()\n    if sticks[0] == sticks[-1]:\n        return True\n    if sticks[0]*sticks[-1] % (sticks[0]+sticks[-1]) != 0:\n        return False\n    sticks[0] += sticks[-1]\n    return is_possible(sticks, n)\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    if is_possible(sticks, n):\n        print("YES")\n    else:\n        print("NO")\n', '\n# Solution 1\n\nimport sys\n\ndef find_min_time(n, a, b, c):\n    min_time = sys.maxsize\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and j != k and i != k:\n                    time = abs(a[i]-b[j]) + abs(b[j]-c[k]) + abs(c[k]-a[i])\n                    min_time = min(min_time, time)\n    return min_time\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(find_min_time(n, a, b, c))\n\n# Solution 2\n\nimport sys\n\ndef find_min_time(n, a, b, c):\n    a.sort()\n    b.sort()\n    c.sort()\n    min_time = sys.maxsize\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and j != k and i != k:\n                    time = abs(a[i]-b[j]) + abs(b[j]-c[k]) + abs(c[k]-a[i])\n                    min_time = min(min_time, time)\n    return min_time\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(find_min_time(n, a, b, c))\n']
2022-04-16 07:27:58.875036 size on output set 6
2022-04-16 07:27:58.875048 num operations 1
2022-04-16 07:27:58.875052 size on input set 1
2022-04-16 07:28:10.897555 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(' ')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a) - 3, 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return \"NO\"\n        if a[i] != a[i+2]:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(' ')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, n, 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return \"NO\"\n        if a[i] != a[i+2]:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(' ')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 2):\n        if i+1 < len(a):\n            if a[i] != a[i+1]:\n                return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom collections import Counter\n\ndef main():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split(' ')))\n    print(solve(n, a))\n\ndef solve(n, a):\n    count = Counter(a)\n    return len([x for x in count.values() if x % 2])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(' ')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return \"NO\"\n        if a[i] != a[i+2]:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom math import sqrt\n\ndef main():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split(' ')))\n    print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return \"NO\"\n        if a[i] != a[i+2]:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n# from math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(' ')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3] or a[i] != a[i+2]:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, input().strip().split(' '))\n    a, b = [], []\n    for i in range(n):\n        a.append(input().strip())\n    for i in range(m):\n        b.append(input().strip())\n    print(solve(n, m, a, b))\n\ndef solve(n, m, a, b):\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] == b[j]:\n                result += 1\n    return result\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(' ')))\n        print(solve(a))\n\ndef solve(a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return \"NO\"\n        if a[i] != a[i+2]:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650094078,
  "object": "edit"
}
2022-04-16 07:28:10.897814 fix syntax errors 9 ['\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(\' \')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a) - 3, 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return "NO"\n        if a[i] != a[i+2]:\n            return "NO"\n    return "YES"\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(\' \')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, n, 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return "NO"\n        if a[i] != a[i+2]:\n            return "NO"\n    return "YES"\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(\' \')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 2):\n        if i+1 < len(a):\n            if a[i] != a[i+1]:\n                return "NO"\n    return "YES"\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import Counter\n\ndef main():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split(\' \')))\n    print(solve(n, a))\n\ndef solve(n, a):\n    count = Counter(a)\n    return len([x for x in count.values() if x % 2])\n\nif __name__ == "__main__":\n    main()\n', '\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(\' \')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return "NO"\n        if a[i] != a[i+2]:\n            return "NO"\n    return "YES"\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import sqrt\n\ndef main():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split(\' \')))\n    print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return "NO"\n        if a[i] != a[i+2]:\n            return "NO"\n    return "YES"\n\nif __name__ == "__main__":\n    main()\n', '\n\n# from math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(\' \')))\n        print(solve(n, a))\n\ndef solve(n, a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3] or a[i] != a[i+2]:\n            return "NO"\n    return "YES"\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, input().strip().split(\' \'))\n    a, b = [], []\n    for i in range(n):\n        a.append(input().strip())\n    for i in range(m):\n        b.append(input().strip())\n    print(solve(n, m, a, b))\n\ndef solve(n, m, a, b):\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] == b[j]:\n                result += 1\n    return result\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import sqrt\n\ndef main():\n    q = int(input().strip())\n    for a0 in range(q):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split(\' \')))\n        print(solve(a))\n\ndef solve(a):\n    a.sort()\n    for i in range(0, len(a), 4):\n        if a[i] != a[i+1] or a[i+2] != a[i+3]:\n            return "NO"\n        if a[i] != a[i+2]:\n            return "NO"\n    return "YES"\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 07:28:10.897949 size on output set 9
