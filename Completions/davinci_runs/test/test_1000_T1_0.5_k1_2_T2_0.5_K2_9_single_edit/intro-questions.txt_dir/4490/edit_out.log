2022-04-16 07:47:37.152211 num operations 1
2022-04-16 07:47:37.152228 size on input set 1
2022-04-16 07:47:44.117752 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nb = raw_input()\n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint bases[b]\n"
    },
    {
      "index": 2,
      "text": "\n\n# Read input\nb = raw_input()\n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint bases[b]\n"
    },
    {
      "index": 3,
      "text": "\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = { \"A\" : \"T\", \"T\" : \"A\", \"C\" : \"G\", \"G\" : \"C\" }\n\n# Print output\nprint(bases[b])\n"
    },
    {
      "index": 4,
      "text": "\n# Read input\nb = input()\n\n# Dictionary of bases \nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n"
    },
    {
      "index": 5,
      "text": "\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = {\"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\"}\n\n# Print output\nprint(bases[b])\n"
    },
    {
      "index": 6,
      "text": "\n\n# Read input\nb = raw_input()\n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n"
    },
    {
      "index": 7,
      "text": "\n# Read input\nb = input()\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n# Print output\nprint(bases[b])\n"
    },
    {
      "index": 8,
      "text": "#!/usr/bin/env python3\n\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n"
    }
  ],
  "created": 1650095257,
  "object": "edit"
}
2022-04-16 07:47:44.118065 fix syntax errors 9 ['#!/usr/bin/env python\n\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = { "A": "T", "T": "A", "C": "G", "G": "C" }\n\n# Print output\nprint(bases[b])\n', '\n\n# Read input\nb = raw_input()\n\n# Dictionary of bases\nbases = { "A": "T", "T": "A", "C": "G", "G": "C" }\n\n# Print output\nprint bases[b]\n', '\n\n# Read input\nb = raw_input()\n\n# Dictionary of bases\nbases = { "A": "T", "T": "A", "C": "G", "G": "C" }\n\n# Print output\nprint bases[b]\n', '\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = { "A" : "T", "T" : "A", "C" : "G", "G" : "C" }\n\n# Print output\nprint(bases[b])\n', '\n# Read input\nb = input()\n\n# Dictionary of bases \nbases = { "A": "T", "T": "A", "C": "G", "G": "C" }\n\n# Print output\nprint(bases[b])\n', '\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = {"A": "T", "T": "A", "C": "G", "G": "C"}\n\n# Print output\nprint(bases[b])\n', '\n\n# Read input\nb = raw_input()\n\n# Dictionary of bases\nbases = { "A": "T", "T": "A", "C": "G", "G": "C" }\n\n# Print output\nprint(bases[b])\n', '\n# Read input\nb = input()\n# Dictionary of bases\nbases = { "A": "T", "T": "A", "C": "G", "G": "C" }\n# Print output\nprint(bases[b])\n', '#!/usr/bin/env python3\n\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = { "A": "T", "T": "A", "C": "G", "G": "C" }\n\n# Print output\nprint(bases[b])\n']
2022-04-16 07:47:44.118099 size on output set 8
2022-04-16 07:47:44.118108 num operations 1
2022-04-16 07:47:44.118114 size on input set 1
2022-04-16 07:47:58.569933 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    b = input()  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0432\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    if b == 'A':  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0432\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\u0435\n        print('T')  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\n    elif b == 'T':  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0432\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\u0435\n        print('A')  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\n    elif b == 'C':  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0432\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\u0435\n        print('G')  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\n    elif b == 'G':  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0432\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a\u0435\n        print('C')  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    a, b, c = input().split()\n\n    print(int(a) + int(b) + int(c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "def main():\n    b = raw_input()\n    if b == 'A':\n        print 'T'\n    elif b == 'T':\n        print 'A'\n    elif b == 'C':\n        print 'G'\n    elif b == 'G':\n        print 'C'\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    b = raw_input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    s = input()\n    d = {'A':'T','T':'A','C':'G','G':'C'}\n    print(d[s])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n\ndef main():\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    a = input()\n    if a == 'A':\n        print('T')\n    elif a == 'T':\n        print('A')\n    elif a == 'C':\n        print('G')\n    elif a == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650095264,
  "object": "edit"
}
2022-04-16 07:47:58.570188 fix syntax errors 9 ["\ndef main():\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    b = input()  # получаем ввод пользователя\n    if b == 'A':  # проверяем ввод пользователя на равенство строке\n        print('T')  # выводим результат в консоль\n    elif b == 'T':  # проверяем ввод пользователя на равенство строке\n        print('A')  # выводим результат в консоль\n    elif b == 'C':  # проверяем ввод пользователя на равенство строке\n        print('G')  # выводим результат в консоль\n    elif b == 'G':  # проверяем ввод пользователя на равенство строке\n        print('C')  # выводим результат в консоль\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b, c = input().split()\n\n    print(int(a) + int(b) + int(c))\n\nif __name__ == '__main__':\n    main()\n", 'def main():\n    b = raw_input()\n    if b == \'A\':\n        print \'T\'\n    elif b == \'T\':\n        print \'A\'\n    elif b == \'C\':\n        print \'G\'\n    elif b == \'G\':\n        print \'C\'\n\n\nif __name__ == "__main__":\n    main()\n', "\n\ndef main():\n    b = raw_input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    s = input()\n    d = {'A':'T','T':'A','C':'G','G':'C'}\n    print(d[s])\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a = input()\n    if a == 'A':\n        print('T')\n    elif a == 'T':\n        print('A')\n    elif a == 'C':\n        print('G')\n    elif a == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 07:47:58.570323 size on output set 8
