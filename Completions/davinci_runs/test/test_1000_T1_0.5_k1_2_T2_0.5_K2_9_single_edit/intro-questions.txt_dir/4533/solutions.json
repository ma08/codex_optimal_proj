["class Solution:\n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         res = 0\n         heapq.heapify(g)\n         s.sort()\n         for num in s:\n             if not g:\n                 break\n             elif g[0] <= num:\n                 res += 1\n                 heapq.heappop(g)\n         return res", "class Solution:\n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         g.sort()\n         s.sort()\n         res = 0 \n         Lg,Ls = len(g),len(s)\n         i=j=0 \n         while i<Lg and j<Ls:\n             if s[j] >= g[i]:\n                 res += 1\n                 j += 1\n                 i += 1\n             else:\n                 j += 1\n         return res\n", "class Solution:\n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         g.sort()\n         s.sort()\n         i,j = 0,0\n         happyKids = 0\n         while i < len(g) and j < len(s):\n             if s[j] >= g[i]:\n                 happyKids += 1\n                 i += 1\n             j += 1\n         return happyKids\n         \n", "class Solution:\n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         g.sort(), s.sort()\n         count = 0\n         i = 0\n         while count < len(g) and i < len(s):\n             if s[i] >= g[count]:\n                 count += 1\n             i+=1\n         return count\n  \n         \n         \n                 \n", "class Solution:\n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         g = sorted(g)\n         s = sorted(s)\n         result = 0\n         i = 0\n         j = 0\n         while i<len(g) and j< len(s):\n             if g[i]<= s[j]:\n                 result = result + 1\n                 i = i+1\n                 j = j+1\n             else:\n                 j = j+1\n         return result\n         \n                 \n", "class Solution:\n #     def findContentChildren(self, g, s):\n #         \"\"\"\n #         :type g: List[int]\n #         :type s: List[int]\n #         :rtype: int\n #         \"\"\"\n #         total = 1\n #         child_to_give = []\n #         child_index = 0\n #         s.sort()\n #         g.sort()\n #         for cookie in s:\n #             for child_greed in g:\n #                 print(\"child_greed \" + str(child_greed))\n #                 print(\"cookie \" + str(cookie))\n #                 if child_greed <= cookie:\n #                     if child_index not in child_to_give:\n #                         child_to_give.append(child_index)\n #                         g.remove(child_greed)  \n \n #                 child_index += 1        \n         \n #         return len(child_to_give)\n \n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         s.sort()\n         g.sort()\n         total = 1\n         child_to_give = []\n         child_index = 0\n \n         start_i = 0\n         for j in range(0, len(g)):\n             for i in range(start_i, len(s)):      \n                 if s[i] >= g[j]:\n                     child_to_give.append(j)\n                     start_i = i + 1\n                     break\n \n             \n         print(child_to_give)\n         return len(child_to_give)\n     \n #     def findContentChildrenSlow(self, g, s):\n #         \"\"\"\n #         :type g: List[int]\n #         :type s: List[int]\n #         :rtype: int\n #         \"\"\"\n #         s.sort()\n #         g.sort()\n #         total = 1\n #         child_to_give = []\n #         child_index = 0\n #         for child_greed in g:\n #             # Find children greed less than or equal to cookie value\n #             for cookie in s:\n #                 if child_greed <= cookie:\n #                     # print(cookie)\n #                     # print(child_greed)\n #                     if child_index not in child_to_give:\n #                         child_to_give.append(child_index)\n #                         # g.remove(child_greed)  \n #                         s.remove(cookie)\n #                         # print(g)\n #                         # print(s)\n #                         # break\n #             child_index += 1\n             \n #         return len(child_to_give)\n #         # return 2\n", "class Solution:\n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         g.sort()\n         s.sort()\n         print(g)\n         print(s)\n         \n         count_child = 0\n         count_cookie = 0\n         \n         while(count_child < len(g) and count_cookie < len(s)):\n             if (g[count_child] <= s[count_cookie]):\n                 count_child += 1\n             count_cookie += 1\n             \n         return count_child\n     \n", "class Solution:\n     def findContentChildren(self, g, s):\n         \"\"\"\n         :type g: List[int]\n         :type s: List[int]\n         :rtype: int\n         \"\"\"\n         g.sort()\n         s.sort()\n         \n         index, result = 0, 0\n         while index < len(s) and len(g) > 0:\n             if s[index] >= g[0]:\n                 result += 1\n                 index += 1\n                 g.remove(g[0])\n             else:\n                 index += 1\n         return result\n             \n"]