["\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n\n\n\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n        return count\n", "from typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n", "from typing import List\n\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "\n\nclass Solution:\n    def findContentChildren(self, g, s) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n", "\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "\n\n\"\"\"\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \n", "\nfrom typing import List\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n                j += 1\n        return content_children\n", "#!/usr/bin/env python3\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        g_i = 0\n        s_i = 0\n        while g_i < len(g) and s_i < len(s):\n            if g[g_i] <= s[s_i]:\n                count += 1\n                g_i += 1\n                s_i += 1\n            else:\n                s_i += 1\n        return count\n", "\nimport os\nimport sys\n\n\ndef test(g, s):\n    print(f\"g: {g} s: {s}\")\n    sol = Solution()\n    print(f\"result: {sol.findContentChildren(g, s)}\")\n\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n", "from typing import List\n\n\n\nclass Solution(object):\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n", "from typing import List\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\n\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n", "\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        return count\n", "\"\"\"\n\n\"\"\"\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        i, j = 0, 0\n        content_children = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                content_children += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return content_children\n\n\n\n\"\"\"\nTime Complexity: O(nlogn)\nSpace Complexity: O(1)\n\"\"\"\n", "from typing import List\n\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n", "\nfrom typing import List\n\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return count\n"]