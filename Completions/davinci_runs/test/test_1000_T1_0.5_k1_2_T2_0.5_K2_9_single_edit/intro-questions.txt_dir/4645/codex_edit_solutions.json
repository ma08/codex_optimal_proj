["\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4:\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2,3,4]:\n            return False\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3,1,2]\n    elif n == 4:\n        return [3,1,4,2]\n    elif n == 5:\n        return [5,3,1,4,2]\n    else:\n        p = [5,3,1,4,2]\n        for i in range(5,n+1):\n            p.append(p[len(p)-1] + 2)\n        return p\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        #p = get_permutation(n)\n        #if p[0] == -1:\n        #    print(-1)\n        #else:\n        #    print(*p)\n\nmain()\n", "\n\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4:\n            return False\n    return True\n\ndef permute(n, p):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p, n)\n\ndef next_permutation(p, n):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n, p)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\n\ndef is_valid(p): \n    n = len(p)\n    for i in range(n-1): \n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4: \n            return False \n    return True \n\ndef permute(n): \n    p = list(range(1, n+1))\n    while True: \n        if is_valid(p): \n            return p \n        p = next_permutation(p) \n\ndef next_permutation(p):\n    n = len(p) \n    i = n - 2 \n    while i >= 0 and p[i] >= p[i+1]: \n        i -= 1 \n    if i == -1: \n        return None \n    j = i + 1 \n    while j < n and p[j] > p[i]: \n        j += 1 \n    j -= 1 \n    p[i], p[j] = p[j], p[i] \n    p[i+1:] = p[:i:-1] \n    return p \n\nt = int(input()) \nfor i in range(t): \n    n = int(input()) \n    p = permute(n) \n    if p is None: \n        print(-1) \n    else: \n        print(' '.join(map(str, p))) \n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i + 1] - p[i] not in [2, 3, 4]:\n            return False\n    return True\n\n\ndef get_permutation(n):\n    if n == 2:\n        return []\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 4, 2]\n    elif n == 5:\n        return [5, 3, 1, 4, 2]\n    else:\n        for i in range(5, n + 1):\n            p.append(p[len(p) - 1] + 2)\n        return p\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if len(p) == 0:\n            print(-1)\n        else:\n            print(*p)\n\n\nmain()\n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2, 3, 4]:\n            return False\n\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 4, 2]\n    elif n == 5:\n        return [5, 3, 1, 4, 2]\n    else:\n        p = [5, 3, 1, 4, 2]\n        for i in range(5, n+1):\n            p.append(p[len(p) - 1] + 2)\n        return p\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\n\nmain()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4:\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\n\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4: # no need for abs\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[n-1:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2,3,4]: return False\n    return True\n\ndef get_permutation(n):\n    if n == 2: return [-1]\n    elif n == 3: return [3,1,2]\n    elif n == 4: return [3,1,4,2]\n    elif n == 5: return [5,3,1,4,2]\n    else:\n        p = [5,3,1,4,2]\n        for i in range(5,n+1):\n            p.append(p[len(p)-1] + 2)\n        return p\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1: print(-1)\n        else: print(*p)\n\nmain()\n", "\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4: #if the difference between adjacent elements is less than 2 or greater than 4\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1)) #list of numbers 1 to n\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]: #go to the last element that is less than the element next to it\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]: #go to the next element that is greater than p[i]\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4: # condition\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\n\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4:\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p))) \n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2,3,4]:\n            return False\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3,1,2]\n    elif n == 4:\n        return [3,1,4,2]\n    elif n == 5:\n        return [5,3,1,4,2]\n    else:\n        p = [5,3,1,4,2] \n        for i in range(5,n+1):\n            p.append(p[len(p)-1] + 2)\n        return p\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\nmain()\n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2, 3, 4]:\n            return False\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 4, 2]\n    elif n == 5:\n        return [5, 3, 1, 4, 2]\n    else:\n        p = [5, 3, 1, 4, 2]\n        for i in range(5, n+1):\n            p.append(p[len(p) - 1] + 2)\n        return p\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\nmain()\n", "\n\ndef is_valid(p, n):\n    if n <= 2:\n        return True\n    if p[n-1] - p[n-2] <= 2:\n        return is_valid(p, n-1)\n    if p[n-1] - p[n-3] <= 4:\n        return is_valid(p, n-2)\n    return False\n\ndef permute(n, p):\n    if n == 1:\n        if is_valid(p, len(p)):\n            return p\n        return None\n    for i in range(n):\n        p[n-1], p[i] = p[i], p[n-1]\n        result = permute(n-1, p)\n        if result is not None:\n            return result\n        p[n-1], p[i] = p[i], p[n-1]\n    return None\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(range(1, n+1))\n    while True:\n        p = permute(n, p)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))\n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2, 3, 4]:\n            return False\n    return True\n\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1, -1]\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 4, 2]\n    elif n == 5:\n        return [5, 3, 1, 4, 2]\n    else:\n        p = [5, 3, 1, 4, 2]\n        for i in range(5, n+1):\n            p.append(p[len(p) - 1] + 2)\n        return p\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\n\nmain()\n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2, 3, 4]:\n            return False\n\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 4, 2]\n    elif n == 5:\n        return [5, 3, 1, 4, 2]\n    else:\n        p = [5, 3, 1, 4, 2]\n        for i in range(5, n+1):\n            p.append(p[len(p)-1] + 2)\n        return p\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\n\nmain()\n", "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2, 3, 4]:\n            return False\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3, 1, 2]\n    elif n == 4:\n        return [3, 1, 4, 2]\n    elif n == 5:\n        return [5, 3, 1, 4, 2]\n    else:\n        p = [5, 3, 1, 4, 2]\n        for i in range(5, n+1):\n            p.append(p[len(p)-1] + 2)\n        return p\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\nmain()\n"]