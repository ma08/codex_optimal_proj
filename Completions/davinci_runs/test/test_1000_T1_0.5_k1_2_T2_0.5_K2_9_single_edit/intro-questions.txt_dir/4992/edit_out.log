2022-04-16 15:59:44.657360 num operations 1
2022-04-16 15:59:44.657371 size on input set 1
2022-04-16 15:59:58.533163 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main(pname):\n    # sys.stdin = open(pname + '.in', 'r')\n    # sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 1,
      "text": "\nimport os\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n\n    print(s)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]#\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] < s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split(' ')\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n"
    }
  ],
  "created": 1650124784,
  "object": "edit"
}
2022-04-16 15:59:58.533641 fix syntax errors 9 ['\nimport sys\n\ndef main(pname):\n    # sys.stdin = open(pname + \'.in\', \'r\')\n    # sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\nimport os\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\n\ndef main():\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n\n    print(s)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]#\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\nimport sys\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n', '\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] < s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n', '\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split(\' \')\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'exam\')\n']
2022-04-16 15:59:58.533841 size on output set 8
2022-04-16 15:59:58.533856 num operations 1
2022-04-16 15:59:58.533861 size on input set 1
2022-04-16 16:00:13.982253 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1): \n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(0)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):  # pylint: disable=unused-variable\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input(\"\"))\n    students = list(map(int, input(\"\").split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order.\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile.\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room.\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order.\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile.\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):  # pylint: disable=C0200\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650124798,
  "object": "edit"
}
2022-04-16 16:00:13.982606 fix syntax errors 9 ['\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1): \n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(0)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):  # pylint: disable=unused-variable\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input(""))\n    students = list(map(int, input("").split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order.\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile.\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room.\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order.\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile.\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):  # pylint: disable=C0200\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 16:00:13.982729 size on output set 9
2022-04-16 16:00:13.982744 num operations 1
2022-04-16 16:00:13.982749 size on input set 1
2022-04-16 16:00:28.033817 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n'hello'\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms),key=lambda x: x[1],reverse=True)\n    print(\" \".join([str(x[0]+1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\trooms = [int(x) for x in sys.stdin.readline().split()]\n\n\t# If the total number of students is less than the number of rooms,\n\t# then it is impossible to redistribute the exams safely\n\tif sum(rooms) < n:\n\t\tprint(\"impossible\")\n\t\treturn\n\n\t# We can simply use the greedy approach and choose the room with\n\t# the most students first. This is always a safe order\n\trooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n\tprint(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n#\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys,string\nn = int(input())\nL = [ int(x) for x in input().split()]\nL2 = []\nfor i in range(0,n) :\n    if ((i+1)%2 == 1 and L[i]%2 == 0) or ((i+1)%2 == 0 and L[i]%2 == 1) :\n        L2.append(L[i])\nprint(*L2)\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650124814,
  "object": "edit"
}
2022-04-16 16:00:28.034209 fix syntax errors 9 ["\n'hello'\n", 'import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms),key=lambda x: x[1],reverse=True)\n    print(" ".join([str(x[0]+1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\trooms = [int(x) for x in sys.stdin.readline().split()]\n\n\t# If the total number of students is less than the number of rooms,\n\t# then it is impossible to redistribute the exams safely\n\tif sum(rooms) < n:\n\t\tprint("impossible")\n\t\treturn\n\n\t# We can simply use the greedy approach and choose the room with\n\t# the most students first. This is always a safe order\n\trooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n\tprint(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n\tmain()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '\n#\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys,string\nn = int(input())\nL = [ int(x) for x in input().split()]\nL2 = []\nfor i in range(0,n) :\n    if ((i+1)%2 == 1 and L[i]%2 == 0) or ((i+1)%2 == 0 and L[i]%2 == 1) :\n        L2.append(L[i])\nprint(*L2)\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 16:00:28.034415 size on output set 7
2022-04-16 16:00:28.034432 num operations 1
2022-04-16 16:00:28.034437 size on input set 1
2022-04-16 16:00:49.925727 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n  # Check if the order is safe\n  # If it is, return the order\n  # If not, return None\n  students = rooms[:]\n  pile = []\n  for i in order:\n    if i == 1:\n      pile.extend(students[i-1])\n    else:\n      if len(pile) < students[i-1]:\n        return None\n      else:\n        pile.extend(students[i-1])\n  return order\n\ndef main(n, rooms):\n  # Generate all possible room orders\n  # Check if any are safe\n  # If so, print one\n  # If not, print \"impossible\"\n  safe_order = None\n  orders = []\n  for i in range(1, n+1):\n    for j in range(1, n+1):\n      for k in range(1, n+1):\n        for l in range(1, n+1):\n          order = [i, j, k, l]\n          if len(set(order)) == n:\n            orders.append(order)\n  random.shuffle(orders)\n  for order in orders:\n    if check_safe(rooms, order):\n      safe_order = check_safe(rooms, order)\n      break\n  if safe_order:\n    print(' '.join(map(str, safe_order)))\n  else:\n    print('impossible')\n\nif __name__ == '__main__':\n  n = int(sys.stdin.readline().strip())\n  rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n  main(n, rooms)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]  # make a copy of the list\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:] # copy rooms\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend([students[i-1]])\n        else:\n            if len(pile) < students[i-1]: # if the pile is smaller than the number of students in the room\n                return None\n            else:\n                pile.extend([students[i-1]])\n    return order\n\ndef generate_orders(n):\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    return orders\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = generate_orders(n)\n    random.shuffle(orders)\n    # print(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1] + 1:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile = pile + students[i-1]\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile = pile + students[i-1]\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    }
  ],
  "created": 1650124828,
  "object": "edit"
}
2022-04-16 16:00:49.926157 fix syntax errors 9 ['\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n  # Check if the order is safe\n  # If it is, return the order\n  # If not, return None\n  students = rooms[:]\n  pile = []\n  for i in order:\n    if i == 1:\n      pile.extend(students[i-1])\n    else:\n      if len(pile) < students[i-1]:\n        return None\n      else:\n        pile.extend(students[i-1])\n  return order\n\ndef main(n, rooms):\n  # Generate all possible room orders\n  # Check if any are safe\n  # If so, print one\n  # If not, print "impossible"\n  safe_order = None\n  orders = []\n  for i in range(1, n+1):\n    for j in range(1, n+1):\n      for k in range(1, n+1):\n        for l in range(1, n+1):\n          order = [i, j, k, l]\n          if len(set(order)) == n:\n            orders.append(order)\n  random.shuffle(orders)\n  for order in orders:\n    if check_safe(rooms, order):\n      safe_order = check_safe(rooms, order)\n      break\n  if safe_order:\n    print(\' \'.join(map(str, safe_order)))\n  else:\n    print(\'impossible\')\n\nif __name__ == \'__main__\':\n  n = int(sys.stdin.readline().strip())\n  rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n  main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]  # make a copy of the list\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:] # copy rooms\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend([students[i-1]])\n        else:\n            if len(pile) < students[i-1]: # if the pile is smaller than the number of students in the room\n                return None\n            else:\n                pile.extend([students[i-1]])\n    return order\n\ndef generate_orders(n):\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    return orders\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = generate_orders(n)\n    random.shuffle(orders)\n    # print(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1] + 1:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile = pile + students[i-1]\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile = pile + students[i-1]\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n']
2022-04-16 16:00:49.928539 size on output set 7
2022-04-16 16:00:49.928577 num operations 1
2022-04-16 16:00:49.928587 size on input set 1
2022-04-16 16:01:06.269278 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id + 1\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(i)\n        for room_ in rooms:\n            room_.add_exam_needed(room_.get_num_students())\n        for room_ in rooms:\n            room_.add_exam(room_.get_num_students())\n        if room_.get_num_exams_needed() > room_.get_num_exams():\n            order.pop()\n            visited.remove(i)\n            continue\n        for room_ in rooms:\n            room_.add_exam_needed(-room_.get_num_students())\n            room_.add_exam(-room_.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        visited.remove(i)\n        order.pop()\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room_to_modify in rooms:\n            room_to_modify.add_exam_needed(room_to_modify.get_num_students())\n            room_to_modify.add_exam(room_to_modify.get_num_students())\n            if room_to_modify.get_num_exams_needed() > room_to_modify.get_num_exams():\n                break\n            else:\n                result = dfs(rooms, visited, order)\n                if result:\n                    return result\n            room_to_modify.add_exam_needed(-room_to_modify.get_num_students())\n            room_to_modify.add_exam(-room_to_modify.get_num_students())\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650124849,
  "object": "edit"
}
2022-04-16 16:01:06.269683 fix syntax errors 9 ["\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id + 1\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(i)\n        for room_ in rooms:\n            room_.add_exam_needed(room_.get_num_students())\n        for room_ in rooms:\n            room_.add_exam(room_.get_num_students())\n        if room_.get_num_exams_needed() > room_.get_num_exams():\n            order.pop()\n            visited.remove(i)\n            continue\n        for room_ in rooms:\n            room_.add_exam_needed(-room_.get_num_students())\n            room_.add_exam(-room_.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        visited.remove(i)\n        order.pop()\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room_to_modify in rooms:\n            room_to_modify.add_exam_needed(room_to_modify.get_num_students())\n            room_to_modify.add_exam(room_to_modify.get_num_students())\n            if room_to_modify.get_num_exams_needed() > room_to_modify.get_num_exams():\n                break\n            else:\n                result = dfs(rooms, visited, order)\n                if result:\n                    return result\n            room_to_modify.add_exam_needed(-room_to_modify.get_num_students())\n            room_to_modify.add_exam(-room_to_modify.get_num_students())\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 16:01:06.269888 size on output set 7
2022-04-16 16:01:06.269903 num operations 1
2022-04-16 16:01:06.269908 size on input set 1
2022-04-16 16:01:17.271187 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1: \n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2: \n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\") \n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"IMPOSSIBLE\")\n        else:\n            print(\"IMPOSSIBLE\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"IMPOSSIBLE\")\n        else:\n            print(\"IMPOSSIBLE\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"IMPOSSIBLE\")\n        else:\n            print(\"IMPOSSIBLE\")\n    else:\n        print(\"IMPOSSIBLE\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2: \n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 1:\n        if rooms[0] == 1:\n            print(\"1\")\n        elif rooms[0] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 4 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650124866,
  "object": "edit"
}
2022-04-16 16:01:17.271682 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1: \n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2: \n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible") \n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("IMPOSSIBLE")\n        else:\n            print("IMPOSSIBLE")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("IMPOSSIBLE")\n        else:\n            print("IMPOSSIBLE")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("IMPOSSIBLE")\n        else:\n            print("IMPOSSIBLE")\n    else:\n        print("IMPOSSIBLE")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2: \n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 1:\n        if rooms[0] == 1:\n            print("1")\n        elif rooms[0] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 4 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 16:01:17.271954 size on output set 9
2022-04-16 16:01:17.271966 num operations 1
2022-04-16 16:01:17.271971 size on input set 1
2022-04-16 16:01:28.275087 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\n\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#This is a combinatorics problem\n#The only problem is that the solution is not necessarily unique\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s[:i]):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s[:i]):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 3,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 4,
      "text": "\n\n#\n"
    },
    {
      "index": 5,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\n\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 6,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 7,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 8,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    }
  ],
  "created": 1650124877,
  "object": "edit"
}
2022-04-16 16:01:28.275402 fix syntax errors 9 ['\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\n\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n#This is a combinatorics problem\n#The only problem is that the solution is not necessarily unique\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s[:i]):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s[:i]):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n#\n', '\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\n\nelse:\n    print("impossible")\n', '\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n']
2022-04-16 16:01:28.275549 size on output set 7
2022-04-16 16:01:28.275569 num operations 1
2022-04-16 16:01:28.275575 size on input set 1
2022-04-16 16:01:38.353775 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] <= sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))[1:]\n    print(s)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))[1:]\n    if s[0] < sum(s[1:]) or s[-1] < sum(s[:-1]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n):\n        print(n)\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] > sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]): \n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    File.\n    \"\"\"\n    print(\"hello\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main(n, s):\n    \"\"\"\n    Safe order. n = number of elements in the list, s = list of elements\n    \"\"\"\n    if s[0] < sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order.\n    \"\"\"\n    print(\"Hello\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650124888,
  "object": "edit"
}
2022-04-16 16:01:38.354054 fix syntax errors 9 ['\n\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] <= sum(s[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n+1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    s = list(map(int, input().split()))[1:]\n    print(s)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    s = list(map(int, input().split()))[1:]\n    if s[0] < sum(s[1:]) or s[-1] < sum(s[:-1]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n):\n        print(n)\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] > sum(s[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n+1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order.\n    """\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]): \n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n+1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order.\n    """\n    pass\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    File.\n    """\n    print("hello")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main(n, s):\n    """\n    Safe order. n = number of elements in the list, s = list of elements\n    """\n    if s[0] < sum(s[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n+1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order.\n    """\n    print("Hello")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 16:01:38.354095 size on output set 9
