["import sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = [0]\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command) + 1]))\n        elif command == '0' or command == '-0':\n            pass\n        else:\n            current_child += int(command)\n    undo_commands.sort(reverse=True)\n    for undo_command in undo_commands:\n        undo_index = commands.index('undo') - 1\n        for i in range(undo_command + 1):\n            undo_index -= 1\n            current_child -= int(commands[undo_index])\n        commands.pop(undo_index)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].strip().split()\n    n, k = int(n), int(k)\n    commands = lines[1].strip().split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().strip().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        else:\n            current_child += int(command) % n\n    for undo_command in undo_commands:\n        for i in range(undo_command):\n            current_child -= int(commands[commands.index('undo') - 1 - i])\n        commands = commands[:commands.index('undo') - undo_command]\n    current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\nthrows = input().split()\nposition = 0\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n", "\nn, k = map(int, input().split())\nthrows = input().split()\nposition = 0\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\nprint(position)\n", "\n\n#Program\nn, k = map(int, input().split())\nchildren = [0] * n\nchildren[0] = 1\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n", "\n#Program starts here\nn, k = map(int, input().split())\ncommands = input().split()\negg = 0\n\nfor i in range(len(commands)):\n    if \"undo\" in commands[i]:\n        for j in range(int(commands[i][5:])):\n            if i - j - 1 >= 0:\n                egg -= int(commands[i-j-1])\n            elif i - j - 1 < 0:\n                egg -= int(commands[0])\n    else:\n        egg += int(commands[i])\n\nprint(egg % n)\n", "\n\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\nmain()\n", "\n#Program\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n", "\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()] #read the first line\n    commands = sys.stdin.readline().split() #read the second line\n    current_child = 0\n    undo_commands = [] #list to store undo commands\n    for command in commands:\n        if command == 'undo': #add undo commands to the list\n            undo_commands.append(int(commands[commands.index(command)+1])) #add the undo amount to the list\n        elif command == '0' or command == '-0': #ignore 0 or -0\n            pass\n        else: #add the command to the current position\n            current_child += int(command)\n    while undo_commands: #loop while undo commands are left\n        undo_command = undo_commands.pop() #get the last undo command\n        undo_index = commands.index('undo') #get the last undo command index\n        undo_commands_to_remove = [] #list to store undo commands to be removed\n        for i in range(undo_command): #loop undo_command times\n            undo_index -= 1 #decrement the index\n            if commands[undo_index] == 'undo': #if the command is undo add it to the list\n                undo_commands_to_remove.append(undo_index) #add the index to the list\n            else:\n                current_child -= int(commands[undo_index]) #subtract the command from the current position\n        for i in undo_commands_to_remove: #loop through the undo commands to remove\n            commands.pop(i) #remove the undo command from the list\n    if current_child < 0: #if the current position is less than 0\n        current_child += n #add n to current position\n    elif current_child > n: #if the current position is greater than n\n        current_child %= n #mod n from current position\n    print(current_child) #print the current position\n\nif __name__ == '__main__':\n    main()\n", "\nprint(1)\n", "\n\nn, k = map(int, input().split()) \nthrows = input().split() \n\ncurrent_student = 0 \ncurrent_throw = 0 \n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n\nprint(current_student)\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command) + 1]))\n        elif command == '0' or command == '-0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command) + 1]))\n        elif command == '0' or command == '-0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child = n + current_child\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n", "n, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n", "\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n        if currNode is None:\n            return\n        prevNode.next = currNode.next\n        currNode = None\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\nif __name__ == '__main__':\n    main()\n", "import math\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    a = sorted(a)\n    print(a)\n    ans = 0\n    for i in range(1, n):\n        ans += a[i] - a[i - 1]\n    print(ans)\n\n\nmain()\n", "import sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, _ = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n", "\n\n#Program\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[((command % n) + n) % n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n", "\nsys.setrecursionlimit(10 ** 6)\nimport sys\n\ndef main():\n    n, k = map(int, input().strip().split())\n    commands = input().strip().split()\n    print(calculate(n, k, commands))\n\ndef calculate(n, k, commands):\n    if k == 0:\n        return 0\n    if commands[-1] == 'undo':\n        return calculate(n, k - 1, commands[:-1])\n    else:\n        command = int(commands[-1])\n        return (calculate(n, k, commands[:-1]) + command) % n\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    if current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0' or command == '-0' or command == 0 or command == -0:\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, input().split())\n    commands = input().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n", "\n\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw])) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw])) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw])) % n\n\nprint(current_student)\n", "\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] != 'undo':\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\n\nprint(position)\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in sys.stdin.readline().split()]\n    commands = sys.stdin.readline().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for _ in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for _ in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\n\nmain()\n", "\n\nn, k = map(int, input().split())\nthrows = input().split()\n\nposition = 0\n\nfor i in range(k):\n    if throws[i] == 'undo':\n        position += int(throws[i+1])\n    else:\n        position += int(throws[i])\n        if position > n-1:\n            position -= n\n        elif position < 0:\n            position += n\nprint(position % n)\n", "\n\n# #Program starts here\n# n, k = map(int, input().split())\n# commands = input().split()\n\n# egg = 0\n\n# for i in range(len(commands)):\n#     if \"undo\" in commands[i]:\n#         for j in range(int(commands[i][5:])):\n#             if i - j - 1 >= 0:\n#                 egg -= int(commands[i-j-1])\n#             elif i - j - 1 < 0:\n#                 egg -= int(commands[0])\n#     else:\n#         egg += int(commands[i])\n\n# print(egg % n)\n\n# print(int(input()) % int(input()))\n\n# print(8 % 4)\n\nn, k = map(int, input().split())\negg = 0\nfor _ in range(k):\n    c = input()\n    if c == \"undo\":\n        egg -= int(input())\n    else:\n        egg += int(c)\n\nprint(egg % n) \n", "\n\n# Program starts here\nn, k = map(int, input().split())\ncommands = input().split()\n\negg = 0\n\nfor i in range(len(commands)):\n    if \"undo\" in commands[i]:\n        for j in range(int(commands[i][5:])):\n            if i - j - 1 >= 0:\n                egg -= int(commands[i-j-1])\n            elif i - j - 1 < 0:\n                egg -= int(commands[0])\n    else:\n        egg += int(commands[i])\n\nprint(egg % n)\n", "\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split(' ')\n    n, k = int(n), int(k) #n = number of elements in linked list, k = number of commands\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = newNode\n            return\n\n        lastNode = self.head\n        while lastNode.next is not None:\n            lastNode = lastNode.next\n        lastNode.next = newNode\n\n    def printList(self):\n        currNode = self.head\n        while currNode is not None:\n            print(currNode.data)\n            currNode = currNode.next\n\n    def delete(self, index):\n        currNode = self.head\n        if index == 0:\n            self.head = currNode.next\n            currNode = None\n            return\n\n        prevNode = None\n        count = 0\n        while currNode is not None and count != index:\n            prevNode = currNode\n            currNode = currNode.next\n            count += 1\n\n        if currNode is None:\n            return\n\n        prevNode.next = currNode.next\n        currNode = None\n\n    def length(self):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            count += 1\n            currNode = currNode.next\n        return count\n\n    def get(self, index):\n        currNode = self.head\n        count = 0\n        while currNode is not None:\n            if count == index:\n                return currNode.data\n            count += 1\n            currNode = currNode.next\n        return -1\n\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, k = lines[0].split()\n    n, k = int(n), int(k)\n    commands = lines[1].split()\n\n    ll = LinkedList()\n    for i in range(n):\n        ll.insert(i)\n\n    curr_index = 0\n    for i in range(k):\n        command = commands[i]\n        if command == \"undo\":\n            m = int(commands[i+1])\n            for j in range(m):\n                ll.delete(curr_index)\n            i += 1\n            continue\n        else:\n            t = int(command)\n            if t < 0:\n                t = n + t\n            curr_index = (curr_index + t) % ll.length()\n    print(ll.get(curr_index))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef pangram(string, alphabet):\n    for i in alphabet:\n        if i not in string:\n            return False\n    return True\n\nprint(pangram(\"The quick brown fox jumps over the lazy dog\", \"abcdefghijklmnopqrstuvwxyz\"))\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop() % n\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n", "\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw]) % n) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw]) % n) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw]) % n) % n\n\nprint(current_student)\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n", "\n\n\n#Program\nn, k = map(int, input().split())\nchildren = [0] * n\nchildren[0] = 1\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n", "\n\n# Program starts here\nn, k = map(int, input().split())  # n is the number of eggs and k is the number of commands\ncommands = input().split()  # commands is the list of commands\n\negg = 0  # egg is the total number of eggs\n\nfor i in range(len(commands)):  # loops through all the commands\n    if \"undo\" in commands[i]:  # checks if the command is undo\n        for j in range(int(commands[i][5:])):  # loops through the number of undo's\n            if i - j - 1 >= 0:  # if the undo is not in the first command\n                egg -= int(commands[i - j - 1])  # egg is subtracted by the number of undo's\n            elif i - j - 1 < 0:  # if the undo is in the first command\n                egg -= int(commands[0])  # egg is subtracted by the first command\n    else:\n        egg += int(commands[i])  # if the command is not undo, egg is added by the number of commands\n\nprint(egg % n)  # prints the total number of eggs modulo n\n", "\n\nn, k = map(int, input().split())\nthrows = input().split()\n\ncurrent_student = 0\ncurrent_throw = 0\n\n    print(current_throw)\nwhile current_throw < k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw])) % n\n        current_throw += 1\n    else:\n        current_throw += 1\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw])) % n\n            else:\n                m = int(throws[current_throw][5:])\n                current_throw += 1\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw])) % n\n\nprint(current_student)\n", "\nimport sys\n\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split()) \n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\nmain()\n", "import sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop()\n        else:\n            student = (student + int(command)) % n\n            undo.append(student)\n    print(student)\n\nmain()\n", "\n\n#Program starts here\nn, k = map(int, input().split())\ncommands = input().split()\n\negg = 0\n\nfor i in range(k):\n    if \"undo\" in commands[i]:\n        for j in range(int(commands[i][5:])):\n            if i - j - 1 >= 0:\n                egg -= int(commands[i-j-1])\n            elif i - j - 1 < 0:\n                egg -= int(commands[0])\n    else:\n        egg += int(commands[i])\n\nprint(egg % n)\n", "\n\nn, k = map(int, input().split())\nthrows = input().split(' ')\n\ncurrent_student = 1\ncurrent_throw = 1\n\nwhile current_throw <= k:\n    if throws[current_throw].isdigit():\n        current_student = (current_student + int(throws[current_throw])) % n\n        current_throw += 1\n    else:\n        m = int(throws[current_throw][5:])\n        for _ in range(m):\n            current_throw -= 1\n            if throws[current_throw].isdigit():\n                current_student = (current_student - int(throws[current_throw])) % n\n            else:\n                m = int(throws[current_throw][5:])\n                for _ in range(m):\n                    current_throw -= 1\n                    current_student = (current_student + int(throws[current_throw])) % n\n\nprint(current_student)\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    commands = sys.stdin.readline().split()\n    student = 0\n    undo = []\n    for command in commands:\n        if command == \"undo\":\n            student = undo.pop() % n\n        else:\n            student = (student + int(command)) % n\n            undo.append(int(command))\n    print(student)\n\nmain()\n", "\n\nimport sys\n\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    commands = sys.stdin.readline().strip().split()\n    egg = 0\n    for command in commands:\n        if command == 'undo':\n            k -= 1\n            if k == 0:\n                break\n            continue\n        command = int(command)\n        egg = (egg + command) % n\n        if egg < 0:\n            egg += n\n    print(egg)\n\n\nmain()\n", "\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n", "\n\nimport sys\n\ndef main():\n    n, k = [int(i) for i in input().split()]\n    commands = input().split()\n    current_child = 0\n    undo_commands = []\n    for command in commands:\n        if command == 'undo':\n            undo_commands.append(int(commands[commands.index(command)+1]))\n        elif command == '0' or command == '-0':\n            pass\n        else:\n            current_child += int(command)\n    while undo_commands:\n        undo_command = undo_commands.pop()\n        undo_index = commands.index('undo')\n        undo_commands_to_remove = []\n        for i in range(undo_command):\n            undo_index -= 1\n            if commands[undo_index] == 'undo':\n                undo_commands_to_remove.append(undo_index)\n            else:\n                current_child -= int(commands[undo_index])\n        for i in undo_commands_to_remove:\n            commands.pop(i)\n    if current_child < 0:\n        current_child += n\n    elif current_child > n:\n        current_child %= n\n    print(current_child)\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\ncommands = input().split()\n\negg = 0\n\nfor i in range(len(commands)):\n    if \"undo\" in commands[i]:\n        for j in range(int(commands[i][5:])):\n            if i - j - 1 >= 0:\n                egg -= int(commands[i-j-1])\n            elif i - j - 1 < 0:\n                egg -= int(commands[0])\n    else:\n        egg += int(commands[i])\n\nprint(egg % n)\n", "\n\n#Program\nn, k = map(int, input().split())\n\nchildren = [0] * n\n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n - 1] = 1\n        else:\n            children[command % n] = 1\n\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n", "\n\n#Program\nn, k = map(int, input().split())\nchildren = [0] * n\nchildren[0] = 1\n\nfor i in range(k):\n    command = input()\n    if command[0:4] == \"undo\":\n        command = command.split()\n        for j in range(int(command[1])):\n            children[j] = 0\n    else:\n        command = int(command)\n        if command < 0:\n            children[(command % n) + n] = 1\n        else:\n            children[command % n] = 1\nfor i in range(n):\n    if children[i] == 1:\n        print(i)\n        break\n"]