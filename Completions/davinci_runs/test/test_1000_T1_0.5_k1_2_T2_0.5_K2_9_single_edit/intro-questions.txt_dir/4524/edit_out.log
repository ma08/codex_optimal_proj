2022-04-16 08:01:20.595366 num operations 1
2022-04-16 08:01:20.595384 size on input set 1
2022-04-16 08:02:06.904230 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import os\n\nclass File:\n    def __init__(self, path):\n        self.path = path\n\n    def write(self, text):\n        with open(self.path, 'w') as f:\n            f.write(text)\n\n    def read(self):\n        with open(self.path, 'r') as f:\n            return f.read()\n\n    def __add__(self, obj):\n        new_path = os.path.join(\n            os.path.dirname(self.path),\n            os.path.basename(self.path) + os.path.basename(obj.path)\n        )\n        new_file = type(self)(new_path)\n        new_file.write(self.read() + obj.read())\n        return new_file\n\n    def __str__(self):\n        return self.path\n\n    def __iter__(self):\n        with open(self.path, 'r') as f:\n            return f\n\n    def __next__(self):\n        with open(self.path, 'r') as f:\n            return next(f)\n"
    },
    {
      "index": 1,
      "text": "#!/bin/bash\n\necho \"Hello World\"\n\n"
    },
    {
      "index": 2,
      "text": "var fs = require('fs');\nvar path = require('path');\nvar file = path.join(__dirname, 'file.txt');\n\nfs.readFile(file, function(err, data) {\n  if (err) {\n    throw err;\n  }\n\n  var lines = data.toString().split('\\n');\n\n  console.log(lines);\n});\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# Copyright (C) 2014 University of Dundee & Open Microscopy Environment.\n#                    All Rights Reserved.\n# Use is subject to license terms supplied in LICENSE.txt\n#\n\n\"\"\"\nFOR TRAINING PURPOSES ONLY!\n\"\"\"\n\n# This is a 'bare-bones' template to allow easy conversion from a simple\n# client-side Python script to a script run by the server, on the OMERO\n# scripting service.\n# To use the script, simply paste the body of the script (not the connection\n# code) into the point indicated below.\n# A more complete template, for 'real-world' scripts, is also included in this\n# folder\n# This script takes an Image ID as a parameter from the scripting service.\nfrom omero.rtypes import rlong, rstring, unwrap, robject\nfrom omero.gateway import BlitzGateway, MapAnnotationWrapper\nimport omero.scripts as scripts\nimport omero\n\n# Script definition\n\n# Script name, description and parameters are defined here.\n# These parameters will be recognised by the Insight and web clients and\n# populated with the currently selected Image(s)\n\n# this script only takes Object (Image) IDs as input\ndata_types = [rstring('Dataset')]\nclient = scripts.client(\n    'File_Download.py',\n    \"\"\"Download a file from the server and save to the client\"\"\",\n    # first parameter\n    scripts.String(\n        \"Data_Type\", grouping=\"1\", optional=False, values=data_types, default=\"Image\"),\n    # second parameter\n    scripts.List(\"IDs\", grouping=\"2\", optional=False).ofType(rlong(0)),\n    )\n\n# we can now create our Blitz Gateway by wrapping the client object\nconn = BlitzGateway(client_obj=client)\nscript_params = client.getInputs(unwrap=True)\nprint script_params\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# we can now create our Blitz Gateway by wrapping the client object\nconn = BlitzGateway(client_obj=client)\nscript_params = client.getInputs(unwrap=True)\nprint script_params\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput(\"IDs\"))\n\n# get the 'IDs' parameter (which we have restricted to 'Image' IDs)\nids = unwrap(client.getInput\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport os.path\nimport sys\nimport re\n\ndef get_file_list(path):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list(f))\n        else:\n            files.append(f)\n    return files\n\ndef get_file_list_re(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re2(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re2(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re3(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re3(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re4(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re4(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re5(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re5(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re6(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re6(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re7(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re7(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re8(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re8(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re9(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re9(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re10(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re10(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re11(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re11(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re12(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re12(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re13(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re13(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re14(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re14(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re15(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re15(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re16(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n       \n"
    },
    {
      "index": 5,
      "text": "var fs = require('fs');\n\nfs.readFile('test.txt', 'utf8', function(err, data) {\n  if (err) throw err;\n  console.log('OK: ' + 'test.txt');\n  console.log(data)\n});\n\nconsole.log('after calling readFile');\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 6
    },
    {
      "index": 7,
      "text": "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n\tFILE* fp;\n\tchar c;\n\tfp = fopen(\"file.txt\", \"w\");\n\tif(fp == NULL)\n\t{\n\t\tprintf(\"Error opening file!\\n\");\n\t\texit(1);\n\t}\n\tprintf(\"Enter a text (press enter to exit):\\n\");\n\tdo\n\t{\n\t\tc = getchar();\n\t\tfputc(c, fp);\n\t}while(c != '\\n');\n\tfclose(fp);\n\treturn 0;\n}\n"
    },
    {
      "index": 8,
      "text": "{\n\t\"binhacks\": {\n\t\t\"sprintf_call_esp+34\": {\n\t\t\t\"addr\": \"0x45e1e9\"\n\t\t},\n\t\t\"sprintf_rep\": {\n\t\t\t\"addr\": \"0x45e1f5\"\n\t\t},\n\t\t\"sprintf_call_esp+3c\": {\n\t\t\t\"addr\": \"0x45e1ff\"\n\t\t}\n\t},\n\t\"title\": \"\u6771\u65b9\u975e\u60f3\u5929\u5247 \uff5e \u8d85\u5f29\u7d1a\u30ae\u30cb\u30e7\u30eb\u306e\u8b0e\u3092\u8ffd\u3048\"\n}\n"
    }
  ],
  "created": 1650096080,
  "object": "edit"
}
2022-04-16 08:02:06.904716 NO RESULT
2022-04-16 08:02:06.904731 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 6
}
2022-04-16 08:02:06.904808 fix syntax errors 8 ["import os\n\nclass File:\n    def __init__(self, path):\n        self.path = path\n\n    def write(self, text):\n        with open(self.path, 'w') as f:\n            f.write(text)\n\n    def read(self):\n        with open(self.path, 'r') as f:\n            return f.read()\n\n    def __add__(self, obj):\n        new_path = os.path.join(\n            os.path.dirname(self.path),\n            os.path.basename(self.path) + os.path.basename(obj.path)\n        )\n        new_file = type(self)(new_path)\n        new_file.write(self.read() + obj.read())\n        return new_file\n\n    def __str__(self):\n        return self.path\n\n    def __iter__(self):\n        with open(self.path, 'r') as f:\n            return f\n\n    def __next__(self):\n        with open(self.path, 'r') as f:\n            return next(f)\n", '#!/bin/bash\n\necho "Hello World"\n\n', "var fs = require('fs');\nvar path = require('path');\nvar file = path.join(__dirname, 'file.txt');\n\nfs.readFile(file, function(err, data) {\n  if (err) {\n    throw err;\n  }\n\n  var lines = data.toString().split('\\n');\n\n  console.log(lines);\n});\n", '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# Copyright (C) 2014 University of Dundee & Open Microscopy Environment.\n#                    All Rights Reserved.\n# Use is subject to license terms supplied in LICENSE.txt\n#\n\n"""\nFOR TRAINING PURPOSES ONLY!\n"""\n\n# This is a \'bare-bones\' template to allow easy conversion from a simple\n# client-side Python script to a script run by the server, on the OMERO\n# scripting service.\n# To use the script, simply paste the body of the script (not the connection\n# code) into the point indicated below.\n# A more complete template, for \'real-world\' scripts, is also included in this\n# folder\n# This script takes an Image ID as a parameter from the scripting service.\nfrom omero.rtypes import rlong, rstring, unwrap, robject\nfrom omero.gateway import BlitzGateway, MapAnnotationWrapper\nimport omero.scripts as scripts\nimport omero\n\n# Script definition\n\n# Script name, description and parameters are defined here.\n# These parameters will be recognised by the Insight and web clients and\n# populated with the currently selected Image(s)\n\n# this script only takes Object (Image) IDs as input\ndata_types = [rstring(\'Dataset\')]\nclient = scripts.client(\n    \'File_Download.py\',\n    """Download a file from the server and save to the client""",\n    # first parameter\n    scripts.String(\n        "Data_Type", grouping="1", optional=False, values=data_types, default="Image"),\n    # second parameter\n    scripts.List("IDs", grouping="2", optional=False).ofType(rlong(0)),\n    )\n\n# we can now create our Blitz Gateway by wrapping the client object\nconn = BlitzGateway(client_obj=client)\nscript_params = client.getInputs(unwrap=True)\nprint script_params\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# we can now create our Blitz Gateway by wrapping the client object\nconn = BlitzGateway(client_obj=client)\nscript_params = client.getInputs(unwrap=True)\nprint script_params\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput("IDs"))\n\n# get the \'IDs\' parameter (which we have restricted to \'Image\' IDs)\nids = unwrap(client.getInput\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport os.path\nimport sys\nimport re\n\ndef get_file_list(path):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list(f))\n        else:\n            files.append(f)\n    return files\n\ndef get_file_list_re(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re2(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re2(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re3(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re3(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re4(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re4(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re5(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re5(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re6(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re6(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re7(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re7(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re8(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re8(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re9(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re9(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re10(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re10(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re11(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re11(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re12(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re12(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re13(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re13(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re14(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re14(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re15(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n        if os.path.isdir(f):\n            files.extend(get_file_list_re15(f, re_str))\n        else:\n            if re.search(re_str, f):\n                files.append(f)\n    return files\n\ndef get_file_list_re16(path, re_str):\n    files = []\n    for f in os.listdir(path):\n        f = os.path.join(path, f)\n       \n', "var fs = require('fs');\n\nfs.readFile('test.txt', 'utf8', function(err, data) {\n  if (err) throw err;\n  console.log('OK: ' + 'test.txt');\n  console.log(data)\n});\n\nconsole.log('after calling readFile');\n", '#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n\tFILE* fp;\n\tchar c;\n\tfp = fopen("file.txt", "w");\n\tif(fp == NULL)\n\t{\n\t\tprintf("Error opening file!\\n");\n\t\texit(1);\n\t}\n\tprintf("Enter a text (press enter to exit):\\n");\n\tdo\n\t{\n\t\tc = getchar();\n\t\tfputc(c, fp);\n\t}while(c != \'\\n\');\n\tfclose(fp);\n\treturn 0;\n}\n', '{\n\t"binhacks": {\n\t\t"sprintf_call_esp+34": {\n\t\t\t"addr": "0x45e1e9"\n\t\t},\n\t\t"sprintf_rep": {\n\t\t\t"addr": "0x45e1f5"\n\t\t},\n\t\t"sprintf_call_esp+3c": {\n\t\t\t"addr": "0x45e1ff"\n\t\t}\n\t},\n\t"title": "東方非想天則 ～ 超弩級ギニョルの謎を追え"\n}\n']
2022-04-16 08:02:06.905034 size on output set 8
