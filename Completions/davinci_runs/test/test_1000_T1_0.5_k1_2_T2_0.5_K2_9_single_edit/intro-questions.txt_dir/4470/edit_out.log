2022-04-16 07:38:22.170667 num operations 1
2022-04-16 07:38:22.170683 size on input set 1
2022-04-16 07:38:41.875578 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Python3 program to find minimum number of jumps to reach end\n\n# Returns minimum number of jumps to reach arr[n-1] from arr[0]\ndef minJumps(arr, n):\n    jumps = [0 for i in range(n)]\n\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n\n    jumps[0] = 0\n\n    # Find the minimum number of jumps to reach arr[i]\n    # from arr[0], and assign this value to jumps[i]\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n - 1]\n\n\n# Driver program to test above function\narr = [1, 3, 6, 3, 2, 3, 6, 8, 9, 5]\nsize = len(arr)\nprint('Minimum number of jumps to reach',\n      'end is', minJumps(arr, size))\n\n\nimport math\n\ndef minJumps(arr, n):\n    # jumps[0] will hold the result\n    jumps = [0 for i in range(n)]\n\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n\n    jumps[0] = 0\n\n    # Find the minimum number of jumps to reach arr[i]\n    # from arr[0], and assign this value to jumps[i]\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n - 1]\n\n\n# Driver program to test above function\narr = [1, 3, 6, 3, 2, 3, 6, 8, 9, 5]\nsize = len(arr)\nprint('Minimum number of jumps to reach',\n      'end is', minJumps(arr, size))\n\n# This code is contributed by Anant Agarwal.\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n"
    },
    {
      "index": 2,
      "text": "\n#\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n"
    },
    {
      "index": 3,
      "text": "\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    elif n % 2 == 0:\n        return 1 + calculate(n/2)\n    elif n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    elif n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n"
    },
    {
      "index": 5,
      "text": "\n\n# import math\n\n# def calculate(n):\n#     if n == 1:\n#         return 0\n\n#     if n % 2 == 0:\n#         return 1 + calculate(n/2)\n#     if n % 3 == 0:\n#         return 1 + calculate(2*n/3)\n#     if n % 5 == 0:\n#         return 1 + calculate(4*n/5)\n#     return -1\n\n# q = int(input())\n\n# for i in range(q):\n#     n = int(input())\n#     print(calculate(n))\n\n\nimport math\n\ndef calculate(n):\n    if n == 1 or n == 0:\n        return 0, 1\n\n    steps = 1\n    if n % 2 == 0: \n        steps += 1 + calculate(n/2)\n    if n % 3 == 0: \n        steps += 1 + calculate(2*n/3)\n    if n % 5 == 0: \n        steps += 1 + calculate(4*n/5)\n    return steps\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n)[0])\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    print(\"Hello World\")\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\ndef calculate(n, steps = 0):\n    if n == 1:\n        return steps\n\n    if n % 2 == 0:\n        return calculate(n/2, steps + 1)\n    if n % 3 == 0:\n        return calculate(2*n/3, steps + 1)\n    if n % 5 == 0:\n        return calculate(4*n/5, steps + 1)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n"
    }
  ],
  "created": 1650094702,
  "object": "edit"
}
2022-04-16 07:38:41.875858 fix syntax errors 9 ["\n# Python3 program to find minimum number of jumps to reach end\n\n# Returns minimum number of jumps to reach arr[n-1] from arr[0]\ndef minJumps(arr, n):\n    jumps = [0 for i in range(n)]\n\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n\n    jumps[0] = 0\n\n    # Find the minimum number of jumps to reach arr[i]\n    # from arr[0], and assign this value to jumps[i]\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n - 1]\n\n\n# Driver program to test above function\narr = [1, 3, 6, 3, 2, 3, 6, 8, 9, 5]\nsize = len(arr)\nprint('Minimum number of jumps to reach',\n      'end is', minJumps(arr, size))\n\n\nimport math\n\ndef minJumps(arr, n):\n    # jumps[0] will hold the result\n    jumps = [0 for i in range(n)]\n\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n\n    jumps[0] = 0\n\n    # Find the minimum number of jumps to reach arr[i]\n    # from arr[0], and assign this value to jumps[i]\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n - 1]\n\n\n# Driver program to test above function\narr = [1, 3, 6, 3, 2, 3, 6, 8, 9, 5]\nsize = len(arr)\nprint('Minimum number of jumps to reach',\n      'end is', minJumps(arr, size))\n\n# This code is contributed by Anant Agarwal.\n", '\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n', '\n#\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n', '\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n', '\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    elif n % 2 == 0:\n        return 1 + calculate(n/2)\n    elif n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    elif n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n', '\n\n# import math\n\n# def calculate(n):\n#     if n == 1:\n#         return 0\n\n#     if n % 2 == 0:\n#         return 1 + calculate(n/2)\n#     if n % 3 == 0:\n#         return 1 + calculate(2*n/3)\n#     if n % 5 == 0:\n#         return 1 + calculate(4*n/5)\n#     return -1\n\n# q = int(input())\n\n# for i in range(q):\n#     n = int(input())\n#     print(calculate(n))\n\n\nimport math\n\ndef calculate(n):\n    if n == 1 or n == 0:\n        return 0, 1\n\n    steps = 1\n    if n % 2 == 0: \n        steps += 1 + calculate(n/2)\n    if n % 3 == 0: \n        steps += 1 + calculate(2*n/3)\n    if n % 5 == 0: \n        steps += 1 + calculate(4*n/5)\n    return steps\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n)[0])\n', '\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n', '\ndef main():\n    print("Hello World")\nif __name__ == "__main__":\n    main()\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\ndef calculate(n, steps = 0):\n    if n == 1:\n        return steps\n\n    if n % 2 == 0:\n        return calculate(n/2, steps + 1)\n    if n % 3 == 0:\n        return calculate(2*n/3, steps + 1)\n    if n % 5 == 0:\n        return calculate(4*n/5, steps + 1)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))\n']
2022-04-16 07:38:41.876012 size on output set 8
2022-04-16 07:38:41.876028 num operations 1
2022-04-16 07:38:41.876033 size on input set 1
2022-04-16 07:38:56.220825 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO:\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# TODO\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# TODO\n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n# TODO\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n# TODO\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n# TODO\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef solve(n):\n    pass\n"
    }
  ],
  "created": 1650094721,
  "object": "edit"
}
2022-04-16 07:38:56.221110 fix syntax errors 9 ["\n\n# TODO\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO:\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef solve(n):\n    pass\n']
2022-04-16 07:38:56.221243 size on output set 8
