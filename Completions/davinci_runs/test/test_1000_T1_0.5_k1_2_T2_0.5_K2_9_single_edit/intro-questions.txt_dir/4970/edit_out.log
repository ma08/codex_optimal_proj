2022-04-16 15:20:39.867228 num operations 1
2022-04-16 15:20:39.867238 size on input set 1
2022-04-16 15:21:11.985068 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common[0][1])\n"
    },
    {
      "index": 1,
      "text": "\n#\n# from collections import Counter\n#\n# n = int(input())\n#\n# course_combinations = []\n#\n# for i in range(n):\n#     courses = list(map(int, input().split(\" \")))\n#     course_combinations.append(tuple(sorted(courses)))\n#\n# # print(course_combinations)\n#\n# c = Counter(course_combinations)\n# most_common = c.most_common(1)\n#\n# # print(most_common)\n#\n# print(most_common[0][1])\n"
    },
    {
      "index": 2,
      "text": "\n\nprint(\"Hello World\")\n"
    },
    {
      "index": 3,
      "text": "\n \nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 4
    },
    {
      "index": 5,
      "text": "\nfrom collections import Counter\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narr = []\nfor i in range(n):\n    arr.append(list(map(int, sys.stdin.readline().split())))\n\narr.sort(key=lambda x: x[0])\n\nprint(arr)\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split()))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])\n"
    },
    {
      "index": 8,
      "text": "\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n# print(most_common)\n\nprint(most_common[0][1])\n"
    }
  ],
  "created": 1650122440,
  "object": "edit"
}
2022-04-16 15:21:11.985333 NO RESULT
2022-04-16 15:21:11.985341 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 4
}
2022-04-16 15:21:11.985384 fix syntax errors 8 ['\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(" ")))\n    course_combinations.append(tuple(sorted(courses)))\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common[0][1])\n', '\n#\n# from collections import Counter\n#\n# n = int(input())\n#\n# course_combinations = []\n#\n# for i in range(n):\n#     courses = list(map(int, input().split(" ")))\n#     course_combinations.append(tuple(sorted(courses)))\n#\n# # print(course_combinations)\n#\n# c = Counter(course_combinations)\n# most_common = c.most_common(1)\n#\n# # print(most_common)\n#\n# print(most_common[0][1])\n', '\n\nprint("Hello World")\n', '\n \nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(" ")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])\n', '\nfrom collections import Counter\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(" ")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])\n', '\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narr = []\nfor i in range(n):\n    arr.append(list(map(int, sys.stdin.readline().split())))\n\narr.sort(key=lambda x: x[0])\n\nprint(arr)\n', '#!/usr/bin/env python\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split()))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])\n', '\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(" ")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n# print(most_common)\n\nprint(most_common[0][1])\n']
2022-04-16 15:21:11.985421 size on output set 8
2022-04-16 15:21:11.985433 num operations 1
2022-04-16 15:21:11.985438 size on input set 1
2022-04-16 15:21:24.999803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in input().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(len([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in input().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum(courses[x] for x in courses if courses[x] == max_count))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = []\n    for i in range(n):\n        courses.append(sys.stdin.readline().strip())\n    courses.sort()\n    max_count = 0\n    count = 1\n    for i in range(len(courses) - 1):\n        if courses[i] == courses[i + 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n    if count > max_count:\n        max_count = count\n    print(max_count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\n\ndef main():\n    n_cases = int(sys.stdin.readline().strip())\n    for _ in range(n_cases):\n        n = int(sys.stdin.readline().strip())\n        courses = {}\n        for i in range(n):\n            course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n            course_list.sort()\n            course_list = tuple(course_list)\n            if course_list in courses:\n                courses[course_list] += 1\n            else:\n                courses[course_list] = 1\n        max_count = max(courses.values())\n        print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650122472,
  "object": "edit"
}
2022-04-16 15:21:25.000216 fix syntax errors 9 ["#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in input().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(len([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in input().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum(courses[x] for x in courses if courses[x] == max_count))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = []\n    for i in range(n):\n        courses.append(sys.stdin.readline().strip())\n    courses.sort()\n    max_count = 0\n    count = 1\n    for i in range(len(courses) - 1):\n        if courses[i] == courses[i + 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n    if count > max_count:\n        max_count = count\n    print(max_count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n_cases = int(sys.stdin.readline().strip())\n    for _ in range(n_cases):\n        n = int(sys.stdin.readline().strip())\n        courses = {}\n        for i in range(n):\n            course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n            course_list.sort()\n            course_list = tuple(course_list)\n            if course_list in courses:\n                courses[course_list] += 1\n            else:\n                courses[course_list] = 1\n        max_count = max(courses.values())\n        print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:21:25.000280 size on output set 8
2022-04-16 15:21:25.000290 num operations 1
2022-04-16 15:21:25.000295 size on input set 1
2022-04-16 15:21:35.674226 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # frosh = int(sys.stdin.readline().strip())\n    # course_counts = {}\n    # for i in range(frosh):\n    #     course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n    #     course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    # print max(course_counts.values())\n    print \"hello\"\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys, os\n\ndef main():\n    for line in sys.stdin:\n        print line\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 5
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    # frosh = int(sys.stdin.readline().strip())\n    # course_counts = {}\n    # for i in range(frosh):\n    #     course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n    #     course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    # print max(course_counts.values())\n    print \"hello\"\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\n\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(\n            sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650122485,
  "object": "edit"
}
2022-04-16 15:21:35.674484 NO RESULT
2022-04-16 15:21:35.674507 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 5
}
2022-04-16 15:21:35.674617 fix syntax errors 8 ["\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\ndef main():\n    # frosh = int(sys.stdin.readline().strip())\n    # course_counts = {}\n    # for i in range(frosh):\n    #     course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n    #     course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    # print max(course_counts.values())\n    print "hello"\n\nif __name__ == \'__main__\':\n    main()\n', "\n\nimport sys, os\n\ndef main():\n    for line in sys.stdin:\n        print line\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", '\nimport sys\n\ndef main():\n    # frosh = int(sys.stdin.readline().strip())\n    # course_counts = {}\n    # for i in range(frosh):\n    #     course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n    #     course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    # print max(course_counts.values())\n    print "hello"\n\nif __name__ == \'__main__\':\n    main()\n', "\n\n\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(\n            sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:21:35.674657 size on output set 7
2022-04-16 15:21:35.674668 num operations 1
2022-04-16 15:21:35.674673 size on input set 1
2022-04-16 15:21:47.822798 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nimport sys\n\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nfrom collections import defaultdict\n \ndef main(): \n    frosh = int(sys.stdin.readline().strip()) \n    classes = defaultdict(lambda: 0) \n    for _ in range(frosh): \n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split()))) \n        classes[courses] += 1 \n    print(max(classes.values())) \n \nif __name__ == \"__main__\": \n    main() \n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split()))) # map to int, sort, and make tuple\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "from collections import defaultdict\n\n\nfrosh = int(input())\nclasses = defaultdict(lambda: 0)\nfor _ in range(frosh):\n    courses = tuple(sorted(map(int, input().split())))\n    classes[courses] += 1\nprint(max(classes.values()))\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Apr  5 20:03:42 2020\n@author: xiaokewang\n\"\"\"\n\nimport sys\nimport os\n\nos.chdir('/Users/xiaokewang/Desktop/')\n\n\n\n\n\n\n\n\n\n\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 8
    }
  ],
  "created": 1650122495,
  "object": "edit"
}
2022-04-16 15:21:47.823093 NO RESULT
2022-04-16 15:21:47.823101 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 8
}
2022-04-16 15:21:47.823142 fix syntax errors 8 ['\n\n\nimport sys\n\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nfrom collections import defaultdict\n \ndef main(): \n    frosh = int(sys.stdin.readline().strip()) \n    classes = defaultdict(lambda: 0) \n    for _ in range(frosh): \n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split()))) \n        classes[courses] += 1 \n    print(max(classes.values())) \n \nif __name__ == "__main__": \n    main() \n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split()))) # map to int, sort, and make tuple\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n', 'from collections import defaultdict\n\n\nfrosh = int(input())\nclasses = defaultdict(lambda: 0)\nfor _ in range(frosh):\n    courses = tuple(sorted(map(int, input().split())))\n    classes[courses] += 1\nprint(max(classes.values()))\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sun Apr  5 20:03:42 2020\n@author: xiaokewang\n"""\n\nimport sys\nimport os\n\nos.chdir(\'/Users/xiaokewang/Desktop/\')\n\n\n\n\n\n\n\n\n\n\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 15:21:47.823245 size on output set 6
2022-04-16 15:21:47.823255 num operations 1
2022-04-16 15:21:47.823260 size on input set 1
2022-04-16 15:22:01.064344 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\ncombos = sorted(combos)\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\nprint(max_popularity)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n\ndef main():\n    froshes = int(sys.stdin.readline().strip())\n    combos = []\n    for i in range(froshes):\n        combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n        combos.append(combo)\n\n    combos = sorted(combos)\n\n    max_popularity = 1\n    popularity = 1\n    for i in range(1, froshes):\n        if combos[i] == combos[i-1]:\n            popularity += 1\n        else:\n            popularity = 1\n        if popularity > max_popularity:\n            max_popularity = popularity\n\n    print(max_popularity)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\nnum_days = int(sys.stdin.readline().strip())\nprices = []\nfor i in range(num_days):\n    price = int(sys.stdin.readline().strip())\n    prices.append(price)\n\nprices = sorted(prices)\n\ntotal_price = 0\nfor i in range(num_days):\n    total_price += prices[i] * (num_days - i)\n\nprint(total_price)\n"
    },
    {
      "index": 8,
      "text": "\nimport math\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = {}\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    if combo not in combos:\n        combos[combo] = 1\n    else:\n        combos[combo] += 1\n\nfroshes_left = froshes\nmax_popularity = 0\nfor combo in combos:\n    popularity = combos[combo]\n    if popularity > max_popularity:\n        max_popularity = popularity\n    froshes_left -= popularity\n\nif froshes_left < max_popularity:\n    max_popularity = froshes_left\n\nprint(math.ceil(max_popularity/2))\n"
    }
  ],
  "created": 1650122507,
  "object": "edit"
}
2022-04-16 15:22:01.064589 fix syntax errors 9 ['\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n', '\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\ncombos = sorted(combos)\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\nprint(max_popularity)\n', '\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n', '\nimport sys\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n', '#!/usr/bin/env python3\n\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n', '\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n', '\nimport sys\n\n\ndef main():\n    froshes = int(sys.stdin.readline().strip())\n    combos = []\n    for i in range(froshes):\n        combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n        combos.append(combo)\n\n    combos = sorted(combos)\n\n    max_popularity = 1\n    popularity = 1\n    for i in range(1, froshes):\n        if combos[i] == combos[i-1]:\n            popularity += 1\n        else:\n            popularity = 1\n        if popularity > max_popularity:\n            max_popularity = popularity\n\n    print(max_popularity)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\nnum_days = int(sys.stdin.readline().strip())\nprices = []\nfor i in range(num_days):\n    price = int(sys.stdin.readline().strip())\n    prices.append(price)\n\nprices = sorted(prices)\n\ntotal_price = 0\nfor i in range(num_days):\n    total_price += prices[i] * (num_days - i)\n\nprint(total_price)\n', '\nimport math\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = {}\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    if combo not in combos:\n        combos[combo] = 1\n    else:\n        combos[combo] += 1\n\nfroshes_left = froshes\nmax_popularity = 0\nfor combo in combos:\n    popularity = combos[combo]\n    if popularity > max_popularity:\n        max_popularity = popularity\n    froshes_left -= popularity\n\nif froshes_left < max_popularity:\n    max_popularity = froshes_left\n\nprint(math.ceil(max_popularity/2))\n']
2022-04-16 15:22:01.064738 size on output set 7
2022-04-16 15:22:01.064764 num operations 1
2022-04-16 15:22:01.064771 size on input set 1
2022-04-16 15:22:13.368014 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# This is a comment\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\n\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for _ in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.iteritems():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef get_frosh_courses(n):\n    return [sys.stdin.readline().strip().split() for i in range(n)]\n\ndef get_popularities(frosh_courses):\n    return {tuple(sorted(frosh_course)): frosh_courses.count(frosh_course) for frosh_course in frosh_courses}\n\ndef get_most_popularities(popularities):\n    max_popularity = max(popularities.values()) \n    return [frosh_course_tuple for frosh_course_tuple, popularity in popularities.items() if popularity == max_popularity]\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    max_popularity = max(popularities.values())\n    return [frosh_course_tuple for frosh_course_tuple, popularity in popularities.items() if popularity == max_popularity]\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650122521,
  "object": "edit"
}
2022-04-16 15:22:13.368349 fix syntax errors 9 ["\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# This is a comment\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for _ in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.iteritems():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_frosh_courses(n):\n    return [sys.stdin.readline().strip().split() for i in range(n)]\n\ndef get_popularities(frosh_courses):\n    return {tuple(sorted(frosh_course)): frosh_courses.count(frosh_course) for frosh_course in frosh_courses}\n\ndef get_most_popularities(popularities):\n    max_popularity = max(popularities.values()) \n    return [frosh_course_tuple for frosh_course_tuple, popularity in popularities.items() if popularity == max_popularity]\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    max_popularity = max(popularities.values())\n    return [frosh_course_tuple for frosh_course_tuple, popularity in popularities.items() if popularity == max_popularity]\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:22:13.368453 size on output set 8
2022-04-16 15:22:13.368465 num operations 1
2022-04-16 15:22:13.368471 size on input set 1
2022-04-16 15:22:29.946120 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import re\nimport sys\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.strip()] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.strip()] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.split()] = frosh.get(line.split(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 5,
      "text": "import sys\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 6,
      "text": "\nfrom collections import Counter\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = []\n\nfor line in sys.stdin:\n    frosh.append(line)\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = Counter(frosh).most_common(1)\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular[0][1])\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys, math\n\n# MAIN #\n\n# Get the number of frosh\nnum_frosh = int(sys.stdin.readline())\n\n# Get the number of courses\nnum_courses = int(sys.stdin.readline())\n\n# Get the number of frosh who take each course\nnum_frosh_per_course = []\n\nfor line in sys.stdin:\n    num_frosh_per_course.append(int(line))\n\n# Get the number of frosh who take each combination of courses\nnum_frosh_per_combination = []\n\nfor i in range(0, num_courses):\n    num_frosh_per_combination.append([0] * int(math.pow(2, num_courses)))\n\nfor i in range(0, num_frosh):\n    # Get the courses that the i-th frosh takes\n    frosh_courses = sys.stdin.readline().strip().split()\n\n    # Convert the courses into a number\n    num_frosh_courses = 0\n    for course in frosh_courses:\n        num_frosh_courses += int(math.pow(2, int(course) - 1))\n\n    # Increment the number of frosh who take this combination of courses\n    num_frosh_per_combination[len(frosh_courses) - 1][num_frosh_courses] += 1\n\n# Get the number of frosh who take the most popular combination of courses\nmax_num_frosh = 0\n\nfor i in range(0, num_courses):\n    max_num_frosh = max(max_num_frosh, max(num_frosh_per_combination[i]))\n\n# Print the number of frosh who take the most popular combination of courses\nprint(max_num_frosh)\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\n# MAIN \n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    }
  ],
  "created": 1650122533,
  "object": "edit"
}
2022-04-16 15:22:29.946373 fix syntax errors 9 ['import re\nimport sys\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', '\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.strip()] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', 'import sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.strip()] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', '\nimport sys\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.split()] = frosh.get(line.split(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', '\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', 'import sys\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', '\nfrom collections import Counter\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = []\n\nfor line in sys.stdin:\n    frosh.append(line)\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = Counter(frosh).most_common(1)\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular[0][1])\n', '\n\nimport sys, math\n\n# MAIN #\n\n# Get the number of frosh\nnum_frosh = int(sys.stdin.readline())\n\n# Get the number of courses\nnum_courses = int(sys.stdin.readline())\n\n# Get the number of frosh who take each course\nnum_frosh_per_course = []\n\nfor line in sys.stdin:\n    num_frosh_per_course.append(int(line))\n\n# Get the number of frosh who take each combination of courses\nnum_frosh_per_combination = []\n\nfor i in range(0, num_courses):\n    num_frosh_per_combination.append([0] * int(math.pow(2, num_courses)))\n\nfor i in range(0, num_frosh):\n    # Get the courses that the i-th frosh takes\n    frosh_courses = sys.stdin.readline().strip().split()\n\n    # Convert the courses into a number\n    num_frosh_courses = 0\n    for course in frosh_courses:\n        num_frosh_courses += int(math.pow(2, int(course) - 1))\n\n    # Increment the number of frosh who take this combination of courses\n    num_frosh_per_combination[len(frosh_courses) - 1][num_frosh_courses] += 1\n\n# Get the number of frosh who take the most popular combination of courses\nmax_num_frosh = 0\n\nfor i in range(0, num_courses):\n    max_num_frosh = max(max_num_frosh, max(num_frosh_per_combination[i]))\n\n# Print the number of frosh who take the most popular combination of courses\nprint(max_num_frosh)\n', '\n\nimport sys\n\n# MAIN \n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n']
2022-04-16 15:22:29.946493 size on output set 9
2022-04-16 15:22:29.946507 num operations 1
2022-04-16 15:22:29.946512 size on input set 1
2022-04-16 15:22:39.725953 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]()\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination() for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\ndef find_popular_combinations(n, frosh):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n, frosh)))\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations\n            if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular] \n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(frosh)))\n"
    },
    {
      "index": 7,
      "text": "import sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return combinations\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n"
    },
    {
      "index": 8,
      "text": "import sys\nimport math\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular] \n\ndef find_unique_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    return len(combinations)\n\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    if n <= 5:\n        print(find_unique_combinations(n))\n    else:\n        print(len(find_popular_combinations(n)))\n"
    }
  ],
  "created": 1650122549,
  "object": "edit"
}
2022-04-16 15:22:39.726191 fix syntax errors 9 ["import sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]()\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination() for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n", "import sys\n\n\ndef find_popular_combinations(n, frosh):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n, frosh)))\n", "import sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations\n            if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n", "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular] \n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n", "\nimport sys\n\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n", "\nimport sys\n\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n", "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(frosh)))\n", "import sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return combinations\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n", "import sys\nimport math\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular] \n\ndef find_unique_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    return len(combinations)\n\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    if n <= 5:\n        print(find_unique_combinations(n))\n    else:\n        print(len(find_popular_combinations(n)))\n"]
2022-04-16 15:22:39.726339 size on output set 9
