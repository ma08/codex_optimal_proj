2022-04-16 12:23:44.382516 num operations 1
2022-04-16 12:23:44.382530 size on input set 1
2022-04-16 12:23:56.857870 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(y)][int(x)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 3,
      "text": "\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 4,
      "text": "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 5,
      "text": "\n\n# Solved by: Raul Gonzalez \n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 6,
      "text": "\n\n# Solved by: Raul Gonzalez, Anirudh\n# Date: 4/12/2020\n# Time: 12:40pm, 12:55pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                    return False\n                elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                    return False\n                elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                    return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 7,
      "text": "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 8,
      "text": "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1650111824,
  "object": "edit"
}
2022-04-16 12:23:56.858290 fix syntax errors 9 ['\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(y)][int(x)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez \n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez, Anirudh\n# Date: 4/12/2020\n# Time: 12:40pm, 12:55pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                    return False\n                elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                    return False\n                elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                    return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-16 12:23:56.858392 size on output set 5
2022-04-16 12:23:56.858405 num operations 1
2022-04-16 12:23:56.858410 size on input set 1
2022-04-16 12:24:07.058616 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(\n        diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 4,
      "text": "import math\n\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag3 = [x[i]*y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2) and len(set(diag3)) == len(diag3):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n\n\ndef find_max_min(arr):\n    max_val = arr[0]\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        max_val = max(max_val, arr[i])\n        min_val = min(min_val, arr[i])\n    return max_val, min_val\n    print('INCORRECT')\n"
    },
    {
      "index": 8,
      "text": "\n\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    }
  ],
  "created": 1650111836,
  "object": "edit"
}
2022-04-16 12:24:07.058862 fix syntax errors 9 ["\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(\n        diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "import math\n\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag3 = [x[i]*y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2) and len(set(diag3)) == len(diag3):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\n\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n\n\ndef find_max_min(arr):\n    max_val = arr[0]\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        max_val = max(max_val, arr[i])\n        min_val = min(min_val, arr[i])\n    return max_val, min_val\n    print('INCORRECT')\n", "\n\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"]
2022-04-16 12:24:07.058920 size on output set 7
2022-04-16 12:24:07.058936 num operations 1
2022-04-16 12:24:07.058941 size on input set 1
2022-04-16 12:24:24.872494 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]  # noqa: E231\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())  # noqa: E201\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = []\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions.append((x, y))\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][0] == positions[j][0] or positions[i][1] == positions[j][1]:\n            flag = False\n            break\n        elif abs(positions[i][0] - positions[j][0]) == abs(positions[i][1] - positions[j][1]):\n            flag = False\n            break\n\n'''\nfor i in range(N):\n    for j in range(N):\n        if positions[i] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n'''\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens and a flag to check if there are any queens attacking each other\npositions = [[0 for x in range(N)] for y in range(N)] \nflag = True\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 4,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 5,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split()) # read x & y\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1: # if any position is 1\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j: # if any position is 1\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i: # if any position is 1\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n\n# Output the result\nif flag: # if flag is true\n    print(\"CORRECT\")\nelse: # if flag is false\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 6,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i + k < N and j + k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i - k > -1 and j - k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i + k < N and j - k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i - k > -1 and j + k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 7,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i + k < N and j + k < N and positions[i + k][j + k] == 1 and k != 0:\n                    flag = False;\n                    break;\n                if i - k > -1 and j - k > -1 and positions[i - k][j - k] == 1 and k != 0:\n                    flag = False;\n                    break;\n                if i + k < N and j - k > -1 and positions[i + k][j - k] == 1 and k != 0:\n                    flag = False;\n                    break;\n                if i - k > -1 and j + k < N and positions[i - k][j + k] == 1 and k != 0:\n                    flag = False;\n                    break;\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 8,
      "text": "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens (0 = empty, 1 = queen)\npositions = [[0 for x in range(N)] for y in range(N)] \n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1650111847,
  "object": "edit"
}
2022-04-16 12:24:24.872972 fix syntax errors 9 ['\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]  # noqa: E231\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())  # noqa: E201\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = []\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions.append((x, y))\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][0] == positions[j][0] or positions[i][1] == positions[j][1]:\n            flag = False\n            break\n        elif abs(positions[i][0] - positions[j][0]) == abs(positions[i][1] - positions[j][1]):\n            flag = False\n            break\n\n\'\'\'\nfor i in range(N):\n    for j in range(N):\n        if positions[i] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\'\'\'\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens and a flag to check if there are any queens attacking each other\npositions = [[0 for x in range(N)] for y in range(N)] \nflag = True\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split()) # read x & y\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1: # if any position is 1\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j: # if any position is 1\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i: # if any position is 1\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0: # if any position is 1\n                    flag = False\n                    break\n\n# Output the result\nif flag: # if flag is true\n    print("CORRECT")\nelse: # if flag is false\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i + k < N and j + k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i - k > -1 and j - k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i + k < N and j - k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i - k > -1 and j + k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i + k < N and j + k < N and positions[i + k][j + k] == 1 and k != 0:\n                    flag = False;\n                    break;\n                if i - k > -1 and j - k > -1 and positions[i - k][j - k] == 1 and k != 0:\n                    flag = False;\n                    break;\n                if i + k < N and j - k > -1 and positions[i + k][j - k] == 1 and k != 0:\n                    flag = False;\n                    break;\n                if i - k > -1 and j + k < N and positions[i - k][j + k] == 1 and k != 0:\n                    flag = False;\n                    break;\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens (0 = empty, 1 = queen)\npositions = [[0 for x in range(N)] for y in range(N)] \n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-16 12:24:24.873146 size on output set 8
2022-04-16 12:24:24.873158 num operations 1
2022-04-16 12:24:24.873163 size on input set 1
2022-04-16 12:24:44.570781 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        queens.add_queen(*[int(j) for j in input().split()])\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y) \n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):  # check if there is a queen in every row\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):  # check if there is a queen in every column\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(j - k) == abs(self.queens[j][0] - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nclass Queens:\n    def __init__(self):\n        self.queens = []  # \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043a\u043e\u0440\u043e\u043b\u0435\u0432 \u0432 \u0432\u0438\u0434\u0435 (x,y)\n\n    def add_queen(self, queen):\n        self.queens.append(queen)\n\n    def check_queens(self):\n        for queen in self.queens:\n            if self.queens.count(queen) > 1:\n                return False\n        for queen1 in self.queens:\n            for queen2 in self.queens:\n                if queen1[0] == queen2[0] or queen1[1] == queen2[1]:\n                    if queen1 != queen2:\n                        return False\n        for queen1 in self.queens:\n            for queen2 in self.queens:\n                if abs(queen1[0] - queen2[0]) == abs(queen1[1] - queen2[1]):\n                    if queen1 != queen2:\n                        return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens()\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen((x, y))\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 7
    },
    {
      "index": 8,
      "text": "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):  # check if there are more than 1 queen in a row\n            if len(self.queens[i]) > 1:  # if there are more than 1 queen\n                return False\n        for i in range(self.n):  # check if there are more than 1 queen in a column\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:  # if there is a queen\n                    break\n                if j == self.n - 1:  # if there are no queens\n                    return False\n        for i in range(self.n):  # check if there are more than 1 queen in a diagonal\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:  # if there is a queen\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:  # if there is a queen\n                            if abs(x - k) == abs(y - self.queens[k][0]):  # if the queens are in the same diagonal\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650111864,
  "object": "edit"
}
2022-04-16 12:24:44.571159 NO RESULT
2022-04-16 12:24:44.571170 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 7
}
2022-04-16 12:24:44.571215 fix syntax errors 8 ['\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        queens.add_queen(*[int(j) for j in input().split()])\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y) \n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):  # check if there is a queen in every row\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):  # check if there is a queen in every column\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(j - k) == abs(self.queens[j][0] - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == '__main__':\n    main()\n", '\nclass Queens:\n    def __init__(self):\n        self.queens = []  # координаты королев в виде (x,y)\n\n    def add_queen(self, queen):\n        self.queens.append(queen)\n\n    def check_queens(self):\n        for queen in self.queens:\n            if self.queens.count(queen) > 1:\n                return False\n        for queen1 in self.queens:\n            for queen2 in self.queens:\n                if queen1[0] == queen2[0] or queen1[1] == queen2[1]:\n                    if queen1 != queen2:\n                        return False\n        for queen1 in self.queens:\n            for queen2 in self.queens:\n                if abs(queen1[0] - queen2[0]) == abs(queen1[1] - queen2[1]):\n                    if queen1 != queen2:\n                        return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens()\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen((x, y))\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):  # check if there are more than 1 queen in a row\n            if len(self.queens[i]) > 1:  # if there are more than 1 queen\n                return False\n        for i in range(self.n):  # check if there are more than 1 queen in a column\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:  # if there is a queen\n                    break\n                if j == self.n - 1:  # if there are no queens\n                    return False\n        for i in range(self.n):  # check if there are more than 1 queen in a diagonal\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:  # if there is a queen\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:  # if there is a queen\n                            if abs(x - k) == abs(y - self.queens[k][0]):  # if the queens are in the same diagonal\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 12:24:44.571430 size on output set 8
2022-04-16 12:24:44.571445 num operations 1
2022-04-16 12:24:44.571450 size on input set 1
2022-04-16 12:25:12.878548 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit(0)\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit(0)\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit(0)\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit(0)\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit(0)\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit(0)\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 2,
      "text": "\n\nfor i in range(int(input())):\n    n = int(input())\n    board = [[0 for i in range(n)] for i in range(n)]\n    \n    for j in range(n):\n        x,y = [int(x) for x in input().split()]\n        board[x][y] = \"Q\"\n    \n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"Q\":\n                # check the row\n                for k in range(n):\n                    if board[i][k] == \"Q\" and k != j:\n                        print(\"INCORRECT\")\n                        break\n                else:\n                    continue\n                break\n                # check the column\n                for k in range(n):\n                    if board[k][j] == \"Q\" and k != i:\n                        print(\"INCORRECT\")\n                        break\n                else:\n                    continue\n                break\n                # check the diagonals\n                # check up and to the left\n                x = i\n                y = j\n                while x > 0 and y > 0:\n                    x -= 1\n                    y -= 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        break\n                else:\n                    continue\n                break\n                # check up and to the right\n                x = i\n                y = j\n                while x > 0 and y < n-1:\n                    x -= 1\n                    y += 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        break\n                else:\n                    continue\n                break\n                # check down and to the left\n                x = i\n                y = j\n                while x < n-1 and y > 0:\n                    x += 1\n                    y -= 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        break\n                else:\n                    continue\n                break\n                # check down and to the right\n                x = i\n                y = j\n                while x < n-1 and y < n-1:\n                    x += 1\n                    y += 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        break\n                else:\n                    continue\n                break\n\n    print(\"CORRECT\")\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board for queens\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row for queens\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column for queens\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals for queens\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 8,
      "text": "\n#\n# n = int(input())\n#\n# # create the board\n# board = [[0 for i in range(n)] for i in range(n)]\n#\n# # populate the board\n# for i in range(n):\n#     x,y = [int(x) for x in input().split()]\n#     board[x][y] = \"Q\"\n#\n# # check the board\n# for i in range(n):\n#     for j in range(n):\n#         if board[i][j] == \"Q\":\n#             # check the row\n#             for k in range(n):\n#                 if board[i][k] == \"Q\" and k != j:\n#                     print(\"INCORRECT\")\n#                     exit()\n#             # check the column\n#             for k in range(n):\n#                 if board[k][j] == \"Q\" and k != i:\n#                     print(\"INCORRECT\")\n#                     exit()\n#             # check the diagonals\n#             # check up and to the left\n#             x = i\n#             y = j\n#             while x > 0 and y > 0:\n#                 x -= 1\n#                 y -= 1\n#                 if board[x][y] == \"Q\":\n#                     print(\"INCORRECT\")\n#                     exit()\n#             # check up and to the right\n#             x = i\n#             y = j\n#             while x > 0 and y < n-1:\n#                 x -= 1\n#                 y += 1\n#                 if board[x][y] == \"Q\":\n#                     print(\"INCORRECT\")\n#                     exit()\n#             # check down and to the left\n#             x = i\n#             y = j\n#             while x < n-1 and y > 0:\n#                 x += 1\n#                 y -= 1\n#                 if board[x][y] == \"Q\":\n#                     print(\"INCORRECT\")\n#                     exit()\n#             # check down and to the right\n#             x = i\n#             y = j\n#             while x < n-1 and y < n-1:\n#                 x += 1\n#                 y += 1\n#                 if board[x][y] == \"Q\":\n#                     print(\"INCORRECT\")\n#                     exit()\n#\n# print(\"CORRECT\")\n"
    }
  ],
  "created": 1650111884,
  "object": "edit"
}
2022-04-16 12:25:12.878989 fix syntax errors 9 ['\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit(0)\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit(0)\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit(0)\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit(0)\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit(0)\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit(0)\n\nprint("CORRECT")\n', '\n\nfor i in range(int(input())):\n    n = int(input())\n    board = [[0 for i in range(n)] for i in range(n)]\n    \n    for j in range(n):\n        x,y = [int(x) for x in input().split()]\n        board[x][y] = "Q"\n    \n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == "Q":\n                # check the row\n                for k in range(n):\n                    if board[i][k] == "Q" and k != j:\n                        print("INCORRECT")\n                        break\n                else:\n                    continue\n                break\n                # check the column\n                for k in range(n):\n                    if board[k][j] == "Q" and k != i:\n                        print("INCORRECT")\n                        break\n                else:\n                    continue\n                break\n                # check the diagonals\n                # check up and to the left\n                x = i\n                y = j\n                while x > 0 and y > 0:\n                    x -= 1\n                    y -= 1\n                    if board[x][y] == "Q":\n                        print("INCORRECT")\n                        break\n                else:\n                    continue\n                break\n                # check up and to the right\n                x = i\n                y = j\n                while x > 0 and y < n-1:\n                    x -= 1\n                    y += 1\n                    if board[x][y] == "Q":\n                        print("INCORRECT")\n                        break\n                else:\n                    continue\n                break\n                # check down and to the left\n                x = i\n                y = j\n                while x < n-1 and y > 0:\n                    x += 1\n                    y -= 1\n                    if board[x][y] == "Q":\n                        print("INCORRECT")\n                        break\n                else:\n                    continue\n                break\n                # check down and to the right\n                x = i\n                y = j\n                while x < n-1 and y < n-1:\n                    x += 1\n                    y += 1\n                    if board[x][y] == "Q":\n                        print("INCORRECT")\n                        break\n                else:\n                    continue\n                break\n\n    print("CORRECT")\n', '\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board for queens\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row for queens\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column for queens\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals for queens\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '#!/usr/bin/env python3\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '\n#\n# n = int(input())\n#\n# # create the board\n# board = [[0 for i in range(n)] for i in range(n)]\n#\n# # populate the board\n# for i in range(n):\n#     x,y = [int(x) for x in input().split()]\n#     board[x][y] = "Q"\n#\n# # check the board\n# for i in range(n):\n#     for j in range(n):\n#         if board[i][j] == "Q":\n#             # check the row\n#             for k in range(n):\n#                 if board[i][k] == "Q" and k != j:\n#                     print("INCORRECT")\n#                     exit()\n#             # check the column\n#             for k in range(n):\n#                 if board[k][j] == "Q" and k != i:\n#                     print("INCORRECT")\n#                     exit()\n#             # check the diagonals\n#             # check up and to the left\n#             x = i\n#             y = j\n#             while x > 0 and y > 0:\n#                 x -= 1\n#                 y -= 1\n#                 if board[x][y] == "Q":\n#                     print("INCORRECT")\n#                     exit()\n#             # check up and to the right\n#             x = i\n#             y = j\n#             while x > 0 and y < n-1:\n#                 x -= 1\n#                 y += 1\n#                 if board[x][y] == "Q":\n#                     print("INCORRECT")\n#                     exit()\n#             # check down and to the left\n#             x = i\n#             y = j\n#             while x < n-1 and y > 0:\n#                 x += 1\n#                 y -= 1\n#                 if board[x][y] == "Q":\n#                     print("INCORRECT")\n#                     exit()\n#             # check down and to the right\n#             x = i\n#             y = j\n#             while x < n-1 and y < n-1:\n#                 x += 1\n#                 y += 1\n#                 if board[x][y] == "Q":\n#                     print("INCORRECT")\n#                     exit()\n#\n# print("CORRECT")\n']
2022-04-16 12:25:12.879180 size on output set 8
2022-04-16 12:25:12.879190 num operations 1
2022-04-16 12:25:12.879195 size on input set 1
2022-04-16 12:25:21.395336 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen[0], queen[1]\n        for queen2 in queens:\n            x2, y2 = queen2[0], queen2[1]\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "def check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "def check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen[0], queen[1]\n        for queen2 in queens:\n            x2, y2 = queen2[0], queen2[1]\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for _ in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen[0], queen[1]\n        for queen2 in queens:\n            x2, y2 = queen2[0], queen2[1]\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef is_correct(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\nif __name__ == \"__main__\":\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(is_correct(N, queens))\n"
    },
    {
      "index": 7,
      "text": "\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    queens = [list(map(int, input().split())) for i in range(int(input()))]\n    print(check_queens(queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if (x == x2 or y == y2 or abs(x - x2) == abs(y - y2)) and (queen != queen2):\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650111912,
  "object": "edit"
}
2022-04-16 12:25:21.395588 fix syntax errors 9 ['\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen[0], queen[1]\n        for queen2 in queens:\n            x2, y2 = queen2[0], queen2[1]\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == "__main__":\n    main()\n', 'def check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == "__main__":\n    main()\n', 'def check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen[0], queen[1]\n        for queen2 in queens:\n            x2, y2 = queen2[0], queen2[1]\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == "__main__":\n    main()\n', "\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for _ in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == '__main__':\n    main()\n", '\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen[0], queen[1]\n        for queen2 in queens:\n            x2, y2 = queen2[0], queen2[1]\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(queens))\n\nif __name__ == "__main__":\n    main()\n', '\ndef is_correct(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\nif __name__ == "__main__":\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(is_correct(N, queens))\n', '\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    queens = [list(map(int, input().split())) for i in range(int(input()))]\n    print(check_queens(queens))\n\nif __name__ == "__main__":\n    main()\n', '\ndef check_queens(N, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if (x == x2 or y == y2 or abs(x - x2) == abs(y - y2)) and (queen != queen2):\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 12:25:21.395714 size on output set 8
2022-04-16 12:25:21.395727 num operations 1
2022-04-16 12:25:21.395732 size on input set 1
2022-04-16 12:25:32.653155 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]): # noqa\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef check(queens):\n    \"\"\"\n    This function checks if the solution is correct.\n    \"\"\"\n    n = len(queens)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                return False\n    return True\n\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Print the result\n    if check(queens):\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for _ in range(n)]\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for i in range(n)]\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input().strip())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().strip().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1])\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "def main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa: E501\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650111921,
  "object": "edit"
}
2022-04-16 12:25:32.653402 fix syntax errors 9 ['\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]): # noqa\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef check(queens):\n    """\n    This function checks if the solution is correct.\n    """\n    n = len(queens)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                return False\n    return True\n\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Print the result\n    if check(queens):\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for _ in range(n)]\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for i in range(n)]\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input().strip())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().strip().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1])\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', 'def main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa: E501\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 12:25:32.653547 size on output set 9
2022-04-16 12:25:32.653559 num operations 1
2022-04-16 12:25:32.653564 size on input set 1
2022-04-16 12:25:45.895364 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(N, queens))\n\ndef check_queens(N, queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(N, queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(N, q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N = int(input())\n    for i in range(N): \n        print(check_queens())\n\ndef check_queens():\n    N = int(input())\n    queens = [0] * N\n    for i in range(N): \n        x = int(input())\n        queens[i] = x\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if queens[i] == queens[j] or abs(queens[i] - queens[j]) == abs(i - j):\n                return \"INCORRECT\"\n    return \"CORRECT\" \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1]) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    N = int(input())\n    sys.stdin.readline()\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in sys.stdin.readline().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650111932,
  "object": "edit"
}
2022-04-16 12:25:45.895619 fix syntax errors 9 ['\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(N, queens))\n\ndef check_queens(N, queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(N, queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\ndef check_attack(N, q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    for i in range(N): \n        print(check_queens())\n\ndef check_queens():\n    N = int(input())\n    queens = [0] * N\n    for i in range(N): \n        x = int(input())\n        queens[i] = x\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if queens[i] == queens[j] or abs(queens[i] - queens[j]) == abs(i - j):\n                return "INCORRECT"\n    return "CORRECT" \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1]) \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    N = int(input())\n    sys.stdin.readline()\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in sys.stdin.readline().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 12:25:45.895764 size on output set 6
