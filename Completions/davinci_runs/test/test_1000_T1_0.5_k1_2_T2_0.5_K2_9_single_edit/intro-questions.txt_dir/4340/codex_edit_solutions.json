["from typing import List\n\n\n\ndef adjacent_replacements_algorithm(n: int, a: List[int]) -> List[int]:\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm(n, a))\n", "\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5*10**8+1):\n    for j in range(n):\n        if a[j] == 2*i-1:\n            a[j] = 2*i\n        elif a[j] == 2*i:\n            a[j] = 2*i-1\n\nfor i in range(n):\n    print(a[i], end=' ')\n", "def adjacent_replacements_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\n\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm(n, a))\n", "def adjacent_replacements_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm(n, a))\n\n\ndef adjacent_replacements_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm(n, a))\n", "#!/usr/bin/env python3\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5*10**8+1):\n    for j in range(n):\n        if a[j] == 2*i-1:\n            a[j] = 2*i\n        elif a[j] == 2*i:\n            a[j] = 2*i-1\n\nfor i in range(n):\n    print(a[i], end=' ')\n", "# input\n\nn = int(input())\na = [int(i) for i in input().split()]\n# processing\n\nfor i in range(1, 5*10**8+1):\n    for j in range(n):\n        if a[j] == 2*i-1:\n            a[j] = 2*i\n        elif a[j] == 2*i:\n            a[j] = 2*i-1\n# output\n\nfor i in range(n):\n    print(a[i], end=' ')\n", "def adjacent_replacements_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm(n, a))\n", "\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5 * 10 ** 8 + 1):\n    for j in range(n):\n        if a[j] == 2 * i - 1:\n            a[j] = 2 * i\n        elif a[j] == 2 * i:\n            a[j] = 2 * i - 1\n\nfor i in range(n):\n    print(a[i], end=' ')\n", "\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] == a[j]:\n            a[i] = -1\n            a[j] = -1\n\n\nb = []\nfor i in range(n):\n    if a[i] != -1:\n        b.append(a[i])\n\nfor i in range(len(b)):\n    for j in range(i+1, len(b)):\n        if b[i] == b[j]:\n            b[i] = -1\n            b[j] = -1\n\nfor i in range(len(b)):\n    if b[i] != -1:\n        print(b[i], end=' ')\n\nfor i in range(n):\n    if a[i] == -1:\n        print(a[i], end=' ')\n", "'''\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5*10**8+1):\n    for j in range(n):\n        if a[j] == 2*i-1:\n            a[j] = 2*i\n        elif a[j] == 2*i:\n            a[j] = 2*i-1\n\nfor i in range(n):\n'''\n    print(a[i], end=' ')\n", "\ndef adjacent_replacements_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm(n, a))\n"]