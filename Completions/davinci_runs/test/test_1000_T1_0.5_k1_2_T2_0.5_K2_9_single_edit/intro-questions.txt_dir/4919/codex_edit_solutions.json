["\n\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k)-1])\n", "\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    d.setdefault(country, []).append(year)\n\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1])\n\n", "\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        print('here')\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k - 1])\n", "\n\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][k - 1])\n", "\"\"\"\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1])\n\"\"\"\n\n\ndef f(n):\n    if n <= 1:\n        return 1\n    else:\n        return f(n - 1) + f(n - 2)\n\n\nn = int(input())\nprint(f(n))\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split() #split \ud568\uc218\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ud558\uc5ec \ubb38\uc790\uc5f4\uc744 \ub098\ub208\ub2e4\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split() #split \ud568\uc218\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ud558\uc5ec \ubb38\uc790\uc5f4\uc744 \ub098\ub208\ub2e4\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = dict()\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = list(year)\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1]) \n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = dict()\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = list()\n            trips[country].append(year)\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# 1st solution\n\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n\n# 2nd solution\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\nn = int(input())  # number of trips\ntrips = []\nfor i in range(n):\n    country, year = input().split()  # country, year of trip\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())  # number of queries\nqueries = []\nfor i in range(q):\n    country, k = input().split()  # country, k-th trip\n    k = int(k)\n    queries.append((country, k))\n# print(queries)\n\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]  # trips to country\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    # print(trips_to_country)\n    if k > len(trips_to_country):\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n", "\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split(';')\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split(';')\n    k = int(k)\n    print(d[country][k-1])\n", "\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    if len(trips_to_country) >= k:\n        print(trips_to_country[k - 1][1])\n    else:\n        print(-1)\n", "\n# n = int(input())\n\n# trips = {}\n# for i in range(n):\n#     country, year = input().split()\n#     if country in trips:\n#         trips[country].append(int(year))\n#     else:\n#         trips[country] = [int(year)]\n\n# q = int(input())\n# for i in range(q):\n#     country, k = input().split()\n#     print(sorted(trips[country])[int(k)-1])\n\n\n# def find_max_min(lst):\n#     lst.sort()\n#     return [lst[0], lst[-1]]\n\n# print(find_max_min([1, 2, 3, 4]))\n# print(find_max_min([4, 2, 9, 11, 2, 1]))\n\n\n# def find_max_min(lst):\n#     return [min(lst), max(lst)]\n\n# print(find_max_min([1, 2, 3, 4]))\n# print(find_max_min([4, 2, 9, 11, 2, 1]))\n\n\n# def find_max_min(lst):\n#     min_val, max_val = lst[0], lst[0]\n#     for i in lst:\n#         if i < min_val:\n#             min_val = i\n#         if i > max_val:\n#             max_val = i\n#     return [min_val, max_val]\n\n# print(find_max_min([1, 2, 3, 4]))\n# print(find_max_min([4, 2, 9, 11, 2, 1]))\n\n\n# def find_max_min(lst):\n#     if lst[0] == lst[-1]:\n#         return [len(lst)]\n#     else:\n#         return [lst[0], lst[-1]]\n\n# print(find_max_min([1, 2, 3, 4]))\n# print(find_max_min([4, 2, 9, 11, 2, 1]))\n\n\n# def find_max_min(lst):\n#     return [lst[0], lst[-1]] if lst[0] != lst[-1] else [len(lst)]\n\n# print(find_max_min([1, 2, 3, 4]))\n# print(find_max_min([4, 2, 9, 11, 2, 1]))\n\n\n# def find_max_min(lst):\n#     return [lst[0], lst[-1]] if lst[0] != lst[-1] else [len(lst)]\n\n# print(find_max_min([1, 2, 3, 4]))\n# print(find_max_min([4, 2, 9, 11, 2, 1]))\n\n\ndef find_max_min(lst):\n    return [lst[0], lst[-1]] if lst[0] != lst[-1] else [len(lst)]\n\nprint(find_max_min([1, 2, 3, 4]))\nprint(find_max_min([4, 2, 9, 11, 2, 1]))\n", "# SOLUTION\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\na, b, c = map(int, input().split())\nprint(a, b, c)\n", "\nn = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1] if k <= len(trips[country]) else '-1')\n", "n = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1])\n", "\n# SOLUTION\nn = int(input())\nd = {}\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "\nimport sys\n\ndef main():\n    with open(\"test.txt\") as f:\n        n = int(f.readline())\n        trips = {}\n        for _ in range(n):\n            country, year = f.readline().split()\n            if country in trips:\n                trips[country].append(year)\n            else:\n                trips[country] = [year]\n        q = int(f.readline())\n        for _ in range(q):\n            country, k = f.readline().split()\n            print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n# SOLUTION\nn = int(input())\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1])\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n# n = int(input())\n\n# trips = {}\n# for i in range(n):\n#     country, year = input().split()\n#     if country in trips:\n#         trips[country].append(int(year))\n#     else:\n#         trips[country] = [int(year)]\n\n# q = int(input())\n# for i in range(q):\n#     country, k = input().split()\n#     print(sorted(trips[country])[int(k)-1])\n\nimport requests\n\nr = requests.get('http://www.google.com')\nprint(r.status_code)\n", "\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    if k <= len(d[country]):\n        print(sorted(d[country])[k-1])\n    else:\n        print(\"none\")\n", "\n\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\nn = int(input())\n\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "n = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k) - 1])\n", "n = int(input())  # number of elements in set A\nA = set(map(int, input().split()))  # elements of set A\nm = int(input())  # number of elements in set B\nB = set(map(int, input().split()))  # elements of set B\nprint(len(A.union(B)))\n", "\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "n = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\n# TODO:\n# 1. fix syntax errors\n# 2. fix logic error\n\n# input:\n# 4\n# Russia 2000\n# Russia 2001\n# Russia 2002\n# Russia 2003\n# 2\n# Russia 1\n# Russia 2\n\n# output:\n# 2001\n# 2002\n\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split(' ')\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split(' ')\n    k = int(k)\n    print(d[country][k-1])\n", "n = 10\n\n\nfor i in range(1, n + 1):\n    print(i, end='')\n\nprint()\n", "\n#!/bin/python3\n", "import sys\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1] if country in d and k <= len(d[country]) else \"KeyError\")\n", "#!/usr/bin/python3\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        try:\n            print(trips[country][int(k) - 1])\n        except IndexError:\n            print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n", "n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "\n\nimport os\nimport gzip\nimport shutil\nimport glob\n\nfor file in glob.glob(\"*.gz\"):\n    with gzip.open(file, 'rb') as f_in:\n        with open(file[:-3], 'wb') as f_out:\n            shutil.copyfileobj(f_in, f_out)\n\n    os.remove(file)\n", "\n# SOLUTION\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\n# solution\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n", "\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1] if len(trips_to_country) >= k else 'none')\n", "\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n", "\"\"\"\n\"\"\"\n#\n#\n# # SOLUTION\n# n = int(input())\n# d = {}\n# for _ in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     if country in d:\n#         d[country].append(year)\n#     else:\n#         d[country] = [year]\n#\n# q = int(input())\n# for _ in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     print(sorted(d[country])[k-1])\n", "\nn = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k) - 1])\n", "\nn = int(input())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1])\n", "import sys\n\ndef is_palindrome(s):\n    s = s.lower()\n    s = s.replace(' ','')\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace('!','')\n    s = s.replace('?','')\n    s = s.replace('\\'','')\n    s = s.replace('\"','')\n    s = s.replace('-','')\n    s = s.replace(';','')\n    s = s.replace(':','')\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.replace('[','')\n    s = s.replace(']','')\n    s = s.replace('{','')\n    s = s.replace('}','')\n    s = s.replace('/','')\n    s = s.replace('\\\\','')\n    s = s.replace('\\n','')\n    s = s.replace('\\t','')\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n\ndef main():\n    filename = sys.argv[1]\n    f = open(filename, 'r')\n    print(is_palindrome(f.read()))\n    f.close()\n\nif __name__ == '__main__':\n    main()\n", "\n# SOLUTION\n# n = int(input())\n# d = {}\n# for _ in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     if country in d:\n#         d[country].append(year)\n#     else:\n#         d[country] = [year]\n#\n# q = int(input())\n# for _ in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     print(sorted(d[country])[k-1])\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n\n\n# SOLUTION\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "\n\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(lambda: [])\n\nfor _ in range(n):\n    c, y = input().split()[0]\n    trips[c].append(y)\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    k = int(k)\n    if k <= len(trips[c]):\n        print(trips[c][k - 1])\n    else:\n        print(-1)\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n"]