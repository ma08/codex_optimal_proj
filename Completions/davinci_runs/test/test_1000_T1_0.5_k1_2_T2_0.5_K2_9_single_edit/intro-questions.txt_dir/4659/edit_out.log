2022-04-16 08:57:36.505341 num operations 1
2022-04-16 08:57:36.505359 size on input set 1
2022-04-16 08:58:18.217476 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 1,
      "text": "\nfrom typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 2,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 3,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 4,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 5,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 6,
      "text": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i]+nums[j] == target:\n                    return [i, j]\n\n\n\nif __name__ == \"__main__\":\n    nums = [2, 7, 11, 15]\n    target = 9\n    sol = Solution()\n    print(sol.twoSum(nums, target))\n"
    },
    {
      "index": 7,
      "text": "\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 8,
      "text": "\n\n\ndef generate(numRows):\n    if numRows == 0:\n        return []\n    res = [[1]]\n    for i in range(1, numRows):\n        res.append([])\n        for j in range(i+1):\n            if j == 0 or j == i:\n                res[i].append(1)\n            else:\n                res[i].append(res[i-1][j-1] + res[i-1][j])\n    return res\n"
    }
  ],
  "created": 1650099456,
  "object": "edit"
}
2022-04-16 08:58:18.217757 fix syntax errors 9 ['from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', '\nfrom typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', 'from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', 'from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', 'from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', 'from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', 'class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i]+nums[j] == target:\n                    return [i, j]\n\n\n\nif __name__ == "__main__":\n    nums = [2, 7, 11, 15]\n    target = 9\n    sol = Solution()\n    print(sol.twoSum(nums, target))\n', '\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', '\n\n\ndef generate(numRows):\n    if numRows == 0:\n        return []\n    res = [[1]]\n    for i in range(1, numRows):\n        res.append([])\n        for j in range(i+1):\n            if j == 0 or j == i:\n                res[i].append(1)\n            else:\n                res[i].append(res[i-1][j-1] + res[i-1][j])\n    return res\n']
2022-04-16 08:58:18.217961 size on output set 5
2022-04-16 08:58:18.218008 num operations 1
2022-04-16 08:58:18.218015 size on input set 1
2022-04-16 08:58:25.983111 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 1,
      "text": "from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i - 1][j - 1] + res[i - 1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 2,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 3,
      "text": "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 4,
      "text": "\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res \n"
    },
    {
      "index": 5,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n\n\nif __name__ == '__main__':\n    obj = Solution()\n    print(obj.generate(5))\n"
    },
    {
      "index": 6,
      "text": "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 7,
      "text": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n\nif __name__ == \"__main__\":\n    numRows = 5\n    res = Solution().generate(numRows)\n    print(res)\n"
    },
    {
      "index": 8,
      "text": "from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    }
  ],
  "created": 1650099498,
  "object": "edit"
}
2022-04-16 08:58:25.983378 fix syntax errors 9 ['class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', 'from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i - 1][j - 1] + res[i - 1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', 'from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', 'class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', '\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res \n', "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n\n\nif __name__ == '__main__':\n    obj = Solution()\n    print(obj.generate(5))\n", 'class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', 'from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n\nif __name__ == "__main__":\n    numRows = 5\n    res = Solution().generate(numRows)\n    print(res)\n', 'from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n']
2022-04-16 08:58:25.983497 size on output set 8
