2022-04-16 12:59:07.711264 num operations 1
2022-04-16 12:59:07.711300 size on input set 1
2022-04-16 12:59:17.162882 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m - 1):\n        if grid[0][j] == '_' and grid[0][j + 1] == '_':\n            count += 1 \n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n        print(count)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    print(\"Hello World\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '_':\n                count += 1\n                while j < m and grid[i][j] == '_':\n                    j += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '_':\n                count += 1\n                while j < m and grid[i][j] == '_':\n                    j += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\n\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(j) for j in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        if grid[i][0] == '_':\n            count += 1\n            while i < n and grid[i][0] == '_':\n                i += 1\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1650113947,
  "object": "edit"
}
2022-04-16 12:59:17.163186 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m - 1):\n        if grid[0][j] == '_' and grid[0][j + 1] == '_':\n            count += 1 \n    print(count)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n        print(count)\n\nmain()\n", "\n\nfrom sys import stdin\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nmain()\n", '\nimport sys\n\ndef main():\n    print("Hello World")\n\nmain()\n', "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '_':\n                count += 1\n                while j < m and grid[i][j] == '_':\n                    j += 1\n    print(count)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '_':\n                count += 1\n                while j < m and grid[i][j] == '_':\n                    j += 1\n    print(count)\n\nmain()\n", "import sys\n\n\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(j) for j in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        if grid[i][0] == '_':\n            count += 1\n            while i < n and grid[i][0] == '_':\n                i += 1\n    print(count)\n\nmain()\n"]
2022-04-16 12:59:17.163234 size on output set 9
2022-04-16 12:59:17.163246 num operations 1
2022-04-16 12:59:17.163251 size on input set 1
2022-04-16 12:59:24.557419 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split()) \n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    input = raw_input()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(str(moves))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    input_ = sys.stdin.readline\n    N, M = map(int, input_().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input_().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    inp = sys.stdin.readline\n    N, M = map(int, inp().split())\n    grid = []\n    for _ in range(N):\n        grid.append(inp().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650113957,
  "object": "edit"
}
2022-04-16 12:59:24.557748 fix syntax errors 9 ['\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split()) \n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    input = raw_input()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(str(moves))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    input_ = sys.stdin.readline\n    N, M = map(int, input_().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input_().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    inp = sys.stdin.readline\n    N, M = map(int, inp().split())\n    grid = []\n    for _ in range(N):\n        grid.append(inp().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == \'_\':\n            moves += 1\n    print(moves)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 12:59:24.557794 size on output set 9
2022-04-16 12:59:24.557805 num operations 1
2022-04-16 12:59:24.557810 size on input set 1
2022-04-16 12:59:34.799124 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '_':\n                count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\n# ----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i+1, end=\"\")\n        \nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count + 1)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n#----Solution----\n\ndef main():\n    pass\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split()) # n is no. of rows, m is no. of columns\n    l = []\n    count = 0 # count is no. of columns with '_'\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\nsys.setrecursionlimit(10**6)\n#----Solution----\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(sys.stdin.readline())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1650113964,
  "object": "edit"
}
2022-04-16 12:59:34.799377 fix syntax errors 9 ["\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n", "\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '_':\n                count += 1\n    print(count)\n\nmain()\n", "\n\n# ----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\n\nmain()\n", "\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n\nmain()\n", '\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i+1, end="")\n        \nmain()\n', "\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count + 1)\n\nmain()\n", '\n\n#----Solution----\n\ndef main():\n    pass\n\nmain()\n', "\n\n#----Solution----\n\ndef main():\n    n, m = map(int, input().split()) # n is no. of rows, m is no. of columns\n    l = []\n    count = 0 # count is no. of columns with '_'\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n", "\nimport sys\nsys.setrecursionlimit(10**6)\n#----Solution----\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(sys.stdin.readline())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n"]
2022-04-16 12:59:34.799417 size on output set 9
2022-04-16 12:59:34.799427 num operations 1
2022-04-16 12:59:34.799432 size on input set 1
2022-04-16 12:59:45.751870 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn,m=map(int,input().split())\nk=[]\nfor i in range(n):k.append(input())\nt=0\nfor i in range(m):\n    if k[0][i]=='_':t+=1\nprint(t)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n"
    },
    {
      "index": 2,
      "text": "\n\na, b, c = map(int, input().split())\nif a + b == c:\n    print(a, '+', b, '=', c)\nelif a - b == c:\n    print(a, '-', b, '=', c)\nelif a * b == c:\n    print(a, '*', b, '=', c)\nelif a / b == c:\n    print(a, '/', b, '=', c)\nelif a == b + c:\n    print(a, '=', b, '+', c)\nelif a == b - c:\n    print(a, '=', b, '-', c)\nelif a == b * c:\n    print(a, '=', b, '*', c)\nelif a == b / c:\n    print(a, '=', b, '/', c)\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/python3\n\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in d:\n    for j in i:\n        if j == '_':\n            t += 1\nprint(t)\n"
    },
    {
      "index": 4,
      "text": "n, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n"
    },
    {
      "index": 5,
      "text": "\n\nn, m = map(int, raw_input().split())\nd = []\nfor i in range(n):\n    d.append(raw_input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n"
    },
    {
      "index": 6,
      "text": "n, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n"
    },
    {
      "index": 7,
      "text": "\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    for j in range(n):\n        if d[j][i] == '_':\n            t += 1\nprint(t)\n"
    },
    {
      "index": 8,
      "text": "\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    for j in range(n):\n        if d[j][i] == '_':\n            t += 1\n            break\nprint(t)\n"
    }
  ],
  "created": 1650113974,
  "object": "edit"
}
2022-04-16 12:59:45.752203 fix syntax errors 9 ["\nn,m=map(int,input().split())\nk=[]\nfor i in range(n):k.append(input())\nt=0\nfor i in range(m):\n    if k[0][i]=='_':t+=1\nprint(t)\n", "\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n", "\n\na, b, c = map(int, input().split())\nif a + b == c:\n    print(a, '+', b, '=', c)\nelif a - b == c:\n    print(a, '-', b, '=', c)\nelif a * b == c:\n    print(a, '*', b, '=', c)\nelif a / b == c:\n    print(a, '/', b, '=', c)\nelif a == b + c:\n    print(a, '=', b, '+', c)\nelif a == b - c:\n    print(a, '=', b, '-', c)\nelif a == b * c:\n    print(a, '=', b, '*', c)\nelif a == b / c:\n    print(a, '=', b, '/', c)\n", "#!/usr/bin/python3\n\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in d:\n    for j in i:\n        if j == '_':\n            t += 1\nprint(t)\n", "n, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n", "\n\nn, m = map(int, raw_input().split())\nd = []\nfor i in range(n):\n    d.append(raw_input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n", "n, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n", "\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    for j in range(n):\n        if d[j][i] == '_':\n            t += 1\nprint(t)\n", "\nn, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    for j in range(n):\n        if d[j][i] == '_':\n            t += 1\n            break\nprint(t)\n"]
2022-04-16 12:59:45.752244 size on output set 8
2022-04-16 12:59:45.752257 num operations 1
2022-04-16 12:59:45.752263 size on input set 1
2022-04-16 12:59:58.237234 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Written by: Eric Wright & Jake Lepere\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(M):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(N):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get the number of test cases\n    T = int(input())\n    for i in range(T):\n        # get input from stdin\n        N, M = [int(x) for x in input().split()]\n        grid = []\n        for i in range(N):\n            grid.append(input())\n        # get the number of columns that are not blank\n        count = 0\n        for i in range(M):\n            # if the column is not blank, increment count\n            if grid[0][i] == '$':\n                count += 1\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/29/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin and store into variables\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\n# Written by: Eric Wright\n# Date: 1/29/2020\n\nimport sys\n\ndef main():\n    # get input from stdin (number of test cases)\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        # get input from stdin (number of rows and columns in the grid)\n        N, M = [int(x) for x in input().split()]\n        grid = []\n        for i in range(N):\n            grid.append(input())\n        # get the number of columns that are not blank\n        count = 0\n        for i in range(M):\n            # if the column is not blank, increment count\n            if grid[0][i] == '$':\n                count += 1\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650113985,
  "object": "edit"
}
2022-04-16 12:59:58.237566 fix syntax errors 9 ['\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright & Jake Lepere\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(M):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(N):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    print("Hello World!")\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get the number of test cases\n    T = int(input())\n    for i in range(T):\n        # get input from stdin\n        N, M = [int(x) for x in input().split()]\n        grid = []\n        for i in range(N):\n            grid.append(input())\n        # get the number of columns that are not blank\n        count = 0\n        for i in range(M):\n            # if the column is not blank, increment count\n            if grid[0][i] == \'$\':\n                count += 1\n        print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/29/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin and store into variables\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == \'$\':\n            count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Written by: Eric Wright\n# Date: 1/29/2020\n\nimport sys\n\ndef main():\n    # get input from stdin (number of test cases)\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        # get input from stdin (number of rows and columns in the grid)\n        N, M = [int(x) for x in input().split()]\n        grid = []\n        for i in range(N):\n            grid.append(input())\n        # get the number of columns that are not blank\n        count = 0\n        for i in range(M):\n            # if the column is not blank, increment count\n            if grid[0][i] == \'$\':\n                count += 1\n        print(count)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 12:59:58.237626 size on output set 8
2022-04-16 12:59:58.237638 num operations 1
2022-04-16 12:59:58.237644 size on input set 1
2022-04-16 13:00:11.833115 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input().strip())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "# https://codeforces.com/contest/1365/problem/A\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == 'x':\n        count += 1\n        while i < m and dance[0][i] == 'x':\n            i += 1\n\nprint(count)\n"
    },
    {
      "index": 4,
      "text": "# https://codeforces.com/contest/1235/problem/A\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n"
    },
    {
      "index": 5,
      "text": "n, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n"
    },
    {
      "index": 6,
      "text": "n, m = map(int, input().split())\n\n\na = []\nfor _ in range(n):\n    a.append(list(input()))\n\nb = []\nfor _ in range(n):\n    b.append(list(input()))\n\ndef check(a, b):\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != b[i][j]:\n                return False\n    return True\n\nprint(count)\n"
    },
    {
      "index": 7,
      "text": "\n# https://codeforces.com/problemset/problem/1320/B\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(list(input()))\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '.':\n        count += 1\n        while i < m and dance[0][i] == '.':\n            i += 1\n\nprint(count)\n"
    },
    {
      "index": 8,
      "text": "\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650113998,
  "object": "edit"
}
2022-04-16 13:00:11.833353 fix syntax errors 9 ["\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n", "\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input().strip())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\n\nprint(count)\n", "# https://codeforces.com/contest/1365/problem/A\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n", "\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == 'x':\n        count += 1\n        while i < m and dance[0][i] == 'x':\n            i += 1\n\nprint(count)\n", "# https://codeforces.com/contest/1235/problem/A\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n", "n, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n", 'n, m = map(int, input().split())\n\n\na = []\nfor _ in range(n):\n    a.append(list(input()))\n\nb = []\nfor _ in range(n):\n    b.append(list(input()))\n\ndef check(a, b):\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != b[i][j]:\n                return False\n    return True\n\nprint(count)\n', "\n# https://codeforces.com/problemset/problem/1320/B\n\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(list(input()))\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '.':\n        count += 1\n        while i < m and dance[0][i] == '.':\n            i += 1\n\nprint(count)\n", "\nn, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n"]
2022-04-16 13:00:11.833458 size on output set 8
2022-04-16 13:00:11.833469 num operations 1
2022-04-16 13:00:11.833474 size on input set 1
2022-04-16 13:00:56.091933 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count+1)\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\nprint(1)\n"
    },
    {
      "index": 4,
      "text": "\n\nN, M = map(int, input().split())\n\n\ndef check(grid, i, j):\n    if grid[i][j] == '_':\n        return 1\n    else:\n        return 0\n\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        count += 1\nprint(count)\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n"
    },
    {
      "index": 6,
      "text": "# https://codeforces.com/contest/1324/problem/A\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n"
    },
    {
      "index": 7,
      "text": "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n"
    },
    {
      "index": 8,
      "text": "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(1, N - 1):\n    for j in range(1, M - 1):\n        if grid[i][j] == '_' or grid[i][j] == '|':\n            continue\n        if grid[i - 1][j] == '|':\n            continue\n        if grid[i + 1][j] == '|':\n            continue\n        if grid[i][j - 1] == '_':\n            continue\n        if grid[i][j + 1] == '_':\n            continue\n        count += 1\nprint(count)\n"
    }
  ],
  "created": 1650114011,
  "object": "edit"
}
2022-04-16 13:00:56.092161 fix syntax errors 9 ["#!/usr/bin/env python3\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n", "\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count+1)\n", "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n", '\nprint(1)\n', "\n\nN, M = map(int, input().split())\n\n\ndef check(grid, i, j):\n    if grid[i][j] == '_':\n        return 1\n    else:\n        return 0\n\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        count += 1\nprint(count)\n", "#!/usr/bin/env python3\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n", "# https://codeforces.com/contest/1324/problem/A\n\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n", "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n", "\nN, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(1, N - 1):\n    for j in range(1, M - 1):\n        if grid[i][j] == '_' or grid[i][j] == '|':\n            continue\n        if grid[i - 1][j] == '|':\n            continue\n        if grid[i + 1][j] == '|':\n            continue\n        if grid[i][j - 1] == '_':\n            continue\n        if grid[i][j + 1] == '_':\n            continue\n        count += 1\nprint(count)\n"]
2022-04-16 13:00:56.092303 size on output set 9
