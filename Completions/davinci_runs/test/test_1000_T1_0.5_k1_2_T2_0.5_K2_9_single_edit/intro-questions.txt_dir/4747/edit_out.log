2022-04-16 10:02:26.338935 num operations 1
2022-04-16 10:02:26.338954 size on input set 1
2022-04-16 10:02:35.360883 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n ** k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 #calc_expected_score_k1(n)\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator #calc_expected_score_k2(n, k)\n\ndef calc_expected_score_k1(n):\n    return n/2 + 0.5\n\ndef calc_expected_score_k2(n, k):\n    numerator = 0\n    for i in range(1, n+1):\n        numerator += i * (k-1) / (n**k - 1)\n    return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n + 1):\n            numerator += i * (k - 1) / (n ** k - 1)\n\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5)\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2.0 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / float(n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n + 1):\n            numerator += i * (k - 1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n ** k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650103346,
  "object": "edit"
}
2022-04-16 10:02:35.361185 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n ** k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 #calc_expected_score_k1(n)\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator #calc_expected_score_k2(n, k)\n\ndef calc_expected_score_k1(n):\n    return n/2 + 0.5\n\ndef calc_expected_score_k2(n, k):\n    numerator = 0\n    for i in range(1, n+1):\n        numerator += i * (k-1) / (n**k - 1)\n    return numerator\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n + 1):\n            numerator += i * (k - 1) / (n ** k - 1)\n\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5)\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2.0 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / float(n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n + 1):\n            numerator += i * (k - 1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n ** k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:02:35.361239 size on output set 9
2022-04-16 10:02:35.361315 num operations 1
2022-04-16 10:02:35.361321 size on input set 1
2022-04-16 10:02:49.935192 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/bin/python3\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j\n                score += j\n\n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n\n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j\n                score += j\n\n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n\n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, input().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(round(expectedScore, 6))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n\t# Read the input\n\tn, k = map(int, sys.stdin.readline().split())\n\n\t# Compute the expected score\n\texpectedScore = 0\n\tfor i in range(1, n+1):\n\t\t# Compute the probability of rolling i\n\t\tprobability = 1/float(n)\n\n\t\t# Compute the expected score of rolling i\n\t\tscore = i\n\n\t\t# If we can roll again, compute the expected score for that roll\n\t\tif k > 1:\n\t\t\tfor j in range(1, n+1):\n\t\t\t\t# Compute the probability of rolling j\n\t\t\t\tprobability *= 1/float(n)\n\n\t\t\t\t# Compute the expected score of rolling j\n\t\t\t\tscore += j\n\n\t\t# Add the expected score of this roll to the total expected score\n\t\texpectedScore += probability*score\n\n\t# Print the expected score\n\tprint(expectedScore)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650103355,
  "object": "edit"
}
2022-04-16 10:02:49.935504 fix syntax errors 9 ["#!/bin/python3\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j\n                score += j\n\n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n\n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j\n                score += j\n\n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n\n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, input().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(round(expectedScore, 6))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\t# Read the input\n\tn, k = map(int, sys.stdin.readline().split())\n\n\t# Compute the expected score\n\texpectedScore = 0\n\tfor i in range(1, n+1):\n\t\t# Compute the probability of rolling i\n\t\tprobability = 1/float(n)\n\n\t\t# Compute the expected score of rolling i\n\t\tscore = i\n\n\t\t# If we can roll again, compute the expected score for that roll\n\t\tif k > 1:\n\t\t\tfor j in range(1, n+1):\n\t\t\t\t# Compute the probability of rolling j\n\t\t\t\tprobability *= 1/float(n)\n\n\t\t\t\t# Compute the expected score of rolling j\n\t\t\t\tscore += j\n\n\t\t# Add the expected score of this roll to the total expected score\n\t\texpectedScore += probability*score\n\n\t# Print the expected score\n\tprint(expectedScore)\n\nif __name__ == '__main__':\n\tmain()\n", '\n\nimport sys\n\ndef main():\n    print("Hello World!")\n\nif __name__ == \'__main__\':\n    main()\n', "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:02:49.935700 size on output set 6
2022-04-16 10:02:49.935719 num operations 1
2022-04-16 10:02:49.935726 size on input set 1
2022-04-16 10:02:57.481140 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_expected(n, k):\n    return 0\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return int(n/2)\n    if n == 1:\n        return 1\n    return int((n/2) + get_expected(n, k-1))\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected(n-1, k-1)\n\ndef main():\n    n, k = map(float, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650103369,
  "object": "edit"
}
2022-04-16 10:02:57.481360 fix syntax errors 9 ["\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    return 0\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return int(n/2)\n    if n == 1:\n        return 1\n    return int((n/2) + get_expected(n, k-1))\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected(n-1, k-1)\n\ndef main():\n    n, k = map(float, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:02:57.481399 size on output set 9
2022-04-16 10:02:57.481410 num operations 1
2022-04-16 10:02:57.481415 size on input set 1
2022-04-16 10:03:06.372404 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k = map(int, input().split())\n\ndef solve(n, k, ans=0):\n    if k == 0:\n        return ans\n    elif k == 1:\n        return ans + (n + 1) / 2\n    else:\n        return solve(n, k - 1, ans + (n + 1) / 2)\n\nprint(solve(n, k))\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\n\n\n    # base case\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 2,
      "text": "\nn, k = map(int, input().split())\n\n\ndef solve(n, k) -> float:\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 3,
      "text": "\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 4,
      "text": "\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 5,
      "text": "\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 6,
      "text": "\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 7,
      "text": "\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 8,
      "text": "\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n\n\n\n\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    }
  ],
  "created": 1650103377,
  "object": "edit"
}
2022-04-16 10:03:06.372649 fix syntax errors 9 ['\nn, k = map(int, input().split())\n\ndef solve(n, k, ans=0):\n    if k == 0:\n        return ans\n    elif k == 1:\n        return ans + (n + 1) / 2\n    else:\n        return solve(n, k - 1, ans + (n + 1) / 2)\n\nprint(solve(n, k))\n', '\nn, k = map(int, input().split())\n\n\n    # base case\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', '\nn, k = map(int, input().split())\n\n\ndef solve(n, k) -> float:\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', '\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', '\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', '\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n', '\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', '\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n', '\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n\n\n\n\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n']
2022-04-16 10:03:06.372755 size on output set 6
2022-04-16 10:03:06.372769 num operations 1
2022-04-16 10:03:06.372775 size on input set 1
2022-04-16 10:03:15.725946 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef run(input, output):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str((n + 1) / 2.0)\n    return str((n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n - 1) / 2.0\n"
    },
    {
      "index": 2,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str((n + 1) / 2.0)\n    return str((n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n - 1) / 2.0\n"
    },
    {
      "index": 4,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n - 1) / 2.0\n"
    },
    {
      "index": 5,
      "text": "\n\ndef run(file):\n    n, k = [int(x) for x in file.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n"
    },
    {
      "index": 6,
      "text": "\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n"
    },
    {
      "index": 7,
      "text": "\n\n    \"\"\"\n    >>> run(open('1.in'))\n    3.0\n    >>> run(open('2.in'))\n    4.0\n    >>> run(open('3.in'))\n    3.0\n    \"\"\"\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1.0) / (2.0 * k)) * (n + 1) / 2.0\n"
    },
    {
      "index": 8,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 \n"
    }
  ],
  "created": 1650103386,
  "object": "edit"
}
2022-04-16 10:03:15.726223 fix syntax errors 9 ['\n\ndef run(input, output):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str((n + 1) / 2.0)\n    return str((n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0)\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n - 1) / 2.0\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str((n + 1) / 2.0)\n    return str((n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0)\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n - 1) / 2.0\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n - 1) / 2.0\n', '\n\ndef run(file):\n    n, k = [int(x) for x in file.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n', '\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n', '\n\n    """\n    >>> run(open(\'1.in\'))\n    3.0\n    >>> run(open(\'2.in\'))\n    4.0\n    >>> run(open(\'3.in\'))\n    3.0\n    """\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1.0) / (2.0 * k)) * (n + 1) / 2.0\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 \n']
2022-04-16 10:03:15.726268 size on output set 8
2022-04-16 10:03:15.726280 num operations 1
2022-04-16 10:03:15.726285 size on input set 1
2022-04-16 10:03:24.641849 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 3,
      "text": "import sys\n\n\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 5,
      "text": "\nimport math\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n + 1):\n        for j in xrange(1, k + 1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / k)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    }
  ],
  "created": 1650103395,
  "object": "edit"
}
2022-04-16 10:03:24.642190 fix syntax errors 9 ['\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', 'import sys\n\n\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\nimport math\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in xrange(1, n + 1):\n        for j in xrange(1, k + 1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / k)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n']
2022-04-16 10:03:24.642252 size on output set 7
2022-04-16 10:03:24.642268 num operations 1
2022-04-16 10:03:24.642273 size on input set 1
2022-04-16 10:03:34.511728 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split(' ')\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2.0\n    else:\n        return (n+1.0)/2.0 + ((n-1.0)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return (n + 1) / 2 + ((n - 1) / n) * (k - 1) * calculate(n, k - 1)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\n\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return (n + 1) / 2 + ((n - 1) / n) * (k - 1) * calculate(n, k - 1)\n\nmain()\n"
    }
  ],
  "created": 1650103404,
  "object": "edit"
}
2022-04-16 10:03:34.512038 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split(' ')\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n", '\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2.0\n    else:\n        return (n+1.0)/2.0 + ((n-1.0)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return (n + 1) / 2 + ((n - 1) / n) * (k - 1) * calculate(n, k - 1)\n\nmain()\n', 'import sys\n\n\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return (n + 1) / 2 + ((n - 1) / n) * (k - 1) * calculate(n, k - 1)\n\nmain()\n']
2022-04-16 10:03:34.512150 size on output set 7
2022-04-16 10:03:34.512162 num operations 1
2022-04-16 10:03:34.512168 size on input set 1
2022-04-16 10:03:48.668069 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import factorial\n\ndef n_choose_k(n, k):\n    return factorial(n) / (factorial(n - k) * factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 2,
      "text": "\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 3,
      "text": "\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n, k):\n    return factorial(n) / (factorial(n - k) * factorial(k))\n\ndef expected_value(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return ((n + 1) / 2) * (1 - n_choose_k(n, k) / n_choose_k(n + k - 1, k)) + expected_value(n, k - 1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n, k))\n"
    },
    {
      "index": 4,
      "text": "\n\n#Die, k-times \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 5,
      "text": "\n\n#Die, k-times \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 6,
      "text": "\n\n#Die, k-times, expected value\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 7,
      "text": "\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 8,
      "text": "\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    }
  ],
  "created": 1650103414,
  "object": "edit"
}
2022-04-16 10:03:48.668361 fix syntax errors 9 ['\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\nfrom math import factorial\n\ndef n_choose_k(n, k):\n    return factorial(n) / (factorial(n - k) * factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n, k):\n    return factorial(n) / (factorial(n - k) * factorial(k))\n\ndef expected_value(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return ((n + 1) / 2) * (1 - n_choose_k(n, k) / n_choose_k(n + k - 1, k)) + expected_value(n, k - 1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n, k))\n', '\n\n#Die, k-times \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n#Die, k-times \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n#Die, k-times, expected value\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n# Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n']
2022-04-16 10:03:48.668407 size on output set 6
