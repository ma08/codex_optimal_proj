2022-04-16 10:30:26.008548 num operations 1
2022-04-16 10:30:26.008566 size on input set 1
2022-04-16 10:30:41.131433 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # same as primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 2\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # max values for each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650105026,
  "object": "edit"
}
2022-04-16 10:30:41.131714 fix syntax errors 9 ['\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # same as primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 2\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', 'def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # max values for each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', "def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:30:41.131847 size on output set 8
2022-04-16 10:30:41.131861 num operations 1
2022-04-16 10:30:41.131866 size on input set 1
2022-04-16 10:30:49.042771 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [20 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers) - 1)]))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "from functools import reduce\n\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "from functools import reduce\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(20 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1650105041,
  "object": "edit"
}
2022-04-16 10:30:49.043212 fix syntax errors 9 ['\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [20 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers) - 1)]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', 'from functools import reduce\n\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', 'from functools import reduce\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(20 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-16 10:30:49.043351 size on output set 5
2022-04-16 10:30:49.043369 num operations 1
2022-04-16 10:30:49.043374 size on input set 1
2022-04-16 10:30:57.932079 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs) - 1:\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')] # input is a space separated list of ints\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 3:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count) \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x)-1 for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0) != 0:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i + 1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(\" \")]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650105049,
  "object": "edit"
}
2022-04-16 10:30:57.932324 fix syntax errors 9 ["\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs) - 1:\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')] # input is a space separated list of ints\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 3:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count) \n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x)-1 for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0) != 0:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i + 1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(" ")]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:30:57.932433 size on output set 9
2022-04-16 10:30:57.932450 num operations 1
2022-04-16 10:30:57.932455 size on input set 1
2022-04-16 10:31:09.267809 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] #pylint: disable=invalid-name\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19, 0))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]    \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))    \n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] # read input\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    }
  ],
  "created": 1650105057,
  "object": "edit"
}
2022-04-16 10:31:09.268094 fix syntax errors 9 ['\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] #pylint: disable=invalid-name\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19, 0))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]    \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))    \n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] # read input\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n']
2022-04-16 10:31:09.268138 size on output set 8
2022-04-16 10:31:09.268148 num operations 1
2022-04-16 10:31:09.268163 size on input set 1
2022-04-16 10:31:16.097179 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 18 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()][:18]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return (19 - registers[0])\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 0:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 19:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650105069,
  "object": "edit"
}
2022-04-16 10:31:16.097492 fix syntax errors 9 ["\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 18 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()][:18]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return (19 - registers[0])\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 0:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 19:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:31:16.097567 size on output set 7
2022-04-16 10:31:16.097581 num operations 1
2022-04-16 10:31:16.097587 size on input set 1
2022-04-16 10:31:23.070145 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in input().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in input().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1): \n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n\n#this is a comment\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7,-1,-1):\n        out += 19 - vals[i]\n    print(out)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i] * 2\n    print(out)\n\nmain()\n"
    }
  ],
  "created": 1650105076,
  "object": "edit"
}
2022-04-16 10:31:23.070419 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in input().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in input().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1): \n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', 'import sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\nmain()\n', '\n\n\n#this is a comment\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7,-1,-1):\n        out += 19 - vals[i]\n    print(out)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i] * 2\n    print(out)\n\nmain()\n']
2022-04-16 10:31:23.070542 size on output set 9
2022-04-16 10:31:23.070559 num operations 1
2022-04-16 10:31:23.070567 size on input set 1
2022-04-16 10:31:32.107939 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]);\n\nmain();\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, input().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n\tv = list(map(int, sys.stdin.readline().split()))\n\tv.append(19)\n\tv.append(0)\n\tv.sort()\n\tprint(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort() \n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0] * v[1] * v[2] * v[3] * v[4] * v[5] * v[6])\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19) # for the first digit\n    v.append(0) # for the last digit\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) # print the result\n\nmain()\n"
    }
  ],
  "created": 1650105083,
  "object": "edit"
}
2022-04-16 10:31:32.108193 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]);\n\nmain();\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, input().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', 'import sys\n\ndef main():\n\tv = list(map(int, sys.stdin.readline().split()))\n\tv.append(19)\n\tv.append(0)\n\tv.sort()\n\tprint(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort() \n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', "import sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0] * v[1] * v[2] * v[3] * v[4] * v[5] * v[6])\n\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19) # for the first digit\n    v.append(0) # for the last digit\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) # print the result\n\nmain()\n']
2022-04-16 10:31:32.108230 size on output set 9
2022-04-16 10:31:32.108242 num operations 1
2022-04-16 10:31:32.108257 size on input set 1
2022-04-16 10:31:46.479016 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 != 1 or v3 != 2 or v5 != 4 or v7 != 6 or v11 != 10 or v13 != 12 or v17 != 16 or v19 != 18:\n            v2 = (v2 + 1) % 2;\n            if v2 == 1: v3 = (v3 + 1) % 3;\n            if v3 == 2: v5 = (v5 + 1) % 5;\n            if v5 == 4: v7 = (v7 + 1) % 7;\n            if v7 == 6: v11 = (v11 + 1) % 11;\n            if v11 == 10: v13 = (v13 + 1) % 13;\n            if v13 == 12: v17 = (v17 + 1) % 17;\n            if v17 == 16: v19 = (v19 + 1) % 19;\n            if v19 == 18: sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n            N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are at their maximum\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1650105092,
  "object": "edit"
}
2022-04-16 10:31:46.479417 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', 'import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 != 1 or v3 != 2 or v5 != 4 or v7 != 6 or v11 != 10 or v13 != 12 or v17 != 16 or v19 != 18:\n            v2 = (v2 + 1) % 2;\n            if v2 == 1: v3 = (v3 + 1) % 3;\n            if v3 == 2: v5 = (v5 + 1) % 5;\n            if v5 == 4: v7 = (v7 + 1) % 7;\n            if v7 == 6: v11 = (v11 + 1) % 11;\n            if v11 == 10: v13 = (v13 + 1) % 13;\n            if v13 == 12: v17 = (v17 + 1) % 17;\n            if v17 == 16: v19 = (v19 + 1) % 19;\n            if v19 == 18: sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n            N += 1\n    print(N)\n\nmain()\n', '\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', 'import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are at their maximum\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-16 10:31:46.479530 size on output set 6
