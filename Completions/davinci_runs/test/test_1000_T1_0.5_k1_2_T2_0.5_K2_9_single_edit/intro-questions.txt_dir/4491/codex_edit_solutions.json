["\n\ndef main():\n    n = int(input())\n    candies_1 = [int(x) for x in input().split()]\n    candies_2 = [int(x) for x in input().split()]\n\n    dp = [[0] * (n+1) for _ in range(2)]\n\n    dp[0][1] = candies_1[0]\n    dp[1][1] = candies_2[0]\n    for j in range(2, n+1):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1]) + candies_1[j-1]\n        dp[1][j] = max(dp[1][j-1], dp[0][j-1]) + candies_2[j-1]\n\n    print(max(dp[0][n], dp[1][n]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  file\n#  \n#  Copyright 2020 contributors of cardgame\n#  \n#  This file is part of cardgame.\n#\n#  cardgame is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  cardgame is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with cardgame.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]  # noqa: E501\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()]\n         for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1])+A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1])+A[1][i]\n    print(max(dp[0][N-1], dp[1][N-1]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef main():\n    n = int(input())\n    candies_1 = [int(x) for x in input().split()]\n    candies_2 = [int(x) for x in input().split()]\n\n    dp = [[0] * (n+1) for _ in range(2)]\n\n    dp[0][1] = candies_1[0]\n    dp[1][1] = candies_2[0]\n    for j in range(2, n+1):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1]) + candies_1[j-1]\n        dp[1][j] = max(dp[0][j-1], dp[1][j-1]) + candies_2[j-1]\n\n    print(max(dp[0][n], dp[1][n]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    candies_1 = [int(x) for x in input().split()]\n    candies_2 = [int(x) for x in input().split()]\n\n    dp = [[0] * (n+1) for _ in range(2)]\n\n    dp[0][1] = candies_1[0]\n    dp[1][1] = candies_2[0]\n    for j in range(2, n+1):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1]) + candies_1[j-1]\n        dp[1][j] = max(dp[0][j-1], dp[1][j-1]) + candies_2[j-1]\n\n    print(max(dp[0][n], dp[1][n]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(3)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0] + A[0][0]\n    dp[2][0] = A[2][0] + A[0][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1], dp[2][i - 1]) + A[1][i]\n        dp[2][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[2][i]\n    print(max(dp[0][N - 1], dp[1][N - 1], dp[2][N - 1]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    candies_1 = [int(x) for x in input().split()][:n]\n    candies_2 = [int(x) for x in input().split()][:n]\n\n    dp = [[0] * (n+1) for _ in range(2)]\n\n    dp[0][1] = candies_1[0]\n    dp[1][1] = candies_2[0]\n    for j in range(2, n+1):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1]) + candies_1[j-1]\n        dp[1][j] = max(dp[0][j-1], dp[1][j-1]) + candies_2[j-1]\n\n    print(max(dp[0][n], dp[1][n]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov 14 14:20:31 2017\n@author: jiahaozhang\n\"\"\"\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = [[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    dp[0][0] = A[0][0]\n    dp[1][0] = A[1][0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[0][i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + A[1][i]\n    print(max(dp[0][N - 1], dp[1][N - 1]))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]