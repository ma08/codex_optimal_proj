2022-04-09 20:51:25.343885 """
Joisino is planning to open a shop in a shopping street.
Each of the five weekdays is divided into two periods, the morning and the evening. For each of those ten periods, a shop must be either open during the whole period, or closed during the whole period. Naturally, a shop must be open during at least one of those periods.
There are already N stores in the street, numbered 1 through N.
You are given information of the business hours of those shops, F_{i,j,k}. If F_{i,j,k}=1, Shop i is open during Period k on Day j (this notation is explained below); if F_{i,j,k}=0, Shop i is closed during that period. Here, the days of the week are denoted as follows. Monday: Day 1, Tuesday: Day 2, Wednesday: Day 3, Thursday: Day 4, Friday: Day 5. Also, the morning is denoted as Period 1, and the afternoon is denoted as Period 2.
Let c_i be the number of periods during which both Shop i and Joisino's shop are open. Then, the profit of Joisino's shop will be P_{1,c_1}+P_{2,c_2}+...+P_{N,c_N}.
Find the maximum possible profit of Joisino's shop when she decides whether her shop is open during each period, making sure that it is open during at least one period.

-----Constraints-----
 - 1≤N≤100
 - 0≤F_{i,j,k}≤1
 - For every integer i such that 1≤i≤N, there exists at least one pair (j,k) such that F_{i,j,k}=1.
 - -10^7≤P_{i,j}≤10^7
 - All input values are integers.

-----Input-----
Input is given from Standard Input in the following format:
N
F_{1,1,1} F_{1,1,2} ... F_{1,5,1} F_{1,5,2}
:
F_{N,1,1} F_{N,1,2} ... F_{N,5,1} F_{N,5,2}
P_{1,0} ... P_{1,10}
:
P_{N,0} ... P_{N,10}

-----Output-----
Print the maximum possible profit of Joisino's shop.

-----Sample Input-----
1
1 1 0 1 0 0 0 1 0 1
3 4 5 6 7 8 9 -2 -3 4 -2

-----Sample Output-----
8

If her shop is open only during the periods when Shop 1 is opened, the profit will be 8, which is the maximum possible profit.
"""
2022-04-09 20:51:25.343931 --------------------------
2022-04-09 20:51:38.014102 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN = int(input())\nF = [[int(i) for i in input().split()] for _ in range(N)]\nP = [int(i) for i in input().split()]\n\nans = -100000000\nfor i in range(1, 2**10):\n    if bin(i).count('1') == 0:\n        continue\n    tmp = 0\n    for j in range(N):\n        cnt = 0\n        for k in range(10):\n            cnt += F[j][k] and (i >> k) & 1\n        tmp += P[cnt]\n    ans = max(ans, tmp)\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#-----Input-----\nN = int(input())\nF = []\nfor i in range(N):\n    F.append([int(j) for j in input().split(\" \")])\nP = []\nfor i in range(N):\n    P.append([int(j) for j in input().split(\" \")])\n\n#-----Output-----\nprint(max([sum([p*f for p, f in zip(p, f)]) for f in zip(*F) for p in P]))"
    }
  ],
  "created": 1649551885,
  "id": "cmpl-4vG5VB6dDAEPnSXMjJ7XfolgseLj3",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:51:38.014254 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN = int(input())\nF = [[int(i) for i in input().split()] for _ in range(N)]\nP = [int(i) for i in input().split()]\n\nans = -100000000\nfor i in range(1, 2**10):\n    if bin(i).count('1') == 0:\n        continue\n    tmp = 0\n    for j in range(N):\n        cnt = 0\n        for k in range(10):\n            cnt += F[j][k] and (i >> k) & 1\n        tmp += P[cnt]\n    ans = max(ans, tmp)\nprint(ans)"
}
2022-04-09 20:51:38.014273 REASON stop
2022-04-09 20:51:38.026252 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#-----Input-----\nN = int(input())\nF = []\nfor i in range(N):\n    F.append([int(j) for j in input().split(\" \")])\nP = []\nfor i in range(N):\n    P.append([int(j) for j in input().split(\" \")])\n\n#-----Output-----\nprint(max([sum([p*f for p, f in zip(p, f)]) for f in zip(*F) for p in P]))"
}
2022-04-09 20:51:38.026322 REASON stop
