["\n\ndef main():\n    word = input().strip()\n    if len(set(word)) == 1:\n    elif len(set(word)) == 2:\n        if word[0] == word[-1]:\n            print(len(word) - 2)\n        else:\n            print(len(word))\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "import sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\n# import sys\n#\n# def main():\n#     input = sys.stdin.readline().strip()\n#     if len(input) <= 2:\n#         print(0)\n#     else:\n#         chars = set()\n#         for i in range(len(input)):\n#             if input[i] not in chars:\n#                 chars.add(input[i])\n#             if len(chars) > 2:\n#                 print(i)\n#                 return\n#         print(len(input))\n#\n# if __name__ == '__main__':\n#     main()\n\n#!/usr/bin/env python3\n\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main(n):\n    for i in range(n):\n        if is_prime(i):\n            print(i)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    main(n)\n", "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\n    \n    Args:\n        string (str): A string of lowercase letters.\n    \n    Returns:\n        int: The number of unique letters in the string.\n    \"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\n\ndef simplicity(s_):\n    return len(set(s_))\n\ndef min_erase(s_):\n    min_erase = len(s_)\n    for i in range(len(s_)):\n        _s = s_[:i] + s_[i+1:]\n        min_erase = min(min_erase, len(s_) - simplicity(_s))\n    return min_erase\n\nif __name__ == '__main__':\n    print(min_erase(input()))\n", "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    word = input()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word) - 2) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    word = input().strip()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nif __name__ == \"__main__\":\n    print(erase(input()))\n", "\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s):\n    min_erase_ = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase_ = min(min_erase_, len(s) - simplicity(s_))\n    return min_erase_\n\nprint(min_erase(input()))\n", "\n\ndef main():\n    word = input()\n    print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0, end='')\n        elif len(set(line)) <= 2:\n            print(0, end='')\n        else:\n            print(len(line) - 2, end='')\n\nif __name__ == '__main__':\n    main()\n", "\n\n# import sys\n\n# def main():\n#     input = sys.stdin.readline().strip()\n#     if len(input) <= 2:\n#         print(0)\n#         return\n#     freq = {}\n#     for char in input:\n#         if char not in freq:\n#             freq[char] = 1\n#         else:\n#             freq[char] += 1\n#     if len(freq) <= 2:\n#         print(0)\n#         return\n#     else:\n#         freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n#         if freq[2][1] == 1:\n#             print(len(input) - 2)\n#             return\n#         else:\n#             print(len(input) - 1 - freq[1][1] - freq[2][1])\n\n# if __name__ == '__main__':\n#     main()\n\n\n\n# def main():\n#     input = sys.stdin.readline().strip()\n#     if len(input) <= 2:\n#         print(0)\n#         return\n#     freq = {}\n#     for char in input:\n#         if char not in freq:\n#             freq[char] = 1\n#         else:\n#             freq[char] += 1\n#     if len(freq) <= 2:\n#         print(0)\n#         return\n#     else:\n#         freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n#         if freq[2][1] == 1:\n#             print(len(input) - 2)\n#             return\n#         else:\n#             print(len(input) - 1 - freq[1][1] - freq[2][1])\n\n# if __name__ == '__main__':\n#     main()\n\n\n\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef simplicity(s):\n    return len(set(list(s)))\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\nprint(min_erase(input()))\n", "\n\nimport sys\n\ndef main(input):\n    input = input.strip()\n    return input\n\nif __name__ == '__main__':\n    input = sys.stdin.readline()\n    print(main(input))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        if len(line) > 2:\n            res = 0\n            count = [0]*26\n            for i in line:\n                count[ord(i)-ord('a')] += 1\n            for i in count:\n                if i > 2:\n                    res += i-2\n            print(res)\n\nmain()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0] * 26\n        for i in line:\n            count[ord(i) - ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i - 2\n        print(res)\n\nmain()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s):\n    m = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        m = min(m, len(s) - simplicity(s_))\n    return m\n\nprint(min_erase(input()))\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The idea is to find the most frequent character, and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    word = input()\n    if len(set(word)) <= 2:  # set(word)\u306fword\u306e\u6587\u5b57\u3092\u91cd\u8907\u3092\u53d6\u308a\u9664\u3044\u305f\u3082\u306e\u3092\u8fd4\u3059\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        pass\n\nmain()\n", "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\n\n    >>> simplify('aaabbbccc')\n    3\n    >>> simplify('abcd')\n    4\n    \"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n\n    >>> erase('aaabbbccc')\n    0\n    >>> erase('aaabbbcccddd')\n    1\n    >>> erase('aaabbbcccddde')\n    2\n    >>> erase('aaabbbcccdddeee')\n    3\n    \"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    word = input()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word) - 2) \n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print res\n\nmain()\n", "\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set() \n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    _input = sys.stdin.readline().strip()\n    if len(_input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(_input)):\n            if _input[i] not in chars:\n                chars.add(_input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(_input))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef simplicity(s):\n    return len(set(s)) - 1\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\nprint(min_erase(input()))\n", "\n\ndef simplicity(s):\n    return len(set(s)) \n\ndef min_erase(s):\n    min_erase = len(s) \n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_)) \n    return min_erase\n\nprint(min_erase(input()))\n", "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\"\"\"\n    return len(set(string)) - 1\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\"\"\"\n    if len(string) < 6:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2 or len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    word = raw_input()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n\tfor line in sys.stdin:\n\t\tline = line.strip()\n\t\tif len(line) <= 2:\n\t\t\tprint(0)\n\t\telif len(set(line)) <= 2:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    if freq[2][1] == 1:\n        print(len(input) - 2)\n        return\n    print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n\tfor line in sys.stdin:\n\t\tline = line.strip()\n\t\tif len(line) <= 2:\n\t\t\tprint(0)\n\t\telif len(set(line)) <= 2:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(len(line) - 2)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip().split(' ')\n        print(line)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    input_str = sys.stdin.readline().strip()\n    if len(input_str) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input_str)):\n            if input_str[i] not in chars:\n                chars.add(input_str[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input_str))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef simplify(string):  # Simplify a string of lowercase letters.\n    return len(set(string))  # Return the number of unique letters in the string.\n\ndef erase(string):  # Find minimum number of letters to erase to simplify a string.\n    if len(string) < 3:  # If the length of the string is less than 3, it cannot be simplified.\n        return 0  # Return 0 if the string cannot be simplified.\n    if simplify(string) < 3:  # If the number of unique letters in the string is less than 3, it cannot be simplified.\n        return 0  # Return 0 if the string cannot be simplified.\n    for i in range(len(string)):  # Loop through the string.\n        if simplify(string[:i] + string[i + 1:]) < 3:  # If the number of unique letters in the string without the ith letter is less than 3, erasing that letter will simplify the string.\n            return 1  # Return 1 if erasing one letter will simplify the string.\n    return 2  # Return 2 if erasing two letters will simplify the string.\n\nprint(erase(input()))  # Print the minimum number of letters to erase to simplify the string.\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\nimport sys\n\ndef main():\n    i = sys.stdin.readline().strip()\n    if len(i) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for j in range(len(i)):\n            if i[j] not in chars:\n                chars.add(i[j])\n            if len(chars) > 2:\n                print(j)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys, math\n\ndef main():\n    input = sys.stdin.readlines()\n    input = [int(x.strip()) for x in input]\n    if len(input) <= 2:\n        print(0)\n        return\n    input.sort()\n    print(input)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i + 1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\nprint(min_erase(input()))\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    _input = sys.stdin.readline().strip()\n    if len(_input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(_input)):\n            if _input[i] not in chars:\n                chars.add(_input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(_input))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "\ndef simplicity(s):\n    return len(set(s)) \n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n \nprint(min_erase(input()))\n", "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters.\n    \"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n    \"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\n\ndef simplicity(s):\n    return len(set(s)) - 1\n\ndef min_erase(S):\n    min_erase = len(S)\n    for i in range(len(S)):\n        S_ = S[:i] + S[i+1:]\n        min_erase = min(min_erase, len(S) - simplicity(S_))\n    return min_erase + 1\n\nprint(min_erase(input()))\n", "\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        input = sys.stdin.readline().strip()\n        if len(input) <= 2:\n            print(0)\n            continue\n        freq = {}\n        for char in input:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        if len(freq) <= 2:\n            print(0)\n            continue\n        else:\n            freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n            if freq[2][1] == 1:\n                print(len(input) - 2)\n                continue\n            else:\n                print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    word = input()\n    if len(set(word)) <= 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"]