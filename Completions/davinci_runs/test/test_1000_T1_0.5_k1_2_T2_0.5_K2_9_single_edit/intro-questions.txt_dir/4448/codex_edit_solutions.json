["\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) - 1 for x in input().split()])\n    days = [0] * (n + 1)\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, num in enumerate(k):\n        if num > 0:\n            result = max(result, days[kind] + (num - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i+1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(n):\n        ans += c[x[i]-1]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i+1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1], reverse=True)\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d and k:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]  # n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u0432 \u043d\u0430\u0431\u043e\u0440\u0435, m - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439\n    k = [int(x) for x in input().split()]  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435\n    offers = []  # \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n    for _ in range(m):  # \u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n        offers.append([int(x) for x in input().split()])  # \u043e\u0431\u044a\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a\n    days = [0] * (n + 1)  # \u0434\u043d\u0438, \u043a\u043e\u0433\u0434\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c\n    for day, kind in offers:  # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c \u0438 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u0434\u043d\u0438\n        days[kind] = max(days[kind], day)  # \u0434\u0435\u043d\u044c, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n    result = 0  # \u0434\u0435\u043d\u044c, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e\n    for kind, day in enumerate(days):  # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n        if k[kind] > 0:  # \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n            result = max(result, day + (k[kind] - 1) * 2)  # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n    print(result)  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u0435\u043d\u044c, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e\n\nif __name__ == '__main__':\n    main()\n", "\n#\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i+1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i+1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i+1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] != d:\n            k_sum -= sum(k) - k[0]\n            k = [k[0]]\n        k_sum -= k[0]\n        k.pop(0)\n        d_t_dict.pop(0)\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)\n    for offer in offers:\n        days[offer[1]] = max(days[offer[1]], offer[0])\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i+1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\nprint(1)\n", "\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]  # number of each kind of milk\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])  # days and kind of milk\n    days = [0] * (n + 1)\n    for day, kind in offers:  # for each offer\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):  # for each kind of milk\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\nif __name__ == '__main__':\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days, start=1):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        day, kind = [int(x) for x in input().split()]\n        offers.append((day, kind))\n    days = [0] * (n + 1)\n    for offer in offers:\n        day, kind = offer\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()] # n = number of items, m = number of offers\n    k = [int(x) for x in input().split()] # k = list of items\n    offers = []\n    for _ in range(m): # creates a list of lists with offers\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1) # creates a list of zeroes\n    for day, kind in offers:\n        days[kind] = max(days[kind], day) # replaces the 0 with the day of the offer\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0: # if there are any items of that kind\n            result = max(result, day + (k[kind] - 1) * 2) # finds the maximum number of days\n    print(result)\n\nif __name__ == '__main__':\n    main()\n"]