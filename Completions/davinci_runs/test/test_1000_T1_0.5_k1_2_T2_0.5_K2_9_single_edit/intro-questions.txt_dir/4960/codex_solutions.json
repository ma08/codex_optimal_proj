["\n\ndef binary_to_octal(binary):\n    binary = \"0\"*(3-len(binary)%3) + binary\n    res = \"\"\n    for i in range(0, len(binary), 3):\n        res += str(int(binary[i:i+3], 2))\n    return res\n\nprint(binary_to_octal(input()))", "\n\n#%%\n\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n\n#%%", "\n\n#-----main-----\ndef main():\n\tbinNum = input()\n\tnum = len(binNum)\n\tif num % 3 == 1:\n\t\tbinNum = \"00\" + binNum\n\telif num % 3 == 2:\n\t\tbinNum = \"0\" + binNum\n\toctNum = \"\"\n\tfor i in range(0, num, 3):\n\t\toctNum += str(int(binNum[i:i+3], 2))\n\tprint(octNum)\n\nmain()", "\n\nbinary = input()\nbinary = binary[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)", "\n\nbin = input()\n\nn = len(bin)\n\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(bin[i:i+3], 2))\n\nprint(octal)", "\n\ndef convert(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\ndef main():\n    binary = input()\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()", "\n\nbinary = input()\nbinary = binary[::-1]\nbinary = binary + (3 - len(binary) % 3) * '0'\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i + 3], 2))\n\nprint(int(octal[::-1]))", "\n\ndef convert_binary(num):\n    octal = \"\"\n    num = \"0\"*(3-len(num)%3) + num\n    for i in range(0, len(num), 3):\n        octal += str(int(num[i:i+3], 2))\n    return octal\n\nprint(convert_binary(input()))"]