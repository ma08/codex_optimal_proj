["\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))", "\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3"]