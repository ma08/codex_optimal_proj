["\n\nclass Solution:\n    def canThreePartsEqualSum(self, A):\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "class Solution:\n    def maxProfit(self, prices) -> int:\n        profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] > prices[i - 1]:\n                profit += prices[i] - prices[i - 1]\n        return profit\n\n\n\n# class Solution:\n#     def canThreePartsEqualSum(self, A) -> bool:\n#         total = sum(A)\n#         if total % 3 != 0:\n#             return False\n#         part_sum = total // 3\n#         i, cur_sum = 0, 0\n#         while i < len(A):\n#             cur_sum += A[i]\n#             if cur_sum == part_sum:\n#                 break\n#             i += 1\n#         if cur_sum != part_sum:\n#             return False\n#         j, cur_sum = i + 1, 0\n#         while j < len(A):\n#             cur_sum += A[j]\n#             if cur_sum == part_sum:\n#                 break\n#             j += 1\n#         if cur_sum != part_sum:\n#             return False\n#         return True\n\n\nif __name__ == '__main__':\n    prices = [7, 1, 5, 3, 6, 4]\n    print(Solution().maxProfit(prices))\n", "\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "import math\n\n\n\nclass Solution:\n    def numOfSubarrays(self, arr, k, threshold):\n        length = len(arr)\n        if length < k:\n            return 0\n        sum_arr = [0 for _ in range(length)]\n        sum_arr[0] = arr[0]\n        for i in range(1, length):\n            sum_arr[i] = sum_arr[i - 1] + arr[i]\n        num = 0\n        for i in range(k - 1, length):\n            if i == k - 1:\n                cur_sum = sum_arr[i]\n            else:\n                cur_sum = sum_arr[i] - sum_arr[i - k]\n            if cur_sum / k >= threshold:\n                num += 1\n        return num\n\n\nif __name__ == '__main__':\n    arr = [2, 2, 2, 2, 5, 5, 5, 8]\n    k = 3\n    threshold = 4\n    print(Solution().numOfSubarrays(arr, k, threshold))\n", "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3 and cur == 0\n", "\nclass Solution:\n        # \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u5224\u65ad\u6570\u7ec4\u80fd\u5426\u88ab\u5206\u6210\u4e09\u7b49\u4efd\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n\n        # \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u5224\u65ad\u6570\u7ec4\u80fd\u5426\u88ab\u5206\u6210\u4e09\u7b49\u4efd\n        # total = sum(A)\n        # if total % 3 != 0:\n        #     return False\n        # target = total // 3\n        # cur = 0\n        # count = 0\n        # for num in A:\n        #     cur += num\n        #     if cur == target:\n        #         count += 1\n        #         cur = 0\n        # return count == 3\n        return count == 3\n", "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2019/3/6 \u4e0b\u53483:03\n# @Author  : Aries\n# @Site    : \n# @File    : file.py\n# @Software: PyCharm\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print(solution.canThreePartsEqualSum([10, -10, 10, -10, 10, -10, 10, -10]))\n        return count == 3\n", "class Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "\nclass Solution:\n    def canThreePartsEqualSum(self, A):\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n"]