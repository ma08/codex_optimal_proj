["\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district) / 2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district) / 2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts]) / 2\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= float(V)\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for i in range(districts):\n        if total_votes[i][0] > total_votes[i][1]:\n            winners.append('A')  # Append the winning candidate to the winners list.\n            wasted_votes[i][0] = total_votes[i][0] - (total_votes[i][0] // 2 + 1)  # Calculate wasted votes for candidate A.\n            wasted_votes[i][1] = total_votes[i][1]  # Candidate B gets no wasted votes.\n        else:  # The same as above, but for candidate B.\n            winners.append('B')  # Append the winning candidate to the winners list.\n            wasted_votes[i][0] = total_votes[i][0]\n            wasted_votes[i][1] = total_votes[i][1] - (total_votes[i][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = [[int(x) for x in input().split()] for i in range(p)]\n    # Get the districts\n    districts = [[] for i in range(d)]\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef efficiencyGap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        votesA = sum([p[1] for p in precincts if p[0] == d])\n        votesB = sum([p[2] for p in precincts if p[0] == d])\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        # if votesA > votesB:\n        #     print(\"A\", votesB, votesA-votesB-1)\n        # else:\n        #     print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/float(V)))\n\nefficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in raw_input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in raw_input().split()])\n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        district, a, b = [int(x) for x in input().strip().split()]\n        precincts[district].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values() for p in p)\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in raw_input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in xrange(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in xrange(districts)]\n    for district in xrange(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in xrange(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in xrange(districts)]) - sum([wasted_votes[district][1] for district in xrange(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in xrange(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((i, d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][1] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        precinct_count = len(district)\n        V = 0\n        wasted_A = 0\n        wasted_B = 0\n        for j in range(precinct_count):\n            V += district[j][2] + district[j][3]\n        A_votes = 0\n        B_votes = 0\n        for j in range(precinct_count):\n            A_votes += district[j][2]\n            B_votes += district[j][3]\n        if A_votes > B_votes:\n            wasted_B = B_votes\n            if A_votes > V/2 + 1:\n                wasted_A = A_votes - V/2 - 1\n            else:\n                wasted_A = 0\n            print('A', int(wasted_A), int(wasted_B))\n        else:\n            wasted_A = A_votes\n            if B_votes > V/2 + 1:\n                wasted_B = B_votes - V/2 - 1\n            else:\n                wasted_B = 0\n            print('B', int(wasted_A), int(wasted_B))\n        efficiency_gap += abs(wasted_A - wasted_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()] # python3\n        # d, a, b = map(int, input().strip().split()) # python2\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()] #creates a list of the number of precincts and districts\n    data = [[int(x) for x in input().split()] for _ in range(precincts)] #creates a 2d list of the precincts and the number of votes for each candidate\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)] #creates a list of lists of the total number of votes for each district\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1] #adds the number of votes for candidate A to the list\n        total_votes[precinct[0] - 1][1] += precinct[2] #adds the number of votes for candidate B to the list\n\n    # Get the winners and wasted votes per district.\n    winners = [] #creates an empty list of winners\n    wasted_votes = [[0, 0] for _ in range(districts)] #creates a list of lists of wasted votes\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]: #if candidate A has more votes than candidate B\n            winners.append('A') #adds A to the list of winners\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1) #calculates the number of wasted votes for candidate A\n            wasted_votes[district][1] = total_votes[district][1] #calculates the number of wasted votes for candidate B\n        else:\n            winners.append('B') #adds B to the list of winners\n            wasted_votes[district][0] = total_votes[district][0] #calculates the number of wasted votes for candidate A\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1) #calculates the number of wasted votes for candidate B\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap)) #prints the absolute value of the efficiency gap\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    districts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - \\\n                     sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)]) * 2\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(lambda: [0, 0])\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d][0] += a\n        precincts[d][1] += b\n\n    for district, precinct_votes in precincts.items():\n        votes_a = precinct_votes[0]\n        votes_b = precinct_votes[1]\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef efficiencyGap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA-votesB-1)\n        else:\n            print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\nefficiencyGap([[1, 100, 200],\n               [2, 100, 99],\n               [3, 100, 50],\n               [3, 100, 50],\n               [2, 100, 98]], 3)\nefficiencyGap([[3, 100, 99],\n               [2, 100, 99],\n               [1, 100, 99],\n               [4, 100, 99]], 4)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    precincts = []\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()]) \n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([]) \n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct) \n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district]) \n        b_votes = sum([precinct[2] for precinct in district]) \n        if a_votes > b_votes:\n            winner = 'A' \n            lost_votes = b_votes \n            excess_votes = a_votes - (len(district)//2 + 1) \n        else:\n            winner = 'B' \n            lost_votes = a_votes \n            excess_votes = b_votes - (len(district)//2 + 1) \n        results.append([winner, lost_votes, excess_votes]) \n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2]) \n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts]) \n    total_lost_votes = sum([result[1] for result in results]) \n    total_excess_votes = sum([result[2] for result in results]) \n    print(abs(total_lost_votes - total_excess_votes)/total_votes) \n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum(votes[i][1] + votes[i][2] for i in range(len(votes)))\n    # Get the total votes for each party\n    total_votes_a = sum(votes[i][1] for i in range(len(votes)))\n    total_votes_b = sum(votes[i][2] for i in range(len(votes)))\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum(votes[i][1] for i in range(len(votes)) if votes[i][0] == district)\n        votes_b = sum(votes[i][2] for i in range(len(votes)) if votes[i][0] == district)\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum(district_results[district][1] for district in district_results)\n    wasted_votes_b = sum(district_results[district][2] for district in district_results)\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap. (This is wrong.)\n    # efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    # efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    # print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split())) # P = num precincts, D = num districts\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [[] for i in range(D)]\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0 # total votes in district\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0 # votes for A in district\n        B_votes = 0 # votes for B in district\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1) # // is integer division\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1) # // is integer division\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # // is integer division\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # // is integer division\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= P\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef efficiencyGap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA - votesB - 1)\n        else:\n            print(\"B\", votesA, votesB - votesA - 1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] < p[2]])\n    wB = sum([p[1] for p in precincts if p[1] > p[2]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\nefficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\ndef efficiencyGap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    return \"{0:.10f}\".format(abs(wA-wB)/V)\n\nprint(efficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3))\nprint(efficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4))\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    districts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2.0) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2.0) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and the results\n    districts, results = [], []\n    for i in range(d): # districts\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA-votesB-1)\n        else:\n            print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/V))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98')\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693'\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99')\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]] # number of precincts and districts\n    precincts = []\n    for _ in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {} # map district to votes\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))]) # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))]) # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))]) # total wasted votes for B\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values() for district in precincts.keys())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] += precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] += precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(lambda: defaultdict(list))\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d]['votes'].append((a, b))\n\n    for district, precinct_info in precincts.items():\n        votes_a = sum(p[0] for p in precinct_info['votes'])\n        votes_b = sum(p[1] for p in precinct_info['votes'])\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nprint(\"Hello world\")\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n        efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98\\\\n')\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693'\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n')\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2 + i * 3:5 + i * 3]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + '{0:.11f}'.format(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts\n    districts = []\n    for _ in range(d):\n        districts.append([])  # pylint: disable=unsubscriptable-object\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts\n    districts = []\n    for i in range(d+1):\n        districts.append([]) # accounts for indexing starting at 1\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1) # accounts for rounding down\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1) # accounts for rounding down\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef efficiencyGap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n    # Find the wasted votes\n    if votesA > votesB:\n        print(\"A\", votesB, votesA-votesB-1)\n    else:\n        print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/V))\n\nefficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1),\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1),\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1),)\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1),)\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    districts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98\\\\n')\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693\\\\n'\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n')\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372\\\\n'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - \\\n                     sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef efficiencyGap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        print(\"A\", votesB, votesA-votesB-1)\n        print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/V))\n\nefficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98')\\\\n\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693'\\\\n\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99')\\\\n\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372'\\\\n\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\\\\n\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\\\\n\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\\\\n\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\\\\n\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\\\\n\n        votes_a = sum([v[0] for v in votes])\\\\n\n        votes_b = sum([v[1] for v in votes])\\\\n\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\\\\n\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\\\\n\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\\\\n\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\\\\n\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\\\\n\n    output = ''\\\\n\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\\\\n\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\\\\n\n    return output\\\\n\n\n\nif __name__ == '__main__':\n    import doctest\\\\n\n    doctest.testmod()\\\\n\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    districts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes, 3))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)])\n    efficiency_gap -= sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1]\n                           for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\ndef efficiencyGap(precincts, districts):\n    # A is party A, B is party B\n    A, B, wA, wB = 0, 0, 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        wA += votesB\n        wB += votesA-votesB-1\n    else:\n        wA += votesA\n        wB += votesB-votesA-1\n    V = sum([sum(p[1:3]) for p in precincts])\n    print(\"{0:.10f}\".format(abs(wA-wB)/V))\n\nefficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - ((sum(precinct_votes) // 2) + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - ((sum(precinct_votes) // 2) + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - ((votes_a // 2) + 1), votes_b - ((votes_b // 2) + 1))\n        else:\n            print('B', votes_a - ((votes_a // 2) + 1), votes_b - ((votes_b // 2) + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(\"%.4f\" % abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef efficiencyGap(precincts, districts, V):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA-votesB-1)\n        else:\n            print(\"B\", votesA, votesB-votesA-1)\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/V))\n\nefficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3, 500)\nefficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4, 400)\n", "\nfrom collections import defaultdict\n\n\ndef efficiency_gap(parties):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in parties.values())\n    wasted_votes = defaultdict(int)\n    for district, party_votes in parties.items():\n        if party_votes[0] > party_votes[1]:\n            wasted_votes[district] = party_votes[0] - (sum(party_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = party_votes[1] - (sum(party_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    parties = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        parties[d].append((a, b))\n\n    for district, party_votes in parties.items():\n        votes_a = sum(p[0] for p in party_votes)\n        votes_b = sum(p[1] for p in party_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(parties))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98') #doctest: +NORMALIZE_WHITESPACE\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693' #doctest: +NORMALIZE_WHITESPACE\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99') #doctest: +NORMALIZE_WHITESPACE\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372' #doctest: +NORMALIZE_WHITESPACE\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]] # P = Number of precincts, D = Number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2 + i * 3:5 + i * 3]]) # i * 3 because each precinct has 3 values\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n' # '\\\\n' for new line\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    districts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes)) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes, file=sys.stderr)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2]\n                            for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= (V/D)\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input.\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts.\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results.\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results.\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap.\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / float(total_votes))\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n"]