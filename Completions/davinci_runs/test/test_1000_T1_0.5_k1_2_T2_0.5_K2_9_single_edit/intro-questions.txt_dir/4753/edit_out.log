2022-04-16 10:11:41.907064 num operations 1
2022-04-16 10:11:41.907081 size on input set 1
2022-04-16 10:11:51.426272 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nprint(\"hello\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\n# Accept the number of vertices \nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal, starting with the 3rd\nfor i in range(n - 3, 0, -1):\n    # Add the number of intersections for this diagonal\n    d_i += i\n\n# Print the number of intersections\nprint(d_i)\n"
    },
    {
      "index": 3,
      "text": "\n# SOLUTION\n# Accept the number of vertices\nn = int(input())\n# Initialize the number of diagonals\nd = 2 * n - 5\n# Initialize the number of intersections\ni = n - 3\n# Initialize the count of diagonals that intersect\nd_i = 0\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n# Print the number of intersections\nprint(d_i)\n"
    },
    {
      "index": 4,
      "text": "\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n# end\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION 1\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n\n# SOLUTION 2\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n"
    },
    {
      "index": 6,
      "text": "\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 3\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n"
    },
    {
      "index": 7,
      "text": "\n\n\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n"
    },
    {
      "index": 8,
      "text": "\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals with the formula\nd = (n * (n - 3)) / 2\n\n# Print the number of diagonals\nprint(d)\n"
    }
  ],
  "created": 1650103902,
  "object": "edit"
}
2022-04-16 10:11:51.426549 fix syntax errors 9 ['\n\nprint("hello")\n', '\n\n# SOLUTION\n\n# Accept the number of vertices \nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n', '\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal, starting with the 3rd\nfor i in range(n - 3, 0, -1):\n    # Add the number of intersections for this diagonal\n    d_i += i\n\n# Print the number of intersections\nprint(d_i)\n', '\n# SOLUTION\n# Accept the number of vertices\nn = int(input())\n# Initialize the number of diagonals\nd = 2 * n - 5\n# Initialize the number of intersections\ni = n - 3\n# Initialize the count of diagonals that intersect\nd_i = 0\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n# Print the number of intersections\nprint(d_i)\n', '\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n# end\n', '\n\n# SOLUTION 1\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n\n# SOLUTION 2\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n', '\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 3\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n', '\n\n\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n', '\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals with the formula\nd = (n * (n - 3)) / 2\n\n# Print the number of diagonals\nprint(d)\n']
2022-04-16 10:11:51.426670 size on output set 9
2022-04-16 10:11:51.426680 num operations 1
2022-04-16 10:11:51.426685 size on input set 1
2022-04-16 10:11:58.126250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2 + 1\n\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 2) // 2\n\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "import sys\n\n\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2 \n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 2) * (n - 1) // 2\n\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "import sys\nsys.stdin = open('input.txt', 'r')\n\n\n\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2 + (n - 4)\n\nprint(ans)\n"
    },
    {
      "index": 8,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n"
    }
  ],
  "created": 1650103911,
  "object": "edit"
}
2022-04-16 10:11:58.126497 fix syntax errors 9 ['import sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n', 'import sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n', '\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2 + 1\n\nprint(ans)\n', '\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 2) // 2\n\nprint(ans)\n', 'import sys\n\n\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2 \n\nprint(ans)\n', '\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 2) * (n - 1) // 2\n\nprint(ans)\n', "import sys\nsys.stdin = open('input.txt', 'r')\n\n\n\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n", '\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2 + (n - 4)\n\nprint(ans)\n', 'import sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 4) // 2\n\nprint(ans)\n']
2022-04-16 10:11:58.126537 size on output set 7
2022-04-16 10:11:58.126547 num operations 1
2022-04-16 10:11:58.126552 size on input set 1
2022-04-16 10:12:05.009373 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2)  # noqa\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(int(n*(n-3)/2))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2)  # noqa\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2)  # print(n*(n-3)/2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2)  # noqa\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2) \n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650103918,
  "object": "edit"
}
2022-04-16 10:12:05.009605 fix syntax errors 9 ['\n\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(n*(n-3)//2)  # noqa\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(int(n*(n-3)/2))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(n*(n-3)//2)  # noqa\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(n*(n-3)//2)  # print(n*(n-3)/2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(n*(n-3)//2) \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(n*(n-3)//2) \n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(n*(n-3)//2)  # noqa\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    The number of intersections is given by the formula:\n    n*(n-3)/2\n    """\n    n = int(input())\n    print(n*(n-3)//2) \n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:12:05.009640 size on output set 6
2022-04-16 10:12:05.009650 num operations 1
2022-04-16 10:12:05.009656 size on input set 1
2022-04-16 10:12:11.259823 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nprint((n - 3) * (n - 4) // 2)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nprint((n-3)*(n-4)//2 + 1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nprint((n-2)*(n-3)//2)\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\nprint((n-3)*(n-4)//2) \n"
    },
    {
      "index": 4,
      "text": "n = int(input())\nprint((n-3)*(n-4)//2)\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\nprint((n-3)*(n-2)//2)\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\nprint((n-3)*(n-4)//2+1)\n"
    },
    {
      "index": 7,
      "text": "\n\nn = int(input())\nprint((n-3)*(n-4)//2) \n"
    },
    {
      "index": 8,
      "text": "\n\nn = int(input())\nprint((n-3)*(n-4)//2\n"
    }
  ],
  "created": 1650103925,
  "object": "edit"
}
2022-04-16 10:12:11.260085 fix syntax errors 9 ['\n\nn = int(input())\nprint((n - 3) * (n - 4) // 2)\n', '\n\nn = int(input())\nprint((n-3)*(n-4)//2 + 1)\n', '\n\nn = int(input())\nprint((n-2)*(n-3)//2)\n', '\n\nn = int(input())\nprint((n-3)*(n-4)//2) \n', 'n = int(input())\nprint((n-3)*(n-4)//2)\n', '\n\nn = int(input())\nprint((n-3)*(n-2)//2)\n', '\n\nn = int(input())\nprint((n-3)*(n-4)//2+1)\n', '\n\nn = int(input())\nprint((n-3)*(n-4)//2) \n', '\n\nn = int(input())\nprint((n-3)*(n-4)//2\n']
2022-04-16 10:12:11.260174 size on output set 8
2022-04-16 10:12:11.260185 num operations 1
2022-04-16 10:12:11.260190 size on input set 1
2022-04-16 10:12:18.326704 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)//6)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\nprint((n-3)*(n-2)*(n-1)/6) \n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)/6) \n"
    },
    {
      "index": 3,
      "text": "import sys\n\nn = int(sys.stdin.readline())\nprint((n-3)*(n-2)*(n-1)/6, end='')\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)/6) \n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n - 3) * (n - 2) * (n - 1) / 6)\n"
    },
    {
      "index": 6,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)/6)\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)//6)\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\nprint((n - 3) * (n - 2) * (n - 1) / 6)\n"
    }
  ],
  "created": 1650103931,
  "object": "edit"
}
2022-04-16 10:12:18.326975 fix syntax errors 9 ['\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)//6)\n', '\nimport sys\n\nn = int(sys.stdin.readline())\nprint((n-3)*(n-2)*(n-1)/6) \n', '\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)/6) \n', "import sys\n\nn = int(sys.stdin.readline())\nprint((n-3)*(n-2)*(n-1)/6, end='')\n", '\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)/6) \n', '\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n - 3) * (n - 2) * (n - 1) / 6)\n', 'import sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)/6)\n', '\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)//6)\n', '\nimport sys\n\nn = int(sys.stdin.readline())\nprint((n - 3) * (n - 2) * (n - 1) / 6)\n']
2022-04-16 10:12:18.327003 size on output set 9
2022-04-16 10:12:18.327014 num operations 1
2022-04-16 10:12:18.327019 size on input set 1
2022-04-16 10:12:25.566651 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\nprint((n-3)*(n-2)*(n-1)//6)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)//6) \n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)/6)\n"
    },
    {
      "index": 4,
      "text": "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\nprint((n-3)*(n-2)*(n-1)//6)\n"
    },
    {
      "index": 5,
      "text": "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)//6)\n"
    },
    {
      "index": 6,
      "text": "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)//6)  # print number of possible triangles\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n"
    },
    {
      "index": 8,
      "text": "\n\nn = int(input())\n\nif not 3 <= n <= 100:\n    raise ValueError('Input is out of range.')\n\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n"
    }
  ],
  "created": 1650103938,
  "object": "edit"
}
2022-04-16 10:12:25.566915 fix syntax errors 9 ['\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\n\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n', '\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\nprint((n-3)*(n-2)*(n-1)//6)\n', '\n\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\n\nprint((n-3)*(n-2)*(n-1)//6) \n', '\n\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\n\nprint((n-3)*(n-2)*(n-1)/6)\n', '\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\nprint((n-3)*(n-2)*(n-1)//6)\n', '\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\n\nprint((n-3)*(n-2)*(n-1)//6)\n', '\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\n\nprint((n-3)*(n-2)*(n-1)//6)  # print number of possible triangles\n', '\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError("Input is out of range.")\n\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n', "\n\nn = int(input())\n\nif not 3 <= n <= 100:\n    raise ValueError('Input is out of range.')\n\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n"]
2022-04-16 10:12:25.566948 size on output set 7
2022-04-16 10:12:25.566958 num operations 1
2022-04-16 10:12:25.566963 size on input set 1
2022-04-16 10:12:33.670869 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "from math import factorial\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n    print(factorial(n)/factorial(n-k)/factorial(k))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(2)\n    elif n == 5:\n        print(4)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)/2)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print(int((n-3)*(n-2)*(n-4)/2))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print(int((n-3)*(n-2)*(n-4)/2))\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)/6)\n\nmain()\n"
    }
  ],
  "created": 1650103945,
  "object": "edit"
}
2022-04-16 10:12:33.671138 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n', 'from math import factorial\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n    print(factorial(n)/factorial(n-k)/factorial(k))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(2)\n    elif n == 5:\n        print(4)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)/2)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print(int((n-3)*(n-2)*(n-4)/2))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print(int((n-3)*(n-2)*(n-4)/2))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)//2)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)/6)\n\nmain()\n']
2022-04-16 10:12:33.671244 size on output set 5
2022-04-16 10:12:33.671257 num operations 1
2022-04-16 10:12:33.671262 size on input set 1
2022-04-16 10:12:41.462179 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2 if n >= 3 else 0\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2 if n>=3 else 0\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\nimport math\n\n\n\ndef solve(line):\n    return line * (line - 3) // 2\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2 # fix syntax errors\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2;\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650103953,
  "object": "edit"
}
2022-04-16 10:12:41.462404 fix syntax errors 9 ["\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2 if n >= 3 else 0\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2 if n>=3 else 0\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\n\n\ndef solve(line):\n    return line * (line - 3) // 2\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2 # fix syntax errors\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2;\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:12:41.462440 size on output set 6
