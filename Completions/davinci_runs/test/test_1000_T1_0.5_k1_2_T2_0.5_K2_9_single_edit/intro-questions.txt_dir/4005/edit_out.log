2022-04-16 04:12:50.045703 num operations 1
2022-04-16 04:12:50.045722 size on input set 1
2022-04-16 04:13:07.206356 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "function File() {\n\n}\n\nFile.prototype.get = function(path) {\n\n};\n\nFile.prototype.post = function(path) {\n\n};\n\nFile.prototype.put = function(path) {\n\n};\n\nFile.prototype.delete = function(path) {\n\n};\n\nmodule.exports = File;\n"
    },
    {
      "index": 1,
      "text": "const fs = require('fs');\n\nconst readFile = (path) => {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf8', (err, data) => {\n            if (err) reject(err);\n            resolve(data);\n        });\n    });\n};\n\nconst writeFile = (path, data) => {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(path, data, (err) => {\n            if (err) reject(err);\n            resolve();\n        });\n    });\n};\n\nmodule.exports = {\n    readFile,\n    writeFile\n};\n"
    },
    {
      "index": 2,
      "text": "// module.exports = function(app){\n//     var file = require('../controllers/file.controller.js');\n//     app.post('/api/file', file.create);\n//     app.get('/api/file', file.findAll);\n//     app.get('/api/file/:fileId', file.findOne);\n//     app.put('/api/file/:fileId', file.update);\n//     app.delete('/api/file/:fileId', file.delete);\n// }\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  untitled.py\n#  \n#  Copyright 2014 Balint Seeber <balint256@gmail.com>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#  \n\nimport time\n\nclass FileWriter(object):\n\tdef __init__(self, filename):\n\t\tself.filename = filename\n\t\tself.file = open(filename, 'wb')\n\t\tself.start_time = time.time()\n\t\tself.last_time = self.start_time\n\t\tself.last_bytes = 0\n\tdef __del__(self):\n\t\tself.close()\n\tdef close(self):\n\t\tself.file.close()\n\tdef write(self, data):\n\t\tself.file.write(data)\n\t\tself.last_time = time.time()\n\t\tself.last_bytes += len(data)\n\tdef get_rate(self):\n\t\tif self.last_time == self.start_time:\n\t\t\treturn 0\n\t\treturn self.last_bytes / (self.last_time - self.start_time)\n\tdef get_elapsed_time(self):\n\t\treturn self.last_time - self.start_time\n\ndef main():\n\treturn 0\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 4,
      "text": "var fs = require('fs');\nvar path = require('path');\n\nvar dir = process.argv[2];\nvar ext = process.argv[3];\n\nfs.readdir(dir, function(err, list) {\n  if (err) {\n    throw err;\n  }\n  list.forEach(function(file) {\n    if (path.extname(file) === '.' + ext) {\n      console.log(file);\n    }\n  });\n});\nvar fs = require('fs');\nvar path = require('path');\n\nvar dir = process.argv[2];\nvar ext = process.argv[3];\n\nfs.readdir(dir, function(err, list) {\n  if (err) {\n    throw err;\n  }\n  list.forEach(function(file) {\n    if (path.extname(file) === '.' + ext) {\n      console.log(file);\n    }\n  });\n});\n"
    },
    {
      "index": 5,
      "text": "//create a file and write to it\nvar fs= require('fs');\n\nfs.writeFile('mynewfile3.txt','Hello content!', function(err){\n    if(err) throw err;\n    console.log('Saved!');\n});\n\n//open a file and append to it\nfs.appendFile('mynewfile3.txt','This is my text', function(err){\n    if(err) throw err;\n    console.log('Updated!');\n});\n\n//open a file and replace the content\nfs.writeFile('mynewfile3.txt','This is my text', function(err){\n    if(err) throw err;\n    console.log('Replaced!');\n});\n\n//delete a file\nfs.unlink('mynewfile2.txt', function(err){\n    if(err) throw err;\n    console.log('File deleted!');\n});\n\n//rename a file\nfs.rename('mynewfile1.txt', 'myrenamedfile.txt', function(err){\n    if(err) throw err;\n    console.log('File renamed!');\n});\n"
    },
    {
      "index": 6,
      "text": "// Do not modify these first two lines\nvar iceCreamFlavours = [\"chocolate\", \"vanilla\", \"cookies and cream\", \"rocky road\", \"strawberry\"];\nconsole.log(iceCreamFlavours);\n\n// Your code below here...\niceCreamFlavours.push(\"root beer\");\nconsole.log(iceCreamFlavours);\n\nconsole.log(iceCreamFlavours[0]);\n\nconsole.log(iceCreamFlavours[5]);\n\nconsole.log(iceCreamFlavours.length);\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 7
    },
    {
      "index": 8,
      "text": "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    FILE *fp;\n    char name[20];\n    int age;\n    float height;\n\n    if((fp = fopen(\"data.txt\", \"r\")) == NULL)\n    {\n        printf(\"\\nCannot open file.\\n\");\n        exit(1);\n    }\n\n    fscanf(fp, \"%s %d %f\", name, &age, &height);\n    printf(\"%s %d %f\", name, age, height);\n\n    fclose(fp);\n\n    return 0;\n}\n"
    }
  ],
  "created": 1650082370,
  "object": "edit"
}
2022-04-16 04:13:07.206640 NO RESULT
2022-04-16 04:13:07.206648 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 7
}
2022-04-16 04:13:07.206694 fix syntax errors 8 ['function File() {\n\n}\n\nFile.prototype.get = function(path) {\n\n};\n\nFile.prototype.post = function(path) {\n\n};\n\nFile.prototype.put = function(path) {\n\n};\n\nFile.prototype.delete = function(path) {\n\n};\n\nmodule.exports = File;\n', "const fs = require('fs');\n\nconst readFile = (path) => {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf8', (err, data) => {\n            if (err) reject(err);\n            resolve(data);\n        });\n    });\n};\n\nconst writeFile = (path, data) => {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(path, data, (err) => {\n            if (err) reject(err);\n            resolve();\n        });\n    });\n};\n\nmodule.exports = {\n    readFile,\n    writeFile\n};\n", "// module.exports = function(app){\n//     var file = require('../controllers/file.controller.js');\n//     app.post('/api/file', file.create);\n//     app.get('/api/file', file.findAll);\n//     app.get('/api/file/:fileId', file.findOne);\n//     app.put('/api/file/:fileId', file.update);\n//     app.delete('/api/file/:fileId', file.delete);\n// }\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  untitled.py\n#  \n#  Copyright 2014 Balint Seeber <balint256@gmail.com>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#  \n\nimport time\n\nclass FileWriter(object):\n\tdef __init__(self, filename):\n\t\tself.filename = filename\n\t\tself.file = open(filename, 'wb')\n\t\tself.start_time = time.time()\n\t\tself.last_time = self.start_time\n\t\tself.last_bytes = 0\n\tdef __del__(self):\n\t\tself.close()\n\tdef close(self):\n\t\tself.file.close()\n\tdef write(self, data):\n\t\tself.file.write(data)\n\t\tself.last_time = time.time()\n\t\tself.last_bytes += len(data)\n\tdef get_rate(self):\n\t\tif self.last_time == self.start_time:\n\t\t\treturn 0\n\t\treturn self.last_bytes / (self.last_time - self.start_time)\n\tdef get_elapsed_time(self):\n\t\treturn self.last_time - self.start_time\n\ndef main():\n\treturn 0\n\nif __name__ == '__main__':\n\tmain()\n", "var fs = require('fs');\nvar path = require('path');\n\nvar dir = process.argv[2];\nvar ext = process.argv[3];\n\nfs.readdir(dir, function(err, list) {\n  if (err) {\n    throw err;\n  }\n  list.forEach(function(file) {\n    if (path.extname(file) === '.' + ext) {\n      console.log(file);\n    }\n  });\n});\nvar fs = require('fs');\nvar path = require('path');\n\nvar dir = process.argv[2];\nvar ext = process.argv[3];\n\nfs.readdir(dir, function(err, list) {\n  if (err) {\n    throw err;\n  }\n  list.forEach(function(file) {\n    if (path.extname(file) === '.' + ext) {\n      console.log(file);\n    }\n  });\n});\n", "//create a file and write to it\nvar fs= require('fs');\n\nfs.writeFile('mynewfile3.txt','Hello content!', function(err){\n    if(err) throw err;\n    console.log('Saved!');\n});\n\n//open a file and append to it\nfs.appendFile('mynewfile3.txt','This is my text', function(err){\n    if(err) throw err;\n    console.log('Updated!');\n});\n\n//open a file and replace the content\nfs.writeFile('mynewfile3.txt','This is my text', function(err){\n    if(err) throw err;\n    console.log('Replaced!');\n});\n\n//delete a file\nfs.unlink('mynewfile2.txt', function(err){\n    if(err) throw err;\n    console.log('File deleted!');\n});\n\n//rename a file\nfs.rename('mynewfile1.txt', 'myrenamedfile.txt', function(err){\n    if(err) throw err;\n    console.log('File renamed!');\n});\n", '// Do not modify these first two lines\nvar iceCreamFlavours = ["chocolate", "vanilla", "cookies and cream", "rocky road", "strawberry"];\nconsole.log(iceCreamFlavours);\n\n// Your code below here...\niceCreamFlavours.push("root beer");\nconsole.log(iceCreamFlavours);\n\nconsole.log(iceCreamFlavours[0]);\n\nconsole.log(iceCreamFlavours[5]);\n\nconsole.log(iceCreamFlavours.length);\n', '#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    FILE *fp;\n    char name[20];\n    int age;\n    float height;\n\n    if((fp = fopen("data.txt", "r")) == NULL)\n    {\n        printf("\\nCannot open file.\\n");\n        exit(1);\n    }\n\n    fscanf(fp, "%s %d %f", name, &age, &height);\n    printf("%s %d %f", name, age, height);\n\n    fclose(fp);\n\n    return 0;\n}\n']
2022-04-16 04:13:07.206827 size on output set 8
2022-04-16 04:13:07.206840 num operations 1
2022-04-16 04:13:07.206845 size on input set 1
2022-04-16 04:13:25.959552 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 2,
      "text": "\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 3,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 4,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x3 and x1 <= x4 and y2 >= y3 and y2 <= y4) or (x2 >= x3 and x2 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4) or (x1 < x3 and x2 > x4 and y2 < y3 and y1 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 5,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 6,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 7,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 8,
      "text": "\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4) and (x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print('YES')\n    else:\n        print('NO')\n"
    }
  ],
  "created": 1650082387,
  "object": "edit"
}
2022-04-16 04:13:25.960127 fix syntax errors 9 ['\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x3 and x1 <= x4 and y2 >= y3 and y2 <= y4) or (x2 >= x3 and x2 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4) or (x1 < x3 and x2 > x4 and y2 < y3 and y1 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or \n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 >= x5 and x1 <= x6 and y1 >= y5 and y1 <= y6) or (x2 >= x5 and x2 <= x6 and y2 >= y5 and y2 <= y6)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n', '\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4)\n\ndef is_overlap(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 >= x3 and x1 <= x4 and y1 >= y3 and y1 <= y4) or (x2 >= x3 and x2 <= x4 and y2 >= y3 and y2 <= y4) or (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4)\n\ndef is_outside(x1, y1, x2, y2, x3, y3, x4, y4):\n    return (x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4) and (x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6)\n\ndef is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_inside(x1, y1, x3, y3, x4, y4, x5, y5)) and (not is_inside(x2, y2, x3, y3, x4, y4, x5, y5)) and (not is_inside(x1, y1, x3, y3, x4, y4, x6, y6)) and (not is_inside(x2, y2, x3, y3, x4, y4, x6, y6))\n\ndef is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (is_overlap(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (is_overlap(x1, y1, x2, y2, x5, y5, x6, y6))\n\ndef is_inside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    return (not is_outside(x1, y1, x2, y2, x3, y3, x4, y4)) and (not is_outside(x1, y1, x2, y2, x5, y5, x6, y6))\n\n\nif __name__ == "__main__":\n    x1, y1, x2, y2 = tuple(map(int, input().split()))\n    x3, y3, x4, y4 = tuple(map(int, input().split()))\n    x5, y5, x6, y6 = tuple(map(int, input().split()))\n\n    if (is_outside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_outside_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_overlap_and_inside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n    is_inside_and_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)):\n        print(\'YES\')\n    else:\n        print(\'NO\')\n']
2022-04-16 04:13:25.960376 size on output set 8
