["import collections\nimport math\ninput()\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncounts = collections.defaultdict(int)\narbitrary = 0\nfor ai, bi in zip(a, b):\n    if ai == 0:\n        if bi == 0:\n            arbitrary += 1\n    else:\n        if bi == 0:\n            counts[(0, 0)] += 1\n        else:\n            if (ai < 0 and bi < 0) or (ai >= 0 and bi < 0):\n                ai = -ai\n                bi = -bi\n\n            g = math.gcd(-bi, ai)\n            counts[(-bi // g, ai // g)] += 1\n\nif counts:\n    print(max(counts.values()) + arbitrary)\nelse:\n    print(arbitrary)\n", "import collections\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\narb = 0\n\ncounts = collections.defaultdict(int)\n\nfor x, y in zip(a, b):\n    if x==0:\n        if y==0:\n            arb+=1\n    else:\n        if y==0:\n            counts[(0, 0)] += 1\n        else:\n            if x<0 and y<0:\n                x=-x\n                y=-y\n            elif x<0 and y>=0:\n                x=-x\n                y=-y\n            g = math.gcd(x, -y)\n            counts[(-y//g, x//g)] += 1\n\nif counts:\n    print(max(counts.values()) + arb)\nelse:\n    print(arb)", "#!/usr/bin/pypy\n# -*- coding: utf-8 -*-\n\nfrom collections import defaultdict\n\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    e = defaultdict(int)\n    cnt = 0\n\n    for i in range(n):\n        if a[i] == 0:\n            if b[i] == 0:\n                cnt += 1\n            continue\n        if b[i] == 0:\n            e[(0, 0)] += 1\n            continue\n        w = gcd(a[i], b[i])\n        wa = a[i] / w\n        wb = b[i] / w\n        e[(wa, wb)] += 1\n\n    ans = 0\n    for i in list(e.values()):\n        ans = max(ans, i)\n\n    print(cnt + ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import gcd\n\n\nn = int(input())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nd = {}\nw = 0\nfor i in range(n):\n\tif a[i] != 0:\n\t\tc = gcd(abs(a[i]), abs(b[i]))\n\t\tz = 1\n\t\tif a[i] * b[i] < 0:\n\t\t\tz = -1\n\t\td[(abs(b[i]) // c, abs(a[i]) // c, z)] = d.get((abs(b[i]) // c, abs(a[i]) // c, z), 0) + 1\n\telse:\n\t\tif b[i] == 0:\n\t\t\tw += 1\nmx = 0\n#print(d)\nfor c in d:\n\tx = d[c]\n\t\n\tif x > mx:\n\t\tmx = x\nprint(int(mx) + w)\n", "n=int(input())\nA=list(map(int,input().split()))\nB=list(map(int,input().split()))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nD=[]\nANS=0\nfor i in range(n):\n    if A[i]==0 and B[i]==0:\n        ANS+=1\n    elif A[i]==0 and B[i]!=0:\n        continue\n    elif A[i]!=0 and B[i]==0:\n        D.append(0)\n    else:\n        D.append((A[i]//gcd(A[i],B[i]),B[i]//gcd(A[i],B[i])))\n\nfrom collections import Counter\nC=Counter(D)\n\nif len(C)==0:\n    print(ANS)\nelse:\n    print(ANS+max(C.values()))\n    \n", "from decimal import Decimal as mag, getcontext\n\ngetcontext().prec = 100\n\ndef main():\n    n = int(input())\n    arr = list(map(mag, input().split()))\n    brr = list(map(mag, input().split()))\n    mp = dict()\n    mp[0] = 0\n    pl = 0\n    for i in range(n):\n        if (arr[i] == 0 and brr[i] == 0):\n            pl += 1\n        if arr[i] == 0:\n            continue\n        k = - brr[i] / arr[i]\n        mp[k] = mp.get(k, 0) + 1\n    print(pl + max(mp.values()))\n\n\nmain()\n", "import math\n\nn = int(input())\n\nA = [int(x) for x in input().split()]\n\nB = [int(x) for x in input().split()]\n\nD = {0:0}\nfree = 0\n\nfor i in range(n):\n    if A[i] == 0:\n        if B[i] == 0:\n            free += 1\n    elif B[i] == 0:\n        D[0] += 1\n    else:\n        t = math.gcd(A[i],B[i])\n        a = A[i]//t\n        b = B[i]//t\n        if a < 0 and b < 0: \n            if (-a,-b) in D:\n                D[(-a,-b)] += 1\n            else:\n                D[(-a,-b)] = 1\n        elif a > 0 and b <0:\n            if (a,b) in D:\n                D[(a,b)] += 1\n            else:\n                D[(a,b)] = 1\n        elif a < 0 and b > 0:\n            if (-a,-b) in D:\n                D[(-a,-b)] += 1\n            else:\n                D[(-a,-b)] = 1\n        else:\n            if (a,b) in D:\n                D[(a,b)] += 1\n            else:\n                D[(a,b)] = 1\n            \n            \nprint(max(D.values())+free)\n", "import math\n\nn=int(input())\nx=[*map(int,input().split())]\ny=[*map(int,input().split())]\ncnt=dict()\nfixcnt=0\nzeroToCnt=0\n\nfor i in range(n):\n    if x[i]==0:\n        if y[i]==0: fixcnt+=1\n        continue\n    if y[i]==0:\n        zeroToCnt+=1\n        continue\n    gc=math.gcd(x[i],y[i])\n    tx,ty=x[i]//gc,y[i]//gc\n    if tx*ty>=0: si=True\n    else: si=False\n    cnt[(abs(tx),abs(ty),si)]=cnt.get((abs(tx),abs(ty),si),0)+1\n\ncntRes=max(zeroToCnt,max(cnt.values() if cnt else [0]))\nprint(cntRes+fixcnt)", "import math\n\ndef reduce_fraction(n,m):\n    k = math.gcd(n,m)\n    if (n > 0 and m < 0) or (n < 0 and m < 0):\n        n = -n\n        m = -m\n\n    if n == 0 and m < 0:\n        m *= -1\n        \n    return (n//k, m//k)\n\nn = int(input())\n\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nd = {}\n\ns = 0\n\nfor i in range(n):\n    if a[i] != 0:\n        x = reduce_fraction(b[i],a[i])\n\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n            \n    else:\n        if b[i] == 0:\n            s += 1\n            \nmaxs = 0\n\nfor i in d:\n    maxs = max(maxs,d[i])\n\nprint(maxs + s)\n", "n=int(input().strip())\nfrom fractions import gcd\na=list(map(int,input().strip().split(\" \")))\nb=list(map(int,input().strip().split(\" \")))\nd={}\nt=0\nfor i in range(0,len(a)):\n    if( b[i]==0 and a[i]!=0):\n        if(\"x\" not in d.keys()):\n            d[\"x\"]=1\n        else:\n            d[\"x\"]+=1\n    elif (a[i] == 0  and b[i]==0 ):\n        d[\"m\"]=0\n        t+=1\n    elif(a[i]==0 and b[i]!=0):\n        d[\"y\"]=0\n    else:\n        p=gcd(a[i],b[i])\n        x=a[i]//p\n        y=b[i]//p\n        if(y<0):\n            y=-y\n            x=-x\n        if ((x,y) not in d.keys()):\n            d[(x,y)] = 1\n        else:\n            d[(x,y)] += 1\nprint(max(d.values())+t)", "from collections import defaultdict\nfrom math import gcd\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nl=defaultdict(int)\nan=0\nfor i in range(n):\n    if a[i]==0 and b[i]==0:an+=1\n    elif a[i]!=0:\n        x,y=(-b[i]//gcd(-b[i],a[i]),a[i]//gcd(-b[i],a[i]))\n        if x<0:\n            x*=-1;y*=-1\n        if x==0:\n            y=0\n\n        l[(x,y)]+=1\n#print(l)\nprint((sorted(l.values())[-1] if len(l)>0 else 0)+an)\n", "import math\nimport collections\n\nn= int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nz = list(zip(a,b))\nzz = []\ndoublezeros = 0\nfor idx, t in enumerate(z):\n    if t[0] == 0 and t[1] != 0:\n        continue\n    if t[0] == 0 and t[1] == 0:\n        doublezeros += 1\n        continue\n    if t[0] != 0 and t[1] == 0:\n        zz.append((1,0))\n        continue\n    gcd = math.gcd(t[0], t[1])\n    f = 1 if t[0] > 0 else -1\n    zz.append((t[0] // gcd * f,    t[1] // gcd*f))\nd = collections.defaultdict(int)\nfor t in zz:\n    d[t] += 1\nr = max(d.values()) if len(d) > 0 else 0\nprint(r+doublezeros)\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ncands = {}\naux = 0\nzero = 0\n\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\n\nfor i in range(n):\n    if b[i] == 0 and a[i] == 0:\n        aux += 1\n    elif a[i] != 0:\n\n        if a[i] < 0:\n            a_semn = -1\n            a[i] = -a[i]\n        else:\n            a_semn = +1\n\n        if b[i] < 0:\n            b_semn = -1\n            b[i] = -b[i]\n        else:\n            b_semn = +1\n\n        if b[i] != 0:\n            cmmdc = gcd(a[i], b[i])\n            a_redus = a[i] // cmmdc\n            b_redus = b[i] // cmmdc\n        else:\n            a_redus = a[i]\n            b_redus = b[i]\n            zero += 1\n\n        c_semn = a_semn * b_semn\n\n        cands[(a_redus, b_redus, c_semn)] = cands.get((a_redus, b_redus, c_semn), 0) + 1\n\ncmax = 0\nfor i in cands:\n    if cands[i] > cmax:\n        cmax = cands[i]\n\nprint(aux + max(cmax, zero))\n", "# -*- coding: utf-8 -*-\n# @Time    : 2019/3/7 23:32\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : D. Zero Quantity Maximization.py\n\nimport math\nfrom collections import Counter\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    counter = Counter()\n    zero = 0\n    for i in range(n):\n        if a[i] == 0 and b[i] == 0:\n                zero += 1\n        elif a[i] != 0 and b[i] == 0:\n            counter[0] += 1\n        elif a[i] != 0 and b[i] != 0:\n            g = math.gcd(a[i], b[i])\n            x, y = a[i] // g, b[i] // g,\n            mask = (x * y) > 0\n            counter[(mask, abs(x), abs(y))] += 1\n\n    ret = 0\n    for k, v in list(counter.items()):\n        ret = max(ret, v)\n    print(ret + zero)\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "'''input\n3\n1 2 -1\n-6 -12 6\n'''\nimport sys\nfrom collections import defaultdict as dd\nfrom itertools import  permutations as pp\nfrom itertools import combinations as cc\nfrom collections import Counter as ccd\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nimport heapq\nmod=10**9+7\n\ndef ri(flag=0):\n\tif flag==0:\n\t\treturn [int(i) for i in sys.stdin.readline().split()]\n\telse:\n\t\treturn int(sys.stdin.readline())\n\n\nn=ri(1)\na=ri()\nb=ri()\n\nk=dd(int)\n\nfrom math import gcd\n\n# for i in range(n):\n# \tif a[i]!=0:\n# \t\ttemp=(b[i]*pow(a[i],mod-2,mod))%mod\n# \t\tk[temp]+=1\n# \tif a[i]==0 and b[i]==0:\n# \t\tk[0]+=1\n\n\nk[0,0,0]=0\nfor i in range(n):\n\tok=gcd(a[i],b[i])\n\tf=0\n\tif a[i]!=0 and b[i]!=0:\n\t\tone=a[i]//ok\n\t\ttwo=b[i]//ok\n\t\tf=f^(one<0)\n\t\tf=f^(two<0)\n\t\tone=abs(one)\n\t\ttwo=abs(two)\n\t\tif one!=0:\n\t\t\tk[one,two,f]+=1\n\tif a[i]!=0 and b[i]==0:\n\t\tpass\n\tif a[i]==0 and b[i]==0:\n\t\tk[0,0,0]+=1\n\nans=b.count(0)\n\n\nfor i in k:\n\tif i==(0,0,0):\n\t\tans=max(ans,k[i])\n\telse:\n\t\tans=max(ans,k[0,0,0]+k[i])\nprint(ans)", "from collections import defaultdict\n\n\ndef gcd(a, b):\n  while b:\n    a, b = b, a % b\n  return a\n\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nx = defaultdict(int)\np = 0\nfor i in range(n):\n    if a[i] == 0 and b[i] == 0:\n        p += 1\n    elif a[i] != 0:\n        if a[i] * b[i] < 0:\n            z = 0\n        else:\n            z = 1\n        v = gcd(abs(a[i]), abs(b[i]))\n        x[(z, abs(a[i]) // v, abs(b[i]) // v)] += 1\nif len(x) > 0:\n    print(max(x.values()) + p)\nelse:\n    print(p)\n", "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nn = int(input())\na = [int(item) for item in input().split()]\nb = [int(item) for item in input().split()]\n\npre = 0\nfor ai, bi in zip(a, b):\n    if (ai, bi) == (0, 0):\n        pre += 1\n\nfracs = [(-bi // gcd(ai, bi), ai // gcd(ai, bi)) if ai\n         != 0 else float('inf') for ai, bi in zip(a, b)]\n\ncnt = {item: 0 for item in fracs}\n\nfor x in fracs:\n    if x != float('inf'):\n        cnt[x] += 1\n\nprint(max(cnt.values()) + pre)\n", "from fractions import Fraction\n\nn = int(input())\na = list(map(int, input().strip().split()))\nb = list(map(int, input().strip().split()))\n\nextra_count = 0\ncounts_map = dict()\n# counts_map_2 = dict()\nfor ai, bi in zip(a, b):\n    # print(ai, bi)\n    if ai != 0:\n        fi = Fraction(-1 * bi, ai)\n        # print(fi)\n\n        num_i = fi.numerator\n        den_i = fi.denominator\n\n        # print(num_i, den_i)\n\n        curr_str = str(num_i) + '#' + str(den_i)\n\n        if curr_str in counts_map:\n            counts_map[curr_str] += 1\n        else:\n            counts_map[curr_str] = 1\n\n        # print('\\n')\n    else:\n        if bi == 0:\n            extra_count += 1\n        else:\n            pass\n\n\n# print(counts_map)\n\nmax = 0\nfor key in counts_map:\n    curr_count = counts_map[key]\n\n    if curr_count > max:\n        max = curr_count\n\nprint(max + extra_count)", "from decimal import *\ngetcontext().prec = 50\nn = int(input())\ninputs= list(map(int,input().split()))\ninputs1= list(map(int,input().split()))\ndic={\n}\ntemp=0\nfor i in range(len(inputs)):\n    if inputs[i]==0 and inputs1[i]!=0:\n        continue\n    elif inputs[i]==0 and inputs1[i]==0:\n        temp+=1\n        continue\n\n    c=-Decimal(inputs1[i])/Decimal(inputs[i])\n    if c in list(dic.keys()):\n        dic[c]+=1\n    else:\n        dic[c]=1\nif len(dic)>0:\n    print(max(dic.values())+temp)\nelse:\n    print(0+temp)\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = []\ndef gsd(p, q):\n    if q == 0:\n        return p\n    return gsd(q, p % q)\nans0 = 0\nfor i in range(n):\n    if a[i] == 0:\n        if b[i] == 0:\n            ans0 += 1\n        n -= 1\n        i -= 1\n        continue\n    g = gsd(abs(a[i]), abs(b[i]))\n    if a[i] * b[i] < 0:\n        h = 1\n    else:\n        h = 0\n    d.append([abs(b[i]) // g, abs(a[i]) // g, h])\nd.sort()\nbk = 0; k = 1\nfor i in range(1, n):\n    if d[i] == d[i - 1]:\n        k += 1\n    else:\n        bk = max(k, bk)\n        k = 1\nif n != 0:\n    bk = max(bk, k)\nprint(bk + ans0)\n#print(d)\n", "from fractions import Fraction\nimport collections\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nabzero = 0\nbzero = 0\nfor i in range(n):\n    if a[i] == 0:\n        if b[i] == 0:\n            abzero += 1\n    elif b[i] == 0:\n        bzero += 1\n    else:\n        c.append(Fraction(a[i], b[i]).limit_denominator(1000000000))\nc = collections.Counter(c)\ntry:\n    ma = c.most_common()[0][1]\nexcept IndexError:\n    ma = 0\nprint(max(ma+abzero, abzero+bzero))", "from fractions import gcd\nN=int(input())\nA=list(map(int,input().split()))\nB=list(map(int,input().split()))\nc={}\nq=0\nfor i in range(N):\n\tif A[i]!=0:\n\t\tif B[i]!=0:\n\t\t\tg=gcd(B[i],A[i])\n\t\t\tk=(B[i]//g,A[i]//g)\n\t\telse:k=(0,0)\n\t\tif k in c:c[k]+=1\n\t\telse:c[k]=1\n\telse:\n\t\tif B[i]==0:q+=1\nif c:print(max(c.values())+q)\nelse:print(q)", "from collections import Counter\nfrom fractions import Fraction\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nc = Counter()\n\nr = 0\nfor i in range(n):\n    if a[i] == 0 == b[i]:\n        r+=1\n        continue\n\n    if a[i]==0:\n        continue\n\n    c[Fraction(b[i], a[i])] += 1\n\n#print(c)\n\nr += c.most_common(1)[0][1] if len(c) > 0 else 0\n\nprint(r)"]