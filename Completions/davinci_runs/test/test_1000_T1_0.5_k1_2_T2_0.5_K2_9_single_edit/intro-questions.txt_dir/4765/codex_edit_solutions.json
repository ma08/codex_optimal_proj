["\n\nimport itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\n\nperk_combinations = [list(x) for x in perk_combinations]\n\nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    min_diff = min(min_diff, diff)\n\nprint(min_diff)\n", "\nimport itertools\n\nn = int(input())\nperk_ingredients = []\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\nperk_combinations = [list(x) for x in perk_combinations]\nmin_diff = float('inf')\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\nprint(min_diff)\n", "\n\nN = int(input())\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    if n == 1:\n        return ingredients[0][1] - ingredients[0][0]\n    else:\n        s = ingredients[0][0]\n        b = ingredients[0][1]\n        for i in range(1,n):\n            s *= ingredients[i][0]\n            b += ingredients[i][1]\n        return abs(s - b)\n    # s = 1\n    # b = 0\n    # for i in range(n):\n    #     s *= ingredients[i][0]\n    #     b += ingredients[i][1]\n    # return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdif = abs(s-b)\n\t# \t\tif dif < min_dif:\n\t# \t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness-bitterness))\n", "\n\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness - bitterness))\n", "\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n", "\nimport itertools\n\nn = int(input())  # number of ingredients\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]  # s: sweetness, b: bitterness\n    perk_ingredients.append((s, b))  # append as tuple\n\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))  # combinations of 1 ingredient\n\nfor i in range(2, n + 1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))  # combinations of 2,3,..n ingredients\n\nperk_combinations = [list(x) for x in perk_combinations]  # convert tuples to lists\n\nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1  # sweetness\n    b_sum = 0  # bitterness\n    for ing in combo:\n        s_sum *= ing[0]  # multiply sweetness\n        b_sum += ing[1]  # add bitterness\n    diff = abs(s_sum - b_sum)  # difference\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "import sys\n", "\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n#SOLUTION\n\n#SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n", "import sys\n\n\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "\nimport itertools\nn = int(input())\nperk_ingredients = []\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\nperk_combinations = [list(x) for x in perk_combinations]\nmin_diff = float('inf')\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\nprint(min_diff)\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]), abs(ceil(s/ingredients[11][0])-b+ingredients[11][1]), abs(floor(s/ingredients[11][0])-b+ingredients[11][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(\"{} {}\".format(minDiffIngredient[0], minDiffIngredient[1]))\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = map(int, input().split())\n    perk_ingredients.append((s,b))\n\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))  # gives all combinations of length 1\n\nfor i in range(2, n+1):  # gives all combinations of length 2 to n\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))  # extends the list\n\nperk_combinations = [list(x) for x in perk_combinations]  # converts to list of lists\n\nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1  # starts at 1 because we are multiplying\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]  # multiply the strength\n        b_sum += ing[1]  # add the boost\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "\n\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\n\n\n\n\n\nprint(abs(sourness-bitterness))\n", "import sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff=100000000):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0))\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1])) if n <= 10 else -1\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\tprint(meal)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\ts = meal[i][0]*meal[j][0]\n\t\t\tb = meal[i][1]+meal[j][1]\n\t\t\tdif = abs(s-b)\n\t\t\tif dif < min_dif:\n\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t\t\t\tdif = abs(s-b)\n\t\t\t\tif dif < min_dif:\n\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1]) / 2\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1]) / 2\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "N = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness-bitterness))\n", "\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, min_diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if min_diff < abs(curr_s - curr_b):\n        return min_diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, min_diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], min_diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "\n\n# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n", "\n\n\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:  # j\u756a\u76ee\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdif = abs(s-b)\n\t# \t\tif dif < min_dif:\n\t# \t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\nn = int(sys.stdin.readline())  # number of test cases\n\nsourness = []  # sourness of each ingredient\nbitterness = []  # bitterness of each ingredient\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\ts = meal[i][0]*meal[j][0]\n\t\t\tb = meal[i][1]+meal[j][1]\n\t\t\tdif = abs(s-b)\n\t\t\tif dif < min_dif:\n\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nfrom itertools import combinations\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n\nperk_combinations = list(combinations(perk_ingredients, 1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(combinations(perk_ingredients, i)))\n\nperk_combinations = [list(x) for x in perk_combinations]\n\nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\nimport itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n\nperk_combinations = list(itertools.combinations(perk_ingredients, 1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\n\nperk_combinations = [list(x) for x in perk_combinations]\n\nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\n\nN = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\n\n\n\nprint(abs(sourness-bitterness))\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])  \n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(minDiff)\n    \nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "import sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n \nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\n\t# print(meal)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdif = abs(s-b)\n\t# \t\tif dif < min_dif:\n\t# \t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\t# min_dif = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdif = abs(s-b)\n\t# \t\t\tif dif < min_dif:\n\t# \t\t\t\tmin_dif = dif\n\t# print(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(minDiff)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\n\nn = int(input())\nperk_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    perk_ingredients.append((s, b))\n\nperk_combinations = list(itertools.combinations(perk_ingredients, 2))\n\nfor i in range(3, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredients, i)))\nperk_combinations = [list(x) for x in perk_combinations]\nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 0\n    b_sum = 0\n    for ing in combo:\n        s_sum += ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum) + 1\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsour = []\nbitter = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sour.append(int(line[0]))\n    bitter.append(int(line[1]))\n\nmin_diff = 100000000\n\nfor i in range(2**n):\n    sour_result = 1\n    bitter_result = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour_result *= sour[j]\n            bitter_result += bitter[j]\n    min_diff = min(min_diff, abs(sour_result - bitter_result))\n\nprint(min_diff)\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    min_diff = abs(ingredients[0][0] - ingredients[0][1])\n    min_diff_ingredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i - 1][0])\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_ingredient = ingredients[i]\n    print(min_diff)\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness-bitterness))\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n    ingredients.sort()\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0]\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n    print(minDiff)\nif __name__ == '__main__':\n    main()\n", "import sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort(key=lambda x: x[0])\n\n    min_diff = abs(ingredients[0][0] - ingredients[0][1])\n    min_diff_ingredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_ingredient = ingredients[i]\n\n    print(min_diff)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom math import inf\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff <= abs(curr_s - curr_b):\n        return diff\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, diff),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, inf))\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\ts = meal[i][0]*meal[j][0]\n\t\t\tb = meal[i][1]+meal[j][1]\n\t\t\tdif = abs(s-b)\n\t\t\tif dif < min_dif:\n\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t\t\t\tdif = abs(s-b)\n\t\t\t\tif dif < min_dif:\n\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n"]