["\n\ndef main():\n    n = int(input())\n    a = sorted([int(i) for i in input().split()], reverse=True)\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nmain()\n", "\n\ndef main():\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n", "\n#Solution\n", "\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\nn = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n", "\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n", "\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob,sep=\" \")\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)),\n        pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n", "#!/usr/bin/env python3\n\nn = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces, turn):\n    if turn:\n        if n == 1:\n            return pieces[0], 0\n        elif n == 2:\n            return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n        else:\n            if pieces[0] > pieces[-1]:\n                a, b = play(n-1, pieces[1:], False)\n                return pieces[0] + b, a\n            else:\n                a, b = play(n-1, pieces[:-1], False)\n                return a, pieces[-1] + b\n    else: \n        if n == 1:\n            return 0, pieces[0]\n        elif n == 2:\n            return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n        else:\n            if pieces[0] > pieces[-1]:\n                a, b = play(n-1, pieces[1:], True)\n                return pieces[0] + b, a\n            else:\n                a, b = play(n-1, pieces[:-1], True)\n                return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('broken')\n", "\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "\nn = int(input())\npieces = [int(x) for x in input().split()] \n\ndef play(n, pieces): \n    if n == 1: \n        return pieces[0], 0 \n    elif n == 2: \n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1]) \n    else:\n        if pieces[0] > pieces[-1]: \n            a, b = play(n-1, pieces[1:]) \n            return pieces[0] + b, a \n        else: \n            a, b = play(n-1, pieces[:-1]) \n            return a, pieces[-1] + b \n\na, b = play(n, pieces) \nprint(a, b) \n", "\nimport sys\n\ndef main(pname):\n    # sys.stdin = open(pname + '.in', 'r')\n    # sys.stdout = open(pname + '.out', 'w')\n    #\n    # n = int(input())\n    # a = sorted(list(map(int, input().split())))\n    # a.reverse()\n    # alice = 0\n    # bob = 0\n    # for i in range(len(a)):\n    #     if i % 2 == 0:\n    #         alice += a[i]\n    #     else:\n    #         bob += a[i]\n    # print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n\n# Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces)-1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index] \n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index+2, right_index), max_sum_recursive(pieces, left_index+1, right_index-1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index+1, right_index-1), max_sum_recursive(pieces, left_index, right_index-2)))\n\nmain()\n", "\n#Solution\nn = int(raw_input())\na = [int(x) for x in raw_input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)),\n                   pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n", "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('broken')\n", "\nprint(\"hello world\")\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('test')\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:  # if i is even\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('broken')\n", "n = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n", "\n\ndef main():\n    s = input()\n    print(s[::2])\n\nmain()\n", "\n# Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = list(map(int, input().split()))\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum_recursive(pieces, 0, len(pieces) - 1))\n\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1) \n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally \n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2))) \n\nmain()\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    pieces = [int(x) for x in input().split(\" \")]\n    print(max_sum(pieces[1:]))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces\n    n = int(input())\n\n    # Read the values of the pieces\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces\n    for i in range(n):\n        # Check if it is Alice's turn\n        if i % 2 == 0:\n            # Choose the piece for Alice\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn\n        else:\n            # Choose the piece for Bob\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece\n    max_piece = 0\n\n    # Loop through all the pieces\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece\n    return max_piece\n\n# Call the main function\nmain()\n", "import sys\n\nn = int(input())\npieces = [int(x) for x in sys.stdin.readline().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n", "\nn = int(input())\npieces = [int(x) for x in input().split()]\n\n\ndef play(n: int, pieces: list) -> tuple:\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n - 1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n - 1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece and the index of the chosen piece.\n    max_piece = 0, max_piece_index = 0\n\n    # Loop through all the pieces.\n    for i in range(len(pieces)):\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if pieces[i] > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = pieces[i]\n            max_piece_index = i\n\n    # Return the maximum value of the chosen piece.\n    return max_piece_index\n\n# Call the main function.\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(1, n + 1):\n        # Check if it is Alice's turn.\n        if i % 2 == 1:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            while a[i] % 2 == 0:\n                a[i] /= 2\n                count += 1\n    print(count)\n\nmain()\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nmain()\nmain()\n", "\n\ndef main():\n    n, k, q = map(int, input().split())\n    a = [int(input()) for _ in range(q)]\n    ans = [0] * n\n    for ai in a:\n        ans[ai - 1] += 1\n    for an in ans:\n        if an - k >= 0:\n            print('No')\n        else:\n            print('Yes')\n\nmain()\n", "\n\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\nprint(suma, sumb)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    print(pieces)\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()][:n]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice-bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nmain()\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')  # file input\n    sys.stdout = open(pname + '.out', 'w')  # file output\n    # input\n\n    a = sorted(list(map(int, input().split())))\n    a.reverse()  # reverse\n\n    # output\n    print(alice, bob)\n\n    # logic\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main('broken')\n", "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]  # input()\u3067\u53d7\u3051\u53d6\u3063\u305f\u6587\u5b57\u5217\u3092\u7a7a\u767d\u3067\u533a\u5207\u3063\u3066int\u578b\u306b\u3057\u3066\u30ea\u30b9\u30c8\u306b\u3059\u308b\n    a.sort()\n    a.reverse()\n    alice = 0  # \u5404\u4eba\u306e\u5408\u8a08\u3092\u5165\u308c\u308b\u5909\u6570\u3092\u7528\u610f\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):  # noqa: E203\n        # Check if it is Alice's turn.\n        if i % 2 == 0:  # noqa: E203\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:  # noqa: E203\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\n#\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in raw_input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n", "\nprint('Hello world')\n", "\n\nimport math\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\n\nprint(Alice, Bob)\n", "#!/usr/bin/env python3\n\n#Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n"]