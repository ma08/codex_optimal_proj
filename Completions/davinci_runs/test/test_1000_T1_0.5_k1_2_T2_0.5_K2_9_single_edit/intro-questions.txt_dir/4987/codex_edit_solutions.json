["\n\nS, C, K = map(int, input().split()) # S: socks, C: capacity, K: tolerance\nsocks = list(map(int, input().split()))\n\nsocks.sort()\n\nmachines = 0 # number of machines\n\nwhile len(socks) > 0:\n\n    # append first sock\n    current_machine = []\n\n    # append socks that are within tolerance range\n    current_machine.append(socks.pop(0))\n    while len(current_machine) < C and len(socks) > 0:\n        if abs(current_machine[-1] - socks[0]) <= K:\n            current_machine.append(socks.pop(0))\n        else:\n\n    # machine is full, move to next machine\n            break\n    machines += 1\n\nprint(machines)\n", "\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()] #socks is the number of socks, capacity is the number of socks a machine can hold, and color_diff is the maximum difference between colors that can be in the same machine\n    colors = [int(x) for x in input().split()] # colors is the list of colors\n    colors.sort()\n    num_machines = 0 # the number of machines that will be needed\n    current_machine = [] # the current machine\n    for color in colors:\n        if not current_machine: #if the current machine is empty\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity: #if the current machine is not empty and the difference between the last color of the current machine and the current color is less than or equal to the maximum difference and the length of the current machine is less than the capacity\n            current_machine.append(color)\n        else: #if the current machine is not empty and the difference between the last color of the current machine and the current color is greater than the maximum difference or the length of the current machine is greater than the capacity\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ns, c, k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "\n# SOLUTION\n\nsocks, capacity, colorDiff = [int(x) for x in input().split()]\ncolors = [int(x) for x in input().split()]\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    for i in range(m):\n        x, y = [int(x) for x in input().split()]\n        if x == 0 and y == 0:\n            print(\"YES\")\n        elif x == 0 and y != 0:\n            print(\"NO\")\n        elif x == 1 and y == 1:\n            print(\"YES\")\n        elif x == 1 and y != 1:\n            print(\"NO\")\n        elif x == 2 and y == 2:\n            print(\"YES\")\n        elif x == 2 and y != 2:\n            print(\"NO\")\n        elif x == 3 and y == 3:\n            print(\"YES\")\n        elif x == 3 and y != 3:\n            print(\"NO\")\n        elif x == 4 and y == 4:\n            print(\"YES\")\n        elif x == 4 and y != 4:\n            print(\"NO\")\n        elif x == 5 and y == 5:\n            print(\"YES\")\n        elif x == 5 and y != 5:\n            print(\"NO\")\n        elif x == 6 and y == 6:\n            print(\"YES\")\n        elif x == 6 and y != 6:\n            print(\"NO\")\n        elif x == 7 and y == 7:\n            print(\"YES\")\n        elif x == 7 and y != 7:\n            print(\"NO\")\n        elif x == 8 and y == 8:\n            print(\"YES\")\n        elif x == 8 and y != 8:\n            print(\"NO\")\n        elif x == 9 and y == 9:\n            print(\"YES\")\n        elif x == 9 and y != 9:\n            print(\"NO\")\n        elif x == 10 and y == 10:\n            print(\"YES\")\n        elif x == 10 and y != 10:\n            print(\"NO\")\n        elif x == 11 and y == 11:\n            print(\"YES\")\n        elif x == 11 and y != 11:\n            print(\"NO\")\n        elif x == 12 and y == 12:\n            print(\"YES\")\n        elif x == 12 and y != 12:\n            print(\"NO\")\n        elif x == 13 and y == 13:\n            print(\"YES\")\n        elif x == 13 and y != 13:\n            print(\"NO\")\n        elif x == 14 and y == 14:\n            print(\"YES\")\n        elif x == 14 and y != 14:\n            print(\"NO\")\n        elif x == 15 and y == 15:\n            print(\"YES\")\n        elif x == 15 and y != 15:\n            print(\"NO\")\n        elif x == 16 and y == 16:\n            print(\"YES\")\n        elif x == 16 and y != 16:\n            print(\"NO\")\n        elif x == 17 and y == 17:\n            print(\"YES\")\n        elif x == 17 and y != 17:\n            print(\"NO\")\n        elif x == 18 and y == 18:\n            print(\"YES\")\n        elif x == 18 and y != 18:\n            print(\"NO\")\n        elif x == 19 and y == 19:\n            print(\"YES\")\n        elif x == 19 and y != 19:\n            print(\"NO\")\n        elif x == 20 and y == 20:\n            print(\"YES\")\n        elif x == 20 and y != 20:\n            print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nsocks, capacity, colorDiff = [int(x) for x in input().split()]\ncolors = [int(x) for x in input().split()]\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\n\ns, c, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\nprint(machines)\n", "\nimport sys\n\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in sys.stdin.readline().split()]\n    colors = [int(x) for x in sys.stdin.readline().split()]\n    colors.sort()\n    machines = 0\n    i = 0\n    while i < socks:\n        machines += 1\n        j = i + 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    socks, color_diff = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    machines = 0\n    i = 0\n    while i < socks:\n        machines += 1\n        j = i + 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\n# from sys import stdin\n#\n# S, C, K = map(int, stdin.readline().split())\n# D = list(map(int, stdin.readline().split()))\n#\n# D.sort()\n#\n# machine_count = 0\n#\n# for i in range(0, S, C):\n#     machine_count += 1\n#\n#     if K == 0:\n#         continue\n#\n#     for j in range(i, i + C - 1):\n#         if abs(D[j] - D[j + 1]) > K:\n#             machine_count += 1\n#             break\n#\n# print(machine_count)\n", "\ns, c, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\nprint(machines)\n", "\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    num_machines = 0\n    current_machine = []\n    for color in colors:\n        if not current_machine:\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity:\n            current_machine.append(color)\n        else:\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ns, c, k = [int(x) for x in raw_input().split()]\nd = [int(x) for x in raw_input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "\n\nfrom collections import deque\nfrom sys import stdin, stdout\n \nn, m, k = map(int, stdin.readline().split())\na = deque(map(int, stdin.readline().split()))\nb = deque(map(int, stdin.readline().split()))\n \nresult = 0\nwhile a and b:\n    if a[0] < b[0]:\n        a.popleft()\n    elif a[0] > b[0]:\n        b.popleft()\n    else:\n        if k == 0:\n            b.popleft()\n        else:\n            a.popleft()\n            b.popleft()\n            k -= 1\n \n        result += 1\n \nstdout.write(str(result))\n", "\n#\n# import sys\n#\n# def main():\n#     S, C, K = [int(i) for i in sys.stdin.readline().split()]\n#     D = [int(i) for i in sys.stdin.readline().split()]\n#     D.sort()\n#     i = 0\n#     count = 0\n#     while i < S:\n#         count += 1\n#         j = i + 1\n#         while j < S and D[j] - D[i] <= K:\n#             j += 1\n#         i = j\n#     print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n \nfrom sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\n\nD.sort()\n\nmachine_count = 0\n\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\nfrom sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\n\nD.sort()\n\nmachine_count = 0\n\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\nS, C, K = map(int, input().split())\nsocks = list(map(int, input().split()))\n# print(socks)\nsocks.sort()\n\nmachines = 0\n\nwhile len(socks) > 0:\n    current_machine = []\n    current_machine.append(socks.pop(0))\n    while len(current_machine) < C and len(socks) > 0:\n        if abs(current_machine[-1] - socks[0]) <= K:\n            current_machine.append(socks.pop(0))\n        else:\n            break\n    machines += 1\n\nprint(machines)\n", "\nimport sys\n\ndef main():\n    S, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\nimport os\ns, c, k = [int(x) for x in raw_input().split()]\nd = [int(x) for x in raw_input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine \" + str(numMachines))\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nS, C, K = map(int, input().split())\nsocks = list(map(int, input().split()))\nprint(socks)\nsocks.sort()\n\nmachines = 0\n\nwhile len(socks) > 0:\n    current_machine = []\n    current_machine.append(socks.pop(0))\n    while len(current_machine) < C and len(socks) > 0:\n        if abs(current_machine[-1] - socks[0]) <= K:\n            current_machine.append(socks.pop(0))\n        else:\n            break\n    machines += 1\n\nprint(machines)\n", "import sys\n\ndef main():\n    S, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\n\nD.sort()\nmachine_count = 0\n\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]  # noqa\n    colors = [int(x) for x in input().split()]  # noqa\n    colors.sort()\n    num_machines = 0\n    current_machine = []\n    for color in colors:\n        if not current_machine:\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff \\\n                and len(current_machine) < capacity:\n            current_machine.append(color)\n        else:\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nN, C, K = map(int, input().split())\nsocks = list(map(int, input().split()))\n# print(socks)\nsocks.sort()\n\nmachines = 0\n\nwhile len(socks) > 0:\n    current_machine = []\n    current_machine.append(socks.pop(0))\n    while len(current_machine) < C and len(socks) > 0:\n        if abs(current_machine[-1] - socks[0]) <= K:\n            current_machine.append(socks.pop(0))\n        else:\n            break\n    machines += 1\n\nprint(machines)\n", "def main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    machines = 0\n    i = 0\n    while i < socks:\n        machines += 1\n        j = i + 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n\ndef main():\n    S, C, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\n\nD.sort()\n\nmachine_count = 0\n\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\n\ndef calculate_min_stops(distance, tank_size, gas_stations):\n    gas_stations.append(distance)\n    gas_stations = [0] + gas_stations\n    current_position = 0\n    stops = 0\n    while current_position < len(gas_stations) - 1:\n        last_position = current_position\n        while (current_position < len(gas_stations) - 1 and\n               gas_stations[current_position + 1] - gas_stations[last_position] <= tank_size):\n            current_position += 1\n        if current_position == last_position:\n            return -1\n        if current_position < len(gas_stations) - 1:\n            stops += 1\n    return stops\n\n\nif __name__ == '__main__':\n    distance, tank_size, num_stations = map(int, input().split())\n    gas_stations = list(map(int, input().split()))\n\n    print(calculate_min_stops(distance, tank_size, gas_stations))\n", "\nsocks, capacity, colorDiff = [int(x) for x in input().split()]\ncolors = [int(x) for x in input().split()]\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "\n\n# # SOLUTION\n\n# socks, capacity, colorDiff = [int(x) for x in input().split()]\n# colors = [int(x) for x in input().split()]\n\n# colors.sort()\n\n# count = 0\n\n# for i in range(socks):\n#     if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n#         count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    machines = 0\n    i = 0\n    while i < socks:\n        machines += 1\n        j = i + 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ns, c, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n \nprint(machines)\n", "\n\n# Solution\n\nsocks, capacity, colorDiff = [int(x) for x in input().split()]\ncolors = [int(x) for x in input().split()]\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "\n\nfrom collections import Counter\n\ndef main():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    cnt = Counter(A)\n    #print(cnt)\n    if cnt[0] > 0:\n        print(0)\n        return\n\n    ans = 1\n    for k, v in cnt.items():\n        if k > 0:\n            ans *= (v + 1)\n\n    print(ans % (10**9 + 7))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/python3\n\nS, C, K = map(int, input().split())\nsocks = list(map(int, input().split()))\n# print(socks)\nsocks.sort()\n\nmachines = 0\n\nwhile len(socks) > 0:\n    current_machine = []\n    current_machine.append(socks.pop(0))\n    while len(current_machine) < C and len(socks) > 0:\n        if abs(current_machine[-1] - socks[0]) <= K:\n            current_machine.append(socks.pop(0))\n        else:\n            break\n    machines += 1\n\nprint(machines)\n", "\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]    \n    colors = [int(x) for x in input().split()]\n    colors.sort()    \n    num_machines = 0\n    \n    current_machine = []\n    for color in colors:\n        if not current_machine:\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity:\n            current_machine.append(color)\n        else:\n            current_machine = [color]            \n            num_machines += 1\n    \n    print(num_machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    S, C, K = [int(i) for i in sys.stdin.readline().split()]\n    Socks = [int(i) for i in sys.stdin.readline().split()]\n    Socks.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and Socks[j] - Socks[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    S, C, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        socks, capacity, color_diff = [int(x) for x in input().split()]\n        colors = [int(x) for x in input().split()]\n        colors.sort()\n        num_machines = 0\n        current_machine = []\n        for color in colors:\n            if not current_machine:\n                current_machine.append(color)\n                num_machines += 1\n            elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity:\n                current_machine.append(color)\n            else:\n                current_machine = [color]\n                num_machines += 1\n        print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ns, c, k = [int(x) for x in raw_input().split()]\nd = [int(x) for x in raw_input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines)\n", "\n\ns, c, k = map(int, input().split())\nd = list(map(int, input().split()))\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\nprint(machines)\n", "\nS, C, K = map(int, input().split())\nsocks = list(map(int, input().split()))  # socks = [int(i) for i in input().split()]\n# print(socks)\nsocks.sort()\nmachines = 0\n\nwhile len(socks) > 0:\n    current_machine = []\n    current_machine.append(socks.pop(0))\n    while len(current_machine) < C and len(socks) > 0:\n        if abs(current_machine[-1] - socks[0]) <= K:\n            current_machine.append(socks.pop(0))\n        else:\n            break\n    machines += 1\nprint(machines)\n", "\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    num_machines = 0\n    current_machine = []\n    for color in colors:\n        if not current_machine:\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity: \n            current_machine.append(color)\n        else:\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i**2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n", "def main():\n    n = int(input())\n    for i in range(n):\n        for j in range(n):\n            print(1, end=\"\")\n        print()\n\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n\ndef main():\n    N, M = [int(i) for i in sys.stdin.readline().split()]\n    A = [int(i) for i in sys.stdin.readline().split()]\n    B = [int(i) for i in sys.stdin.readline().split()]\n    C = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    E = [int(i) for i in sys.stdin.readline().split()]\n    F = [int(i) for i in sys.stdin.readline().split()]\n\nif __name__ == '__main__':\n    main()\n"]