["#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input(\"\"))\n    print(hailstone_sum(n)) \n\nif __name__ == '__main__':\n    main()\n", "\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\n\nn = int(input())\nprint(hailstone(n))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n / 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\n\nprint(hailstone(int(input())))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\n\nn = int(input())\nprint(hailstone(n))\n", "\n\n# Define recursively defined hailstone sequence generator.\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3 * n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input('Enter a number: '))\n\nprint(hailstone_sum(n))\n", "\n\n# The answer is:\n\"\"\"\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone((3 * n) + 1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n\"\"\"\n", "\ns = \"hello\"\nprint(s.upper())\n", "\n\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n\t# Base case\n\tif n == 1:\n\t\treturn 1\n\t# Recursive case\n\telif n % 2 == 0:\n\t\treturn n + hailstone_sum(n // 2)\n\telse:\n\t\treturn n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "#!/usr/bin/env python3\n\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "#!/usr/bin/env python3\n\n\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n / 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\n#The answer is: \n\"\"\"\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n\"\"\"\n", "\n\n#The answer is:\n\"\"\"\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n\"\"\"\n", "\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3 * n + 1)\n\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n#\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n/2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n/2)\n    return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case for even numbers\n    elif n % 2 == 0:\n    # Recursive case for odd numbers\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n / 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\n\nn = int(input())\nprint(hailstone(n))\n", "import sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n/2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n/2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The answer is:\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n // 2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n//2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:  # even\n        return n + hailstone(n/2)\n    else:  # odd\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n // 2)\n    else:\n        return n + h((3 * n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Recursive function for summing up hailstone sequence \ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n/2)\n    else:\n        return [n] + hailstone(3*n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return 0\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(hailstone(n))\n", "\n\n#!/usr/bin/env python\n\ndef hailstone(n):\n\tif n == 1:\n\t\treturn 1\n\tif n % 2 == 0:\n\t\treturn n + hailstone(n // 2)\n\telse:\n\t\treturn n + hailstone((3 * n) + 1)\n\ndef main():\n\tn = int(input())\n\tprint(hailstone(n))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n# The answer is:\n\n\"\"\"\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n\"\"\"\n", "\n#!/usr/bin/env python3\n\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone(n):\n    if n == 0:\n        return 1\n    elif n % 3 == 0:\n        return n + hailstone(n/3)\n    else:\n        return n + hailstone(2*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\n# The answer is:\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\n\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "#!/usr/bin/python\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n/2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n/2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n\n    main()\n", "\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\n\nprint(hailstone(n))\n", "\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(int(n/2))\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(int(n/2))\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(int(n/2))\n    else:\n        return n + h(int((3*n) + 1))\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n"]