2022-04-16 13:08:43.258550 num operations 1
2022-04-16 13:08:43.258567 size on input set 1
2022-04-16 13:09:08.250170 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(n):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(m):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    m, n = map(int, input().split()) # read the first line\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split() # read the second line\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split() # read the third line\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline()\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split(\" \")\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split(\" \")\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nfrom collections import *\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())()\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()()\n        if len(a) != len(b):\n            print(\"no\"())\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\"())\n                    break\n                else:\n                    print(\"no\"())\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\nm, n = map(int, input().split())\nd = defaultdict(set)\nfor _ in range(m):\n    a, b = input().split()\n    d[a].add(b)\nfor _ in range(n):\n    a, b = input().split()\n    if len(a) != len(b):\n        print(\"no\")\n        continue\n    a = list(a)\n    b = list(b)\n    q = deque()\n    visited = set()\n    q.append((0, a[0], b[0]))\n    while q:\n        i, c1, c2 = q.popleft()\n        if i == len(a) - 1:\n            if c1 == c2:\n                print(\"yes\")\n                break\n            else:\n                print(\"no\")\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()[::-1]\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nm, n = map(int, input().split())\nd = defaultdict(set)\nfor _ in range(m):\n    a, b = input().split()\n    d[a].add(b)\nfor _ in range(n):\n    a, b = input().split()\n    if len(a) != len(b):\n        print(\"no\")\n        continue\n    a = list(a)\n    b = list(b)\n    q = deque()\n    visited = set()\n    q.append((0, a[0], b[0]))\n    while q:\n        i, c1, c2 = q.popleft()\n        if i == len(a) - 1:\n            if c1 == c2:\n                print(\"yes\")\n                break\n            else:\n                print(\"no\")\n                break\n        if (i, c1, c2) in visited:\n            continue\n        visited.add((i, c1, c2))\n        if c1 == c2:\n            q.append((i + 1, a[i + 1], b[i + 1]))\n        else:\n            if c1 in d:\n                for c in d[c1]:\n                    q.append((i, c, c2))\n            if c2 in d:\n                for c in d[c2]:\n                    q.append((i, c1, c))\n"
    }
  ],
  "created": 1650114523,
  "object": "edit"
}
2022-04-16 13:09:08.250552 fix syntax errors 9 ['\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(n):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(m):\n        a, b = input().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    m, n = map(int, input().split()) # read the first line\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split() # read the second line\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split() # read the third line\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline()\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split(" ")\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split(" ")\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\n\nimport sys\nfrom collections import *\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())()\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()()\n        if len(a) != len(b):\n            print("no"())\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes"())\n                    break\n                else:\n                    print("no"())\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\n\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\nm, n = map(int, input().split())\nd = defaultdict(set)\nfor _ in range(m):\n    a, b = input().split()\n    d[a].add(b)\nfor _ in range(n):\n    a, b = input().split()\n    if len(a) != len(b):\n        print("no")\n        continue\n    a = list(a)\n    b = list(b)\n    q = deque()\n    visited = set()\n    q.append((0, a[0], b[0]))\n    while q:\n        i, c1, c2 = q.popleft()\n        if i == len(a) - 1:\n            if c1 == c2:\n                print("yes")\n                break\n            else:\n                print("no")\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\n\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()[::-1]\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nm, n = map(int, input().split())\nd = defaultdict(set)\nfor _ in range(m):\n    a, b = input().split()\n    d[a].add(b)\nfor _ in range(n):\n    a, b = input().split()\n    if len(a) != len(b):\n        print("no")\n        continue\n    a = list(a)\n    b = list(b)\n    q = deque()\n    visited = set()\n    q.append((0, a[0], b[0]))\n    while q:\n        i, c1, c2 = q.popleft()\n        if i == len(a) - 1:\n            if c1 == c2:\n                print("yes")\n                break\n            else:\n                print("no")\n                break\n        if (i, c1, c2) in visited:\n            continue\n        visited.add((i, c1, c2))\n        if c1 == c2:\n            q.append((i + 1, a[i + 1], b[i + 1]))\n        else:\n            if c1 in d:\n                for c in d[c1]:\n                    q.append((i, c, c2))\n            if c2 in d:\n                for c in d[c2]:\n                    q.append((i, c1, c))\n']
2022-04-16 13:09:08.250707 size on output set 8
2022-04-16 13:09:08.250724 num operations 1
2022-04-16 13:09:08.250730 size on input set 1
2022-04-16 13:09:22.455265 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# import sys\n#\n# def main():\n#     m, n = map(int, sys.stdin.readline().split())\n#     codes = {}\n#     for i in range(m):\n#         line = sys.stdin.readline().split()\n#         codes[line[0]] = line[1]\n#     for i in range(n):\n#         line = sys.stdin.readline().split()\n#         if translate(line[0], codes) == translate(line[1], codes):\n#             print(\"yes\")\n#         else:\n#             print(\"no\")\n#\n# def translate(word, codes):\n#     res = \"\"\n#     for char in word:\n#         if char in codes:\n#             res += codes[char]\n#         else:\n#             res += char\n#     return res\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n            \ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for _ in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for _ in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, input().split())\n    codes = {}\n    for i in range(m):\n        line = input().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = input().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # read the first line\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # read the code lines\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split() # read the word pairs\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, input().split())\n    codes = {}\n    for i in range(m):\n        line = input().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = input().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n#\n# import sys\n#\n# def main():\n#     m, n = map(int, sys.stdin.readline().split())\n#     codes = {}\n#     for i in range(m):\n#         line = sys.stdin.readline().split()\n#         codes[line[0]] = line[1]\n#     for i in range(n):\n#         line = sys.stdin.readline().split()\n#         if translate(line[0], codes) == translate(line[1], codes):\n#             print(\"yes\")\n#         else:\n#             print(\"no\")\n#\n# def translate(word, codes):\n#     res = \"\"\n#     for char in word:\n#         if char in codes:\n#             res += codes[char]\n#         else:\n#             res += char\n#     return res\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().strip().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().strip().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650114548,
  "object": "edit"
}
2022-04-16 13:09:22.455573 fix syntax errors 9 ['\n#\n# import sys\n#\n# def main():\n#     m, n = map(int, sys.stdin.readline().split())\n#     codes = {}\n#     for i in range(m):\n#         line = sys.stdin.readline().split()\n#         codes[line[0]] = line[1]\n#     for i in range(n):\n#         line = sys.stdin.readline().split()\n#         if translate(line[0], codes) == translate(line[1], codes):\n#             print("yes")\n#         else:\n#             print("no")\n#\n# def translate(word, codes):\n#     res = ""\n#     for char in word:\n#         if char in codes:\n#             res += codes[char]\n#         else:\n#             res += char\n#     return res\n#\n# if __name__ == "__main__":\n#     main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n            \ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for _ in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for _ in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, input().split())\n    codes = {}\n    for i in range(m):\n        line = input().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = input().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # read the first line\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # read the code lines\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split() # read the word pairs\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, input().split())\n    codes = {}\n    for i in range(m):\n        line = input().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = input().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\n#\n# import sys\n#\n# def main():\n#     m, n = map(int, sys.stdin.readline().split())\n#     codes = {}\n#     for i in range(m):\n#         line = sys.stdin.readline().split()\n#         codes[line[0]] = line[1]\n#     for i in range(n):\n#         line = sys.stdin.readline().split()\n#         if translate(line[0], codes) == translate(line[1], codes):\n#             print("yes")\n#         else:\n#             print("no")\n#\n# def translate(word, codes):\n#     res = ""\n#     for char in word:\n#         if char in codes:\n#             res += codes[char]\n#         else:\n#             res += char\n#     return res\n#\n# if __name__ == "__main__":\n#     main()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().strip().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().strip().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 13:09:22.455695 size on output set 7
2022-04-16 13:09:22.455708 num operations 1
2022-04-16 13:09:22.455712 size on input set 1
2022-04-16 13:09:36.208125 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline\n    m, n = map(int, inp().split())\n    d = dict()\n    for _ in range(m):\n        a, b = inp().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = inp().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split('\\n')\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())  # m is num of rules, n is num of test cases\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):  # if length of a and b are not equal, print no\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):  # check if a and b are equal after applying rules\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, input().split())  # m: number of patterns, n: number of words\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b  # dictionary of patterns\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n#\n# import sys\n#\n# def main():\n#     input = sys.stdin.readline\n#     m, n = map(int, input().split())\n#     d = dict()\n#     for _ in range(m):\n#         a, b = input().split()\n#         d[a] = b\n#     for _ in range(n):\n#         a, b = input().split()\n#         if len(a) != len(b):\n#             print('no')\n#             continue\n#         flag = True\n#         for i in range(len(a)):\n#             if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n#                 flag = False\n#                 break\n#         if flag:\n#             print('yes')\n#         else:\n#             print('no')\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    }
  ],
  "created": 1650114562,
  "object": "edit"
}
2022-04-16 13:09:36.208369 fix syntax errors 9 ['# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    inp = sys.stdin.readline\n    m, n = map(int, inp().split())\n    d = dict()\n    for _ in range(m):\n        a, b = inp().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = inp().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split(\'\\n\')\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())  # m is num of rules, n is num of test cases\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):  # if length of a and b are not equal, print no\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):  # check if a and b are equal after applying rules\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, input().split())  # m: number of patterns, n: number of words\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b  # dictionary of patterns\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', '\n#\n# import sys\n#\n# def main():\n#     input = sys.stdin.readline\n#     m, n = map(int, input().split())\n#     d = dict()\n#     for _ in range(m):\n#         a, b = input().split()\n#         d[a] = b\n#     for _ in range(n):\n#         a, b = input().split()\n#         if len(a) != len(b):\n#             print(\'no\')\n#             continue\n#         flag = True\n#         for i in range(len(a)):\n#             if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n#                 flag = False\n#                 break\n#         if flag:\n#             print(\'yes\')\n#         else:\n#             print(\'no\')\n#\n# if __name__ == "__main__":\n#     main()\n']
2022-04-16 13:09:36.208520 size on output set 8
2022-04-16 13:09:36.208534 num operations 1
2022-04-16 13:09:36.208539 size on input set 1
2022-04-16 13:09:49.849143 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    m, n = [int(x) for x in raw_input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = raw_input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = raw_input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n    # m, n = [int(x) for x in input().split()]\n    # translations = {}\n    # for i in range(m):\n    #     a, b = input().split()\n    #     translations[a] = b\n    # for i in range(n):\n    #     a, b = input().split()\n    #     match = True\n    #     if len(a) != len(b):\n    #         match = False\n    #     else:\n    #         for j in range(len(a)):\n    #             if a[j] not in translations and a[j] != b[j]:\n    #                 match = False\n    #                 break\n    #             elif a[j] in translations and translations[a[j]] != b[j]:\n    #                 match = False\n    #                 break\n    #     if match:\n    #         print(\"yes\")\n    #     else:\n    #         print(\"no\")\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = map(str, input().split())\n        translations[b] = a\n    for i in range(n):\n        a, b = map(str, input().split())\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if b[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif b[j] in translations and translations[b[j]] != a[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations[\" \"] = \" \"\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations[a[j]] and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j] and a[j] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split(' ')\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split(' ')\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650114576,
  "object": "edit"
}
2022-04-16 13:09:49.849422 fix syntax errors 9 ['\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    m, n = [int(x) for x in raw_input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = raw_input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = raw_input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\n    # m, n = [int(x) for x in input().split()]\n    # translations = {}\n    # for i in range(m):\n    #     a, b = input().split()\n    #     translations[a] = b\n    # for i in range(n):\n    #     a, b = input().split()\n    #     match = True\n    #     if len(a) != len(b):\n    #         match = False\n    #     else:\n    #         for j in range(len(a)):\n    #             if a[j] not in translations and a[j] != b[j]:\n    #                 match = False\n    #                 break\n    #             elif a[j] in translations and translations[a[j]] != b[j]:\n    #                 match = False\n    #                 break\n    #     if match:\n    #         print("yes")\n    #     else:\n    #         print("no")\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = map(str, input().split())\n        translations[b] = a\n    for i in range(n):\n        a, b = map(str, input().split())\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if b[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif b[j] in translations and translations[b[j]] != a[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations[" "] = " "\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations[a[j]] and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j] and a[j] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split(\' \')\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split(\' \')\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == \'__main__\':\n    main()\n', "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", '\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 13:09:49.849571 size on output set 7
2022-04-16 13:09:49.849587 num operations 1
2022-04-16 13:09:49.849592 size on input set 1
2022-04-16 13:09:59.294855 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 1,
      "text": "\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 2,
      "text": "\n#\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 3,
      "text": "\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('No')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('No')\n                break\n        elif a != b:\n            print('No')\n            break\n    else:\n        print('Yes')\n"
    },
    {
      "index": 4,
      "text": "\n\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = set()\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                continue\n        elif a != b:\n            print('no')\n            continue\n    else:\n        print('yes')\n"
    },
    {
      "index": 5,
      "text": "\n#\n#\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 6,
      "text": "\n\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 7,
      "text": "\n\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = map(int, input().split())\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict and b not in trans_dict[a]:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 8,
      "text": "\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    }
  ],
  "created": 1650114589,
  "object": "edit"
}
2022-04-16 13:09:59.295130 fix syntax errors 9 ["\n#\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n#\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('No')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('No')\n                break\n        elif a != b:\n            print('No')\n            break\n    else:\n        print('Yes')\n", "\n\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = set()\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                continue\n        elif a != b:\n            print('no')\n            continue\n    else:\n        print('yes')\n", "\n#\n#\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = map(int, input().split())\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict and b not in trans_dict[a]:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n# Translation\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"]
2022-04-16 13:09:59.295266 size on output set 7
2022-04-16 13:09:59.295278 num operations 1
2022-04-16 13:09:59.295396 size on input set 1
2022-04-16 13:10:15.273588 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = set(b)\n        else:\n            d[a].add(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    continue\n            else:\n                print(\"no\")\n                continue\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = set(b)\n        else:\n            d[a].add(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for j in range(len(a)):\n            if a[j] in d:\n                if b[j] not in d[a[j]]:\n                    print('no')\n                    break;\n            else:\n                print('no')\n                break;\n        else:\n            print('yes')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\n    sys.stdin = open(\"file.in\", \"r\")\n    sys.stdout = open(\"file.out\", \"w\")\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split(\" \")\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split(\" \")\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\n# import sys\n\n# def main():\n#     m, n = map(int, sys.stdin.readline().split())\n#     d = {}\n#     for i in range(m):\n#         a, b = sys.stdin.readline().split()\n#         if a not in d:\n#             d[a] = [b]\n#         else:\n#             d[a].append(b)\n#     for i in range(n):\n#         a, b = sys.stdin.readline().split()\n#         if len(a) != len(b):\n#             print(\"no\")\n#             continue\n#         a = list(a)\n#         b = list(b)\n#         for i in range(len(a)):\n#             if a[i] in d:\n#                 if b[i] in d[a[i]]:\n#                     continue\n#                 else:\n#                     print(\"no\")\n#                     break\n#             else:\n#                 print(\"no\")\n#                 break\n#         else:\n#             print(\"yes\")\n\n# main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a) - 1):\n            if a[i:i+2] in d:\n                if b[i:i+2] in d[a[i:i+2]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        c, d = sys.stdin.readline().split()\n        if len(c) != len(d):\n            print(\"no\")\n            continue\n        c = list(c)\n        d = list(d)\n        for i in range(len(c)):\n            if c[i] in d:\n                if d[i] in d[c[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1650114599,
  "object": "edit"
}
2022-04-16 13:10:15.273841 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = set(b)\n        else:\n            d[a].add(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    continue\n            else:\n                print("no")\n                continue\n        else:\n            print("yes")\n\nmain()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = set(b)\n        else:\n            d[a].add(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for j in range(len(a)):\n            if a[j] in d:\n                if b[j] not in d[a[j]]:\n                    print(\'no\')\n                    break;\n            else:\n                print(\'no\')\n                break;\n        else:\n            print(\'yes\')\n\nmain()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', 'import sys\n\n    sys.stdin = open("file.in", "r")\n    sys.stdout = open("file.out", "w")\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split(" ")\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split(" ")\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\n\n# import sys\n\n# def main():\n#     m, n = map(int, sys.stdin.readline().split())\n#     d = {}\n#     for i in range(m):\n#         a, b = sys.stdin.readline().split()\n#         if a not in d:\n#             d[a] = [b]\n#         else:\n#             d[a].append(b)\n#     for i in range(n):\n#         a, b = sys.stdin.readline().split()\n#         if len(a) != len(b):\n#             print("no")\n#             continue\n#         a = list(a)\n#         b = list(b)\n#         for i in range(len(a)):\n#             if a[i] in d:\n#                 if b[i] in d[a[i]]:\n#                     continue\n#                 else:\n#                     print("no")\n#                     break\n#             else:\n#                 print("no")\n#                 break\n#         else:\n#             print("yes")\n\n# main()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a) - 1):\n            if a[i:i+2] in d:\n                if b[i:i+2] in d[a[i:i+2]]:\n                    continue\n                else:\n                    print("no")\n                    break\n        else:\n            print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        print("yes")\n\nmain()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        c, d = sys.stdin.readline().split()\n        if len(c) != len(d):\n            print("no")\n            continue\n        c = list(c)\n        d = list(d)\n        for i in range(len(c)):\n            if c[i] in d:\n                if d[i] in d[c[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n']
2022-04-16 13:10:15.274011 size on output set 8
2022-04-16 13:10:15.274024 num operations 1
2022-04-16 13:10:15.274030 size on input set 1
2022-04-16 13:10:27.894651 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2]\n        translations[lines[i][2]] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] == word2[j]:\n                    continue\n                else:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            continue\n                    else:\n                        print(\"no\")\n                        continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].rstrip()\n        translations[lines[i][2].rstrip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1].rstrip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\\n\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\\n\")\n                            break\n                    else:\n                        print(\"no\\n\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\\n\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2]\n        translations[lines[i][2]] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i].split()[0]] = lines[i].split()[1]\n        translations[lines[i].split()[1]] = lines[i].split()[0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])  # number of translations\n    n = int(lines[0].split()[1])  # number of words\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2]  # first character\n        translations[lines[i][2]] = lines[i][0]  # second character\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations and translations[word1[j]] == word2[j]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j].strip():\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].rstrip('\\n')\n        translations[lines[i][2].rstrip('\\n')] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1].rstrip('\\n')\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1650114615,
  "object": "edit"
}
2022-04-16 13:10:27.895070 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2]\n        translations[lines[i][2]] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] == word2[j]:\n                    continue\n                else:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            continue\n                    else:\n                        print("no")\n                        continue\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].rstrip()\n        translations[lines[i][2].rstrip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1].rstrip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no\\n")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no\\n")\n                            break\n                    else:\n                        print("no\\n")\n                        break\n                else:\n                    continue\n            else:\n                print("yes\\n")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2]\n        translations[lines[i][2]] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i].split()[0]] = lines[i].split()[1]\n        translations[lines[i].split()[1]] = lines[i].split()[0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])  # number of translations\n    n = int(lines[0].split()[1])  # number of words\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2]  # first character\n        translations[lines[i][2]] = lines[i][0]  # second character\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations and translations[word1[j]] == word2[j]:\n                        continue\n                    else:\n                        print("no")\n                        break\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j].strip():\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].rstrip(\'\\n\')\n        translations[lines[i][2].rstrip(\'\\n\')] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1].rstrip(\'\\n\')\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n']
2022-04-16 13:10:27.895188 size on output set 9
2022-04-16 13:10:27.895199 num operations 1
2022-04-16 13:10:27.895204 size on input set 1
2022-04-16 13:10:37.316914 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()[:2]\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()[:2]\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = input().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for j in range(len(a)):\n            if a[j] not in lookup or lookup[a[j]] != b[j]:\n                print(\"no\")\n        else:\n            print(\"yes\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\nif __name__ == \"__main__\":\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for i in range(m):\n        c, d = sys.stdin.readline().split()\n        if len(c) != len(d):\n            print(\"no\")\n            continue\n        for j in range(len(c)):\n            if c[j] not in lookup or lookup[c[j]] != d[j]:\n                print(\"no\")\n                break\n        print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1650114627,
  "object": "edit"
}
2022-04-16 13:10:37.317151 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', 'import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()[:2]\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()[:2]\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = input().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = input().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', 'import sys\n\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for j in range(len(a)):\n            if a[j] not in lookup or lookup[a[j]] != b[j]:\n                print("no")\n        else:\n            print("yes")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', 'import sys\n\nif __name__ == "__main__":\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', 'import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for i in range(m):\n        c, d = sys.stdin.readline().split()\n        if len(c) != len(d):\n            print("no")\n            continue\n        for j in range(len(c)):\n            if c[j] not in lookup or lookup[c[j]] != d[j]:\n                print("no")\n                break\n        print("yes")\n\nmain()\n']
2022-04-16 13:10:37.317282 size on output set 9
