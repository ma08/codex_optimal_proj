["\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] + heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    print(get_median(n, heap_low, heap_high))\n    for i in range(n):\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n", "\n", "import heapq\n\ndef get_median(heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] + -heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n", "import heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n", "\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\nfor i in range(N):\n    X_copy = X[:i] + X[i+1:]\n    print(median(X_copy), end=' ')\n", "\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) // 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    # 1\u56de\u76ee\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    # 2\u56de\u76ee\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n    # 3\u56de\u76ee\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] + heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n", "\nN = int(input())\nX = list(map(int, input().split()))\nX.sort()\n\nfor i in range(N):\n    print(X[N//2])\n", "\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(X):\n    X.sort()\n    return X[len(X)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n", "\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(lst):\n    lst.sort()\n    return lst[len(lst)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n", "\nimport heapq\n\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nN = int(input())\n\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n", "\nN = int(input())\nX = list(map(int, input().split()))\nans = []\nfor i in range(1, N):\n    left = X[:i]\n    right = X[i:]\n    ans.append(sum(left) / len(left) + sum(right) / len(right))\nprint(min(ans))\n", "\nN = int(input())\nX = list(map(int, input().split()))\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))\n", "import heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (-heap_low[0] + heap_high[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(i, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(i, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n", "import heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) // 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()\n"]