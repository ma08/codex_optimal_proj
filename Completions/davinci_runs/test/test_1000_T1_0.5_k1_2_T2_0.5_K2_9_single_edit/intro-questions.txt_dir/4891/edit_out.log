2022-04-16 13:21:00.298109 num operations 1
2022-04-16 13:21:00.298126 size on input set 1
2022-04-16 13:21:13.693567 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# pieces = list(map(int, input().split()))\n#\n# for i in range(6):\n#     if i == 0:\n#         print(1 - pieces[i], end=' ')\n#     elif i == 1:\n#         print(1 - pieces[i], end=' ')\n#     elif i == 2:\n#         print(2 - pieces[i], end=' ')\n#     elif i == 3:\n#         print(2 - pieces[i], end=' ')\n#     elif i == 4:\n#         print(2 - pieces[i], end=' ')\n#     else:\n#         print(8 - pieces[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "\n\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ') \n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n"
    },
    {
      "index": 2,
      "text": "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n"
    },
    {
      "index": 3,
      "text": "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n"
    },
    {
      "index": 4,
      "text": "\n\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')#\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n"
    },
    {
      "index": 5,
      "text": "\nT = int(input())\nfor i in range(T):\n    N, K = map(int, input().split())\n    if K == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
      "index": 6,
      "text": "\n\n\n# pieces = [0, 0, 0, 0, 0, 0]\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i])\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i])\n    elif i == 3:\n        print(2 - pieces[i])\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i])\n"
    },
    {
      "index": 7,
      "text": "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n"
    },
    {
      "index": 8,
      "text": "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')  # 1\n    elif i == 1:\n        print(1 - pieces[i], end=' ')  # 1\n    elif i == 2:\n        print(2 - pieces[i], end=' ')  # 2\n    elif i == 3:\n        print(2 - pieces[i], end=' ')  # 2\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n"
    }
  ],
  "created": 1650115260,
  "object": "edit"
}
2022-04-16 13:21:13.693837 fix syntax errors 9 ["\n\n# pieces = list(map(int, input().split()))\n#\n# for i in range(6):\n#     if i == 0:\n#         print(1 - pieces[i], end=' ')\n#     elif i == 1:\n#         print(1 - pieces[i], end=' ')\n#     elif i == 2:\n#         print(2 - pieces[i], end=' ')\n#     elif i == 3:\n#         print(2 - pieces[i], end=' ')\n#     elif i == 4:\n#         print(2 - pieces[i], end=' ')\n#     else:\n#         print(8 - pieces[i], end=' ')\n", "\n\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ') \n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n", "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n", "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n", "\n\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')#\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n", '\nT = int(input())\nfor i in range(T):\n    N, K = map(int, input().split())\n    if K == 1:\n        print("NO")\n    else:\n        print("YES")\n', "\n\n\n# pieces = [0, 0, 0, 0, 0, 0]\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i])\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i])\n    elif i == 3:\n        print(2 - pieces[i])\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i])\n", "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')\n    elif i == 1:\n        print(1 - pieces[i], end=' ')\n    elif i == 2:\n        print(2 - pieces[i], end=' ')\n    elif i == 3:\n        print(2 - pieces[i], end=' ')\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n", "\npieces = list(map(int, input().split()))\n\nfor i in range(6):\n    if i == 0:\n        print(1 - pieces[i], end=' ')  # 1\n    elif i == 1:\n        print(1 - pieces[i], end=' ')  # 1\n    elif i == 2:\n        print(2 - pieces[i], end=' ')  # 2\n    elif i == 3:\n        print(2 - pieces[i], end=' ')  # 2\n    elif i == 4:\n        print(2 - pieces[i], end=' ')\n    else:\n        print(8 - pieces[i], end=' ')\n"]
2022-04-16 13:21:13.693892 size on output set 7
2022-04-16 13:21:13.693907 num operations 1
2022-04-16 13:21:13.693912 size on input set 1
2022-04-16 13:21:21.649521 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()] \n\nfor i in range(6):\n    print(pieces[i] - count[i], end=\" \")\n"
    },
    {
      "index": 2,
      "text": "\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=\" \")\n"
    },
    {
      "index": 3,
      "text": "\n\n# pieces = [1, 1, 2, 2, 2, 8]\n# count = [int(i) for i in input().split()]\n\n# for i in range(6):\n#     print(pieces[i] - count[i], end=\" \")\n"
    },
    {
      "index": 4,
      "text": "\n\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=\" \") \n"
    },
    {
      "index": 5,
      "text": "\n\npieces = [1, 1, 2, 2, 2, 8] # pieces of each domino\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=\" \")\n"
    },
    {
      "index": 6,
      "text": "\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=\" \")\n"
    },
    {
      "index": 7,
      "text": "\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=\" \")\n"
    },
    {
      "index": 8,
      "text": "\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=\" \")\n"
    }
  ],
  "created": 1650115273,
  "object": "edit"
}
2022-04-16 13:21:21.649850 fix syntax errors 9 ["\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=' ')\n", '\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()] \n\nfor i in range(6):\n    print(pieces[i] - count[i], end=" ")\n', '\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=" ")\n', '\n\n# pieces = [1, 1, 2, 2, 2, 8]\n# count = [int(i) for i in input().split()]\n\n# for i in range(6):\n#     print(pieces[i] - count[i], end=" ")\n', '\n\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=" ") \n', '\n\npieces = [1, 1, 2, 2, 2, 8] # pieces of each domino\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=" ")\n', '\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=" ")\n', '\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=" ")\n', '\npieces = [1, 1, 2, 2, 2, 8]\ncount = [int(i) for i in input().split()]\n\nfor i in range(6):\n    print(pieces[i] - count[i], end=" ")\n']
2022-04-16 13:21:21.650033 size on output set 6
2022-04-16 13:21:21.650067 num operations 1
2022-04-16 13:21:21.650074 size on input set 1
2022-04-16 13:22:02.267334 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=\" \")\n"
    },
    {
      "index": 1,
      "text": "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]  # get input\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)  # print\n"
    },
    {
      "index": 2,
      "text": "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n"
    },
    {
      "index": 3,
      "text": "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n"
    },
    {
      "index": 4,
      "text": "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n"
    },
    {
      "index": 5,
      "text": "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()] #input\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n"
    },
    {
      "index": 6,
      "text": "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n"
    },
    {
      "index": 7,
      "text": "\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n"
    },
    {
      "index": 8,
      "text": "\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n"
    }
  ],
  "created": 1650115281,
  "object": "edit"
}
2022-04-16 13:22:02.267618 fix syntax errors 9 ['\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=" ")\n', '\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]  # get input\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)  # print\n', '\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n', "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n", '\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n', '\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()] #input\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n', "\n\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n", '\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n', '\nking, queen, rook, bishop, knight, pawn = [int(x) for x in input().split()]\n\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n']
2022-04-16 13:22:02.267745 size on output set 8
2022-04-16 13:22:02.267762 num operations 1
2022-04-16 13:22:02.267770 size on input set 1
2022-04-16 13:22:13.796034 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(): \n    input = [int(x) for x in input().split()] \n    for i, num in enumerate(input): \n        if i == 0: \n            print(1-num, end=\" \") \n        elif i == 1: \n            print(1-num, end=\" \") \n        elif i == 2: \n            print(2-num, end=\" \") \n        elif i == 3: \n            print(2-num, end=\" \") \n        elif i == 4: \n            print(2-num, end=\" \") \n        else: \n            print(8-num) \nmain() \n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    inputs = [int(x) for x in input().split()]\n    for i, num in enumerate(inputs):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    inputs = [int(x) for x in input().split()]\n    for i, num in enumerate(inputs):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    nums = [int(x) for x in input().split()]\n    for i, num in enumerate(nums):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    input = [int(x) for x in raw_input().split()]\n    for i, num in enumerate(input):\n        if i == 0:\n            print(1-num, end=\" \")\n        elif i == 1:\n            print(1-num, end=\" \")\n        elif i == 2:\n            print(2-num, end=\" \")\n        elif i == 3:\n            print(2-num, end=\" \")\n        elif i == 4:\n            print(2-num, end=\" \")\n        else:\n            print(8-num)\n\nmain()\n"
    }
  ],
  "created": 1650115322,
  "object": "edit"
}
2022-04-16 13:22:13.796293 fix syntax errors 9 ['\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n', '\n\ndef main(): \n    input = [int(x) for x in input().split()] \n    for i, num in enumerate(input): \n        if i == 0: \n            print(1-num, end=" ") \n        elif i == 1: \n            print(1-num, end=" ") \n        elif i == 2: \n            print(2-num, end=" ") \n        elif i == 3: \n            print(2-num, end=" ") \n        elif i == 4: \n            print(2-num, end=" ") \n        else: \n            print(8-num) \nmain() \n', '\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n', '\n\ndef main():\n    inputs = [int(x) for x in input().split()]\n    for i, num in enumerate(inputs):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n', '\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n', '\n\ndef main():\n    inputs = [int(x) for x in input().split()]\n    for i, num in enumerate(inputs):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n', '\n\ndef main():\n    inp = [int(x) for x in input().split()]\n    for i, num in enumerate(inp):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n', '\n\ndef main():\n    nums = [int(x) for x in input().split()]\n    for i, num in enumerate(nums):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n', '\n\ndef main():\n    input = [int(x) for x in raw_input().split()]\n    for i, num in enumerate(input):\n        if i == 0:\n            print(1-num, end=" ")\n        elif i == 1:\n            print(1-num, end=" ")\n        elif i == 2:\n            print(2-num, end=" ")\n        elif i == 3:\n            print(2-num, end=" ")\n        elif i == 4:\n            print(2-num, end=" ")\n        else:\n            print(8-num)\n\nmain()\n']
2022-04-16 13:22:13.796398 size on output set 5
2022-04-16 13:22:13.796409 num operations 1
2022-04-16 13:22:13.796414 size on input set 1
2022-04-16 13:22:22.496970 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())  # king, queen, rook, bishop, knight, pawn\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)  # king, queen, rook, bishop, knight, pawn\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nking, queen, rook, bishop, knight, pawn = map(int, input().split())\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1 - king, 1 - queen, 2 - rook, 2 - bishop, 2 - knight, 8 - pawn)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1 - king, 1 - queen, 2 - rook, 2 - bishop, 2 - knight, 8 - pawn)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1 - king, 1 - queen, 2 - rook, 2 - bishop, 2 - knight, 8 - pawn)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split()) \n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn) \n\nmain()\n"
    }
  ],
  "created": 1650115333,
  "object": "edit"
}
2022-04-16 13:22:22.497190 fix syntax errors 9 ['\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())  # king, queen, rook, bishop, knight, pawn\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)  # king, queen, rook, bishop, knight, pawn\n\nmain()\n', "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n\nmain()\n", "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn, sep=' ')\n\n\nif __name__ == '__main__':\n    main()\n", '\nking, queen, rook, bishop, knight, pawn = map(int, input().split())\nprint(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn)\n', "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1 - king, 1 - queen, 2 - rook, 2 - bishop, 2 - knight, 8 - pawn)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1 - king, 1 - queen, 2 - rook, 2 - bishop, 2 - knight, 8 - pawn)\n\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split())\n    print(1 - king, 1 - queen, 2 - rook, 2 - bishop, 2 - knight, 8 - pawn)\n\nmain()\n', '\n\ndef main():\n    king, queen, rook, bishop, knight, pawn = map(int, input().split()) \n    print(1-king, 1-queen, 2-rook, 2-bishop, 2-knight, 8-pawn) \n\nmain()\n']
2022-04-16 13:22:22.497225 size on output set 8
2022-04-16 13:22:22.497234 num operations 1
2022-04-16 13:22:22.497239 size on input set 1
2022-04-16 13:22:32.339771 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(str(1 - pieces[0]) + \" \" + str(1 - pieces[1]) + \" \" + str(2 - pieces[2]) + \" \" + str(2 - pieces[3]) + \" \" + str(2 - pieces[4]) + \" \" + str(8 - pieces[5]))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5], sep=' ')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Get input\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n\n    # Check if each piece is in the correct quantity\n    print(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    # Get input\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n\n    # Check if each piece is in the correct quantity\n    print(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = [int(x) for x in sys.stdin.readline().split()]\nB = [int(x) for x in sys.stdin.readline().split()]\n\ndef solve():\n    print(A)\n    print(B)\n\nsolve()\n"
    },
    {
      "index": 6,
      "text": "import fileinput\n\nimport sys\n\n# Get input\npieces = [int(x) for x in fileinput.input()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split(' ')]\n\n# Check if each piece is in the correct quantity\nprint(str(1 - pieces[0]) + ' ' + str(1 - pieces[1]) + ' ' + str(2 - pieces[2]) + ' ' + str(2 - pieces[3]) + ' ' + str(2 - pieces[4]) + ' ' + str(8 - pieces[5]))\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5], sep=' ')\n"
    }
  ],
  "created": 1650115342,
  "object": "edit"
}
2022-04-16 13:22:32.340035 fix syntax errors 9 ['\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(str(1 - pieces[0]) + " " + str(1 - pieces[1]) + " " + str(2 - pieces[2]) + " " + str(2 - pieces[3]) + " " + str(2 - pieces[4]) + " " + str(8 - pieces[5]))\n', "\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5], sep=' ')\n", "\nimport sys\n\ndef main():\n    # Get input\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n\n    # Check if each piece is in the correct quantity\n    print(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n\nif __name__ == '__main__':\n    main()\n", '\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n', "\n\nimport sys\n\ndef main():\n    # Get input\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n\n    # Check if each piece is in the correct quantity\n    print(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = [int(x) for x in sys.stdin.readline().split()]\nB = [int(x) for x in sys.stdin.readline().split()]\n\ndef solve():\n    print(A)\n    print(B)\n\nsolve()\n', 'import fileinput\n\nimport sys\n\n# Get input\npieces = [int(x) for x in fileinput.input()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5])\n', "#!/usr/bin/env python\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split(' ')]\n\n# Check if each piece is in the correct quantity\nprint(str(1 - pieces[0]) + ' ' + str(1 - pieces[1]) + ' ' + str(2 - pieces[2]) + ' ' + str(2 - pieces[3]) + ' ' + str(2 - pieces[4]) + ' ' + str(8 - pieces[5]))\n", "\n\nimport sys\n\n# Get input\npieces = [int(x) for x in sys.stdin.readline().split()]\n\n# Check if each piece is in the correct quantity\nprint(1 - pieces[0], 1 - pieces[1], 2 - pieces[2], 2 - pieces[3], 2 - pieces[4], 8 - pieces[5], sep=' ')\n"]
2022-04-16 13:22:32.340136 size on output set 8
2022-04-16 13:22:32.340148 num operations 1
2022-04-16 13:22:32.340153 size on input set 1
2022-04-16 13:22:40.050641 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(\" \")]  # noqa\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")  # noqa\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split()]\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split()]\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(\" \")] \n\n    # Output the result\n    print(\"1 0 0 0 0 1\") \n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in raw_input().split(\" \")]\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(\" \")] # read the input\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split()]\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(\" \")]  # pylint: disable=unused-variable\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main(x, y, z):\n    # Read the input and convert to a list\n    pieces = [int(x) for x in input().split(\" \")]  # [1, 2, 3, 4, 5, 6]\n\n    # Output the result\n    print(\"1 0 0 0 0 1\")\n\n\nif __name__ == \"__main__\":\n    main(x, y, z)\n"
    }
  ],
  "created": 1650115352,
  "object": "edit"
}
2022-04-16 13:22:40.050862 fix syntax errors 9 ['\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(" ")]  # noqa\n\n    # Output the result\n    print("1 0 0 0 0 1")  # noqa\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split()]\n\n    # Output the result\n    print("1 0 0 0 0 1")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split()]\n\n    # Output the result\n    print("1 0 0 0 0 1")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(" ")] \n\n    # Output the result\n    print("1 0 0 0 0 1") \n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in raw_input().split(" ")]\n\n    # Output the result\n    print("1 0 0 0 0 1")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(" ")] # read the input\n\n    # Output the result\n    print("1 0 0 0 0 1")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split()]\n\n    # Output the result\n    print("1 0 0 0 0 1")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read the input\n    pieces = [int(x) for x in input().split(" ")]  # pylint: disable=unused-variable\n\n    # Output the result\n    print("1 0 0 0 0 1")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main(x, y, z):\n    # Read the input and convert to a list\n    pieces = [int(x) for x in input().split(" ")]  # [1, 2, 3, 4, 5, 6]\n\n    # Output the result\n    print("1 0 0 0 0 1")\n\n\nif __name__ == "__main__":\n    main(x, y, z)\n']
2022-04-16 13:22:40.050946 size on output set 8
2022-04-16 13:22:40.050958 num operations 1
2022-04-16 13:22:40.050963 size on input set 1
2022-04-16 13:23:10.713066 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n"
    },
    {
      "index": 1,
      "text": "\nprint(pcs)\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 0:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 0:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 0:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 0:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n"
    },
    {
      "index": 2,
      "text": "\npcs = list(map(int, input().split()))\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n"
    },
    {
      "index": 3,
      "text": "\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n"
    },
    {
      "index": 4,
      "text": "\n\n# pcs = [int(x) for x in input().split()]\n\n# for i in range(len(pcs)):\n#     if i == 0:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 1:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 2:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 3:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 4:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 5:\n#         if pcs[i] > 8:\n#             pcs[i] = pcs[i] - 8\n#         elif pcs[i] < 8:\n#             pcs[i] = pcs[i] + 8\n\n# print(*pcs)\n\n\n\n\n\n\n# n = int(input())\n# lst = []\n# for _ in range(n):\n#     name = input()\n#     score = float(input())\n#     lst.append([name, score])\n# lst.sort(key=lambda x: (x[1], x[0]))\n# for i in range(len(lst)):\n#     if lst[i][1] > lst[0][1] and lst[i][1] < lst[-1][1]:\n#         print(lst[i][0])\n\n\n\n\n# n = int(input())\n# lst = []\n# for _ in range(n):\n#     name = input()\n#     score = float(input())\n#     lst.append([name, score])\n# lst.sort(key=lambda x: (x[1], x[0]))\n# for i in range(len(lst)):\n#     if lst[i][1] > lst[0][1] and lst[i][1] < lst[-1][1]:\n#         print(lst[i][0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 5,
      "text": "\n#\n# pcs = [int(x) for x in input().split()]\n#\n# for i in range(len(pcs)):\n#     if i == 0:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 1:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 2:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 3:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 4:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 5:\n#         if pcs[i] > 8:\n#             pcs[i] = pcs[i] - 8\n#         elif pcs[i] < 8:\n#             pcs[i] = pcs[i] + 8\n#\n# print(*pcs)\n"
    },
    {
      "index": 6,
      "text": "\n\npcs = list(map(int, input().split()))\n\nfor i in range(len(pcs)):\n    if i == 0 and pcs[i] > 1:\n        pcs[i] = pcs[i] - 1\n    elif i == 0 and pcs[i] < 1:\n        pcs[i] = pcs[i] + 1\n    elif i == 1 and pcs[i] > 1:\n        pcs[i] = pcs[i] - 1\n    elif i == 1 and pcs[i] < 1:\n        pcs[i] = pcs[i] + 1\n    elif i == 2 and pcs[i] > 2:\n        pcs[i] = pcs[i] - 2\n    elif i == 2 and pcs[i] < 2:\n        pcs[i] = pcs[i] + 2\n    elif i == 3 and pcs[i] > 2:\n        pcs[i] = pcs[i] - 2\n    elif i == 3 and pcs[i] < 2:\n        pcs[i] = pcs[i] + 2\n    elif i == 4 and pcs[i] > 2:\n        pcs[i] = pcs[i] - 2\n    elif i == 4 and pcs[i] < 2:\n        pcs[i] = pcs[i] + 2\n    elif i == 5 and pcs[i] > 8:\n        pcs[i] = pcs[i] - 8\n    elif i == 5 and pcs[i] < 8:\n        pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n"
    },
    {
      "index": 7,
      "text": "\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n"
    },
    {
      "index": 8,
      "text": "\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n"
    }
  ],
  "created": 1650115360,
  "object": "edit"
}
2022-04-16 13:23:10.713408 fix syntax errors 9 ['\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n', '\nprint(pcs)\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 0:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 0:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 0:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 0:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n', '\npcs = list(map(int, input().split()))\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n', '\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n', '\n\n# pcs = [int(x) for x in input().split()]\n\n# for i in range(len(pcs)):\n#     if i == 0:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 1:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 2:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 3:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 4:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 5:\n#         if pcs[i] > 8:\n#             pcs[i] = pcs[i] - 8\n#         elif pcs[i] < 8:\n#             pcs[i] = pcs[i] + 8\n\n# print(*pcs)\n\n\n\n\n\n\n# n = int(input())\n# lst = []\n# for _ in range(n):\n#     name = input()\n#     score = float(input())\n#     lst.append([name, score])\n# lst.sort(key=lambda x: (x[1], x[0]))\n# for i in range(len(lst)):\n#     if lst[i][1] > lst[0][1] and lst[i][1] < lst[-1][1]:\n#         print(lst[i][0])\n\n\n\n\n# n = int(input())\n# lst = []\n# for _ in range(n):\n#     name = input()\n#     score = float(input())\n#     lst.append([name, score])\n# lst.sort(key=lambda x: (x[1], x[0]))\n# for i in range(len(lst)):\n#     if lst[i][1] > lst[0][1] and lst[i][1] < lst[-1][1]:\n#         print(lst[i][0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '\n#\n# pcs = [int(x) for x in input().split()]\n#\n# for i in range(len(pcs)):\n#     if i == 0:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 1:\n#         if pcs[i] > 1:\n#             pcs[i] = pcs[i] - 1\n#         elif pcs[i] < 1:\n#             pcs[i] = pcs[i] + 1\n#     elif i == 2:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 3:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 4:\n#         if pcs[i] > 2:\n#             pcs[i] = pcs[i] - 2\n#         elif pcs[i] < 2:\n#             pcs[i] = pcs[i] + 2\n#     elif i == 5:\n#         if pcs[i] > 8:\n#             pcs[i] = pcs[i] - 8\n#         elif pcs[i] < 8:\n#             pcs[i] = pcs[i] + 8\n#\n# print(*pcs)\n', '\n\npcs = list(map(int, input().split()))\n\nfor i in range(len(pcs)):\n    if i == 0 and pcs[i] > 1:\n        pcs[i] = pcs[i] - 1\n    elif i == 0 and pcs[i] < 1:\n        pcs[i] = pcs[i] + 1\n    elif i == 1 and pcs[i] > 1:\n        pcs[i] = pcs[i] - 1\n    elif i == 1 and pcs[i] < 1:\n        pcs[i] = pcs[i] + 1\n    elif i == 2 and pcs[i] > 2:\n        pcs[i] = pcs[i] - 2\n    elif i == 2 and pcs[i] < 2:\n        pcs[i] = pcs[i] + 2\n    elif i == 3 and pcs[i] > 2:\n        pcs[i] = pcs[i] - 2\n    elif i == 3 and pcs[i] < 2:\n        pcs[i] = pcs[i] + 2\n    elif i == 4 and pcs[i] > 2:\n        pcs[i] = pcs[i] - 2\n    elif i == 4 and pcs[i] < 2:\n        pcs[i] = pcs[i] + 2\n    elif i == 5 and pcs[i] > 8:\n        pcs[i] = pcs[i] - 8\n    elif i == 5 and pcs[i] < 8:\n        pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n', '\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n', '\npcs = [int(x) for x in input().split()]\n\nfor i in range(len(pcs)):\n    if i == 0:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 1:\n        if pcs[i] > 1:\n            pcs[i] = pcs[i] - 1\n        elif pcs[i] < 1:\n            pcs[i] = pcs[i] + 1\n    elif i == 2:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 3:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 4:\n        if pcs[i] > 2:\n            pcs[i] = pcs[i] - 2\n        elif pcs[i] < 2:\n            pcs[i] = pcs[i] + 2\n    elif i == 5:\n        if pcs[i] > 8:\n            pcs[i] = pcs[i] - 8\n        elif pcs[i] < 8:\n            pcs[i] = pcs[i] + 8\n\nprint(*pcs)\n']
2022-04-16 13:23:10.713524 size on output set 6
