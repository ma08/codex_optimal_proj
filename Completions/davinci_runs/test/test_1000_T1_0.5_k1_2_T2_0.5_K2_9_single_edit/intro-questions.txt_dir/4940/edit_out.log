2022-04-16 14:31:58.063429 num operations 1
2022-04-16 14:31:58.063448 size on input set 1
2022-04-16 14:32:06.627661 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(m)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t[:i]):\n                t[i] = max(t[:i])\n            t[i] += p[j][i]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(m)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            t[i] = max(t[i], max(t)) + p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(m)]\n    t = [0] * m\n    for j in range(m):\n        for i in range(m):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[j][i]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for i in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650119518,
  "object": "edit"
}
2022-04-16 14:32:06.627982 fix syntax errors 9 ["\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(m)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t[:i]):\n                t[i] = max(t[:i])\n            t[i] += p[j][i]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(m)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            t[i] = max(t[i], max(t)) + p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(m)]\n    t = [0] * m\n    for j in range(m):\n        for i in range(m):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[j][i]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for i in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:32:06.628029 size on output set 8
2022-04-16 14:32:06.628038 num operations 1
2022-04-16 14:32:06.628044 size on input set 1
2022-04-16 14:32:14.597785 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0 for i in range(M)] for j in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M] * N\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650119526,
  "object": "edit"
}
2022-04-16 14:32:14.598161 fix syntax errors 9 ['\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0 for i in range(M)] for j in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M] * N\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort(key=lambda x: x[-1])\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:32:14.598234 size on output set 7
2022-04-16 14:32:14.598247 num operations 1
2022-04-16 14:32:14.598253 size on input set 1
2022-04-16 14:32:28.041016 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 2,
      "text": "\n\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[i] + p[k][j] > t[k]:\n                t[k] = t[i] + p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 3,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))  # p[i][j]\n\nt = [0] * n  # t[i]\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):  # k != i\n            if t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]  # t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 4,
      "text": "\nn, m = map(int, input().split())\n\np = [[] for i in range(n)]\nfor i in range(n):\n    p[i] = list(map(int, input().split()))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 5,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t))) \n"
    },
    {
      "index": 6,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j] \n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 7,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 8,
      "text": "\n#\n# n, m = map(int, input().split())\n#\n# p = []\n# for i in range(n):\n#     p.append(list(map(int, input().split())))\n#\n# t = [0] * n\n#\n# for j in range(m):\n#     for i in range(n):\n#         if j == 0:\n#             t[i] = p[i][j]\n#         else:\n#             t[i] += p[i][j]\n#         for k in range(n):\n#             if k != i and t[k] + p[k][j] > t[i]:\n#                 t[k] = t[i] - p[k][j]\n#\n# print(\" \".join(map(str, t)))\n"
    }
  ],
  "created": 1650119534,
  "object": "edit"
}
2022-04-16 14:32:28.041316 fix syntax errors 9 ['\n#\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '#!/usr/bin/python3\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\n\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[i] + p[k][j] > t[k]:\n                t[k] = t[i] + p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))  # p[i][j]\n\nt = [0] * n  # t[i]\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):  # k != i\n            if t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]  # t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\nn, m = map(int, input().split())\n\np = [[] for i in range(n)]\nfor i in range(n):\n    p[i] = list(map(int, input().split()))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t))) \n', '\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j] \n\nprint(" ".join(map(str, t)))\n', '\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\n#\n# n, m = map(int, input().split())\n#\n# p = []\n# for i in range(n):\n#     p.append(list(map(int, input().split())))\n#\n# t = [0] * n\n#\n# for j in range(m):\n#     for i in range(n):\n#         if j == 0:\n#             t[i] = p[i][j]\n#         else:\n#             t[i] += p[i][j]\n#         for k in range(n):\n#             if k != i and t[k] + p[k][j] > t[i]:\n#                 t[k] = t[i] - p[k][j]\n#\n# print(" ".join(map(str, t)))\n']
2022-04-16 14:32:28.041371 size on output set 9
2022-04-16 14:32:28.041385 num operations 1
2022-04-16 14:32:28.041390 size on input set 1
2022-04-16 14:32:47.424524 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    swathers, stages = map(int, input().split())\n    times = []\n    for i in range(swathers):\n        times.append(list(map(int, input().split())))\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()] #number of swathers and stages\n    times = []\n    for i in range(swathers): #input time for each stage\n        times.append([int(x) for x in input().split()]) #append to list\n    times = sorted(times)\n    for i in range(1,len(times)): #add the time for each stage\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(swathers): #print the total time for each swather\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport math\n\n\ndef get_swath(swather, time):\n    return math.ceil(time / swather[0])\n\n\ndef get_time(swather, swath):\n    return swath * swather[0]\n\n\ndef get_cost(swather, swath):\n    return swather[1] * swath\n\n\ndef get_swath_cost(swather, swath):\n    return get_cost(swather, swath) * swather[2]\n\n\ndef get_swath_time(swather, swath):\n    return get_time(swather, swath) * swather[3]\n\n\ndef get_total_swath_time(swather, swath):\n    return get_time(swather, swath) + get_swath_time(swather, swath)\n\n\ndef get_total_cost(swather, swath):\n    return get_cost(swather, swath) + get_swath_cost(swather, swath)\n\n\ndef get_total_time(swather, swath):\n    return get_time(swather, swath) + get_swath_time(swather, swath)\n\n\ndef get_total_time_cost(swather, swath):\n    return get_total_cost(swather, swath) + get_total_time(swather, swath)\n\n\ndef main():\n    swathers, swath_count = [int(x) for x in input().split()]\n    swathers_times_costs = []\n    for i in range(swathers): swathers_times_costs.append([int(x) for x in input().split()])\n    swathers_times_costs = sorted(swathers_times_costs)\n    for i in range(1, len(swathers_times_costs)):\n        for j in range(swath_count):\n            swathers_times_costs[i][j] += swathers_times_costs[i - 1][j]\n    for i in range(swathers): print(swathers_times_costs[i][swath_count - 1], end=' ')\n\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = [[0]*stages]\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()]+[0]*(stages-len([int(x) for x in input().split()])))\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"
    }
  ],
  "created": 1650119548,
  "object": "edit"
}
2022-04-16 14:32:47.424846 fix syntax errors 9 ["\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n", "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\nmain()\n", "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\nmain()\n", "\n\ndef main():\n    swathers, stages = map(int, input().split())\n    times = []\n    for i in range(swathers):\n        times.append(list(map(int, input().split())))\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()] #number of swathers and stages\n    times = []\n    for i in range(swathers): #input time for each stage\n        times.append([int(x) for x in input().split()]) #append to list\n    times = sorted(times)\n    for i in range(1,len(times)): #add the time for each stage\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(swathers): #print the total time for each swather\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\nimport math\n\n\ndef get_swath(swather, time):\n    return math.ceil(time / swather[0])\n\n\ndef get_time(swather, swath):\n    return swath * swather[0]\n\n\ndef get_cost(swather, swath):\n    return swather[1] * swath\n\n\ndef get_swath_cost(swather, swath):\n    return get_cost(swather, swath) * swather[2]\n\n\ndef get_swath_time(swather, swath):\n    return get_time(swather, swath) * swather[3]\n\n\ndef get_total_swath_time(swather, swath):\n    return get_time(swather, swath) + get_swath_time(swather, swath)\n\n\ndef get_total_cost(swather, swath):\n    return get_cost(swather, swath) + get_swath_cost(swather, swath)\n\n\ndef get_total_time(swather, swath):\n    return get_time(swather, swath) + get_swath_time(swather, swath)\n\n\ndef get_total_time_cost(swather, swath):\n    return get_total_cost(swather, swath) + get_total_time(swather, swath)\n\n\ndef main():\n    swathers, swath_count = [int(x) for x in input().split()]\n    swathers_times_costs = []\n    for i in range(swathers): swathers_times_costs.append([int(x) for x in input().split()])\n    swathers_times_costs = sorted(swathers_times_costs)\n    for i in range(1, len(swathers_times_costs)):\n        for j in range(swath_count):\n            swathers_times_costs[i][j] += swathers_times_costs[i - 1][j]\n    for i in range(swathers): print(swathers_times_costs[i][swath_count - 1], end=' ')\n\n\nmain()\n", "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = [[0]*stages]\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()]+[0]*(stages-len([int(x) for x in input().split()])))\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    swathers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(swathers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(swathers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"]
2022-04-16 14:32:47.424950 size on output set 7
2022-04-16 14:32:47.424967 num operations 1
2022-04-16 14:32:47.424972 size on input set 1
2022-04-16 14:33:08.915255 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end = \" \")\nprint()\n"
    },
    {
      "index": 2,
      "text": "\n\n# N, M = [int(x) for x in input().split()]\n\n# times = []\n# for i in range(N):\n#     times.append([int(x) for x in input().split()])\n\n# #print(times)\n\n# # sort the times by the first stage\n# times.sort(key = lambda x: x[0])\n\n# #print(times)\n\n# # sort the times by the second stage\n# times.sort(key = lambda x: x[1])\n\n# #print(times)\n\n# # sort the times by the third stage\n# times.sort(key = lambda x: x[2])\n\n# #print(times)\n\n# # now we can just add up the times\n# total_times = []\n# for i in range(N):\n#     total_time = 0\n#     for j in range(M):\n#         total_time += times[i][j]\n#     total_times.append(total_time)\n\n# for i in range(N):\n#     print(total_times[i], end=\" \")\n# print()\n\n# type in the number of people\n# N = int(input())\n\n# # type in the number of times\n# M = int(input())\n\n# # type in the times\n# times = []\n# for i in range(N):\n#     times.append([int(x) for x in input().split()])\n\n# # sort the times by the first stage\n# times.sort(key = lambda x: x[0])\n\n# # sort the times by the second stage\n# times.sort(key = lambda x: x[1])\n\n# # sort the times by the third stage\n# times.sort(key = lambda x: x[2])\n\n# # now we can just add up the times\n# total_times = []\n# for i in range(N):\n#     total_time = 0\n#     for j in range(M):\n#         total_time += times[i][j]\n#     total_times.append(total_time)\n\n# for i in range(N):\n#     print(total_times[i], end=\" \")\n# print()\n"
    },
    {
      "index": 3,
      "text": "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 4,
      "text": "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 5,
      "text": "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 6,
      "text": "\nfor i in range(10):\n    print(i)\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 8,
      "text": "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    }
  ],
  "created": 1650119567,
  "object": "edit"
}
2022-04-16 14:33:08.915608 fix syntax errors 9 ['\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end = " ")\nprint()\n', '\n\n# N, M = [int(x) for x in input().split()]\n\n# times = []\n# for i in range(N):\n#     times.append([int(x) for x in input().split()])\n\n# #print(times)\n\n# # sort the times by the first stage\n# times.sort(key = lambda x: x[0])\n\n# #print(times)\n\n# # sort the times by the second stage\n# times.sort(key = lambda x: x[1])\n\n# #print(times)\n\n# # sort the times by the third stage\n# times.sort(key = lambda x: x[2])\n\n# #print(times)\n\n# # now we can just add up the times\n# total_times = []\n# for i in range(N):\n#     total_time = 0\n#     for j in range(M):\n#         total_time += times[i][j]\n#     total_times.append(total_time)\n\n# for i in range(N):\n#     print(total_times[i], end=" ")\n# print()\n\n# type in the number of people\n# N = int(input())\n\n# # type in the number of times\n# M = int(input())\n\n# # type in the times\n# times = []\n# for i in range(N):\n#     times.append([int(x) for x in input().split()])\n\n# # sort the times by the first stage\n# times.sort(key = lambda x: x[0])\n\n# # sort the times by the second stage\n# times.sort(key = lambda x: x[1])\n\n# # sort the times by the third stage\n# times.sort(key = lambda x: x[2])\n\n# # now we can just add up the times\n# total_times = []\n# for i in range(N):\n#     total_time = 0\n#     for j in range(M):\n#         total_time += times[i][j]\n#     total_times.append(total_time)\n\n# for i in range(N):\n#     print(total_times[i], end=" ")\n# print()\n', '\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\nfor i in range(10):\n    print(i)\n', '#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key = lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key = lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key = lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n']
2022-04-16 14:33:08.915690 size on output set 7
2022-04-16 14:33:08.915702 num operations 1
2022-04-16 14:33:08.915708 size on input set 1
2022-04-16 14:33:16.053087 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])) + \" \")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][M-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M+1):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    }
  ],
  "created": 1650119588,
  "object": "edit"
}
2022-04-16 14:33:16.053388 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])) + " ")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)]))\n\nmain()\n', '\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', 'import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', '\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', '\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][M-1] for i in range(N)])))\n\nmain()\n', '\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M+1):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n']
2022-04-16 14:33:16.053454 size on output set 7
2022-04-16 14:33:16.053465 num operations 1
2022-04-16 14:33:16.053470 size on input set 1
2022-04-16 14:33:27.374866 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]], reverse=True)\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1])\\\n                + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    times = [[int(i) for i in input().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0] * n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0] - 1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()[1:]] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*m\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed[1:]]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])[::-1]\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n \n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport pdb\nimport sys\n\n    #pdb.set_trace()\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + \\\n                times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650119596,
  "object": "edit"
}
2022-04-16 14:33:27.375191 fix syntax errors 9 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]], reverse=True)\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1])\\\n                + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    times = [[int(i) for i in input().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0] * n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0] - 1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()[1:]] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*m\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed[1:]]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])[::-1]\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n \n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport pdb\nimport sys\n\n    #pdb.set_trace()\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i,j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    swathers = [[i, j] for i in range(n) for j in range(m)]\n    swathers = sorted(swathers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(swathers) > 0:\n        swather = swathers.pop(0)\n        if swather[1] == 0:\n            completed[swather[0]] = times[swather[0]][0]\n        else:\n            completed[swather[0]] = max(completed[swather[0]], completed[swather[0]-1]) + \\\n                times[swather[0]][swather[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:33:27.375261 size on output set 9
2022-04-16 14:33:27.375278 num operations 1
2022-04-16 14:33:27.375308 size on input set 1
2022-04-16 14:33:38.096075 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = [list(map(int, sys.stdin.readline().split())) for i in range(N)]\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(n):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * n\n\n    # the time stage j is completed\n    s = [0] * m\n\n    # the number of swathers completed at stage j\n    c = [0] * m\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(m)]\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == m-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650119607,
  "object": "edit"
}
2022-04-16 14:33:38.096419 fix syntax errors 9 ["\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = [list(map(int, sys.stdin.readline().split())) for i in range(N)]\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(n):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * n\n\n    # the time stage j is completed\n    s = [0] * m\n\n    # the number of swathers completed at stage j\n    c = [0] * m\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(m)]\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == m-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:33:38.096542 size on output set 3
