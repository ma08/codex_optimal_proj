2022-04-16 13:24:35.976858 num operations 1
2022-04-16 13:24:35.976877 size on input set 1
2022-04-16 13:24:47.623622 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 1) > dist[i + 1]:\n            print(dist[i] + p * (i + 1))\n            break\n    else:\n        print(dist[-1] + p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    print(sum(a) - max(a))\n    print(sum(b) - max(b))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] != l[j] and l[j] != l[k] and l[k] != l[i] and l[i] + l[j] > l[k] and l[j] + l[k] > l[i] and l[k] + l[i] > l[j]:\n                    ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    i = 0\n    while i < n - 1:\n        if dist[i] + p * (i + 1) > dist[i + 1]:\n            print(dist[i] + p * (i + 1))\n            i = n\n        else:\n            i += 1\n    if i == n - 1:\n        print(dist[-1] + p * n)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n\n    for i in range(n):\n        if distances[i] + p * (i + 2) > distances[i + 1]:\n            print(distances[i] + p * (i + 2))\n            break\n    else:\n        print(distances[-1] + p * (n + 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * n)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1))\n\nif __name__ == \"__main__\":\n    main()\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650115476,
  "object": "edit"
}
2022-04-16 13:24:47.623898 fix syntax errors 9 ['\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 1) > dist[i + 1]:\n            print(dist[i] + p * (i + 1))\n            break\n    else:\n        print(dist[-1] + p)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    print(sum(a) - max(a))\n    print(sum(b) - max(b))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] != l[j] and l[j] != l[k] and l[k] != l[i] and l[i] + l[j] > l[k] and l[j] + l[k] > l[i] and l[k] + l[i] > l[j]:\n                    ans += 1\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    i = 0\n    while i < n - 1:\n        if dist[i] + p * (i + 1) > dist[i + 1]:\n            print(dist[i] + p * (i + 1))\n            i = n\n        else:\n            i += 1\n    if i == n - 1:\n        print(dist[-1] + p * n)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n\n    for i in range(n):\n        if distances[i] + p * (i + 2) > distances[i + 1]:\n            print(distances[i] + p * (i + 2))\n            break\n    else:\n        print(distances[-1] + p * (n + 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * n)\n\nif __name__ == "__main__":\n    main()\n', '\n\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1))\n\nif __name__ == "__main__":\n    main()\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 13:24:47.623953 size on output set 9
2022-04-16 13:24:47.623963 num operations 1
2022-04-16 13:24:47.623968 size on input set 1
2022-04-16 13:24:59.588515 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef max_subarray_sum(a):\n    max_ending_here = max_so_far = 0\n    for x in a:\n        max_ending_here = max(0, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\nprint max_subarray_sum(map(int, raw_input().split()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p*(i-1):\n\t\t\tresult = distances[i] - p*i\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n"
    },
    {
      "index": 2,
      "text": "\n#-*-coding:utf-8-*-\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances) # \u6309\u7167\u5347\u5e8f\u6392\u5e8f\n\tresult = distances[0] # \u8d77\u59cb\u4f4d\u7f6e\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p*i: # \u8ba1\u7b97\u8ddd\u79bb\n\t\t\tresult = distances[i] - p*i\n\treturn result\n\nn, p = map(int, raw_input().split()) # \u8f93\u5165\u4e2a\u6570\u548c\u6b65\u957f\ndistances = map(int, raw_input().split()) # \u8f93\u5165\u8ddd\u79bb\nprint min_distance(n, p, distances) # \u8f93\u51fa\u6700\u5c0f\u8ddd\u79bb\n"
    },
    {
      "index": 3,
      "text": "\n\ndef min_distance(n, p, distances):\n    distances = sorted(distances)\n    result = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i-1] > result + p*i:\n            result = distances[i] - p*i\n    return result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n"
    },
    {
      "index": 4,
      "text": "\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p * i:\n\t\t\tresult = distances[i] - p * i\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint(min_distance(n, p, distances))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p*i: \n\t\t\tresult = distances[i] - p*i \n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n"
    },
    {
      "index": 6,
      "text": "\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p * i:\n\t\t\tresult = distances[i] - p * i\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n"
    },
    {
      "index": 7,
      "text": "\n\ndef min_distance(n, p, distances): \n    distances = sorted(distances) \n    result = distances[0] \n    for i in range(1, n): \n        if distances[i] - distances[i-1] > result + p*i: \n            result = distances[i] - p*i \n    return result \n\nn, p = map(int, raw_input().split()) \ndistances = map(int, raw_input().split()) \nprint min_distance(n, p, distances) \n"
    },
    {
      "index": 8,
      "text": "\ndef min_distance(n, p, distances, result):\n    distances = sorted(distances)\n    result = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i-1] > result + p*i:\n            result = distances[i] - p*i\n    return result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n"
    }
  ],
  "created": 1650115487,
  "object": "edit"
}
2022-04-16 13:24:59.588840 fix syntax errors 9 ['\ndef max_subarray_sum(a):\n    max_ending_here = max_so_far = 0\n    for x in a:\n        max_ending_here = max(0, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\nprint max_subarray_sum(map(int, raw_input().split()))\n', '\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p*(i-1):\n\t\t\tresult = distances[i] - p*i\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n', '\n#-*-coding:utf-8-*-\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances) # 按照升序排序\n\tresult = distances[0] # 起始位置\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p*i: # 计算距离\n\t\t\tresult = distances[i] - p*i\n\treturn result\n\nn, p = map(int, raw_input().split()) # 输入个数和步长\ndistances = map(int, raw_input().split()) # 输入距离\nprint min_distance(n, p, distances) # 输出最小距离\n', '\n\ndef min_distance(n, p, distances):\n    distances = sorted(distances)\n    result = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i-1] > result + p*i:\n            result = distances[i] - p*i\n    return result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n', '\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p * i:\n\t\t\tresult = distances[i] - p * i\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint(min_distance(n, p, distances))\n', '\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p*i: \n\t\t\tresult = distances[i] - p*i \n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n', '\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n):\n\t\tif distances[i] - distances[i-1] > result + p * i:\n\t\t\tresult = distances[i] - p * i\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n', '\n\ndef min_distance(n, p, distances): \n    distances = sorted(distances) \n    result = distances[0] \n    for i in range(1, n): \n        if distances[i] - distances[i-1] > result + p*i: \n            result = distances[i] - p*i \n    return result \n\nn, p = map(int, raw_input().split()) \ndistances = map(int, raw_input().split()) \nprint min_distance(n, p, distances) \n', '\ndef min_distance(n, p, distances, result):\n    distances = sorted(distances)\n    result = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i-1] > result + p*i:\n            result = distances[i] - p*i\n    return result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n']
2022-04-16 13:24:59.588950 size on output set 9
2022-04-16 13:24:59.588962 num operations 1
2022-04-16 13:24:59.588968 size on input set 1
2022-04-16 13:25:09.974515 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[1] - distances[0]\n    for i in range(2, n):\n        if distances[i] - distances[i - 1] < min_distance: min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, _ = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[1] - distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, p = [int(x) for x in input().split()]  # n is the number of houses and p is the number of people\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()  # sort the distances\n    min_distance = distances[0]  # initialize the minimum distance\n    for i in range(1, n):  # find the minimum distance\n        if distances[i] - distances[i - 1] < min_distance:  # check if the difference between the current distance and the previous one is less than the minimum distance\n            min_distance = distances[i] - distances[i - 1]  # update the minimum distance\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef get_min_distance(n, p, distances):\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n    return min_distance\n\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n    \"\"\"\n    >>> main()\n    6 2\n    1 2 3 4 5 6\n    1\n    >>> main()\n    6 3\n    1 2 3 4 5 6\n    2\n    >>> main()\n    6 4\n    1 2 3 4 5 6\n    3\n    >>> main()\n    6 5\n    1 2 3 4 5 6\n    4\n    >>> main()\n    6 6\n    1 2 3 4 5 6\n    5\n    >>> main()\n    6 7\n    1 2 3 4 5 6\n    5\n    \"\"\"\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]  # noqa\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n, p = [int(x) for x in input().split()]  # n - number of houses, p - number of painters\n    distances = [int(x) for x in input().split()]  # distances between houses\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650115499,
  "object": "edit"
}
2022-04-16 13:25:09.974829 fix syntax errors 9 ["\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[1] - distances[0]\n    for i in range(2, n):\n        if distances[i] - distances[i - 1] < min_distance: min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, _ = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[1] - distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, p = [int(x) for x in input().split()]  # n is the number of houses and p is the number of people\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()  # sort the distances\n    min_distance = distances[0]  # initialize the minimum distance\n    for i in range(1, n):  # find the minimum distance\n        if distances[i] - distances[i - 1] < min_distance:  # check if the difference between the current distance and the previous one is less than the minimum distance\n            min_distance = distances[i] - distances[i - 1]  # update the minimum distance\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_min_distance(n, p, distances):\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n    return min_distance\n\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", '\n\n    """\n    >>> main()\n    6 2\n    1 2 3 4 5 6\n    1\n    >>> main()\n    6 3\n    1 2 3 4 5 6\n    2\n    >>> main()\n    6 4\n    1 2 3 4 5 6\n    3\n    >>> main()\n    6 5\n    1 2 3 4 5 6\n    4\n    >>> main()\n    6 6\n    1 2 3 4 5 6\n    5\n    >>> main()\n    6 7\n    1 2 3 4 5 6\n    5\n    """\ndef main():\n    n, p = [int(x) for x in input().split()]\n    distances = [int(x) for x in input().split()]  # noqa\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main():\n    n, p = [int(x) for x in input().split()]  # n - number of houses, p - number of painters\n    distances = [int(x) for x in input().split()]  # distances between houses\n\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 13:25:09.974937 size on output set 8
2022-04-16 13:25:09.974952 num operations 1
2022-04-16 13:25:09.974958 size on input set 1
2022-04-16 13:25:17.921294 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i + 1) * p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n"
    },
    {
      "index": 1,
      "text": "\n\n\n\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint min_distance\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print(n, p, distances)\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint(min_distance)\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint min_distance\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print(n, p, distances)\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint(min_distance)\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n"
    }
  ],
  "created": 1650115510,
  "object": "edit"
}
2022-04-16 13:25:17.921621 fix syntax errors 9 ['\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i + 1) * p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n', '\n\n\n\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint min_distance\n', '\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n', '\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print(n, p, distances)\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint(min_distance)\n', '\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n', '\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n', '\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint min_distance\n', '\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print(n, p, distances)\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint(min_distance)\n', '\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n']
2022-04-16 13:25:17.921669 size on output set 7
2022-04-16 13:25:17.921684 num operations 1
2022-04-16 13:25:17.921690 size on input set 1
2022-04-16 13:25:28.045700 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0] + p\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i:\n            min_dist = d[i - 1] + p * i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i:\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    for i in range(int(input())):\n        n, p = map(int, input().split())\n        d = [int(x) for x in input().split()]\n        d.sort()\n        min_dist = d[0]\n        for i in range(1, n):\n            if d[i] - d[i - 1] < p * (i + 1):\n                min_dist = d[i - 1] + p * (i + 1)\n        print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    d = sorted([int(x) for x in input().split()])\n    ans = d[0]\n    for i in range(1, n - 1):\n        if d[i + 1] - d[i - 1] < p * 2:\n            ans = d[i - 1] + p\n    if d[n - 1] - d[n - 2] < p:\n        ans = d[n - 2] + p\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i):\n            min_dist = d[i - 1] + p * (i)\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i:\n            min_dist = d[i - 1] + p * i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650115517,
  "object": "edit"
}
2022-04-16 13:25:28.045938 fix syntax errors 9 ['\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0] + p\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist) \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i:\n            min_dist = d[i - 1] + p * i\n    print(min_dist)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i:\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    for i in range(int(input())):\n        n, p = map(int, input().split())\n        d = [int(x) for x in input().split()]\n        d.sort()\n        min_dist = d[0]\n        for i in range(1, n):\n            if d[i] - d[i - 1] < p * (i + 1):\n                min_dist = d[i - 1] + p * (i + 1)\n        print(min_dist)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, p = map(int, input().split())\n    d = sorted([int(x) for x in input().split()])\n    ans = d[0]\n    for i in range(1, n - 1):\n        if d[i + 1] - d[i - 1] < p * 2:\n            ans = d[i - 1] + p\n    if d[n - 1] - d[n - 2] < p:\n        ans = d[n - 2] + p\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i):\n            min_dist = d[i - 1] + p * (i)\n    print(min_dist)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i:\n            min_dist = d[i - 1] + p * i\n    print(min_dist)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 13:25:28.046072 size on output set 8
2022-04-16 13:25:28.046086 num operations 1
2022-04-16 13:25:28.046091 size on input set 1
2022-04-16 13:25:35.385992 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    n, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(min([a[i] - a[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(p, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i - 1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650115528,
  "object": "edit"
}
2022-04-16 13:25:35.386218 fix syntax errors 9 ["\n\n\ndef main():\n    n, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(min([a[i] - a[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(p, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i - 1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 13:25:35.386252 size on output set 4
2022-04-16 13:25:35.386263 num operations 1
2022-04-16 13:25:35.386268 size on input set 1
2022-04-16 13:26:18.157446 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "#==================================================================\n#===========================LIBRARIES==============================\n#==================================================================\n\nimport sys\n\n#==================================================================\n#=======================GLOBAL VARIABLES===========================\n#==================================================================\n\n\n\n#==================================================================\n#===========================FUNCTIONS==============================\n#==================================================================\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\nmain()\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\n#==================================================================\n#===========================LIBRARIES==============================\n#==================================================================\n\nimport sys, math\n\n#==================================================================\n#=======================GLOBAL VARIABLES===========================\n#==================================================================\n\n\n\n#==================================================================\n#===========================FUNCTIONS==============================\n#==================================================================\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    w = int(input[1])\n    l = int(input[2])\n    r = int(input[3])\n    input = sys.stdin.readline().split()\n    radii = [int(i) for i in input]\n    radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x > r]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input_list = sys.stdin.readline().split()\n    n = int(input_list[0])\n    p = int(input_list[1])\n    input_list = sys.stdin.readline().split()\n    cars = [int(i) for i in input_list]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n#========================================================================\n#=============================CODE=======================================\n#========================================================================\nimport math\n\n\n    #Read input\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0]) #Number of houses\n    p = int(input[1]) #Number of pipes\n    input = sys.stdin.readline().split()\n    houses = [int(i) for i in input]\n    houses.sort()\n    #print(houses)\n\n    #Find min distance between houses\n    min_dist = houses[1] - houses[0]\n    for i in range(2, n):\n        if houses[i] - houses[i-1] < min_dist:\n            min_dist = houses[i] - houses[i-1]\n\n    #Find max distance between houses\n    max_dist = houses[n-1] - houses[0]\n\n    #Binary search for max number of pipes\n    #max_pipes = math.floor(max_dist / min_dist)\n    #min_pipes = 1\n    #curr_pipes = (min_pipes + max_pipes)//2\n    #print(min_pipes, max_pipes, curr_pipes)\n\n    #while max_pipes - min_pipes > 1:\n    #    print(min_pipes, max_pipes, curr_pipes)\n    #    if is_possible(houses, curr_pipes, min_dist):\n    #        min_pipes = curr_pipes\n    #    else:\n    #        max_pipes = curr_pipes\n    #    curr_pipes = (min_pipes + max_pipes)//2\n    #print(min_pipes, max_pipes, curr_pipes)\n\n    #if is_possible(houses, max_pipes, min_dist):\n    #    print(max_pipes)\n    #else:\n    #    print(min_pipes)\n\ndef is_possible(houses, pipes, min_dist):\n    if pipes == 1:\n        return True\n    curr_dist = houses[0]\n    for i in range(1, len(houses)):\n        if houses[i] - curr_dist >= min_dist:\n            curr_dist = houses[i]\n            pipes -= 1\n            if pipes == 1:\n                return True\n    return False\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\n#====================================================================\n#=============================CODE===================================\n#====================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\n#=========================================================================\n#=============================CODE========================================\n#=========================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"
    }
  ],
  "created": 1650115535,
  "object": "edit"
}
2022-04-16 13:26:18.157805 fix syntax errors 9 ['#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n', '\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n', '#==================================================================\n#===========================LIBRARIES==============================\n#==================================================================\n\nimport sys\n\n#==================================================================\n#=======================GLOBAL VARIABLES===========================\n#==================================================================\n\n\n\n#==================================================================\n#===========================FUNCTIONS==============================\n#==================================================================\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\nmain()\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\n#==================================================================\n#===========================LIBRARIES==============================\n#==================================================================\n\nimport sys, math\n\n#==================================================================\n#=======================GLOBAL VARIABLES===========================\n#==================================================================\n\n\n\n#==================================================================\n#===========================FUNCTIONS==============================\n#==================================================================\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    w = int(input[1])\n    l = int(input[2])\n    r = int(input[3])\n    input = sys.stdin.readline().split()\n    radii = [int(i) for i in input]\n    radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x > r]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x <= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x <= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #radii = [x for x in radii if x >= r]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= w/2]\n    #radii.sort()\n    #print(radii)\n    #radii = [x for x in radii if x >= l/2]\n    #radii.sort()\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n    #print(radii)\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\nmain()\n', '\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input_list = sys.stdin.readline().split()\n    n = int(input_list[0])\n    p = int(input_list[1])\n    input_list = sys.stdin.readline().split()\n    cars = [int(i) for i in input_list]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n', '\n\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n', '\n#==================================================================\n#=============================CODE=================================\n#==================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n', '\n\n#========================================================================\n#=============================CODE=======================================\n#========================================================================\nimport math\n\n\n    #Read input\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0]) #Number of houses\n    p = int(input[1]) #Number of pipes\n    input = sys.stdin.readline().split()\n    houses = [int(i) for i in input]\n    houses.sort()\n    #print(houses)\n\n    #Find min distance between houses\n    min_dist = houses[1] - houses[0]\n    for i in range(2, n):\n        if houses[i] - houses[i-1] < min_dist:\n            min_dist = houses[i] - houses[i-1]\n\n    #Find max distance between houses\n    max_dist = houses[n-1] - houses[0]\n\n    #Binary search for max number of pipes\n    #max_pipes = math.floor(max_dist / min_dist)\n    #min_pipes = 1\n    #curr_pipes = (min_pipes + max_pipes)//2\n    #print(min_pipes, max_pipes, curr_pipes)\n\n    #while max_pipes - min_pipes > 1:\n    #    print(min_pipes, max_pipes, curr_pipes)\n    #    if is_possible(houses, curr_pipes, min_dist):\n    #        min_pipes = curr_pipes\n    #    else:\n    #        max_pipes = curr_pipes\n    #    curr_pipes = (min_pipes + max_pipes)//2\n    #print(min_pipes, max_pipes, curr_pipes)\n\n    #if is_possible(houses, max_pipes, min_dist):\n    #    print(max_pipes)\n    #else:\n    #    print(min_pipes)\n\ndef is_possible(houses, pipes, min_dist):\n    if pipes == 1:\n        return True\n    curr_dist = houses[0]\n    for i in range(1, len(houses)):\n        if houses[i] - curr_dist >= min_dist:\n            curr_dist = houses[i]\n            pipes -= 1\n            if pipes == 1:\n                return True\n    return False\n\nmain()\n', '\n\n#====================================================================\n#=============================CODE===================================\n#====================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n', '\n\n#=========================================================================\n#=============================CODE========================================\n#=========================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n']
2022-04-16 13:26:18.157967 size on output set 8
2022-04-16 13:26:18.157980 num operations 1
2022-04-16 13:26:18.157985 size on input set 1
2022-04-16 13:26:26.591210 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\ni = 0\nwhile i < n:\n    if i + p - 1 < n:\n        if distances[i] != distances[i + p - 1]:\n            print(distances[i + p - 1])\n            break\n    i += 1\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n\n#\n        i += 1\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(distances[0])\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n"
    },
    {
      "index": 4,
      "text": "import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n"
    },
    {
      "index": 6,
      "text": "import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = list(map(int, sys.stdin.readline().split()))\ndistances.sort()\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    if i + p - 1 < n:\n        if distances[i] != distances[i + p - 1]:\n            print(distances[i + p - 1])\n"
    }
  ],
  "created": 1650115578,
  "object": "edit"
}
2022-04-16 13:26:26.591472 fix syntax errors 9 ['import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\ni = 0\nwhile i < n:\n    if i + p - 1 < n:\n        if distances[i] != distances[i + p - 1]:\n            print(distances[i + p - 1])\n            break\n    i += 1\n', 'import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n', '\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n\n#\n        i += 1\n', '\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(distances[0])\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n', 'import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n', 'import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n', '\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = list(map(int, sys.stdin.readline().split()))\ndistances.sort()\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    while i < n:\n        if i + p - 1 < n:\n            if distances[i] != distances[i + p - 1]:\n                print(distances[i + p - 1])\n                break\n        i += 1\n', '\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\nif p == 1:\n    print(1)\nelse:\n    i = 0\n    if i + p - 1 < n:\n        if distances[i] != distances[i + p - 1]:\n            print(distances[i + p - 1])\n']
2022-04-16 13:26:26.591521 size on output set 8
