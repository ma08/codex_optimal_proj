["\nimport sys\nimport math\n\n\ndef solve(n, m):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return m\n    else:\n        return (m - n + 1) * 2\n\n\nif __name__ == '__main__':\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        print(solve(n, m))\n", "import sys\nimport math\n\n\ndef solve(n, m):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return m\n    else:\n        return (m - n + 1) * 2\n\n\nif __name__ == '__main__':\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        print(solve(n, m))\n", "\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            print(max(2 * m - n, n - 2 * m))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            print(max(2 * m - n, n - 2 * m ) )\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport os\nimport time\nimport getopt\nimport socket\nimport ConfigParser\nimport struct\nimport binascii\n \nopts, args = getopt.getopt(sys.argv[1:], 'hH:p:', ['help'])\ncommandargs = {'host':'','port':'80'}\nhelpinfo = '''\n    -h: help info\n    -H: host ip\n    -p: port\n'''\nfor op, value in opts:\n    if op == '-h':\n        print helpinfo\n        sys.exit()\n    elif op == '-H':\n        commandargs['host'] = value\n    elif op == '-p':\n        commandargs['port'] = value\n \nhost = commandargs['host']\nport = int(commandargs['port'])\n \nif host == '':\n    print helpinfo\n    sys.exit()\n \ndef socket_port(ip,port):\n    \"\"\"\n    \u8f93\u5165IP\u548c\u7aef\u53e3\u53f7\uff0c\u626b\u63cf\u5224\u65ad\u7aef\u53e3\u662f\u5426\u5360\u7528\n    \"\"\"\n    try:\n        if port >= 65535:\n            print u'\u7aef\u53e3\u626b\u63cf\u7ed3\u675f'\n        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n        result = s.connect_ex((ip,port))\n        if result == 0:\n            lock = 1\n        else:\n            lock = 0\n        s.close()\n    except:\n        print u'\u7aef\u53e3\u626b\u63cf\u5f02\u5e38'\n    return lock\n \ndef find_service(port,dict):\n    \"\"\"\n    \u8f93\u5165\u7aef\u53e3\uff0c\u627e\u51fa\u5bf9\u5e94\u7684\u670d\u52a1\u540d\n    \"\"\"\n    port = str(port)\n    service = dict.get(port)\n    if service:\n        return service\n    else:\n        return \"unknown\"\n \ndef get_ip_status(ip,dict):\n    \"\"\"\n    \u8f93\u5165IP\uff0c\u626b\u63cfIP\u76840-65534\u7aef\u53e3\u60c5\u51b5\n    \"\"\"\n    try:\n        print u'\u5f00\u59cb\u626b\u63cf %s' % ip\n        start_time = time.time()\n        for i in range(0,65534):\n            sys.stdout.write(' ' + '\\b')\n            sys.stdout.flush()\n            status = socket_port(ip,int(i))\n            if status == 1:\n                service = find_service(i,dict)\n                print u'\u7aef\u53e3\uff1a%s \\t \u670d\u52a1\u540d\uff1a%s' % (i,service)\n        print u'\u626b\u63cf\u7aef\u53e3\u5b8c\u6210\uff0c\u603b\u5171\u7528\u65f6 \uff1a%.2f' %(time.time()-start_time)\n        raw_input(\"Press Enter to Exit\")\n    except:\n        print u'\u626b\u63cfip\u51fa\u9519'\n \nif __name__ == '__main__':\n    config_file = \"service-port.conf\"\n    config = ConfigParser.ConfigParser()\n    config.read(config_file)\n    dict = {}\n    for section in config.sections():\n        for key,value in config.items(section):\n            dict[key] = value\n    get_ip_status(host,dict)\n", "\n\nimport sys\nimport math\n\n\ndef solve(n, m):\n    return (n - 1) * (m - 1)\n\n\nif __name__ == '__main__':\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        print(solve(n, m))\n", "\nimport sys\n\n\ndef solve(n, m):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return m\n    else:\n        return (m - n + 1) * 2\n\n\nif __name__ == '__main__':\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        print(solve(n, m))\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1 or n == 2:\n            print(0)\n        else:\n            print(max(2 * m - n, n - 2 * m - 2))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            print(max(2 * m - n, n - 2 * m)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            print(max(2 * m - n, n - 2))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n        elif n == 2:\n            print(m)\n            print(0)\n        else:\n            print(max(2 * m - n, n - 2 * m))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        print(max(2 * m - n, n - 2 * m))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            print(max(2 * m - n, n - 2 * m))\n\nif __name__ == '__main__':\n    main()\n"]