2022-04-16 14:17:28.797407 num operations 1
2022-04-16 14:17:28.797421 size on input set 1
2022-04-16 14:17:42.987809 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()] # reads the first line\n    p, m, g = [int(x) for x in sys.stdin.readline().split()] # reads the second line\n    for time in [p, m, g]: # loop through times\n        dogs = 0\n        if (time - 1) % (a + b) < a: # checks if dog A is barking\n            dogs += 1\n        if (time - 1) % (c + d) < c: # checks if dog B is barking\n            dogs += 1\n        if dogs == 2: # output\n            print(\"both\")\n        elif dogs == 1: # output\n            print(\"one\")\n        else: # output\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n    p, m, g = [int(x) for x in input().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    a, b = [int(x) for x in sys.stdin.readline().split()]\n    c = int(sys.stdin.readline())\n    d = int(sys.stdin.readline())\n    print(max(0, min(a, c) - max(b, d)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n    p, m, g = [int(x) for x in input().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a: # -1 because we want to start counting at 0\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a and (time - 1) % (a + b) > 0:\n            dogs += 1\n        if (time - 1) % (c + d) < c and (time - 1) % (c + d) > 0:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n#\n# import sys\n#\n# def main():\n#     a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n#     p, m, g = [int(x) for x in sys.stdin.readline().split()]\n#     for time in [p, m, g]:\n#         dogs = 0\n#         if (time - 1) % (a + b) < a:\n#             dogs += 1\n#         if (time - 1) % (c + d) < c:\n#             dogs += 1\n#         if dogs == 2:\n#             print(\"both\")\n#         elif dogs == 1:\n#             print(\"one\")\n#         else:\n#             print(\"none\")\n#\n# if __name__ == '__main__':\n#     main()\n"
    }
  ],
  "created": 1650118648,
  "object": "edit"
}
2022-04-16 14:17:42.988131 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()] # reads the first line\n    p, m, g = [int(x) for x in sys.stdin.readline().split()] # reads the second line\n    for time in [p, m, g]: # loop through times\n        dogs = 0\n        if (time - 1) % (a + b) < a: # checks if dog A is barking\n            dogs += 1\n        if (time - 1) % (c + d) < c: # checks if dog B is barking\n            dogs += 1\n        if dogs == 2: # output\n            print("both")\n        elif dogs == 1: # output\n            print("one")\n        else: # output\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n    p, m, g = [int(x) for x in input().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', "\nimport sys\n\ndef main():\n    a, b = [int(x) for x in sys.stdin.readline().split()]\n    c = int(sys.stdin.readline())\n    d = int(sys.stdin.readline())\n    print(max(0, min(a, c) - max(b, d)))\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n    p, m, g = [int(x) for x in input().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a: # -1 because we want to start counting at 0\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a and (time - 1) % (a + b) > 0:\n            dogs += 1\n        if (time - 1) % (c + d) < c and (time - 1) % (c + d) > 0:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\n#\n# import sys\n#\n# def main():\n#     a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n#     p, m, g = [int(x) for x in sys.stdin.readline().split()]\n#     for time in [p, m, g]:\n#         dogs = 0\n#         if (time - 1) % (a + b) < a:\n#             dogs += 1\n#         if (time - 1) % (c + d) < c:\n#             dogs += 1\n#         if dogs == 2:\n#             print("both")\n#         elif dogs == 1:\n#             print("one")\n#         else:\n#             print("none")\n#\n# if __name__ == \'__main__\':\n#     main()\n']
2022-04-16 14:17:42.988272 size on output set 8
2022-04-16 14:17:42.988284 num operations 1
2022-04-16 14:17:42.988290 size on input set 1
2022-04-16 14:18:06.643813 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main(argv):\n    print(argv)\n\nmain(sys.argv)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] # split input into list of integers\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().split()\n    aggr, calm, aggr2, calm2 = [int(n) for n in line]\n    line = sys.stdin.readline().split()\n    p, m, g = [int(n) for n in line]\n    for num in [p, m, g]:\n        if (num - 1) % (aggr + calm) < aggr and (num - 1) % (aggr2 + calm2) < aggr2:\n            print(\"both\")\n        elif (num - 1) % (aggr + calm) < aggr or (num - 1) % (aggr2 + calm2) < aggr2:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2 and p != 1:\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2 and p != 1:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2 and m != 1:\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2 and m != 1:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2 and g != 1:\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2 and g != 1:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in input().split()]\n    p, m, g = [int(n) for n in input().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    for n in [p, m, g]:\n        if (n - 1) % (aggr + calm) < aggr and (n - 1) % (aggr2 + calm2) < aggr2:\n            print(\"both\")\n        elif (n - 1) % (aggr + calm) < aggr or (n - 1) % (aggr2 + calm2) < aggr2:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in input().split()]\n    p, m, g = [int(n) for n in input().split()]\n    print(p)\n    print(m)\n    print(g)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n\taggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n\tp, m, g = [int(n) for n in sys.stdin.readline().split()]\n\tif (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint(\"both\")\n\telif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint(\"one\")\n\telse:\n\t\tprint(\"none\")\n\tif (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint(\"both\")\n\telif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint(\"one\")\n\telse:\n\t\tprint(\"none\")\n\tif (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint(\"both\")\n\telif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint(\"one\")\n\telse:\n\t\tprint(\"none\")\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n        p, m, g = [int(n) for n in sys.stdin.readline().split()]\n        if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n            print(\"both\")\n        elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n            print(\"one\")\n        else:\n            print(\"none\")\n        if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n            print(\"both\")\n        elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n            print(\"one\")\n        else:\n            print(\"none\")\n        if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n            print(\"both\")\n        elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1650118663,
  "object": "edit"
}
2022-04-16 14:18:06.644082 fix syntax errors 9 ['\n\nimport sys\n\ndef main(argv):\n    print(argv)\n\nmain(sys.argv)\n', '\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] # split input into list of integers\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().split()\n    aggr, calm, aggr2, calm2 = [int(n) for n in line]\n    line = sys.stdin.readline().split()\n    p, m, g = [int(n) for n in line]\n    for num in [p, m, g]:\n        if (num - 1) % (aggr + calm) < aggr and (num - 1) % (aggr2 + calm2) < aggr2:\n            print("both")\n        elif (num - 1) % (aggr + calm) < aggr or (num - 1) % (aggr2 + calm2) < aggr2:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2 and p != 1:\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2 and p != 1:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2 and m != 1:\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2 and m != 1:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2 and g != 1:\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2 and g != 1:\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in input().split()]\n    p, m, g = [int(n) for n in input().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    for n in [p, m, g]:\n        if (n - 1) % (aggr + calm) < aggr and (n - 1) % (aggr2 + calm2) < aggr2:\n            print("both")\n        elif (n - 1) % (aggr + calm) < aggr or (n - 1) % (aggr2 + calm2) < aggr2:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in input().split()]\n    p, m, g = [int(n) for n in input().split()]\n    print(p)\n    print(m)\n    print(g)\n\nmain()\n', '\nimport sys\n\ndef main():\n\taggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n\tp, m, g = [int(n) for n in sys.stdin.readline().split()]\n\tif (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint("both")\n\telif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint("one")\n\telse:\n\t\tprint("none")\n\tif (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint("both")\n\telif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint("one")\n\telse:\n\t\tprint("none")\n\tif (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint("both")\n\telif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n\t\tprint("one")\n\telse:\n\t\tprint("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n        p, m, g = [int(n) for n in sys.stdin.readline().split()]\n        if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n            print("both")\n        elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n            print("one")\n        else:\n            print("none")\n        if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n            print("both")\n        elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n            print("one")\n        else:\n            print("none")\n        if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n            print("both")\n        elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n            print("one")\n        else:\n            print("none")\n\nmain()\n']
2022-04-16 14:18:06.644223 size on output set 9
2022-04-16 14:18:06.644234 num operations 1
2022-04-16 14:18:06.644239 size on input set 1
2022-04-16 14:18:21.649112 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    if P % (A + B) <= A:\n        print('both')\n    elif P % (A + B) > A:\n        print('one')\n    if M % (A + B) <= A:\n        print('both')\n    elif M % (A + B) > A:\n        print('one')\n    if G % (A + B) <= A:\n        print('both')\n    elif G % (A + B) > A:\n        print('one')\n    \nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D: A, B, C, D = C, D, A, B\n    a, b, c = P % (A + B), M % (A + B), G % (A + B)\n    print('one' if a > A else 'both')\n    print('one' if b > A else 'both')\n    print('one' if c > A else 'both')\n    \nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A and b <= A and c <= A:\n        print('both', 'both', 'both')\n    elif a <= A and b <= A and c > A:\n        print('both', 'both', 'one')\n    elif a <= A and b > A and c <= A:\n        print('both', 'one', 'both')\n    elif a <= A and b > A and c > A:\n        print('both', 'one', 'one')\n    elif a > A and b <= A and c <= A:\n        print('one', 'both', 'both')\n    elif a > A and b <= A and c > A:\n        print('one', 'both', 'one')\n    elif a > A and b > A and c <= A:\n        print('one', 'one', 'both')\n    elif a > A and b > A and c > A:\n        print('one', 'one', 'one')\n    \nmain()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a == 0:\n        print('both')\n    elif a > A:\n        print('one')\n    if b == 0:\n        print('both')\n    elif b > A:\n        print('one')\n    if c == 0:\n        print('both')\n    elif c > A:\n        print('one')\n    \nmain()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    B = list(map(int, sys.stdin.readline().split()))\n    C = list(map(int, sys.stdin.readline().split()))\n    A.sort()\n    B.sort()\n    C.sort()\n    i = 0\n    j = 0\n    k = 0\n    ans = 0\n    while j < N:\n        while i < N and A[i] < B[j]:\n            i += 1\n        while k < N and C[k] <= B[j]:\n            k += 1\n        ans += (i * (N - k))\n        j += 1\n    print(ans)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B <= C + D:\n        a = P % (A + B)\n        b = M % (A + B)\n        c = G % (A + B)\n        if a <= A:\n            print('both')\n        elif a > A:\n            print('one')\n        if b <= A:\n            print('both')\n        elif b > A:\n            print('one')\n        if c <= A:\n            print('both')\n        elif c > A:\n            print('one')\n    elif A + B > C + D:\n        a = P % (C + D)\n        b = M % (C + D)\n        c = G % (C + D)\n        if a <= C:\n            print('both')\n        elif a > C:\n            print('one')\n        if b <= C:\n            print('both')\n        elif b > C:\n            print('one')\n        if c <= C:\n            print('both')\n        elif c > C:\n            print('one')\n    \nmain()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().split())\n    print(a, b, c)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B < C + D:\n        A, B, C, D = C, D, A, B # A + B < C + D\n    if P % (A + B) <= A:\n        print('both') # P\n    elif P % (A + B) > A:\n        print('one') # P\n    if M % (A + B) <= A:\n        print('both') # M\n    elif M % (A + B) > A:\n        print('one') # M\n    if G % (A + B) <= A:\n        print('both') # G\n    elif G % (A + B) > A:\n        print('one') # G\n    \nmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both') \n    elif a > A:\n        print('one')\n    if b <= A:\n        print('both')\n    elif b > A:\n        print('one')\n    if c <= A:\n        print('both')\n    elif c > A:\n        print('one')\n    \nmain()\n"
    }
  ],
  "created": 1650118686,
  "object": "edit"
}
2022-04-16 14:18:21.649353 fix syntax errors 9 ["import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    if P % (A + B) <= A:\n        print('both')\n    elif P % (A + B) > A:\n        print('one')\n    if M % (A + B) <= A:\n        print('both')\n    elif M % (A + B) > A:\n        print('one')\n    if G % (A + B) <= A:\n        print('both')\n    elif G % (A + B) > A:\n        print('one')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D: A, B, C, D = C, D, A, B\n    a, b, c = P % (A + B), M % (A + B), G % (A + B)\n    print('one' if a > A else 'both')\n    print('one' if b > A else 'both')\n    print('one' if c > A else 'both')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A and b <= A and c <= A:\n        print('both', 'both', 'both')\n    elif a <= A and b <= A and c > A:\n        print('both', 'both', 'one')\n    elif a <= A and b > A and c <= A:\n        print('both', 'one', 'both')\n    elif a <= A and b > A and c > A:\n        print('both', 'one', 'one')\n    elif a > A and b <= A and c <= A:\n        print('one', 'both', 'both')\n    elif a > A and b <= A and c > A:\n        print('one', 'both', 'one')\n    elif a > A and b > A and c <= A:\n        print('one', 'one', 'both')\n    elif a > A and b > A and c > A:\n        print('one', 'one', 'one')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a == 0:\n        print('both')\n    elif a > A:\n        print('one')\n    if b == 0:\n        print('both')\n    elif b > A:\n        print('one')\n    if c == 0:\n        print('both')\n    elif c > A:\n        print('one')\n    \nmain()\n", 'import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    B = list(map(int, sys.stdin.readline().split()))\n    C = list(map(int, sys.stdin.readline().split()))\n    A.sort()\n    B.sort()\n    C.sort()\n    i = 0\n    j = 0\n    k = 0\n    ans = 0\n    while j < N:\n        while i < N and A[i] < B[j]:\n            i += 1\n        while k < N and C[k] <= B[j]:\n            k += 1\n        ans += (i * (N - k))\n        j += 1\n    print(ans)\n\nmain()\n', "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B <= C + D:\n        a = P % (A + B)\n        b = M % (A + B)\n        c = G % (A + B)\n        if a <= A:\n            print('both')\n        elif a > A:\n            print('one')\n        if b <= A:\n            print('both')\n        elif b > A:\n            print('one')\n        if c <= A:\n            print('both')\n        elif c > A:\n            print('one')\n    elif A + B > C + D:\n        a = P % (C + D)\n        b = M % (C + D)\n        c = G % (C + D)\n        if a <= C:\n            print('both')\n        elif a > C:\n            print('one')\n        if b <= C:\n            print('both')\n        elif b > C:\n            print('one')\n        if c <= C:\n            print('both')\n        elif c > C:\n            print('one')\n    \nmain()\n", 'import sys\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().split())\n    print(a, b, c)\n\nmain()\n', "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B < C + D:\n        A, B, C, D = C, D, A, B # A + B < C + D\n    if P % (A + B) <= A:\n        print('both') # P\n    elif P % (A + B) > A:\n        print('one') # P\n    if M % (A + B) <= A:\n        print('both') # M\n    elif M % (A + B) > A:\n        print('one') # M\n    if G % (A + B) <= A:\n        print('both') # G\n    elif G % (A + B) > A:\n        print('one') # G\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both') \n    elif a > A:\n        print('one')\n    if b <= A:\n        print('both')\n    elif b > A:\n        print('one')\n    if c <= A:\n        print('both')\n    elif c > A:\n        print('one')\n    \nmain()\n"]
2022-04-16 14:18:21.649492 size on output set 9
2022-04-16 14:18:21.649505 num operations 1
2022-04-16 14:18:21.649510 size on input set 1
2022-04-16 14:18:40.783332 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and \\\n       (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or \\\n         (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and \\\n       (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or \\\n         (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and \\\n       (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or \\\n         (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n    and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n    or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n    and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n    or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n    and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n    or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and\\\n       (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or\\\n         (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and\\\n       (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or\\\n         (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and\\\n       (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or\\\n         (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = aggressive_dog_1_start + a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = aggressive_dog_2_start + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = map(int, input().split())\n    p, m, g = map(int, input().split())\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a + c\n    # Aggressive dog 2\n    aggressive_dog_2_start = 0\n    aggressive_dog_2_end = d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650118701,
  "object": "edit"
}
2022-04-16 14:18:40.783726 fix syntax errors 9 ['\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and \\\n       (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or \\\n         (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and \\\n       (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or \\\n         (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and \\\n       (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or \\\n         (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n    and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n    or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n    and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n    or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n    and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n    or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and\\\n       (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or\\\n         (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and\\\n       (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or\\\n         (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and\\\n       (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or\\\n         (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) \\\n            or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) \\\n            or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) \\\n            or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = aggressive_dog_1_start + a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = aggressive_dog_2_start + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = map(int, input().split())\n    p, m, g = map(int, input().split())\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a + c\n    # Aggressive dog 2\n    aggressive_dog_2_start = 0\n    aggressive_dog_2_end = d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:18:40.783940 size on output set 9
2022-04-16 14:18:40.783952 num operations 1
2022-04-16 14:18:40.783957 size on input set 1
2022-04-16 14:18:53.230308 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    for i in range(N):\n        A, B, C, D = map(int, sys.stdin.readline().split())\n        P, M, G = map(int, sys.stdin.readline().split())\n        aggressiveA = A\n        aggressiveC = C\n        for i in [P, M, G]:\n            if i <= aggressiveA:\n                print(\"both\")\n            elif i <= aggressiveA + B:\n                print(\"one\")\n            elif i <= aggressiveA + B + aggressiveC:\n                print(\"both\")\n            elif i <= aggressiveA + B + aggressiveC + D:\n                print(\"one\")\n            else:\n                print(\"none\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n    aggressiveA = a\n    aggressiveC = c\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A * 2\n    aggressiveC = C * 2\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A * 2\n    aggressiveC = C * 2\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B * 2:\n            print(\"one\")\n        elif i <= aggressiveA + B * 2 + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B * 2 + aggressiveC + D * 2:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nprint(\"hello world\")\n"
    }
  ],
  "created": 1650118720,
  "object": "edit"
}
2022-04-16 14:18:53.230539 fix syntax errors 9 ['#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    for i in range(N):\n        A, B, C, D = map(int, sys.stdin.readline().split())\n        P, M, G = map(int, sys.stdin.readline().split())\n        aggressiveA = A\n        aggressiveC = C\n        for i in [P, M, G]:\n            if i <= aggressiveA:\n                print("both")\n            elif i <= aggressiveA + B:\n                print("one")\n            elif i <= aggressiveA + B + aggressiveC:\n                print("both")\n            elif i <= aggressiveA + B + aggressiveC + D:\n                print("one")\n            else:\n                print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print("both")\n        elif i <= aggressive_A + B:\n            print("one")\n        elif i <= aggressive_A + B + aggressive_C:\n            print("both")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n    aggressiveA = a\n    aggressiveC = c\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', 'import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A * 2\n    aggressiveC = C * 2\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A * 2\n    aggressiveC = C * 2\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B * 2:\n            print("one")\n        elif i <= aggressiveA + B * 2 + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B * 2 + aggressiveC + D * 2:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\nprint("hello world")\n']
2022-04-16 14:18:53.230665 size on output set 9
2022-04-16 14:18:53.230678 num operations 1
2022-04-16 14:18:53.230684 size on input set 1
2022-04-16 14:19:23.114528 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 1,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 2,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 3,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 4,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t, dog):\n    if dog == \"A\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"A\"\n        else:\n            return \"B\"\n    elif dog == \"B\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"A\"\n        elif t < A + B:\n            return \"B\"\n        else:\n            return \"C\"\n    elif dog == \"C\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"A\"\n        elif t < A + B:\n            return \"B\"\n        elif t < A + B + C:\n            return \"C\"\n        else:\n            return \"D\"\n    elif dog == \"D\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"A\"\n        elif t < A + B:\n            return \"B\"\n        elif t < A + B + C:\n            return \"C\"\n        else:\n            return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 5,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 6,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 7,
      "text": "A, B, C, D = map(int, input().split())\n\n\nP, M, G = map(int, input().split()) \n\n\ndef get_dog_status(A, B, C, D, t): \n    t = (t - 1) % (A + B + C + D)\n    if t < A: \n        return \"A\"\n    elif t < A + B: \n        return \"B\"\n    elif t < A + B + C: \n        return \"C\"\n    else: \n        return \"D\"\n\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\": \n        return \"aggressive\"\n    else: \n        return \"calm\"\n\n\ndef get_num_dogs_attacking(A, B, C, D, P): \n    dog1 = get_dog_status_at_time(A, B, C, D, P) \n    dog2 = get_dog_status_at_time(A, B, C, D, P) \n    if dog1 == \"aggressive\" and dog2 == \"aggressive\": \n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\": \n        return \"one\"\n    else: \n        return \"none\"\n\n\nprint(get_num_dogs_attacking(A, B, C, D, P)) \nprint(get_num_dogs_attacking(A, B, C, D, M)) \nprint(get_num_dogs_attacking(A, B, C, D, G)) \n"
    },
    {
      "index": 8,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\n\ndef get_dog_status(A, B, C, D, t):  # returns the status of dog A, B, C, or D at time t\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):  # returns the status of dog A or C at time t\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\n\ndef get_num_dogs_attacking(A, B, C, D, P):  # returns whether none, one, or both dogs are attacking at time P\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    }
  ],
  "created": 1650118733,
  "object": "edit"
}
2022-04-16 14:19:23.114906 fix syntax errors 9 ['\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t, dog):\n    if dog == "A":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "A"\n        else:\n            return "B"\n    elif dog == "B":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "A"\n        elif t < A + B:\n            return "B"\n        else:\n            return "C"\n    elif dog == "C":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "A"\n        elif t < A + B:\n            return "B"\n        elif t < A + B + C:\n            return "C"\n        else:\n            return "D"\n    elif dog == "D":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "A"\n        elif t < A + B:\n            return "B"\n        elif t < A + B + C:\n            return "C"\n        else:\n            return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', 'A, B, C, D = map(int, input().split())\n\n\nP, M, G = map(int, input().split()) \n\n\ndef get_dog_status(A, B, C, D, t): \n    t = (t - 1) % (A + B + C + D)\n    if t < A: \n        return "A"\n    elif t < A + B: \n        return "B"\n    elif t < A + B + C: \n        return "C"\n    else: \n        return "D"\n\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C": \n        return "aggressive"\n    else: \n        return "calm"\n\n\ndef get_num_dogs_attacking(A, B, C, D, P): \n    dog1 = get_dog_status_at_time(A, B, C, D, P) \n    dog2 = get_dog_status_at_time(A, B, C, D, P) \n    if dog1 == "aggressive" and dog2 == "aggressive": \n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive": \n        return "one"\n    else: \n        return "none"\n\n\nprint(get_num_dogs_attacking(A, B, C, D, P)) \nprint(get_num_dogs_attacking(A, B, C, D, M)) \nprint(get_num_dogs_attacking(A, B, C, D, G)) \n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\n\ndef get_dog_status(A, B, C, D, t):  # returns the status of dog A, B, C, or D at time t\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):  # returns the status of dog A or C at time t\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\n\ndef get_num_dogs_attacking(A, B, C, D, P):  # returns whether none, one, or both dogs are attacking at time P\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n']
2022-04-16 14:19:23.115021 size on output set 5
2022-04-16 14:19:23.115032 num operations 1
2022-04-16 14:19:23.115038 size on input set 1
2022-04-16 14:19:38.291162 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        a_mod = (i - a) % (b + a)\n        c_mod = (i - c) % (c + d)\n        if i > a and a_mod < a:\n            print('one')\n        else:\n            print('both')\n\n        if i > c and c_mod < c:\n            print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())[0]\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for j in [p, m, g]:\n        if j > a:\n            if (j - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if j > c:\n            if (j - c) % (c + d) < c:\n                print('one')\n            else:\n                print('both')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a or i > c:\n            if (i - a) % (b + a) < a or (i - c) % (c + d) < c:\n                print('both', end=' ')\n            else:\n                print('one', end=' ')\n        else:\n            print('both', end=' ')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('none')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('one')\n            else:\n                print('none')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650118763,
  "object": "edit"
}
2022-04-16 14:19:38.291497 fix syntax errors 9 ["\n\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else: \n            print('one')\n    else:\n        print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        a_mod = (i - a) % (b + a)\n        c_mod = (i - c) % (c + d)\n        if i > a and a_mod < a:\n            print('one')\n        else:\n            print('both')\n\n        if i > c and c_mod < c:\n            print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())[0]\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n\n    if p > a:\n        if (p - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for j in [p, m, g]:\n        if j > a:\n            if (j - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if j > c:\n            if (j - c) % (c + d) < c:\n                print('one')\n            else:\n                print('both')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a or i > c:\n            if (i - a) % (b + a) < a or (i - c) % (c + d) < c:\n                print('both', end=' ')\n            else:\n                print('one', end=' ')\n        else:\n            print('both', end=' ')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('none')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('one')\n            else:\n                print('none')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:19:38.291632 size on output set 8
2022-04-16 14:19:38.291652 num operations 1
2022-04-16 14:19:38.291658 size on input set 1
2022-04-16 14:19:58.905158 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):  # \uac1c \ubaa8\ub4dc \uad6c\ud558\uae30\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):  # \uac1c \uacf5\uaca9 \uc5ec\ubd80 \uad6c\ud558\uae30\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P, A, B, C, D))\n    print(get_dog_attack(M, A, B, C, D))\n    print(get_dog_attack(G, A, B, C, D))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm) -> str:\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time) -> str:\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "# coding: utf-8\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, a, b) == 'aggressive' and get_dog_status(time, c, d) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, a, b) == 'aggressive' or get_dog_status(time, c, d) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(p))\n    print(get_dog_attack(m))\n    print(get_dog_attack(g))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "#\n# import sys\n#\n# def main():\n#     A, B, C, D = map(int, sys.stdin.readline().split())\n#     P, M, G = map(int, sys.stdin.readline().split())\n#\n#     def get_dog_status(time, aggressive, calm):\n#         if time == 0:\n#             return 'aggressive'\n#         time -= 1\n#         if time < aggressive:\n#             return 'aggressive'\n#         time -= aggressive\n#         if time < calm:\n#             return 'calm'\n#         time -= calm\n#         return get_dog_status(time, aggressive, calm)\n#\n#     def get_dog_attack(time):\n#         if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n#             return 'both'\n#         elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n#             return 'one'\n#         else:\n#             return 'none'\n#\n#     print(get_dog_attack(P))\n#     print(get_dog_attack(M))\n#     print(get_dog_attack(G))\n#\n# if __name__ == '__main__':\n#     main()\n\n\n#\n# def main():\n#     N = int(input())\n#     S = input()\n#     K = int(input())\n#     print(*[s if s != S[K-1] else '*' for s in S], sep='')\n#\n# if __name__ == '__main__':\n#     main()\n\ndef main(): #\n    N = int(input())\n    S = input()\n    K = int(input())\n\n    print(*[s if s != S[K-1] else '*' for s in S], sep='')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650118778,
  "object": "edit"
}
2022-04-16 14:19:58.905514 fix syntax errors 9 ["\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):  # 개 모드 구하기\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):  # 개 공격 여부 구하기\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P, A, B, C, D))\n    print(get_dog_attack(M, A, B, C, D))\n    print(get_dog_attack(G, A, B, C, D))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm) -> str:\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time) -> str:\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    P, M, G = map(int, input().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, a, b) == 'aggressive' and get_dog_status(time, c, d) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, a, b) == 'aggressive' or get_dog_status(time, c, d) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(p))\n    print(get_dog_attack(m))\n    print(get_dog_attack(g))\n\nif __name__ == '__main__':\n    main()\n", "#\n# import sys\n#\n# def main():\n#     A, B, C, D = map(int, sys.stdin.readline().split())\n#     P, M, G = map(int, sys.stdin.readline().split())\n#\n#     def get_dog_status(time, aggressive, calm):\n#         if time == 0:\n#             return 'aggressive'\n#         time -= 1\n#         if time < aggressive:\n#             return 'aggressive'\n#         time -= aggressive\n#         if time < calm:\n#             return 'calm'\n#         time -= calm\n#         return get_dog_status(time, aggressive, calm)\n#\n#     def get_dog_attack(time):\n#         if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n#             return 'both'\n#         elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n#             return 'one'\n#         else:\n#             return 'none'\n#\n#     print(get_dog_attack(P))\n#     print(get_dog_attack(M))\n#     print(get_dog_attack(G))\n#\n# if __name__ == '__main__':\n#     main()\n\n\n#\n# def main():\n#     N = int(input())\n#     S = input()\n#     K = int(input())\n#     print(*[s if s != S[K-1] else '*' for s in S], sep='')\n#\n# if __name__ == '__main__':\n#     main()\n\ndef main(): #\n    N = int(input())\n    S = input()\n    K = int(input())\n\n    print(*[s if s != S[K-1] else '*' for s in S], sep='')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:19:58.905660 size on output set 8
