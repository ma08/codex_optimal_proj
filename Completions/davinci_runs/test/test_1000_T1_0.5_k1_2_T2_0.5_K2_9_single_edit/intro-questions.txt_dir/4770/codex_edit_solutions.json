["\n\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz needs\", N - M, \"more piece of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", M - N, \"pieces of chicken left over!\")\n", "\n\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else '')\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece(s) of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece(s) of chicken left over!\")\n", "\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n", "n,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz needs\",n-m,\"more piece of chicken!\")\nelif n<m:\n    print(\"Dr. Chaz will have\",m-n,\"piece of chicken left over!\")\n", "#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n", "\n\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover > 1 else \"s\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \"s\"))\n", "\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz will have\", N - M, \"piece[s] of chicken left over!\")\nelse:\n    print(\"Dr. Chaz will have\", M - N, \"piece[s] of chicken left over!\")\n", "\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {0} piece{1} of chicken left over!\".format(m-n, \"\" if m-n == 1 else \"s\"))\nelse:\n    print(\"Dr. Chaz needs {0} more piece{1} of chicken!\".format(n-m, \"\" if n-m == 1 else \"s\"))\n", "\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover != 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \"\"))\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz needs\",n-m,\"more piece[s] of chicken!\") \nelif n<m:\n    print(\"Dr. Chaz will have\",m-n,\"piece[s] of chicken left over!\")\n", "\n\nN, M = [int(x) for x in input().split()] #N is the number of people and M is the number of chicken legs\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M)) #if N is greater than M, then it will print the number of chicken legs that Dr. Chaz needs\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N)) #if M is greater than N, then it will print the number of chicken legs that Dr. Chaz will have left over\n", "\n\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover > 1 else \" \"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \" \"))\n", "\n\n#The following is the solution to the problem:\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m - n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n - m))\n", "\n\n# The following is the solution to the problem:\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(N - M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz needs\",n-m,\"more piece of chicken!\")\nelif n<m:\n    print(\"Dr. Chaz will have\",m-n,\"piece of chicken left over!\")\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece of chicken left over!\")\n", "\n\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m-n, \"\" if m-n == 1 else \"s\",))\nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n-m, \"\" if n-m == 1 else \"s\",))\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz needs\",n-m,\" more piece[s] of chicken!\")\nelif n<m:\n    print(\"Dr. Chaz will have\",m-n,\" piece[s] of chicken left over!\")\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz needs\",n-m,\"more piece[s] of chicken!\") # print the number of chicken pieces needed\nelif n<m:\n    print(\"Dr. Chaz will have\",m-n,\"piece[s] of chicken left over!\") # print the number of chicken pieces left over\n", "\n\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz needs\", N - M, \"more piece of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", M - N, \"piece of chicken left over!\")\n", "\nn = int(input())\nif n % 2 == 0:\n    print(\"Bob\")\nelse:\n    print(\"Alice\")\n", "\n\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m-n, \"\" if m-n==1 else \"s\"))\nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n-m, \"\" if n-m==1 else \"s\"))\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(f\"Dr. Chaz needs {n-m} more piece[s] of chicken!\")\nelif n<m:\n    print(f\"Dr. Chaz will have {m-n} piece[s] of chicken left over!\")\n", "\n\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(N - M, \"s\" if N - M > 1 else \"\"))\nelse:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(M - N, \"s\" if M - N > 1 else \"\"))\n", "\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover != 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover != -1 else \"\"))\n", "\n\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz needs\", N - M, \"more piece(s) of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", M - N, \"piece(s) of chicken left over!\")\n", "\n\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else '')) \n", "import sys\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(n-m))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(m-n))\n", "\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else '')) \n", "# https://open.kattis.com/problems/chicken2\n\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover > 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \"\"))\n", "\n\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m - n, \"\" if m - n == 1 else \"s\"))\nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n - m, \"\" if n - m == 1 else \"s\"))\n", "\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m-n, \"\" if m-n == 1 else \"s\"))\nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n-m, \"\" if n-m == 1 else \"s\"))\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(f\"Dr. Chaz needs {n-m} more piece[s] of chicken!\")\nelse:\n    print(f\"Dr. Chaz will have {m-n} piece[s] of chicken left over!\")\n", "\n\n#The following is the solution to the problem: https://open.kattis.com/problems/chicken\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece[s] of chicken!\") \nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece[s] of chicken left over!\")\n", "\nprint(input().replace(\" \",\"\"))\n", "\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else ''))\n", "\n\n#The following is the solution to the problem\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\n\n#The following is the solution to the problem: https://open.kattis.com/problems/chickeneating\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\nprint(n, m)\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece[s] of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece[s] of chicken left over!\")\n", "\n\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) != 1 else ''))\n", "\n\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover != 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover != -1 else \"\"))\n", "\nn = int(input())\nfor i in range(1, n + 1):\n    print(i, end=' ')\n", "\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz needs\", N - M, \"more piece of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", M - N, \"piece of chicken left over!\")\n", "\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece[s] of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece[s] of chicken left over!\")\n", "\n\nn, m = map(int, raw_input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover > 1 else \"\"))\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover < -1 else \"\"))\n", "\n\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz will have\", N - M, \"piece[s] of chicken left over!\")\nelse:\n    print(\"Dr. Chaz needs\", M - N, \"more piece[s] of chicken!\")\n", "\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M))\nelse:\n\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n"]