["def answer(s: str) -> str:\n    return ''.join(s[0].upper() for s in s.split())\n\n\ndef main():\n    s = input()\n    print(answer(s))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "s1,s2,s3=map(str,input().split())\nprint((s1[0]+s2[0]+s3[0]).upper())", "def abc059a(s1: str, s2: str, s3: str) ->str:\n    return s1[0].upper() + s2[0].upper() + s3[0].upper()\n\ns1, s2, s3 = list(map(str, input().split()))\nprint((abc059a(s1, s2, s3)))\n", "A,B,C = input().split()\n\ninitial = A[0] + B[0] + C[0]\ninitial = initial.upper()\nprint(initial)", "def atc_059a(input_value: str) -> str:\n    S = input_value.split(\" \")\n    SSS = S[0][0].upper() + S[1][0].upper() + S[2][0].upper()\n    return SSS\n\ninput_value = input()\nprint((atc_059a(input_value)))\n", "a = input().split()\nprint(a[0][0].upper()+a[1][0].upper()+a[2][0].upper())", "a, b, c = map(str, input().split())\nd = a[0] + b[0] + c[0]\nprint(d.upper())", "a,b,c=input().split()\nprint((a[0]+b[0]+c[0]).upper())", "def atc_059a(input_value: str) -> str:\n    S = input_value.split(\" \")\n    SSS = S[0][0].upper() + S[1][0].upper() + S[2][0].upper()\n    return SSS\n\ninput_value = input()\nprint((atc_059a(input_value)))\n", "S = input().split()\n\nmy_list = []\n\nfor i in range(len(S)):\n    S[i] = S[i].title()\n    my_list.append(S[i][0])\n\nprint(my_list[0]+my_list[1]+my_list[2])", "a, b, c = input().split()\nprint((a[0] + b[0] + c[0]).upper())", "# \u5358\u8a9e\uff13\u3064\u304c\u7a7a\u767d\u533a\u5207\u308a\u3067\u4e0e\u3048\u3089\u308c\u308b\n# \u53cd\u8a9e\u306e\u5148\u982d\u306e\u6587\u5b57\u3092\u3064\u306a\u3052\u308b\n# \u5927\u6587\u5b57\u306b\u3059\u308b\n\na,b,c = map(str, input().split())\n\nword = a[0]+b[0]+c[0]\n\nprint(word.upper())", "a,b,c=input().split(\" \")\nprint((a[0]+b[0]+c[0]).upper())", "a, b, c = input().split()\nprint((a[0]+b[0]+c[0]).upper())", "a,b,c = input().split()\n\ns = a[0]+b[0]+c[0]\nprint(s.upper())", "# 1.\u3000s1,s2,s3\u3092\u5165\u529b\u3059\u308b\ns1, s2, s3 = list(map(str,input().split()))\n\n# 2.\u3000s1,s2,s3\u306e\u5148\u982d\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u4e00\u3064\u306e\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3059\u308b\ns_list = [s1[0], s2[0], s3[0]]\n\n# 3.\u30002\u3092\u7d50\u5408\u3057\u3001\u5927\u6587\u5b57\u306b\u3059\u308b\ns = \"\".join(s_list)\nss = s.upper()\n\n# 4.\u30003\u3092\u5927\u6587\u5b57\u306b\u3059\u308b\nprint(ss)\n", "s1, s2, s3 = input().split()\nans = str(chr(ord(s1[0]) - 32) + chr(ord(s2[0]) - 32) + chr(ord(s3[0]) - 32))\nprint(ans)\n", "a,b,c=input().split()\nprint((a[0]+b[0]+c[0]).upper())", "texts = list(map(str, input().split()))\n\nresult = \"\"\nfor text in texts:\n    result = result + text[0].upper()\nprint(result)", "#https://atcoder.jp/contests/abc059/tasks/abc059_a\nS_list = list(input().split())\nS = [i[0] for i in S_list]\nprint(\"\".join(S).upper())", "a = input().split()\nres = \"\"\nfor i in range(len(a)):\n    a[i] = a[i].upper()\n    res += a[i][0]\nprint(res)", "s1,s2,s3 = input().split()\nprint((s1[0]+s2[0]+s3[0]).upper())", "s=input().split()\nprint((s[0][0]+s[1][0]+s[2][0]).upper())", "def answer(a: str, b: str, c: str) -> str:\n    return (a[0]+b[0]+c[0])\n\na,b,c=input().split()\nprint(answer(a,b,c).upper())", "s1, s2, s3 = list(map(str, input().split()))\nprint(((s1[0] + s2[0] + s3[0]).upper()))\n", "a, b, c = map(str, input().split())\nprint((a[0] + b[0] + c[0]).upper())", "s = list(map(str,input().upper().split()))\nprint(s[0][0]+s[1][0]+s[2][0])", "s = input().split()\nprint(f\"{s[0][0]}{s[1][0]}{s[2][0]}\".upper())", "Tre_words = input().split()\ns1 = (Tre_words[0].title())\ns2 = (Tre_words[1].title())\ns3 = (Tre_words[2].title())\nA = list(s1)\nB = list(s2)\nC = list(s3)\n\nprint(A[0]+B[0]+C[0])", "a,b,c=map(str,input().split())\n\nprint(a[0].upper() + b[0].upper() + c[0].upper())", "s1, s2, s3 = list(map(str, input().split()))\n\ndef three_letter_acronym() -> str:\n    return (s1[0] + s2[0] + s3[0])\nprint(three_letter_acronym().upper())", "s1, s2, s3 = map(str, input().split())\n\nS = s1[0] + s2[0] + s3[0]\n\nprint(S.upper())", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\ndef main():\n    words = list(input().split())\n    print((words[0][0]+words[1][0]+words[2][0]).upper())\n\ndef __starting_point():\n    main()\n__starting_point()", "# 3\u3064\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3001\u5404\u982d\u6587\u5b57\u3092\u304f\u3063\u3064\u3051\u305f\u7565\u8a9e\u3092\u30a2\u30c3\u30d1\u30fc\n\ns1, s2, s3 = list(map(list, input().split()))\n# print(s1)\n# print(s2)\n# print(s3)\n\nabbreviation = s1[0] + s2[0] + s3[0]\n# print(abbreviation)\n\nprint((abbreviation.upper()))\n", "def generate_acronym(l1: list) -> str:\n    answer = \"\"\n    for i, word in enumerate(l1):\n        # answer.append(word[0].upper())\n        answer += word[0].upper()\n\n    return answer\n\n\nlists = list(map(str, input().split()))\nprint((generate_acronym(lists)))\n", "s1,s2,s3=input().split()\n\ns1=s1[0]\ns2=s2[0]\ns3=s3[0]\n\nprint(s1.upper()+s2.upper()+s3.upper())", "s = list(input().split())\n\ns1 = s[0]\ns2 = s[1]\ns3 = s[2]\n\nprint((s1[0]+s2[0]+s3[0]).upper())", "S = list(map(str, input().split()))\n\n# \u5358\u8a9e\u306e\u5148\u982d\u306e\u6587\u5b57\u3092\u3064\u306a\u3052\u3001\u5927\u6587\u5b57\u306b\u3057\u305f\u7565\u8a9e\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\n\ns1 = S[0][0].upper()\ns2 = S[1][0].upper()\ns3 = S[2][0].upper()\n\nprint(s1 + s2 + s3)", "# A - Three-letter acronym\n\n# s1 s2 s3\ns1, s2, s3 = list(map(str, input().split(maxsplit=3)))\n\nanswer = s1[0].upper() + s2[0].upper() + s3[0].upper()\n\nprint(answer)\n", "def iroha():\n    a, b, c = input().split()\n\n    shead = a[0].upper()\n    sshead = b[0].upper()\n    ssshead = c[0].upper()\n\n    print((shead + sshead + ssshead))\n\ndef __starting_point():\n    iroha()\n\n__starting_point()", "a,b,c=input().split()\nprint(((a[0]+b[0]+c[0]).upper()))\n", "s = [x for x in input().split()]\nprint(s[0][0].upper() + s[1][0].upper() + s[2][0].upper())", "S1,S2,S3 = map(str,input().split())\n\nstring = str.upper(S1[0] + S2[0] + S3[0])\nprint(string)", "a, b, c = input().split()\nans = a[0] + b[0] + c[0]\nA = ans.upper()\nprint(A)", "s1,s2,s3 = input().upper().split()\nprint('{}{}{}'.format(s1[0],s2[0],s3[0]))", "s1,s2,s3 = map(str,input().split())\nprint((s1[0]+s2[0]+s3[0]).upper())", "words = str(input()).upper()\nwords_list = words.split(' ')\n\nprint((words_list[0][0] + words_list[1][0] + words_list[2][0]))\n\n\n\n", "a,b,c=input().split()\nprint(a[0].upper()+b[0].upper()+c[0].upper())", "a,b,c=map(str,input().split())\na=a.upper()\nb=b.upper()\nc=c.upper()\nprint(a[0]+b[0]+c[0])", "a,b,c = list(map(str, input().split()))\n\na=a.upper()\nb=b.upper()\nc=c.upper()\n\nprint((a[0]+b[0]+c[0]))\n", "#n = int(input())\na, b, c = list(map(str, input().split()))\n#l = list(map(int,input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\n\na = a.upper()\nb = b.upper()\nc = c.upper()\nprint((a[0]+b[0]+c[0]))\n", "# \u6587\u5b57\u5217\u306e\u53d6\u5f97\nstrlist = list(map(str,input().split()))\nlnum = len(strlist)\n\n# \u5148\u982d\u6587\u5b57\u306e\u5927\u6587\u5b57\u51fa\u529b\nhead = \"\"\nfor cnt in range(0,lnum,1):\n    head = head + (strlist[cnt][:1])\nprint(head.upper())", "s1, s2, s3 = input().split()\n\nprint((s1[0] + s2[0] + s3[0]).upper())", "S=list(input().split())\nfor i in range(3):\n    S[i]=S[i].upper()\nprint((S[0][0]+S[1][0]+S[2][0]))\n", "a, b, c = map(str,input().split())\n\nS = a[0] + b[0] + c[0]\nprint(S.upper())", "a,b,c=map(str,input().split())\nprint(a[0].upper()+b[0].upper()+c[0].upper())", "a,b,c = input().split()\nd = a[0]+b[0]+c[0]\nprint(str.upper(d))", "s1, s2, s3 = input().split()\n\ntop = s1[0] + s2[0] + s3[0]\nprint(top.upper())", "def generate_acronym(l1: list) -> str:\n    answer = \"\"\n    for word in l1:\n        # answer.append(word[0].upper())\n        answer += word[0].upper()\n\n    return answer\n\n\nlists = list(map(str, input().split()))\nprint((generate_acronym(lists)))\n", "a,b,c=map(str,input().split())\n\na=a.upper()\nb=b.upper()\nc=c.upper()\n\nprint(str(a[0])+b[0]+c[0])", "s1, s2, s3 = list(map(str, input().split()))\nprint((s1[0] + s2[0] + s3[0]).upper())", "for s in input().upper().split():\n    print(s[0], end='')", "s1,s2,s3=input().split()\ns=s1[0]+s2[0]+s3[0]\nprint(s.upper())", "a, b, c = input().split()\n\nA = list(a)\nB = list(b)\nC = list(c)\n\nans = A[0] + B[0] + C[0]\nprint(ans.upper())", "s = list(input().split())\n\ns1 = s[0]\ns2 = s[1]\ns3 = s[2]\n\nprint((s1[0] + s2[0] + s3[0]).upper())", "a,b,c = input().split()\n\nn = a[0]+b[0]+c[0]\nprint((n.upper()))\n", "a,b,c=input().split()\nprint(a.upper()[0],b.upper()[0],c.upper()[0],sep=\"\")", "s1, s2, s3 = map(str, input().split())\nprint(s1[0].upper() + s2[0].upper() + s3[0].upper())", "s = input().split()\ns1 = list(s[0])\ns2 = list(s[1])\ns3 = list(s[2])\nprint(s1[0].upper()+s2[0].upper()+s3[0].upper())", "s1, s2, s3 = input().upper().split()\nprint((\"{}{}{}\".format(s1[0], s2[0], s3[0])))\n", "a,b,c = input().split()\nprint(str.upper(a[0]+b[0]+c[0]))", "a, b, c = input().split()\na = a.upper()\nb = b.upper()\nc = c.upper()\nprint(a[0]+b[0]+c[0])", "a, b, c = input().split()\n\nprint(((a[0]+b[0]+c[0]).upper()))\n", "print(''.join(s[0].upper() for s in input().split()))", "s1,s2,s3 = input().split()\ns = s1[0].upper() + s2[0].upper() + s3[0].upper()\nprint(s)", "print(''.join(s[0].upper() for s in input().split()))", "a,b,c=input().split()\nprint(a[0].upper()+b[0].upper()+c[0].upper())", "s1, s2, s3 = list(map(str, input().split()))\nprint(((s1[0]+s2[0]+s3[0]).upper()))\n", "# 3\u3064\u306e\u5358\u8a9e\u3092\u5165\u529b\u3067\u53d7\u3051\u53d6\u308b\ns1,s2,s3 = input().split()\n# \u305d\u308c\u305e\u308c\u306e\u982d\u6587\u5b57\u3092\u96c6\u3081\u3066\u5927\u6587\u5b57\nshort = str.upper(s1[0]+s2[0]+s3[0])\nprint(short)", "for a in input().upper().split():\n    print(a[0],end='')", "S = list(map(str,input().split()))\na = S[0][0].upper()\nb = S[1][0].upper()\nc = S[2][0].upper()\nprint(a + b + c)", "a,b,c=map(str.upper,input().split())\nprint(a[0]+b[0]+c[0])", "'''\nabc059 A - Three-letter acronym\nhttps://atcoder.jp/contests/abc059/tasks/abc059_a\n'''\n\ns = list(input().split())\nans = ''\nfor i in s:\n    ans += i[0].upper()\nprint(ans)\n", "a, b, c = input().split()\n\nprint(a[0].upper() + b[0].upper() + c[0].upper())", "n, m, l = input().split()\nprint(n[0].upper()+m[0].upper()+l[0].upper())", "s1, s2, s3 =map(str,input().split())\nans = [s1[0].upper(), s2[0].upper(), s3[0].upper()  ]\nprint(''.join(ans))", "s1,s2,s3 = input().split()\nS = s1[0] + s2[0] + s3[0]\nprint(S.upper())", "# A - Three-letter acronym\n# https://atcoder.jp/contests/abc059/tasks/abc059_a\n\ns1, s2, s3 = list(map(str, input().split()))\n\nprint((s1[0].upper() + s2[0].upper() + s3[0].upper()))\n", "a, b, c = input().split()\n\ndef answer(a: str, b: str, c: str) -> str:\n    return ((a[0] + b[0] + c[0]).upper())\n\nprint((answer(a, b, c)))\n", "s1, s2, s3 = input().split()\n\nS = s1[0] + s2[0] + s3[0]\nprint(S.upper())", "S1, S2, S3 = map(str,input().split())\n\nlist_join = (S1[0] + S2[0] + S3[0])\n\n\n\nprint(list_join.upper())", "S1, S2, S3 = map(str, input().split())\nprint((S1[0] + S2[0] + S3[0]).upper())", "a,b,c=list(map(str,input().split()))\ndef answer(a:str,b:str,c:str)->str:\n    return (a[0]+b[0]+c[0]).upper()\nprint((answer(a,b,c)))\n", "a,b,c=input().split()\na,b,c=a.capitalize(),b.capitalize(),c.capitalize()\nprint(a[0]+b[0]+c[0])", "a, b, c = input().split()\n\nn = a[0] + b[0] + c[0]\nprint(n.upper())", "A, B, C = list(map(str, input().split()))\n\nprint(((A[0]+B[0]+C[0]).upper()))\n", "s1, s2, s3 = list(map(str, input().split()))\n\nprint((str.upper(s1[0]) + str.upper(s2[0]) + str.upper(s3[0])))\n", "s1,s2,s3 = map(str, input().split())\ns= s1[0]+s2[0]+s3[0]\n\nprint(s.upper())", "a, b, c = input().split()\nd = a[0] + b[0] + c[0]\nprint(d.upper())"]