2022-04-16 07:36:44.574288 num operations 1
2022-04-16 07:36:44.574306 size on input set 1
2022-04-16 07:36:58.321185 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: -x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: -x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: -x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: -x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\nred.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 4,
      "text": "\nN = int(input())\n\nred = []\nblue = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: -x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: -x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 6,
      "text": "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: (x[1], x[0]))\nblue.sort(key=lambda x: (x[0], x[1]))\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 7,
      "text": "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\n# red.sort(key=lambda x: x[1])\n# blue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    },
    {
      "index": 8,
      "text": "import sys\ninput = sys.stdin.readline\n\n\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1], reverse=True)\nblue.sort(key=lambda x: x[0], reverse=True)\nblue.sort(key=lambda x: x[1], reverse=True)\n\ncount = 0\nfor i in range(N):\n    for j in range(N):\n        if red[i][0] < blue[j][0] and red[i][1] < blue[j][1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"
    }
  ],
  "created": 1650094604,
  "object": "edit"
}
2022-04-16 07:36:58.321456 fix syntax errors 9 ['\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', '\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: -x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: -x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', '\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: -x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: -x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', '\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\nred.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', '\nN = int(input())\n\nred = []\nblue = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', '\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: -x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: -x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', '\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: (x[1], x[0]))\nblue.sort(key=lambda x: (x[0], x[1]))\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', '\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\n# red.sort(key=lambda x: x[1])\n# blue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n', 'import sys\ninput = sys.stdin.readline\n\n\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\n# red.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1], reverse=True)\nblue.sort(key=lambda x: x[0], reverse=True)\nblue.sort(key=lambda x: x[1], reverse=True)\n\ncount = 0\nfor i in range(N):\n    for j in range(N):\n        if red[i][0] < blue[j][0] and red[i][1] < blue[j][1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n']
2022-04-16 07:36:58.321580 size on output set 7
2022-04-16 07:36:58.321591 num operations 1
2022-04-16 07:36:58.321596 size on input set 1
2022-04-16 07:37:15.617013 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs)) \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nclass Point:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\n    def __lt__(self, other):\n        if self.y < other.y:\n            return True\n        if self.y == other.y and self.x < other.x:\n            return True\n        return False\n\ndef main():\n    n = int(sys.stdin.readline())\n    reds = []\n    blues = []\n    for i in range(n):\n        reds.append(Point(*map(int, sys.stdin.readline().split())))\n    for i in range(n):\n        blues.append(Point(*map(int, sys.stdin.readline().split())))\n    reds.sort()\n    blues.sort()\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if reds[i].x < blues[j].x and reds[i].y < blues[j].y:\n                count += 1\n                break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n#\n# import sys\n#\n# class Point:\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n#\n# class Pair:\n#     def __init__(self, r, b):\n#         self.r = r\n#         self.b = b\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     r = []\n#     b = []\n#     for _ in range(n):\n#         x, y = map(int, sys.stdin.readline().split())\n#         r.append(Point(x, y))\n#     for _ in range(n):\n#         x, y = map(int, sys.stdin.readline().split())\n#         b.append(Point(x, y))\n#     pairs = []\n#     for i in range(n):\n#         for j in range(n):\n#             if r[i].x < b[j].x and r[i].y < b[j].y:\n#                 pairs.append(Pair(r[i], b[j]))\n#     print(len(pairs))\n#\n# if __name__ == '__main__':\n#     main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs)) \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\nclass Point:\n    def __init__(self, x, y, c):\n        self.x = x\n        self.c = c\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650094618,
  "object": "edit"
}
2022-04-16 07:37:15.617286 fix syntax errors 9 ["\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs)) \n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Point:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\n    def __lt__(self, other):\n        if self.y < other.y:\n            return True\n        if self.y == other.y and self.x < other.x:\n            return True\n        return False\n\ndef main():\n    n = int(sys.stdin.readline())\n    reds = []\n    blues = []\n    for i in range(n):\n        reds.append(Point(*map(int, sys.stdin.readline().split())))\n    for i in range(n):\n        blues.append(Point(*map(int, sys.stdin.readline().split())))\n    reds.sort()\n    blues.sort()\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if reds[i].x < blues[j].x and reds[i].y < blues[j].y:\n                count += 1\n                break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# import sys\n#\n# class Point:\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n#\n# class Pair:\n#     def __init__(self, r, b):\n#         self.r = r\n#         self.b = b\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     r = []\n#     b = []\n#     for _ in range(n):\n#         x, y = map(int, sys.stdin.readline().split())\n#         r.append(Point(x, y))\n#     for _ in range(n):\n#         x, y = map(int, sys.stdin.readline().split())\n#         b.append(Point(x, y))\n#     pairs = []\n#     for i in range(n):\n#         for j in range(n):\n#             if r[i].x < b[j].x and r[i].y < b[j].y:\n#                 pairs.append(Pair(r[i], b[j]))\n#     print(len(pairs))\n#\n# if __name__ == '__main__':\n#     main()\n", "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs)) \n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\nif __name__ == '__main__':\n    main()\n", "import sys\n\nclass Point:\n    def __init__(self, x, y, c):\n        self.x = x\n        self.c = c\n        self.y = y\n\nclass Pair:\n    def __init__(self, r, b):\n        self.r = r\n        self.b = b\n\ndef main():\n    n = int(sys.stdin.readline())\n    r = []\n    b = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        r.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        b.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if r[i].x < b[j].x and r[i].y < b[j].y:\n                pairs.append(Pair(r[i], b[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 07:37:15.617449 size on output set 7
