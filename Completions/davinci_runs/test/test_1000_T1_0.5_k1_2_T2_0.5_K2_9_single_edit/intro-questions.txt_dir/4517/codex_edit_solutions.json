["\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(input())\n        v = list(map(int, input().split()))\n        queries.append(v)\n    return graph, queries\n\ndef dfs(graph, start, end):\n    visited = set()\n    stack = [(start, 0)]\n    while stack:\n        node, dist = stack.pop()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    stack.append((child, dist + 1))\n\ndef check_query(graph, query):\n    start = query[0]\n    for v in query[1:]:\n        if dfs(graph, start, v) == 1:\n            return True\n    return False\n\ndef main():\n    graph, queries = read_data()\n    for query in queries:\n        if check_query(graph, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(input())\n        v = list(map(int, input().split()))\n        queries.append(v)\n    return graph, queries\n\ndef dfs(graph, start, end):\n    visited = set()\n    stack = [(start, 0)]\n    while stack:\n        node, dist = stack.pop()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    stack.append((child, dist + 1))\n\ndef check_query(graph, query):\n    start = query[0]\n    for node in query[1:]:\n        if dfs(graph, start, node) == 1:\n            return True\n    return False\n\ndef main():\n    graph, queries = read_data()\n    for query in queries:\n        if check_query(graph, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\n# input = iter(['10 6', '1 2', '1 3', '1 4', '2 5', '2 6', '3 7', '7 8', '7 9', '9 10', '4 3 8 9 10', '3 2 4 6', '3 2 1 5', '3 4 8 2', '2 6 10', '3 5 4 7']).readline\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split()))\n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n\ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "\n\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n    \ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "\n\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\n#input = iter(['10 6', '1 2', '1 3', '1 4', '2 5', '2 6', '3 7', '7 8', '7 9', '9 10', '4 3 8 9 10', '3 2 4 6', '3 2 1 5', '3 4 8 2', '2 6 10', '3 5 4 7']).readline\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n\ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n    \ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "\n\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, input().split()) # n is number of nodes and m is number of queries\n    graph = defaultdict(list)\n    for _ in range(n - 1): # n-1 is the number of edges\n        u, v = map(int, input().split()) # u and v are the nodes connected by the edge\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m): # m is number of queries\n        k = int(input()) # k is number of nodes in the query\n        v = list(map(int, input().split())) # v is the list of nodes in the query\n        queries.append(v)\n    return graph, queries\n\ndef dfs(graph, start, end):\n    visited = set() # set of nodes already visited\n    stack = [(start, 0)] # stack of (node, distance) pairs\n    while stack:\n        node, dist = stack.pop() # pop the last added node and its distance\n        if node == end:\n            return dist # if node is the end node, return the distance\n        if node not in visited:\n            visited.add(node) # add the node to the visited set\n            for child in graph[node]: # for each child of the node\n                if child not in visited:\n                    stack.append((child, dist + 1)) # add the child to the stack with distance + 1\n\ndef check_query(graph, query):\n    start = query[0] # start is the first node in the query\n    for v in query[1:]:\n        if dfs(graph, start, v) == 1: # if the distance between the start node and the next node is 1, then the next node is the child of the start node\n            return True # return true\n    return False # return false\n\ndef main():\n    graph, queries = read_data() # read the data\n    for query in queries:\n        if check_query(graph, query): # if the query is valid, print YES\n            print(\"YES\")\n        else:\n            print(\"NO\") # otherwise, print NO\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(input())\n        v = list(map(int, input().split()))\n        queries.append(v)\n    return graph, queries\n\ndef dfs(graph, start, end):\n    visited = set()\n    stack = [(start, 0)]\n    while stack:\n        node, dist = stack.pop()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    stack.append((child, dist + 1))\n\ndef check_query(graph, query):\n    start = query[0]\n    for v in query[1:]:\n        if dfs(graph, start, v) != 1:\n            return True\n    return False\n\ndef main():\n    graph, queries = read_data()\n    for query in queries:\n        if check_query(graph, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\n#input = iter(['10 6', '1 2', '1 3', '1 4', '2 5', '2 6', '3 7', '7 8', '7 9', '9 10', '4 3 8 9 10', '3 2 4 6', '3 2 1 5', '3 4 8 2', '2 6 10', '3 5 4 7']).__next__\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n    \ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "\n\n\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(input())\n        v = list(map(int, input().split()))\n        queries.append(v)\n    return graph, queries\n\n\ndef dfs(graph, start, end):\n    visited = set()\n    stack = [(start, 0)]\n    while stack:\n        node, dist = stack.pop()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    stack.append((child, dist + 1))\n\n\ndef check_query(graph, query):\n    start = query[0]\n    for v in query[1:]:\n        if dfs(graph, start, v) == 1:\n            return True\n    return False\n\n\ndef main():\n    graph, queries = read_data()\n    for query in queries:\n        if check_query(graph, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom collections import defaultdict, deque\n\ndef read_data():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(input())\n        v = list(map(int, input().split()))\n        queries.append(v)\n    return graph, queries\n\ndef dfs(graph, start, end):\n    visited = set()\n    queue = deque([(start, 0)])\n    while queue:\n        node, dist = queue.popleft()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    queue.append((child, dist + 1))\n\ndef check_query(graph, query):\n    start = query[0]\n    for v in query[1:]:\n        if dfs(graph, start, v) == 1:\n            return True\n    return False\n\ndef main():\n    graph, queries = read_data()\n    for query in queries:\n        if check_query(graph, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python3\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\n#input = iter(['10 6', '1 2', '1 3', '1 4', '2 5', '2 6', '3 7', '7 8', '7 9', '9 10', '4 3 8 9 10', '3 2 4 6', '3 2 1 5', '3 4 8 2', '2 6 10', '3 5 4 7']).readline\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n    \ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "from collections import defaultdict\n\ndef read_data():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(input())\n        v = list(map(int, input().split()))\n        queries.append(v)\n    return graph, queries\n\ndef dfs(graph, start, end):\n    visited = set()\n    stack = [(start, 0)]\n    while stack:\n        node, dist = stack.pop()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    stack.append((child, dist + 1))\n\ndef check_query(graph, query):\n    start = query[0]\n    for v in query[1:]:\n        if dfs(graph, start, v) == 1:\n            return True\n    return False\n\ndef main():\n    graph, queries = read_data()\n    for query in queries:\n        if check_query(graph, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n'''\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\n#input = iter(['10 6', '1 2', '1 3', '1 4', '2 5', '2 6', '3 7', '7 8', '7 9', '9 10', '4 3 8 9 10', '3 2 4 6', '3 2 1 5', '3 4 8 2', '2 6 10', '3 5 4 7']).readline\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n    \ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n'''\n", "\n\nimport sys\ninput = sys.stdin.readline\n\n#input = iter(['10 6', '1 2', '1 3', '1 4', '2 5', '2 6', '3 7', '7 8', '7 9', '9 10', '4 3 8 9 10', '3 2 4 6', '3 2 1 5', '3 4 8 2', '2 6 10', '3 5 4 7']).readline()\n\ndef read():\n    return map(int, input().split())\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n    \ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "\n\n# Solution\n\nimport sys\nimport math\nimport numpy as np\ninput = sys.stdin.readline\n\n#input = iter(['10 6', '1 2', '1 3', '1 4', '2 5', '2 6', '3 7', '7 8', '7 9', '9 10', '4 3 8 9 10', '3 2 4 6', '3 2 1 5', '3 4 8 2', '2 6 10', '3 5 4 7']).__next__\n\ndef read():\n    return list(map(int, input().split()))\n\ndef read_array(f=int):\n    return list(map(f, input().split())) \n\ndef read_matrix(H, W, f=int):\n    '''\n    Reads an H of lines of space-separated elements of length W,\n    and returns a matrix (list of lists) of integers.\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(read_array(f))\n    return ret\n    \ndef read_tuple(typ):\n    return tuple(map(typ, input().split()))\n\ndef read_tuple_array(typ):\n    return [read_tuple(typ)]\n\n# If you need to read a single integer, use read()\n# If you need to read a space-separated list of integers, use read_array()\n# If you need to read a space-separated matrix of integers, use read_matrix()\n# If you need to read a space-separated list of integers of unknown length, use read_tuple()\n# If you need to read a space-separated list of tuples of integers, use read_tuple_array()\n\nN, M = read()\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for _ in range(V)]\n        self.visited = [False] * V\n        \n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n        self.adj[v].append(u)\n        \n    def dfs(self, u):\n        self.visited[u] = True\n        for v in self.adj[u]:\n            if not self.visited[v]:\n                self.dfs(v)\n    \n    def is_connected(self):\n        self.dfs(0)\n        return all(self.visited)\n    \n    def is_path(self, u, v):\n        self.visited = [False] * self.V\n        self.dfs(u)\n        return self.visited[v]\n    \n    def __repr__(self):\n        return str(self.adj)\n\ng = Graph(N)\n\nfor _ in range(N-1):\n    u, v = read()\n    g.add_edge(u-1, v-1)\n\nfor _ in range(M):\n    k = read_array()\n    k = k[0]\n    nodes = read_array()\n    nodes = [n-1 for n in nodes]\n    \n    #print(nodes)\n    if k == 1:\n        print(\"YES\")\n    else:\n        print(\"YES\" if all(g.is_path(nodes[0], n) for n in nodes[1:]) else \"NO\")\n", "\nfrom collections import defaultdict\n\n\ndef read_data() -> (dict, list):\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(input())\n        v = list(map(int, input().split()))\n        queries.append(v)\n    return graph, queries\n\ndef dfs(graph: dict, start: int, end: int) -> int:\n    visited = set()\n    stack = [(start, 0)]\n    while stack:\n        node, dist = stack.pop()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    stack.append((child, dist + 1))\n\ndef check_query(graph: dict, query: list) -> bool:\n    start = query[0]\n    for v in query[1:]:\n        if dfs(graph, start, v) == 1:\n            return True\n    return False\n\ndef main() -> None:\n    graph, queries = read_data()\n    for query in queries:\n        if check_query(graph, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"]