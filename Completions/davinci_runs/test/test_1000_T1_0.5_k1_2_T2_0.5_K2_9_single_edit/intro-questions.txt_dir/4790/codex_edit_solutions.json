["\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    # s = data[0]\n    # if len(s) == 1:\n    #     print(1)\n    #     return\n    # b_count = 0\n    # w_count = 0\n    # for i in range(len(s)):\n    #     if s[i] == 'B':\n    #         b_count += 1\n    #     else:\n    #         w_count += 1\n    # if b_count == w_count:\n    #     print(1)\n    #     return\n    # if b_count > w_count:\n    #     if b_count - w_count == 1:\n    #         print(1)\n    #         return\n    # if w_count > b_count:\n    #     if w_count - b_count == 1:\n    #         print(1)\n    #         return\n    # print(0)\n    print(data)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    string = raw_input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 1\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n#!/bin/python3\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n\ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        if len(line) == 1:\n            print(1)\n            continue\n        b_count = 0\n        w_count = 0\n        for i in range(len(line)):\n            if line[i] == 'B':\n                b_count += 1\n            else:\n                w_count += 1\n        if b_count == w_count:\n            print(1)\n            continue\n        if b_count > w_count:\n            if b_count - w_count == 1:\n                print(1)\n                continue\n        if w_count > b_count:\n            if w_count - b_count == 1:\n                print(1)\n                continue\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count or (b_count - w_count == 1) or (w_count - b_count == 1):\n        print(1, end='')\n    else:\n        print(0, end='')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "import math\n\ndef main():\n    stones = input()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1] and s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    s = input()\n    N = len(s)\n    if s.count('B') == s.count('W'): # BW, WB\n        print(1)\n        return\n    if s[0] == s[-1]: # B, W\n        if s.count(s[0]) == N - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\ndef main():\n    stones = input().split()\n    balance = 0\n    for stone in stones[1]:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    stones = input().strip()\n    balance = 0\n    for i in range(len(stones)):\n        if stones[i] == 'B':\n            balance += i+1\n        else:\n            balance -= i+1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    else:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0\\n')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1\\n')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1\\n')\n    else:\n        stdout.write('0\\n')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1\\n')\n    else:\n        stdout.write('0\\n')\n", "\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    for i in range(len(data)):\n        s = data[i]\n        if len(s) == 1:\n            print(1)\n            continue\n        b_count = 0\n        w_count = 0\n        for j in range(len(s)):\n            if s[j] == 'B':\n                b_count += 1\n            else:\n                w_count += 1\n        if b_count == w_count:\n            print(1)\n            continue\n        if b_count > w_count:\n            if b_count - w_count == 1:\n                print(1)\n                continue\n        if w_count > b_count:\n            if w_count - b_count == 1:\n                print(1)\n                continue\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    return count\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count or abs(b_count - w_count) == 1:\n        print('1')\n    else:\n        print('0')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#!/usr/bin/env python3\n", "\n\ndef main():\n    n = int(input())\n    x = int(input())\n    a = [0] * n\n    a[x - 1] = 1\n    for i in range(n - 1):\n        a[int(input()) - 1] += 1\n    print(a.count(0))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    string = list(input())\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == \"B\":\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = \"B\"\n    else:\n        target = \"W\"\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n    if black_count == white_count:\n        print(1)\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n    print(1)\n\nmain()\n", "\n#!/bin/python3\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "#number of test cases\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "# Python 3.6.3, Windows, UTF-8\n# PyCharm\n\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\nprint(\"hello\")\n", "\n\nimport sys\nimport math\n\n#get the number of rows and columns\nrows, columns = [int(x) for x in input().split()]\n\n#get the first row\nrow = input()\n\n#get the number of black and white stones\nb = row.count('B')\nw = row.count('W')\n\n#calculate the number of swaps needed\nswaps = math.ceil(b / 2) + math.ceil(w / 2)\n\n#output the number of swaps\nprint(swaps)\n", "#!usr/bin/python\n\nimport sys\nimport math\n\n#get the number of test cases\nt = int(raw_input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = raw_input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    score = 0\n    for i in range(n):\n        score += b[a[i] - 1]\n        if i > 0 and a[i] - a[i-1] == 1:\n            score += c[a[i-1] - 1]\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] != stones[-1]:\n        return 0\n    for i in range(1, len(stones)):\n        if stones[i] != stones[i-1]:\n            return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input(\"\")\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1 and len(string) != 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\ndef main():\n    string = input().strip()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\ndef main(stones):\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main(input()))\n", "\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1] and s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) <= 2:\n        return '0'\n    if stones[0] != stones[-1]:\n        return '1'\n    return '0'\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\nfile\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, \nthen it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, \nthen it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), \nthen it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\nimport sys\n\ndef main():\n    # data = sys.stdin.read().splitlines()\n    # s = data[0]\n    # if len(s) == 1:\n    #     print(1)\n    #     return\n    # b_count = 0\n    # w_count = 0\n    # for i in range(len(s)):\n    #     if s[i] == 'B':\n    #         b_count += 1\n    #     else:\n    #         w_count += 1\n    # if b_count == w_count:\n    #     print(1)\n    #     return\n    # if b_count > w_count:\n    #     if b_count - w_count == 1:\n    #         print(1)\n    #         return\n    # if w_count > b_count:\n    #     if w_count - b_count == 1:\n    #         print(1)\n    #         return\n    # print(0)\n    print(int(2.5) + int(2.5))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\nimport sys\nimport math\n\n# get the number of test cases\nnum_test_cases = int(input())\n\n# iterate through test cases\nfor i in range(num_test_cases):\n    # get the string of stones\n    stones = input()\n    # count the number of white stones\n    num_white_stones = stones.count('W')\n    # count the number of black stones\n    num_black_stones = stones.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if num_white_stones == num_black_stones:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "import sys\n\ndef main():\n    stones = sys.stdin.readline()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n#function to find the number of stones in each pile\ndef get_stones(s):\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #return the number of white stones and black stones\n    return w, b\nimport math\n\n#number of test cases\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = input()\n    w, b = get_stones(s)\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\ndef main():\n    string = input().strip()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print('0')\n        return\n    if black_count == white_count:\n        print('1')\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print('0')\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print('0')\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print('0')\n                    return\n    print('1')\n\nmain()\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1 or (black_count == 0 and white_count == 0):\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n        else:\n            print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        return 0\n    if black_count == white_count:\n        return 1\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    return 0\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    return 0\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    return 0\n    return 1\n\nprint(main())\n", "\n\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 1:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelif s.count('B') % 2 == 1 and s.count('W') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n#number of test cases\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:  # if the first and last stones are different\n        return 0\n    if len(stones) == 2:  # if there are only 2 stones\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    if string[0] == target:\n        if string[-1] != target and string[1] != target:\n            print(0)\n            return\n    elif string[-1] == target:\n        if string[-2] != target and string[0] != target:\n            print(0)\n            return\n    else:\n        for i in range(len(string)):\n            if string[i] == target:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\ndef main():\n    stones = input()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        \n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    stones = input().strip()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if len(stones) == 2:\n        return 1\n    if stones[0] == stones[-1]:\n        return 0\n    return 1\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\nimport sys\nimport math\n\n#number of test cases\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n"]