["\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].remove(0)\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].remove(0)\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].remove(0)\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].remove(0)\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].remove(0)\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].remove(0)\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = ([tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)]\n           + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)])\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data \n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data \n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data \n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data \n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"up\":\n            grid[i] = merge(grid[i], \"up\")\n            grid[i] = move(grid[i], \"up\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"down\")\n            grid[i] = move(grid[i], \"down\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)] \n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\n\ndef main():\n    grid = [[0 for _ in range(4)] for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = int(input())\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ') \n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].remove(0)\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].remove(grid[i][j+1])\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].remove(0)\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].remove(grid[j+1][i])\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].remove(grid[i][2-j])\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].remove(0)\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].remove(grid[2-j][i])\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))]\n            for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j + 1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j + 1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j + 1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j + 1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for i, tile in enumerate(row) if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for i, tile in enumerate(row) if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge pairs of tiles\n    row = [tile * 2 for i in range(len(row) - 1) for tile in row if tile == row[i + 1]] + [tile for i in range(len(row) - 1) for tile in row if tile != row[i + 1]]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\nimport sys\n\n\ndef move_left(grid_):\n    grid = grid_[:]\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i + 1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\n\ndef move_up(grid_):\n    grid = grid_[:]\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\n\ndef move_right(grid_):\n    grid = grid_[:]\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\n\ndef move_down(grid_):\n    grid = grid_[:]\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i] # Error\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i] # Error\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j] # Error\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j] # Error\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i] # Error\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i] # Error\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input()) - 1\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)][:-1]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"up\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)]\n    row += [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\n# This solution uses the merge function from the previous problem\n", "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].insert(0, 0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].insert(0, 0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].remove(grid[i][j])\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].remove(grid[i][j+1])\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].remove(grid[j][i])\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].remove(grid[j+1][i])\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].remove(grid[i][3-j])\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].remove(grid[i][2-j])\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].remove(grid[3-j][i])\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].remove(grid[2-j][i])\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].pop(j)\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].pop(j+1)\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].pop(i)\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].pop(i)\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].pop(3-j)\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].pop(2-j)\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].pop(i)\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].pop(i)\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef move_left(grid):\n    for i in range(4):\n        row = grid[i]\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n        grid[i] = row\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[i][j]\n\ndef move_right(grid):\n    for i in range(4):\n        row = grid[i]\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n        grid[i] = row\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[i][j]\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        move_left(grid)\n    elif direction == 1:\n        move_up(grid)\n    elif direction == 2:\n        move_right(grid)\n    elif direction == 3:\n        move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n#\n#\n# def main():\n#     x = []\n#     for _ in range(4):\n#         x.append(list(map(int, input().split())))\n#     d = int(input())\n#     x = move(x, d)\n#     for i in range(4):\n#         for j in range(4):\n#             print(x[i][j], end=' ')\n#         print()\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (len(grid) - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n", "# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n", "\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row for i in range(len(row) - 1) if tile == row[i + 1]] + [tile for tile in row for i in range(len(row) - 1) if tile != row[i + 1]]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]) - 1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))] \n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1] \n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n    \ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid += [new_row]\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n", "\n\ndef merge(line, direction):\n    for j in range(4):\n        if direction == \"left\":\n            if j > 0 and line[j] == line[j-1]:\n                line[j-1] = 2*line[j-1]\n                line[j] = 0\n        elif direction == \"right\":\n            if j < 3 and line[j] == line[j+1]:\n                line[j+1] = 2*line[j+1]\n                line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    if direction == \"0\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    elif direction == \"1\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    elif direction == \"2\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    elif direction == \"3\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):``\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"0\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"1\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"2\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"3\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in grid:\n        print(*i)\n\nif __name__ == '__main__':\n    main()\n", "\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))]\n            for i in range(len(arr[0])-1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))]\n            for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)] # noqa\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n", "\n# def merge(lst):\n#     if len(lst) <= 1:\n#         return lst\n#     else:\n#         i = 0\n#         while i < len(lst) - 1:\n#             if lst[i] == lst[i + 1]:\n#                 lst[i] = lst[i] * 2\n#                 lst.pop(i + 1)\n#             i += 1\n#         return lst\n#\n# def rotate(lst):\n#     new_lst = []\n#     for i in range(len(lst)):\n#         new_lst.append([])\n#         for row in lst:\n#             new_lst[i].append(row[i])\n#     return new_lst\n#\n# def move_left(grid):\n#     new_grid = []\n#     for row in grid:\n#         new_row = merge([i for i in row if i != 0])\n#         new_row += [0] * (4 - len(new_row))\n#         new_grid.append(new_row)\n#     return new_grid\n#\n# def move_up(grid):\n#     return move_left(rotate(rotate(rotate(grid))))\n#\n# def move_right(grid):\n#     return rotate(rotate(move_left(rotate(rotate(grid)))))\n#\n# def move_down(grid):\n#     return rotate(move_left(rotate(rotate(rotate(grid)))))\n#\n# grid = []\n# for i in range(4):\n#     grid.append(list(map(int, input().split())))\n#\n# direction = int(input())\n#\n# if direction == 0:\n#     new_grid = move_left(grid)\n# elif direction == 1:\n#     new_grid = move_up(grid)\n# elif direction == 2:\n#     new_grid = move_right(grid)\n# elif direction == 3:\n#     new_grid = move_down(grid)\n#\n# for row in new_grid:\n#     print(*row)\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 1\n        while i < len(lst):\n            if lst[i] == lst[i - 1]:\n                lst[i - 1] = lst[i - 1] * 2\n                lst.pop(i)\n            else:\n                i += 1\n    return lst\n\ndef rotate(lst):\n    new_lst = [[], [], [], []]\n    for row in lst:\n        for i in range(len(row)):\n            new_lst[i].append(row[i])\n    return new_lst[::-1]\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n", "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n    # 0 = left, 1 = up, 2 = right, 3 = down\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][0]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][0]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][0]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[0][i]\n                    grid[0].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][0]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][0]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[0][i]\n                    grid[0].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[0][i]\n                    grid[0].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input()) \n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4): \n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0: \n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]: \n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1: \n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0: \n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]: \n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2: \n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0: \n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]: \n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3: \n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0: \n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]: \n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i] # This line is the problem\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i] # This line is the problem\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j] # This line is the problem\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j] # This line is the problem\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i] # This line is the problem\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i] # This line is the problem\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]) - 1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n\tif direction == \"left\":\n\t\twhile 0 in line:\n\t\t\tline.remove(0)\n\t\twhile len(line) < 4:\n\t\t\tline.append(0)\n\telif direction == \"right\":\n\t\twhile 0 in line:\n\t\t\tline.remove(0)\n\t\twhile len(line) < 4:\n\t\t\tline.insert(0, 0)\n\treturn line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"0\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"1\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"2\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"3\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# This solution uses the merge function from the previous problem\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n", "# This program is designed to play the game 2048.\n# I have used the merge function from the previous problem.\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\ndirection = int(input())\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\nfor row in new_grid:\n    print(*row)\n", "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"up\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"]