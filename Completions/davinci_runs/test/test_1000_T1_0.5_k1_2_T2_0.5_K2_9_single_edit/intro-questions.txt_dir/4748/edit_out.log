2022-04-16 10:03:49.066159 num operations 1
2022-04-16 10:03:49.066177 size on input set 1
2022-04-16 10:04:05.878576 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join(str(x) for x in ans))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join(str(x) for x in ans))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join(str(x) for x in ans))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join(str(x) for x in ans))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join(str(x) for x in ans))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join(str(x) for x in ans))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join(str(x) for x in ans))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport re\n\n\n\ndef find_index(pattern, text):\n    \"\"\"Return a list of indices in text where the pattern is found\"\"\"\n    return [m.start() for m in re.finditer(pattern, text)]\n\n\ndef main():\n    text = sys.stdin.read()\n    pattern = sys.argv[1]\n    indices = find_index(pattern, text)\n    print(\" \".join([str(x) for x in indices]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    if n > 0:\n        ans[1] = (h-2)*2\n        ans[0] = 2 - n\n        if ans[1] < 0:\n            ans[0] = 2\n            ans[1] = 0\n        print(\" \".join([str(x) for x in ans]))\n    else:\n        print(\"Impossible\")\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join(str(x) for x in ans))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join(str(x) for x in ans))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join(str(x) for x in ans))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join(str(x) for x in ans))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join(str(x) for x in ans))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join(str(x) for x in ans))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join(str(x) for x in ans))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].strip().split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 0:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 1:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h - 2) * 2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n#\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650103429,
  "object": "edit"
}
2022-04-16 10:04:05.878982 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join(str(x) for x in ans))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join(str(x) for x in ans))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join(str(x) for x in ans))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join(str(x) for x in ans))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join(str(x) for x in ans))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join(str(x) for x in ans))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join(str(x) for x in ans))\n\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\nimport re\n\n\n\ndef find_index(pattern, text):\n    """Return a list of indices in text where the pattern is found"""\n    return [m.start() for m in re.finditer(pattern, text)]\n\n\ndef main():\n    text = sys.stdin.read()\n    pattern = sys.argv[1]\n    indices = find_index(pattern, text)\n    print(" ".join([str(x) for x in indices]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    if n > 0:\n        ans[1] = (h-2)*2\n        ans[0] = 2 - n\n        if ans[1] < 0:\n            ans[0] = 2\n            ans[1] = 0\n        print(" ".join([str(x) for x in ans]))\n    else:\n        print("Impossible")\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join(str(x) for x in ans))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join(str(x) for x in ans))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join(str(x) for x in ans))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join(str(x) for x in ans))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join(str(x) for x in ans))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join(str(x) for x in ans))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join(str(x) for x in ans))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].strip().split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 0:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 1:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h - 2) * 2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n#\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-16 10:04:05.879094 size on output set 9
2022-04-16 10:04:05.879107 num operations 1
2022-04-16 10:04:05.879113 size on input set 1
2022-04-16 10:04:17.278152 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    if h <= n:\n        print(0)\n    elif h <= m:\n        print(1)\n    elif h <= n+m:\n        print(2)\n    else: # h > n+m\n        print(h-n-m)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    if n + m >= h:\n        print('Yes')\n    elif n + m < h:\n        print('No')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0 \n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [0]*(h+1)\n    b = [0]*(h+1)\n    for i in range(1,h+1,1):\n        a[i] = 2*i\n        b[i] = i\n    if sum(a) <= n:\n        a = [0]*(h+1)\n    else:\n        a = [x-n for x in a]\n    if sum(b) <= m:\n        b = [0]*(h+1)\n    else:\n        b = [x-m for x in b]\n    print(max(a), max(b))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = c = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    c = a + b\n    print(c)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2 * i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a+b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650103445,
  "object": "edit"
}
2022-04-16 10:04:17.278579 fix syntax errors 9 ["\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    if h <= n:\n        print(0)\n    elif h <= m:\n        print(1)\n    elif h <= n+m:\n        print(2)\n    else: # h > n+m\n        print(h-n-m)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    if n + m >= h:\n        print('Yes')\n    elif n + m < h:\n        print('No')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0 \n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [0]*(h+1)\n    b = [0]*(h+1)\n    for i in range(1,h+1,1):\n        a[i] = 2*i\n        b[i] = i\n    if sum(a) <= n:\n        a = [0]*(h+1)\n    else:\n        a = [x-n for x in a]\n    if sum(b) <= m:\n        b = [0]*(h+1)\n    else:\n        b = [x-m for x in b]\n    print(max(a), max(b))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = c = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    c = a + b\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2 * i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a+b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:04:17.278655 size on output set 9
2022-04-16 10:04:17.278674 num operations 1
2022-04-16 10:04:17.278679 size on input set 1
2022-04-16 10:04:32.780732 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = height * (height + 1)\n    height_big_bricks = height * 2\n    if small_bricks >= height_small_bricks + big_bricks * 4:\n        return 0, big_bricks\n    return math.ceil((height_small_bricks - small_bricks) / 4), 0\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height // 2\n    height_big_bricks = 2 * height // 2\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks // 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 3,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height * 4\n    height_big_bricks = 2 * height * 4\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 5,
      "text": "\nimport math\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = ((2 * height - 1) * height) // 2\n    height_big_bricks = height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 7,
      "text": "\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks = height_small_bricks - small_bricks\n    height_big_bricks = height_big_bricks - big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 8,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = height * (2 * height - 1)\n    height_big_bricks = 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * height:\n        return height_small_bricks - big_bricks * height, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / height)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1650103457,
  "object": "edit"
}
2022-04-16 10:04:32.781073 fix syntax errors 9 ['\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = height * (height + 1)\n    height_big_bricks = height * 2\n    if small_bricks >= height_small_bricks + big_bricks * 4:\n        return 0, big_bricks\n    return math.ceil((height_small_bricks - small_bricks) / 4), 0\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height // 2\n    height_big_bricks = 2 * height // 2\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks // 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height * 4\n    height_big_bricks = 2 * height * 4\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = ((2 * height - 1) * height) // 2\n    height_big_bricks = height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks = height_small_bricks - small_bricks\n    height_big_bricks = height_big_bricks - big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = height * (2 * height - 1)\n    height_big_bricks = 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * height:\n        return height_small_bricks - big_bricks * height, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / height)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n']
2022-04-16 10:04:32.781140 size on output set 8
2022-04-16 10:04:32.781153 num operations 1
2022-04-16 10:04:32.781158 size on input set 1
2022-04-16 10:04:54.895774 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * (H - 1)\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    a, b = 0, 0\n    # Base case: height 1\n    if H == 1:\n        a = N\n        b = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * h\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = h\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        a = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        b = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if a > b:\n            a += 1\n            b -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\n# Set max recursion limit: 100000\nsys.setrecursionlimit(100000) \n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1 \n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1 \n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer of pyramid\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer of pyramid\n        bottom_layer = 2\n        # Calculate number of layers of pyramid\n        layers = H\n        # Calculate number of bricks in top half of pyramid\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half of pyramid\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid of pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid of pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed for pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed for pyramid\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed for pyramid\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed for pyramid,\n        # increase $2 \\times 2$-bricks needed for pyramid by 1 and decrease $4 \\times 2$-bricks needed for pyramid by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2x2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4x2-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650103472,
  "object": "edit"
}
2022-04-16 10:04:54.896205 fix syntax errors 9 ['\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * (H - 1)\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    a, b = 0, 0\n    # Base case: height 1\n    if H == 1:\n        a = N\n        b = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * h\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = h\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        a = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        b = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if a > b:\n            a += 1\n            b -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit: 100000\nsys.setrecursionlimit(100000) \n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1 \n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1 \n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer of pyramid\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer of pyramid\n        bottom_layer = 2\n        # Calculate number of layers of pyramid\n        layers = H\n        # Calculate number of bricks in top half of pyramid\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half of pyramid\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid of pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid of pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed for pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed for pyramid\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed for pyramid\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed for pyramid,\n        # increase $2 \\times 2$-bricks needed for pyramid by 1 and decrease $4 \\times 2$-bricks needed for pyramid by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2x2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4x2-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:04:54.896364 size on output set 8
2022-04-16 10:04:54.896377 num operations 1
2022-04-16 10:04:54.896382 size on input set 1
2022-04-16 10:05:04.335803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef count(h):\n    c = 0\n    for i in range(1, h+1):\n        c += (2*i - 1)\n    return c\n\nh, n, m = map(int, input().split())\n\na = count(h)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 2,
      "text": "\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2 * i - 1)\n    b += (2 * i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a // 2, m - (a // 2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 3,
      "text": "\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 4,
      "text": "\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 5,
      "text": "import sys\n\n\nh, n, m = map(int, sys.stdin.readline().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print('0', m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2), sep=' ')\n    else:\n        print(m, '0', sep=' ')\n"
    },
    {
      "index": 6,
      "text": "\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 7,
      "text": "\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n\n        print(m, 0)\n"
    },
    {
      "index": 8,
      "text": "h, n, m = map(int, input().split())\n\na = 0\nb = 0\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    }
  ],
  "created": 1650103494,
  "object": "edit"
}
2022-04-16 10:05:04.336093 fix syntax errors 9 ['\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', '\n\ndef count(h):\n    c = 0\n    for i in range(1, h+1):\n        c += (2*i - 1)\n    return c\n\nh, n, m = map(int, input().split())\n\na = count(h)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', '\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2 * i - 1)\n    b += (2 * i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a // 2, m - (a // 2))\n    else:\n        print(m, 0)\n', '\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', '\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', "import sys\n\n\nh, n, m = map(int, sys.stdin.readline().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print('0', m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2), sep=' ')\n    else:\n        print(m, '0', sep=' ')\n", '\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', '\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n\n        print(m, 0)\n', 'h, n, m = map(int, input().split())\n\na = 0\nb = 0\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n']
2022-04-16 10:05:04.336137 size on output set 6
2022-04-16 10:05:04.336149 num operations 1
2022-04-16 10:05:04.336154 size on input set 1
2022-04-16 10:05:50.372750 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = list(map(int, h_n_m))\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = [int(x) for x in input().split()]\n    h, n, m = h_n_m[0], h_n_m[1], h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print('0 0')\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print('0 0')\n                else:\n                    print('1 0')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print('1 0')\n                else:\n                    print('0 0')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    try:\n        h_n_m = input().split()\n        h_n_m = [int(x) for x in h_n_m]\n        h = h_n_m[0]\n        n = h_n_m[1]\n        m = h_n_m[2]\n        extra_2 = 0\n        extra_4 = 0\n        #print(h, n, m)\n        if h == 1:\n            print(0, 0)\n        elif h > 1:\n            if h % 2 == 0:\n                if h == 2:\n                    if n % 2 == 0:\n                        print(0, 0)\n                    else:\n                        print(1, 0)\n                else:\n                    if n % 2 == 0:\n                        extra_2 = 0\n                    else:\n                        extra_2 = 1\n                    if (h//2) - 1 <= m:\n                        extra_4 = 0\n                    else:\n                        extra_4 = (h//2) - 1 - m\n            else:\n                if h == 3:\n                    if n % 2 == 0:\n                        print(1, 0)\n                    else:\n                        print(0, 0)\n                else:\n                    if n % 2 == 0:\n                        extra_2 = 1\n                    else:\n                        extra_2 = 0\n                    if (h//2) - 1 <= m:\n                        extra_4 = 0\n                    else:\n                        extra_4 = (h//2) - 1 - m\n            print(extra_2, extra_4)\n    except (ValueError, IOError) as e:\n        print(e)\n        return 1\n\nif __name__ == '__main__':\n    try:\n        main()\n    except (ValueError, IOError) as e:\n        print(e)\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h, n, m = [int(x) for x in input().split()]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650103504,
  "object": "edit"
}
2022-04-16 10:05:50.373191 fix syntax errors 9 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = list(map(int, h_n_m))\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = [int(x) for x in input().split()]\n    h, n, m = h_n_m[0], h_n_m[1], h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print('0 0')\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print('0 0')\n                else:\n                    print('1 0')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print('1 0')\n                else:\n                    print('0 0')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    try:\n        h_n_m = input().split()\n        h_n_m = [int(x) for x in h_n_m]\n        h = h_n_m[0]\n        n = h_n_m[1]\n        m = h_n_m[2]\n        extra_2 = 0\n        extra_4 = 0\n        #print(h, n, m)\n        if h == 1:\n            print(0, 0)\n        elif h > 1:\n            if h % 2 == 0:\n                if h == 2:\n                    if n % 2 == 0:\n                        print(0, 0)\n                    else:\n                        print(1, 0)\n                else:\n                    if n % 2 == 0:\n                        extra_2 = 0\n                    else:\n                        extra_2 = 1\n                    if (h//2) - 1 <= m:\n                        extra_4 = 0\n                    else:\n                        extra_4 = (h//2) - 1 - m\n            else:\n                if h == 3:\n                    if n % 2 == 0:\n                        print(1, 0)\n                    else:\n                        print(0, 0)\n                else:\n                    if n % 2 == 0:\n                        extra_2 = 1\n                    else:\n                        extra_2 = 0\n                    if (h//2) - 1 <= m:\n                        extra_4 = 0\n                    else:\n                        extra_4 = (h//2) - 1 - m\n            print(extra_2, extra_4)\n    except (ValueError, IOError) as e:\n        print(e)\n        return 1\n\nif __name__ == '__main__':\n    try:\n        main()\n    except (ValueError, IOError) as e:\n        print(e)\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h, n, m = [int(x) for x in input().split()]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h // 2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h // 2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:05:50.373340 size on output set 8
