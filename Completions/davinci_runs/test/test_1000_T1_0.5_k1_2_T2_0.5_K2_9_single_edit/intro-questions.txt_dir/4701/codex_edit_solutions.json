["\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n-1, k) * 2, solve(n-1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n-1, k) * 2, solve(n-1, k) + k) \n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\ndef solve(n):\n    return n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\nn = int(input())\nk = int(input())\n\nminimum_value = n * k\nprint(minimum_value)\n", "\n\nn = int(input())\nk = int(input())\n\n# Number of operations A + Number of operations B = n => Number of operations B = n - Number of operations A\n# Number of operations A * 2 + Number of operations B * k = minimum value => Number of operations B * k = minimum value - Number of operations A * 2\n# Number of operations B = n - Number of operations A => Number of operations B * k = minimum value - Number of operations A * 2 => n - Number of operations A * k = minimum value - Number of operations A * 2\n# Number of operations A * 2 = n - Number of operations B * k => Number of operations A * 2 = n - minimum value + Number of operations A * 2 => Number of operations A * 2 = n - minimum value => Number of operations A = (n - minimum value) / 2\n# Number of operations B = n - Number of operations A => Number of operations B = n - (n - minimum value) / 2 => Number of operations B = minimum value / 2\n# minimum value = Number of operations B * k => minimum value = minimum value / 2 * k => minimum value = minimum value * k / 2\n# minimum value = n * k / 2\nminimum_value = n * k\nprint(minimum_value)\n", "\n\ndef solve(a, b):\n    if a < b:\n        return a\n    elif a > b:\n        return b\n    return a\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(solve(a, b))\n", "\n\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n-1, k) * 2 + 1, solve(n-1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\nn = int(input())\nk = int(input())\n\n# Number of operations A + Number of operations B = n\n# Number of operations A * 2 + Number of operations B * k = minimum value\n# Number of operations A * 2 = n - Number of operations B\n# Number of operations A = (n - Number of operations B) / 2\n# Number of operations A = (n - Number of operations B) / 2\n# Number of operations B = n - (n - Number of operations B) / 2\n# Number of operations B = n - n / 2 + Number of operations B / 2\n# Number of operations B = n / 2 + Number of operations B / 2\n# Number of operations B / 2 = n / 2\n# Number of operations B = n\n# Number of operations A = n - Number of operations B\n# Number of operations A = n - n\n# Number of operations A = 0\n# Number of operations B = n\n# minimum value = Number of operations B * k\nminimum_value = n * k\nprint(minimum_value)\n", "\n\ndef solve(n, k):\n    return min(solve(n-1, k) * 2, solve(n-1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k) if n > 0 else 0)\n", "\n\nn = int(input())\nk = int(input())\n\n# Number of operations A + Number of operations B = n\n# Number of operations A * 2 + Number of operations B * k = minimum value\n# Number of operations A * 2 = n - Number of operations B\n# Number of operations A = (n - Number of operations B) / 2\n# Number of operations B = n - (n - Number of operations B) / 2\n# Number of operations B = n - n / 2 + Number of operations B / 2\n# Number of operations B = n / 2 + Number of operations B / 2\n# Number of operations B / 2 = n / 2\n# Number of operations B = n\n# Number of operations A = n - Number of operations B\n# Number of operations A = n - n\n# Number of operations A = 0\n# Number of operations B = n\n# minimum value = Number of operations B * k\nminimum_value = n * k\nprint(minimum_value)\n", "\n\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n-1, k)*2, solve(n-1, k)+k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n-1, k) * 2, solve(n-1, k) + k) \n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\ndef solve(n, k):\n    return min(solve(n-1, k) * 2, solve(n-1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n"]