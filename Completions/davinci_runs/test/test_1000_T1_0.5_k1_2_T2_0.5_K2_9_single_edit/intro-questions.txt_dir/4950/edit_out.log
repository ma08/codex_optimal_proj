2022-04-16 14:49:19.791475 num operations 1
2022-04-16 14:49:19.791493 size on input set 1
2022-04-16 14:49:34.846700 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# import sys\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     times = [0] * n\n#     distances = [0] * n\n#     for i in range(n):\n#         times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n#\n#     max_speed = 0\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             time_diff = times[j] - times[i]\n#             dist_diff = distances[j] - distances[i]\n#             speed = dist_diff / time_diff\n#             if speed > max_speed:\n#                 max_speed = speed\n#\n#     print(max_speed)\n#\n# if __name__ == '__main__':\n#     main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n-1):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * (n + 1)\n    distances = [0] * (n + 1)\n    for i in range(n):\n        times[i + 1], distances[i + 1] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / time_diff\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0.0] * n\n    for i in range(n):\n        times[i], distances[i] = [float(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / time_diff\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import math\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(round(max_speed, 6))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\ttimes = [0] * n\n\tdistances = [0] * n\n\tfor i in range(n):\n\t\ttimes[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n\tmax_speed = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\ttime_diff = times[j] - times[i]\n\t\t\tdist_diff = distances[j] - distances[i]\n\t\t\tspeed = dist_diff / time_diff\n\t\t\tif speed > max_speed:\n\t\t\t\tmax_speed = speed\n\n\tprint(max_speed)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n-1):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = float(dist_diff) / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        time, distance = [int(x) for x in sys.stdin.readline().split()]\n        times.append(time)\n        distances.append(distance)\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650120559,
  "object": "edit"
}
2022-04-16 14:49:34.847035 fix syntax errors 9 ["\n#\n# import sys\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     times = [0] * n\n#     distances = [0] * n\n#     for i in range(n):\n#         times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n#\n#     max_speed = 0\n#     for i in range(n):\n#         for j in range(i+1, n):\n#             time_diff = times[j] - times[i]\n#             dist_diff = distances[j] - distances[i]\n#             speed = dist_diff / time_diff\n#             if speed > max_speed:\n#                 max_speed = speed\n#\n#     print(max_speed)\n#\n# if __name__ == '__main__':\n#     main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n-1):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * (n + 1)\n    distances = [0] * (n + 1)\n    for i in range(n):\n        times[i + 1], distances[i + 1] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / time_diff\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0.0] * n\n    for i in range(n):\n        times[i], distances[i] = [float(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / time_diff\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(round(max_speed, 6))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\ttimes = [0] * n\n\tdistances = [0] * n\n\tfor i in range(n):\n\t\ttimes[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n\tmax_speed = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\ttime_diff = times[j] - times[i]\n\t\t\tdist_diff = distances[j] - distances[i]\n\t\t\tspeed = dist_diff / time_diff\n\t\t\tif speed > max_speed:\n\t\t\t\tmax_speed = speed\n\n\tprint(max_speed)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n-1):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = [0] * n\n    distances = [0] * n\n    for i in range(n):\n        times[i], distances[i] = [int(x) for x in sys.stdin.readline().split()]\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = float(dist_diff) / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        time, distance = [int(x) for x in sys.stdin.readline().split()]\n        times.append(time)\n        distances.append(distance)\n\n    max_speed = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            time_diff = times[j] - times[i]\n            dist_diff = distances[j] - distances[i]\n            speed = dist_diff / float(time_diff)\n            if speed > max_speed:\n                max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:49:34.847215 size on output set 8
2022-04-16 14:49:34.847227 num operations 1
2022-04-16 14:49:34.847233 size on input set 1
2022-04-16 14:49:41.500819 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed)) # print the result\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / float(time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n    \nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650120574,
  "object": "edit"
}
2022-04-16 14:49:41.501102 fix syntax errors 9 ['import sys\n\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed)) # print the result\n    \nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / float(time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n    \nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n    \nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    max_speed = 0\n    prev_time = 0\n    prev_dist = 0\n    for i in range(n):\n        time, dist = map(int, sys.stdin.readline().strip().split())\n        speed = (dist - prev_dist) / (time - prev_time)\n        if speed > max_speed:\n            max_speed = speed\n        prev_time, prev_dist = time, dist\n    print(int(max_speed))\n    \nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:49:41.501209 size on output set 7
2022-04-16 14:49:41.501221 num operations 1
2022-04-16 14:49:41.501226 size on input set 1
2022-04-16 14:49:48.890670 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) / (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\"\"\"\nhttps://open.kattis.com/problems/speedlimit\n\"\"\"\n\n\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) / (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650120581,
  "object": "edit"
}
2022-04-16 14:49:48.890926 fix syntax errors 9 ["\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) / (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n", '"""\nhttps://open.kattis.com/problems/speedlimit\n"""\n\n\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) // (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == \'__main__\':\n    main()\n', "\ndef main():\n    n = int(input())\n    times = []\n    dists = []\n    for i in range(n):\n        line = input().split()\n        times.append(int(line[0]))\n        dists.append(int(line[1]))\n\n    max_speed = 0\n    for i in range(1, n):\n        speed = (dists[i] - dists[i - 1]) / (times[i] - times[i - 1])\n        if speed > max_speed:\n            max_speed = speed\n\n    print(max_speed)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:49:48.891078 size on output set 5
2022-04-16 14:49:48.891091 num operations 1
2022-04-16 14:49:48.891098 size on input set 1
2022-04-16 14:50:25.310089 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    \"\"\"\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    \"\"\"\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    \"\"\"\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    \"\"\"\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(float, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    \"\"\"\n    n = int(input())\n    max_speed = 0\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speed = d / t\n        if speed > max_speed:\n            max_speed = speed\n    print(int(max_speed))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    input:\n        n: number of test cases\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    \"\"\"\n    n = int(input())\n    for _ in range(n):\n        m, k = map(int, input().split())\n        r_q, c_q = map(int, input().split())\n        obstacles = []\n        for _ in range(k):\n            r, c = map(int, input().split())\n            obstacles.append((r, c))\n        print(calculate_squares(m, k, r_q, c_q, obstacles))\n\ndef calculate_squares(m, k, r_q, c_q, obstacles):\n    \"\"\"\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    \"\"\"\n    squares = 0\n    for r in range(1, m + 1):\n        for c in range(1, m + 1):\n            if (r, c) in obstacles:\n                continue\n            if valid_square(m, r_q, c_q, r, c):\n                squares += 1\n    return squares\n\ndef valid_square(m, r_q, c_q, r, c):\n    \"\"\"\n    input:\n        m: size of grid\n        r_q: row of queen\n        c_q: column of queen\n        r: row of square\n        c: column of square\n    output:\n        True if square is valid\n        False if square is invalid\n    \"\"\"\n    if r == r_q or c == c_q:\n        return True\n    if abs(r - r_q) == abs(c - c_q):\n        return True\n    return False\n\ndef calculate_squares_old(m, k, r_q, c_q, obstacles):\n    \"\"\"\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    \"\"\"\n    squares = 0\n    squares += calculate_squares_vertical(m, k, r_q, c_q, obstacles)\n    squares += calculate_squares_horizontal(m, k, r_q, c_q, obstacles)\n    squares += calculate_squares_diagonal(m, k, r_q, c_q, obstacles)\n    return squares\n\ndef calculate_squares_vertical(m, k, r_q, c_q, obstacles):\n    \"\"\"\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in vertical direction\n    \"\"\"\n    squares = 0\n    for r in range(1, m + 1):\n        if (r, c_q) in obstacles:\n            continue\n        squares += 1\n    return squares\n\ndef calculate_squares_horizontal(m, k, r_q, c_q, obstacles):\n    \"\"\"\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in horizontal direction\n    \"\"\"\n    squares = 0\n    for c in range(1, m + 1):\n        if (r_q, c) in obstacles:\n            continue\n        squares += 1\n    return squares\n\ndef calculate_squares_diagonal(m, k, r_q, c_q, obstacles):\n    \"\"\"\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in diagonal direction\n    \"\"\"\n    squares = 0\n    for r in range(1, m + 1):\n        for c in range(1, m + 1):\n            if (r, c) in obstacles:\n                continue\n            if abs(r - r_q) == abs(c - c_q):\n                squares += 1\n    return squares\n\ndef calculate_squares_diagonal_old(m, k, r_q, c_q, obstacles):\n    \"\"\"\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in diagonal direction\n    \"\"\"\n    squares = 0\n    for r in range(r_q, 1, -1):\n        if (r, c_q - (r_q - r)) in obstacles:\n            break\n        squares += 1\n    for r in range(r_q, m + 1):\n        if (r, c_q + (r - r_q)) in obstacles:\n            break\n        squares += 1\n    for c in range(c_q, 1, -1):\n        if (r_q - (c_q - c), c) in obstacles:\n            break\n        squares += 1\n    for c in range(c_q, m + 1):\n        if (r_q + (c - c_q), c) in obstacles:\n            break\n        squares += 1\n    return squares\n\ndef calculate_squares_old(m, k, r_q, c_q, obstacles):\n    \"\"\"\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    \"\"\"\n    squares = 0\n    for _ in range(n):\n        r, c = map(int, input().split())\n        if r == r_q or c == c_q or abs(r - r_q) == abs(c - c_q):\n            squares += 1\n    return squares\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    \"\"\"\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(float, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    \"\"\"\n    n = int(input()) # number of photographs\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split()) # time in hours, distance in miles\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650120588,
  "object": "edit"
}
2022-04-16 14:50:25.310447 fix syntax errors 9 ['def main():\n    """\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    """\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    """\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    """\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(float, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    """\n    n = int(input())\n    max_speed = 0\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speed = d / t\n        if speed > max_speed:\n            max_speed = speed\n    print(int(max_speed))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    input:\n        n: number of test cases\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    """\n    n = int(input())\n    for _ in range(n):\n        m, k = map(int, input().split())\n        r_q, c_q = map(int, input().split())\n        obstacles = []\n        for _ in range(k):\n            r, c = map(int, input().split())\n            obstacles.append((r, c))\n        print(calculate_squares(m, k, r_q, c_q, obstacles))\n\ndef calculate_squares(m, k, r_q, c_q, obstacles):\n    """\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    """\n    squares = 0\n    for r in range(1, m + 1):\n        for c in range(1, m + 1):\n            if (r, c) in obstacles:\n                continue\n            if valid_square(m, r_q, c_q, r, c):\n                squares += 1\n    return squares\n\ndef valid_square(m, r_q, c_q, r, c):\n    """\n    input:\n        m: size of grid\n        r_q: row of queen\n        c_q: column of queen\n        r: row of square\n        c: column of square\n    output:\n        True if square is valid\n        False if square is invalid\n    """\n    if r == r_q or c == c_q:\n        return True\n    if abs(r - r_q) == abs(c - c_q):\n        return True\n    return False\n\ndef calculate_squares_old(m, k, r_q, c_q, obstacles):\n    """\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    """\n    squares = 0\n    squares += calculate_squares_vertical(m, k, r_q, c_q, obstacles)\n    squares += calculate_squares_horizontal(m, k, r_q, c_q, obstacles)\n    squares += calculate_squares_diagonal(m, k, r_q, c_q, obstacles)\n    return squares\n\ndef calculate_squares_vertical(m, k, r_q, c_q, obstacles):\n    """\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in vertical direction\n    """\n    squares = 0\n    for r in range(1, m + 1):\n        if (r, c_q) in obstacles:\n            continue\n        squares += 1\n    return squares\n\ndef calculate_squares_horizontal(m, k, r_q, c_q, obstacles):\n    """\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in horizontal direction\n    """\n    squares = 0\n    for c in range(1, m + 1):\n        if (r_q, c) in obstacles:\n            continue\n        squares += 1\n    return squares\n\ndef calculate_squares_diagonal(m, k, r_q, c_q, obstacles):\n    """\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in diagonal direction\n    """\n    squares = 0\n    for r in range(1, m + 1):\n        for c in range(1, m + 1):\n            if (r, c) in obstacles:\n                continue\n            if abs(r - r_q) == abs(c - c_q):\n                squares += 1\n    return squares\n\ndef calculate_squares_diagonal_old(m, k, r_q, c_q, obstacles):\n    """\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in diagonal direction\n    """\n    squares = 0\n    for r in range(r_q, 1, -1):\n        if (r, c_q - (r_q - r)) in obstacles:\n            break\n        squares += 1\n    for r in range(r_q, m + 1):\n        if (r, c_q + (r - r_q)) in obstacles:\n            break\n        squares += 1\n    for c in range(c_q, 1, -1):\n        if (r_q - (c_q - c), c) in obstacles:\n            break\n        squares += 1\n    for c in range(c_q, m + 1):\n        if (r_q + (c - c_q), c) in obstacles:\n            break\n        squares += 1\n    return squares\n\ndef calculate_squares_old(m, k, r_q, c_q, obstacles):\n    """\n    input:\n        m: size of grid\n        k: number of obstacles\n        r_q: row of queen\n        c_q: column of queen\n        obstacle: row, column of obstacle\n    output:\n        number of squares in all directions\n    """\n    squares = 0\n    for _ in range(n):\n        r, c = map(int, input().split())\n        if r == r_q or c == c_q or abs(r - r_q) == abs(c - c_q):\n            squares += 1\n    return squares\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    """\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(float, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == "__main__":\n    main()\n', '\n', '\n\ndef main():\n    """\n    input:\n        n: number of photographs\n        t: time in hours\n        d: distance in miles\n    output:\n        max speed in mph\n    """\n    n = int(input()) # number of photographs\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split()) # time in hours, distance in miles\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    speeds = []\n    for _ in range(n):\n        t, d = map(int, input().split())\n        speeds.append(d / t)\n    print(int(max(speeds)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:50:25.310540 size on output set 8
2022-04-16 14:50:25.310558 num operations 1
2022-04-16 14:50:25.310563 size on input set 1
2022-04-16 14:50:36.168373 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    prev_t, prev_d = [int(x) for x in input().split()]\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / float(t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nprev_t = 0\nprev_d = 0\nmax_v = 0\nfor i in range(n):\n    t, d = [int(x) for x in input().split()]\n    v = (d - prev_d) / (t - prev_t)\n    if v > max_v:\n        max_v = v\n    prev_t = t\n    prev_d = d\nprint(int(max_v))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(max_v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_x = 0\n    max_v = 0\n    for i in range(n):\n        t, x = [int(x) for x in input().split()]\n        v = (x - prev_x) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_x = x\n    print(int(max_v))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t) if t != prev_t else 0\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n = int(input())\n    prev_t, prev_d, max_v = 0, 0, 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650120625,
  "object": "edit"
}
2022-04-16 14:50:36.168682 fix syntax errors 9 ['\ndef main():\n    n = int(input())\n    prev_t, prev_d = [int(x) for x in input().split()]\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / float(t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == "__main__":\n    main()\n', '\n\nn = int(input())\nprev_t = 0\nprev_d = 0\nmax_v = 0\nfor i in range(n):\n    t, d = [int(x) for x in input().split()]\n    v = (d - prev_d) / (t - prev_t)\n    if v > max_v:\n        max_v = v\n    prev_t = t\n    prev_d = d\nprint(int(max_v))\n', '\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(max_v)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_x = 0\n    max_v = 0\n    for i in range(n):\n        t, x = [int(x) for x in input().split()]\n        v = (x - prev_x) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_x = x\n    print(int(max_v))\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    prev_t = 0\n    prev_d = 0\n    max_v = 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t) if t != prev_t else 0\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    prev_t, prev_d, max_v = 0, 0, 0\n    for i in range(n):\n        t, d = [int(x) for x in input().split()]\n        v = (d - prev_d) / (t - prev_t)\n        if v > max_v:\n            max_v = v\n        prev_t = t\n        prev_d = d\n    print(int(max_v))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 14:50:36.168729 size on output set 9
2022-04-16 14:50:36.168753 num operations 1
2022-04-16 14:50:36.168759 size on input set 1
2022-04-16 14:50:48.074393 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(int(max_speed))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed) \n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(input())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, input().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])*3600\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])  # noqa: E501\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(\"%.2f\" % max_speed)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\nfrom sys import stdin\n\ndef main():\n\tn = int(stdin.readline().strip())\n\ttimes = []\n\tdistances = []\n\tfor i in range(n):\n\t\tt, d = map(int, stdin.readline().split())\n\t\ttimes.append(t)\n\t\tdistances.append(d)\n\tmax_speed = 0\n\tfor i in range(n-1):\n\t\tspeed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n\t\tif speed > max_speed:\n\t\t\tmax_speed = speed\n\tprint(max_speed)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 6,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "from sys import stdin\n\ndef main():\n    pass\n\nmain()\n"
    }
  ],
  "created": 1650120636,
  "object": "edit"
}
2022-04-16 14:50:48.074618 fix syntax errors 9 ['\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(int(max_speed))\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed) \n\nmain()\n', '\nfrom sys import stdin\n\ndef main():\n    n = int(input())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, input().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])*3600\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])  # noqa: E501\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print("%.2f" % max_speed)\n\nmain()\n', "\nfrom sys import stdin\n\ndef main():\n\tn = int(stdin.readline().strip())\n\ttimes = []\n\tdistances = []\n\tfor i in range(n):\n\t\tt, d = map(int, stdin.readline().split())\n\t\ttimes.append(t)\n\t\tdistances.append(d)\n\tmax_speed = 0\n\tfor i in range(n-1):\n\t\tspeed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n\t\tif speed > max_speed:\n\t\t\tmax_speed = speed\n\tprint(max_speed)\n\nif __name__ == '__main__':\n\tmain()\n", '\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1]-distances[i])/(times[i+1]-times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        t, d = map(int, stdin.readline().split())\n        times.append(t)\n        distances.append(d)\n    max_speed = 0\n    for i in range(n-1):\n        speed = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n        if speed > max_speed:\n            max_speed = speed\n    print(max_speed)\n\nmain()\n', 'from sys import stdin\n\ndef main():\n    pass\n\nmain()\n']
2022-04-16 14:50:48.074735 size on output set 9
2022-04-16 14:50:48.074748 num operations 1
2022-04-16 14:50:48.074753 size on input set 1
2022-04-16 14:50:57.152557 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    #print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().strip().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    #print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(1, n):\n        speeds[i-1] = (distances[i] - distances[i-1]) / (times[i] - times[i-1])\n    #print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    print(times)\n    print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    # print(times)\n    # print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n - 1):\n        speeds[i] = (distances[i + 1] - distances[i]) / (times[i + 1] - times[i])\n    # print(speeds)\n    print(int(max(speeds)))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    # print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    # print(times)\n    # print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n - 1):\n        speeds[i] = (distances[i + 1] - distances[i]) / (times[i + 1] - times[i])\n    # print(speeds)\n    print(int(max(speeds)))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650120648,
  "object": "edit"
}
2022-04-16 14:50:57.152787 fix syntax errors 9 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    #print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().strip().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    #print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(1, n):\n        speeds[i-1] = (distances[i] - distances[i-1]) / (times[i] - times[i-1])\n    #print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    print(times)\n    print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    # print(times)\n    # print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n - 1):\n        speeds[i] = (distances[i + 1] - distances[i]) / (times[i + 1] - times[i])\n    # print(speeds)\n    print(int(max(speeds)))\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    #print(times)\n    #print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n-1):\n        speeds[i] = (distances[i+1] - distances[i]) / (times[i+1] - times[i])\n    # print(speeds)\n    print(int(max(speeds)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    times = []\n    distances = []\n    for i in range(n):\n        [t, d] = [int(x) for x in sys.stdin.readline().split()]\n        times.append(t)\n        distances.append(d)\n    # print(times)\n    # print(distances)\n    speeds = [0 for x in range(n)]\n    for i in range(n - 1):\n        speeds[i] = (distances[i + 1] - distances[i]) / (times[i + 1] - times[i])\n    # print(speeds)\n    print(int(max(speeds)))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:50:57.152943 size on output set 9
2022-04-16 14:50:57.152956 num operations 1
2022-04-16 14:50:57.152961 size on input set 1
2022-04-16 14:51:10.179950 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip().split())\n    road = []\n\n    for i in range(n):\n        t, d = list(map(int, sys.stdin.readline().strip().split()))\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# import sys\n\n# def main():\n#     n = int(sys.stdin.readline().strip())\n#     road = []\n\n#     for i in range(n):\n#         t, d = map(int, sys.stdin.readline().strip().split())\n#         road.append((t, d))\n\n#     max_speed = 0\n#     for i in range(1, n):\n#         max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n#     print(int(max_speed))\n\n# if __name__ == '__main__':\n#     main()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n): \n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    road = [0] * n\n\n    for i in range(n - 1):\n        t, d = map(int, input().split())\n        road[i] = (d - road[i - 1]) / (t - i)\n\n    max_speed = max(road)\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650120657,
  "object": "edit"
}
2022-04-16 14:51:10.180217 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip().split())\n    road = []\n\n    for i in range(n):\n        t, d = list(map(int, sys.stdin.readline().strip().split()))\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# import sys\n\n# def main():\n#     n = int(sys.stdin.readline().strip())\n#     road = []\n\n#     for i in range(n):\n#         t, d = map(int, sys.stdin.readline().strip().split())\n#         road.append((t, d))\n\n#     max_speed = 0\n#     for i in range(1, n):\n#         max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n#     print(int(max_speed))\n\n# if __name__ == '__main__':\n#     main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n):\n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    road = []\n\n    for i in range(n):\n        t, d = map(int, sys.stdin.readline().strip().split())\n        road.append((t, d))\n\n    max_speed = 0\n    for i in range(1, n): \n        max_speed = max(max_speed, (road[i][1] - road[i - 1][1]) / (road[i][0] - road[i - 1][0]))\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    road = [0] * n\n\n    for i in range(n - 1):\n        t, d = map(int, input().split())\n        road[i] = (d - road[i - 1]) / (t - i)\n\n    max_speed = max(road)\n\n    print(int(max_speed))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 14:51:10.180333 size on output set 7
