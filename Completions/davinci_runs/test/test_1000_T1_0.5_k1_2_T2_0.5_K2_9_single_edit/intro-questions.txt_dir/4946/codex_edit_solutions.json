["\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n    if min_dist == n:\n        return -1\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language][::-1]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language][::-1]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_first_position - second_language_last_position, second_language_first_position - first_language_last_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_first_position - second_language_last_position, second_language_first_position - first_language_last_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO: solve this problem.\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    print(n)\n    # if len(set(languages)) == n:\n    #     print(n)\n    #     return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    # languages_sorted = sorted(languages)\n    # first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    # first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    # first_language_first_position = first_language_positions[0]\n    # first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    # second_language = languages_sorted[1]\n    # second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    # second_language_first_position = second_language_positions[0]\n    # second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    # if first_language_first_position < second_language_first_position:\n    #     # The first and second language are not adjacent\n    #     awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    # else:\n    #     # The first and second language are adjacent\n    #     awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    # print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = 100000\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# https://www.hackerrank.com/challenges/minimum-distances/problem\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages and find the minimum distance between them\n\n# for i in range(len(languages)):\n#     for j in range(i + 1, len(languages)):\n#         if languages[i] == languages[j]:\n#             # find the distance between i and j\n#             distance = abs(i - j)\n#             print(distance)\n", "\n\ndef main():\n    n = int(input())\n    print(n)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n - 1\n    if len(set(languages)) == n:\n        print(n - 1)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position,\n                                second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l) - 1):\n            min_dist = min(min_dist, l[i + 1] - l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang]) # TODO: fix this line\n        seen.add(lang)\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n            print(distance)\n", "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i+1]\n        else:\n            d[langs[i]].append(i+1)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(1, len(l)):\n            min_dist = min(min_dist, l[i]-l[i-1])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang]) \n        seen.add(lang)\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef solve(n, languages):\n    \"\"\"\n    We need to find the minimum distance between two people who speak the same language.\n\n    This can be done by keeping track of the last positions of each language.\n\n    We keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\n    The minimum distance is the minimum of these distances.\n    \"\"\"\n\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    return min_distance\n\n\ndef main():\n    n = int(input())\n\n    languages = list(map(int, input().split()))\n\n    print(solve(n, languages))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n: # O(n)\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages) # O(n log n)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language] # O(n)\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language] # O(n)\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, l in enumerate(languages) if l == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, l in enumerate(languages) if l == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import defaultdict\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = defaultdict(int)\n    for i in range(n):\n        language = languages[i]\n        distance = i - language_dict[language]\n        if distance > max_distance:\n            max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    langs = list(map(int, sys.stdin.readline().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    sys.stdout.write(str(min_dist))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    # n = int(input())\n    # languages = list(map(int, input().split()))\n    # awkwardness = n\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         if languages[i] == languages[j]:\n    #             awkwardness = min(awkwardness, j - i)\n    # print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [x for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j) - 1\n            print(distance)\n", "\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\nn = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n", "\n\n# You are given a string S.\n#\n# Your task is to find out if the string S contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.\n#\n# Input Format\n#\n# A single line containing a string S.\n#\n# Constraints\n#\n# Output Format\n#\n# In the first line, print True if S has any alphanumeric characters. Otherwise, print False.\n# In the second line, print True if S has any alphabetical characters. Otherwise, print False.\n# In the third line, print True if S has any digits. Otherwise, print False.\n# In the fourth line, print True if S has any lowercase characters. Otherwise, print False.\n# In the fifth line, print True if S has any uppercase characters. Otherwise, print False.\n#\n# Sample Input\n#\n# qA2\n# Sample Output\n#\n# True\n# True\n# True\n# True\n# True\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "\n\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n", "\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO: solve this problem (https://www.hackerrank.com/challenges/minimum-distances/problem)\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n            print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang]) if i - seen[lang] > 0 else min_dist\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\nn = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang]) # TODO: Fix this line\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness if awkwardness != n else -1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            print(distance)\n", "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the birthday function below.\ndef birthday(s, d, m):\n    count = 0\n    for i in range(len(s)):\n        if sum(s[i:i+m]) == d:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    s = list(map(int, input().rstrip().split()))\n\n    dm = input().rstrip().split()\n\n    d = int(dm[0])\n\n    m = int(dm[1])\n\n    result = birthday(s, d, m)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen.keys():\n            min_dist = min(min_dist, i - seen[lang]) \n        seen[lang] = i \n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:  # noqa: E741\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [\n        i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [\n        i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position -\n                                second_language_first_position,\n                                second_language_last_position -\n                                first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position -\n                                second_language_first_position,\n                                second_language_last_position -\n\n                                first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))  # split() splits a string into a list of words\n\nlast_position = {}  # create an empty dictionary\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:  # if the language is in the dictionary\n        min_distance = min(min_distance, i - last_position[languages[i]])  # update the minimum distance\n    last_position[languages[i]] = i  # add the new language to the dictionary\n\nprint(min_distance)\n", "\n\n\ndef main(n, languages):\n    pass\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen.keys():\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split())) # input() returns a string. split() splits the string into a list of strings. map(int, ...) converts each string in the list to an int\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#input\nn = int(input())\nlanguages = list(map(int, input().split()))\n#map of language to last index\nlast_position = {}\n#minimum distance\nmin_distance = n\n#iterate through each index\nfor i in range(n):\n    #if language is in last_position\n    if languages[i] in last_position:\n        #get minimum distance between current index and last index\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    #update last_position\n    last_position[languages[i]] = i\n#output\nprint(min_distance)\n"]