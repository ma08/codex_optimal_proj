2022-04-16 11:36:20.604024 num operations 1
2022-04-16 11:36:20.604042 size on input set 1
2022-04-16 11:36:28.988295 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\nL = list(map(int, input().split()))\nprint(max(L))\n"
    },
    {
      "index": 1,
      "text": "N = int(input())\nif N == 1:\n    print(1, 0)\nelse:\n    min_size = 1\n    min_breaks = 0\n    while min_size < N:\n        min_size *= 2\n        min_breaks += 1\n\n\n    print(min_size, min_breaks)\n"
    },
    {
      "index": 2,
      "text": "\n \nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n"
    },
    {
      "index": 4,
      "text": "\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\n\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks, end=' ')\n"
    },
    {
      "index": 6,
      "text": "\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n"
    },
    {
      "index": 7,
      "text": "\n\nN = int(input())\n\nsize = 1\nbreaks = 0\nwhile size < N:\n    size *= 2\n    breaks += 1\n\nprint(size, breaks)\n"
    },
    {
      "index": 8,
      "text": "\n\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_breaks)\n"
    }
  ],
  "created": 1650108980,
  "object": "edit"
}
2022-04-16 11:36:28.988555 fix syntax errors 9 ['\nN = int(input())\nL = list(map(int, input().split()))\nprint(max(L))\n', 'N = int(input())\nif N == 1:\n    print(1, 0)\nelse:\n    min_size = 1\n    min_breaks = 0\n    while min_size < N:\n        min_size *= 2\n        min_breaks += 1\n\n\n    print(min_size, min_breaks)\n', '\n \nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n', '\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n', '\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n', "\n\nN = int(input())\n\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks, end=' ')\n", '\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n', '\n\nN = int(input())\n\nsize = 1\nbreaks = 0\nwhile size < N:\n    size *= 2\n    breaks += 1\n\nprint(size, breaks)\n', '\n\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_breaks)\n']
2022-04-16 11:36:28.988590 size on output set 7
2022-04-16 11:36:28.988600 num operations 1
2022-04-16 11:36:28.988605 size on input set 1
2022-04-16 11:36:36.857040 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:  # while 2^n < k\n        n += 1\n    print(2**n, n)  # print 2^n, n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    try:\n        k = int(sys.stdin.readline().strip())\n        n = 0\n        while 2**n < k:\n            n += 1\n        print(2**n, n)\n    except:\n        print('error')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 1\n    while 2**n <= k:\n        n *= 2\n    print(n, n)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n, sep=' ')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650108989,
  "object": "edit"
}
2022-04-16 11:36:36.857280 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:  # while 2^n < k\n        n += 1\n    print(2**n, n)  # print 2^n, n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    try:\n        k = int(sys.stdin.readline().strip())\n        n = 0\n        while 2**n < k:\n            n += 1\n        print(2**n, n)\n    except:\n        print('error')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 1\n    while 2**n <= k:\n        n *= 2\n    print(n, n)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n, sep=' ')\n\nif __name__ == '__main__':\n    main()\n", "import sys\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\nif __name__ == '__main__':\n    main()\n", "\n\n\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 11:36:36.857318 size on output set 9
2022-04-16 11:36:36.857328 num operations 1
2022-04-16 11:36:36.857333 size on input set 1
2022-04-16 11:36:44.837276 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    K = int(input())\n    n = 2\n    while n < K:\n        n *= 2\n    print(n, n//2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    K = int(input())\n    N = 1\n    while N < K:\n        N *= 2\n    print(N, N//2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n    \"\"\"\n    \u5165\u529b\u4f8b\n    3\n    \u51fa\u529b\u4f8b\n    4 2\n    \"\"\"\ndef main():\n    K = int(input())\n    N = 1\n    while N <= K:\n        N *= 2  # 1, 2, 4, 8, ...\n    print(N, N // 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    k = int(input())\n    n = 2\n    while n < k:\n        n *= 2\n    print(n, n//2)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650108996,
  "object": "edit"
}
2022-04-16 11:36:44.837624 fix syntax errors 9 ['\n\ndef main():\n    print("Hello world!")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    K = int(input())\n    n = 2\n    while n < K:\n        n *= 2\n    print(n, n//2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    K = int(input())\n    N = 1\n    while N < K:\n        N *= 2\n    print(N, N//2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\nif __name__ == "__main__":\n    main()\n', '\n\n    """\n    入力例\n    3\n    出力例\n    4 2\n    """\ndef main():\n    K = int(input())\n    N = 1\n    while N <= K:\n        N *= 2  # 1, 2, 4, 8, ...\n    print(N, N // 2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    n = 2\n    while n < k:\n        n *= 2\n    print(n, n//2)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 11:36:44.837669 size on output set 8
2022-04-16 11:36:44.837680 num operations 1
2022-04-16 11:36:44.837685 size on input set 1
2022-04-16 11:36:52.259982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3) # 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 4,
      "text": "\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 7,
      "text": "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 2)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n"
    },
    {
      "index": 8,
      "text": "\n\n#!/usr/bin/env python\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 2)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint get_bar_size(k), get_num_breaks(k)\n"
    }
  ],
  "created": 1650109004,
  "object": "edit"
}
2022-04-16 11:36:52.260220 fix syntax errors 9 ["\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3) # 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 2)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", '\n\n#!/usr/bin/env python\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 2)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint get_bar_size(k), get_num_breaks(k)\n']
2022-04-16 11:36:52.260332 size on output set 6
2022-04-16 11:36:52.260344 num operations 1
2022-04-16 11:36:52.260349 size on input set 1
2022-04-16 11:36:59.518789 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 1)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 1)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        exit(0)\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(0, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(0, 1)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "def main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650109012,
  "object": "edit"
}
2022-04-16 11:36:59.519050 fix syntax errors 9 ["\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 1)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 1)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        exit(0)\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(0, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(0, 1)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 11:36:59.519096 size on output set 7
2022-04-16 11:36:59.519109 num operations 1
2022-04-16 11:36:59.519114 size on input set 1
2022-04-16 11:37:08.795117 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nk = int(input())\n\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power / 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 1,
      "text": "\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 2,
      "text": "\n\nk = int(input())\n\ni = 1\nwhile 2**i < k:\n    i += 1\n\nsmallest_power = 2**i\n\nif smallest_power == k:\n    print(k, 0)\nelse:\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 3,
      "text": "\n\n# k = int(input())\nk = 7\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 4,
      "text": "\n\n# k = int(input())\nk = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\nprint(i)\n\n# This is the smallest power of 2 greater than k\nprint(smallest_power)\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 5,
      "text": "\n\n\n# k = int(input())\nk = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 6,
      "text": "\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 7,
      "text": "\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    },
    {
      "index": 8,
      "text": "\n\n# k = int(input())\nk = 7\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n"
    }
  ],
  "created": 1650109019,
  "object": "edit"
}
2022-04-16 11:37:08.795506 fix syntax errors 9 ['\n\nk = int(input())\n\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power / 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\nk = int(input())\n\ni = 1\nwhile 2**i < k:\n    i += 1\n\nsmallest_power = 2**i\n\nif smallest_power == k:\n    print(k, 0)\nelse:\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\n# k = int(input())\nk = 7\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\n# k = int(input())\nk = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\nprint(i)\n\n# This is the smallest power of 2 greater than k\nprint(smallest_power)\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\n\n# k = int(input())\nk = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n', '\n\n# k = int(input())\nk = 7\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n']
2022-04-16 11:37:08.795583 size on output set 7
2022-04-16 11:37:08.795595 num operations 1
2022-04-16 11:37:08.795600 size on input set 1
2022-04-16 11:37:24.936145 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(K)\n    breaks = 0\n    while bar_size > K:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K), sep=' ')\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return int(bar_size)\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return int(breaks)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K), sep=' ')\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K)) #\u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0435 \u0431\u0430\u0440\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0435\u0433\u043e \u043f\u043e\u0434\u0440\u044b\u0432\u043e\u0432\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K), sep=' ')\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650109028,
  "object": "edit"
}
2022-04-16 11:37:24.936453 fix syntax errors 9 ['\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(K)\n    breaks = 0\n    while bar_size > K:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K), sep=\' \')\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return int(bar_size)\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return int(breaks)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K), sep=\' \')\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/python\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K)) #Вывод информации о размере бара и количестве его подрывов\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K), sep=\' \')\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 11:37:24.936516 size on output set 8
2022-04-16 11:37:24.936527 num operations 1
2022-04-16 11:37:24.936531 size on input set 1
2022-04-16 11:37:31.303378 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i//2-1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i//2-1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i//2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650109044,
  "object": "edit"
}
2022-04-16 11:37:31.303609 fix syntax errors 9 ['\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i // 2 - 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i//2-1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i // 2 - 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i // 2 - 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i//2-1))\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i//2 - 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i // 2 - 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i // 2 - 1))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print("1 0")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print("%d %d" % (i, i // 2 - 1))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 11:37:31.303726 size on output set 3
