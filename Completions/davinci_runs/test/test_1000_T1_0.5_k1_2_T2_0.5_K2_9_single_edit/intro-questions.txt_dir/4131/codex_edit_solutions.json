["\nn = int(input())\nprint(n*(n-1)//2)\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6)) \n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])): print(str(i).zfill(6) + str(j+1).zfill(6))\n", "\n\n# N, M = map(int, input().split())\n# cities = []\n# for i in range(M):\n#     cities.append(list(map(int, input().split())))\n\n# cities.sort(key=lambda x: x[1])\n\n# prefectures = [[] for _ in range(N+1)]\n\n# for city in cities:\n#     prefectures[city[0]].append(city[1])\n\n# for i in range(1, N+1):\n#     for j in range(len(prefectures[i])):\n#         print(str(i).zfill(6) + str(j+1).zfill(6))\n\n# a, b, c = map(int, input().split())\n# print(max(a, b, c))\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\n# A.sort()\n# print(A[N//2] - A[N//2 - 1])\n", "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport fractions\n\ndef lcm(x, y):\n    return (x * y) // fractions.gcd(x, y)\n\n\nN, M = map(int, input().split())  # N:\u8db3\u5834\u306e\u6570\u3000M:\u7d4c\u8def\u306e\u6570\nA = list(map(int, input().split()))  # \u8db3\u5834\u306e\u8ddd\u96e2\n\nlcm_list = [A[0]]\nfor i in range(1, N):\n    lcm_list.append(lcm(lcm_list[i-1], A[i]))\n\n\nfor i in range(M):\n    L, R = map(int, input().split())\n    if L == R:\n        print(A[L-1])\n        continue\n    lcm_value = lcm_list[R-2] // lcm_list[L-1]\n    print(lcm_value)\n", "import itertools\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor p in prefectures:\n    for i, j in enumerate(p):\n        print(str(prefectures.index(p)).zfill(6) + str(i+1).zfill(6))\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = [[] for _ in range(N)]\n    # prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P-1].append(Y)\n    for P, cities in enumerate(prefecture_cities, 1):\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i), flush=True)\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\nprefectures = [[] for _ in range(N+1)]\nfor i in range(M):\n    prefecture, city = map(int, input().split())\n    prefectures[prefecture].append(city)\n\nfor i in range(1, N+1):\n    prefectures[i].sort()\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n", "\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:06}{:06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"]