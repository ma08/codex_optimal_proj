["from typing import List\n\nimport heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n", "#\n", "from typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n", "class Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n\n\n\n        return sum(A)\n", "from typing import List\n\nimport heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)  # heapq.heappush(heap, item)\n        return sum(A)\n", "\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n", "\nimport heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n", "import heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: list, K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n", "class Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n", "import heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n", "\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n", "from typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.largestSumAfterKNegations([4, 2, 3], 1))\n        return sum(A)\n", "from typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"]