2022-04-09 20:22:40.457794 """
Given an array A of integers, we must modify the array in the following way: we choose an i and replace A[i] with -A[i], and we repeat this process K times in total.  (We may choose the same index i multiple times.)
Return the largest possible sum of the array after modifying it in this way.
 
Example 1:
Input: A = [4,2,3], K = 1
Output: 5
Explanation: Choose indices (1,) and A becomes [4,-2,3].


Example 2:
Input: A = [3,-1,0,2], K = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].


Example 3:
Input: A = [2,-3,-1,5,-4], K = 2
Output: 13
Explanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].



 
Note:

1 <= A.length <= 10000
1 <= K <= 10000
-100 <= A[i] <= 100
"""
2022-04-09 20:22:40.457813 --------------------------
2022-04-09 20:22:52.276259 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\nimport heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)"
    }
  ],
  "created": 1649550160,
  "id": "cmpl-4vFdgvFa3ez6fQN4ZSVYHu4MUYvap",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:22:52.276466 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)"
}
2022-04-09 20:22:52.276512 REASON stop
2022-04-09 20:22:52.277677 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\nimport heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)"
}
2022-04-09 20:22:52.277761 REASON stop
