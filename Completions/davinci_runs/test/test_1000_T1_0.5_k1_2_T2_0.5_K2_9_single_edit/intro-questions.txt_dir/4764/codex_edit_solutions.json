["\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = int(min(h, n - h, v, n - v))\n\n    # Find the volume of the largest piece of cake\n    return x * x\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n\ndef main():\n    # Read input.\n    n, h, v = [int(x) for x in input().split()]  # noqa\n\n    # Compute largest volume\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4\n\n    # Display result\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, h, v = map(int, input().split())\n\nprint((n-h) * (n-v) * 4) \n", "\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v) / 2\n\n    # Find the volume of the largest piece of cake\n    return x * x\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]\n    print(h * v * n * 4) \n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\n#\n#Program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4))\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4;\n\nprint(square_cake(10, 4, 7));\nprint(square_cake(5, 2, 2));\n", "\nn, h, v = map(int, input().split())\n\nprint((n-h) * (n-v) * 4)\n", "\n\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n-h)*(n-v)*4) # print the result\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input \n    n, h, v = [int(x) for x in input().split()] \n    \n    # Compute largest volume\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4 \n    \n    # Display result\n    print(volume) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    h, w, x, y = [int(i) for i in input().split()]\n    if h == w:\n        if x == y:\n            print(1)\n        else:\n            print(0)\n    else:\n        if x == y:\n            print(0)\n        else:\n            print(1)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, h, v = map(int, input().split())\nprint((n-h) * (n-v) * 4) \n", "\n\ndef main():\n    n = int(input())\n    s = input()\n\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            count += 1\n\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n, h, v = [int(x) for x in raw_input().split()]\n\n    # Compute largest volume\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4\n\n    # Display result\n    print volume\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n-h)*(n-v)*4, end='')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n-h)*(n-v)*4) \n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "\nimport sys\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4,\n                 h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "import sys\n\nn, h, v = map(int, sys.stdin.readline().split())\n\nprint(max(n * h * 4, n * v * 4, (n - h) * (n - v) * 4))\n", "\nn, h, v = map(int, input().split())\nprint((n-h) * (n-v) * 4)\n", "\ndef main():\n    n, h, v = [int(x) for x in input().split(' ')]\n    print((n - max(h, n - h)) * (n - max(v, n - v)) * 4)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n# Calculate the volume of the cake\nvolume = n * n * 4\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n-h)*(n-v)*4)\n\nif __name__ == \"__main__\":\n    main()\n", "# https://open.kattis.com/problems/cake\n\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]\n    print(h * v * 4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]\n    print(max(h, n - h) * max(v, n - v) * 4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read input.\n    n, h, v = [int(x) for x in input().split()]  # pylint: disable=invalid-name\n\n    # Compute largest volume.\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4  # pylint: disable=invalid-name\n\n    # Display result.\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, h, v = map(int, input().split())\n\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n\n\nprint(max(volume(n, h, v), volume(n, n - h, v),\n          volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n - h) * (n - v) * 4)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * n\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()] # input() returns string so we need to convert to int\n    print(h * v * n * 4)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print(max((n-h)*(n-v)*4, h*v*4))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n, h, v = [int(x) for x in input().split()]\n\n    # Compute largest volume\n\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4\n\n    # Display result\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake.\n    x = min(h, n - h, v, n - v)  # noqa: E741\n\n    # Find the volume of the largest piece of cake.\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\na = int(input())\nb = int(input())\nc = int(input())\nx = int(input())\nans = 0\nfor i in range(a + 1):\n    for j in range(b + 1):\n        for k in range(c + 1):\n            if i * 500 + j * 100 + k * 50 == x:\n                ans += 1\nprint(ans)\n", "\n\n\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n-h)*(n-v)*4)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#Program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4)\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimension of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n#Program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4))\n", "\nn = int(input())\nprint(n)\n", "\ndef square_cake(n, h, v): \n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4.0\n\nprint(round(square_cake(10, 4, 7), 2))\nprint(round(square_cake(5, 2, 2), 2))\n", "\n#Program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4)) \n", "import math\n\n\n\ndef main():\n    n = int(input())\n    h = int(input())\n    v = int(input())\n\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * math.pi\n\n\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#Program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*v*4,(n-h)*(n-v)*4))\n", "\n\ndef main():\n    # Read input.\n    n, h, v = [int(x) for x in input().split()] \n\n    # Compute largest volume\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4\n\n    # Display result\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v) / n\n\n    # Find the volume of the largest piece of cake\n    return x * x * n * n\n\nprint(square_cake(10, 4, 7))  # 28\nprint(square_cake(5, 2, 2))  # 2\n", "import sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "import sys\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume/4, (n-h)*(n-v)*4, h*v*4, h*(n-v)*4, (n-h)*v*4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n"]