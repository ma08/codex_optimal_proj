["\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())) - {1})\n    songs = set()\n    for i in range(num_nights):\n        if not villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]):\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i in villagers_nights[j] for j in songs):\n            print(i + 1)\n\nmain()\n", "import sys\n\nvillagers = int(input())\nsys.setrecursionlimit(10000000)\nnights = int(input())\nbard = 1\nnights_songs = []\nfor i in range(nights):\n    nights_songs.append(list(map(int, input().split()[1:])))\n\ndef find_songs(songs, i):\n    if bard in nights_songs[i]:\n        songs.append(i)\n    for j in range(nights):\n        if i != j and set(nights_songs[i]).intersection(set(nights_songs[j])) != set():\n            songs.append(i)\n            songs.append(j)\n            find_songs(songs, j)\n            break\n    return songs\n\nsongs = find_songs([], 0)\n\nfor i in range(1, villagers+1):\n    for j in range(nights):\n        if i in nights_songs[j] and j not in songs:\n            break\n    else:\n        print(i)\n", "\n\nvillagers = int(input())\nnights = int(input())\nbard = 1\nnights_songs = []\nfor i in range(nights):\n    nights_songs.append(input().split()[1:])\n\nsongs = set()\nfor i in range(nights):\n    for j in range(nights):\n        if i != j and set(nights_songs[i]).intersection(set(nights_songs[j])) != set():\n            songs.add(i)\n            songs.add(j)\n\nfor i in range(1, villagers+1):\n    for j in range(nights):\n        if i in nights_songs[j] and j not in songs:\n            break\n    else:\n        print(i)\n", "\n#!/usr/bin/python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1,n+1):\n        if str(i) not in songs:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nvillagers = int(input())+1\nnights = int(input())+1\nbard = 1\nnights_songs = []\nfor i in range(1, nights):\n    nights_songs.append(input().split()[1:])\n\nsongs = set()\nfor i in range(1, nights):\n    if bard in nights_songs[i]:\n        songs.add(i)\n    else:\n        for j in range(1, nights):\n            if i != j and set(nights_songs[i]).intersection(set(nights_songs[j])) != set():\n                songs.add(i)\n                songs.add(j)\n\nfor i in range(1, villagers):\n    for j in range(1, nights):\n        if i in nights_songs[j] and j not in songs:\n            break\n    else:\n        print(i)\n", "\n\nwith open('file.txt') as f:\n    for line in f:\n        print(line)\n", "\n\nimport sys\n\ndef main():\n    villagers = int(sys.stdin.readline().strip())\n    evenings = int(sys.stdin.readline().strip())\n    songs = []\n    for evening in range(evenings):\n        singers = [int(x) for x in sys.stdin.readline().strip().split()]\n        if singers[0] == 1:\n            songs.append(singers[1])\n        else:\n            songs.extend(singers[1:])\n    for villager in range(1, villagers+1):\n        if songs.count(villager) == len(songs):\n            print(villager)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(m):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(2, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1, n+1):\n        if str(i) not in songs:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(int(line[j]))\n    for i in range(1, n + 1):\n        if i not in songs:\n            print(i)\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline()) # number of songs\n    songs = {}\n    for i in range(1, n+1): # initialize dictionary\n        songs[i] = set()\n        # line[0] contains number of people that like song i\n\n            # line[j] contains person j's number\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(1, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"Bard\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = [1]\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()][:num_villagers_present]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque([1])\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(2, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n\nvillagers = int(input())\nnights = int(input())\nbard = 1\nnights_songs = []\nfor i in range(nights):\n    nights_songs.append(input().split()[1:])\n\nsongs = set()\nfor i in range(nights):\n    if bard in nights_songs[i]:\n        songs.add(i)\n    else:\n        for j in range(nights):\n            if i != j and set(nights_songs[i]).intersection(set(nights_songs[j])) != set():\n                songs.add(i)\n                songs.add(j)\n\nfor i in range(1, villagers+1):\n    if i != bard:\n        for j in range(nights):\n            if i in nights_songs[j] and j not in songs:\n                break\n        else:\n            print(i)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(line[j])\n    for i in range(n):\n        print(i + 1)\n\nmain()\n", "\n\ndef main():\n    \"\"\"Bard\"\"\"\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(1)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1, n+1):\n        if str(i) not in songs:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Bard\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        for i in villager_list:\n            if i not in bard_list:\n                bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(int(line[j + 1]))\n    for i in range(1, n + 1):\n        print(i)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = []\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.append(line[j])\n    for i in range(1, n + 1):\n        print(i)\n\nmain()\n", "\n\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(2, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    arr = [int(x) for x in sys.stdin.readline().strip().split()]\n    min_val = min(arr)\n    max_val = max(arr)\n    print(min_val, max_val)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    villagers = int(sys.stdin.readline().strip())\n    evenings = int(sys.stdin.readline().strip())\n    songs = []\n    for evening in range(evenings):\n        singers = [int(x) for x in sys.stdin.readline().strip().split()]\n        if singers[0] == 1:\n            songs.append(singers[1])\n        else:\n            songs.extend(singers[1:])\n    if len(songs) == 0:\n        print(\"1\")\n    else:\n        for villager in range(1,villagers+1):\n            if songs.count(villager) == len(songs):\n                print(villager)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = []\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.append(line[j])\n    for i in range(1, n + 1):\n        print(i)\n\nmain()\n", "import sys\n\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline())\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set([int(x) for x in line[1:]])\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present)\n    print('\\n'.join(str(x) for x in sorted(list(villagers))))\n\n\nmain()\n", "\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 0 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]) != set():\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i in villagers_nights[j] for j in songs):\n            print(i + 1)\n\nmain()\n", "\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 1 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]):\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i in villagers_nights[j] for j in songs):\n            print(i + 1)\n\n\nmain()\n", "\n\n#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1,n+1):\n        if str(i) not in songs:\n            print(i,end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline())\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set(int(x) for x in line[1:])\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present)\n    print('\\n'.join(str(x) for x in sorted(villagers)))\n\nmain()\n", "\n\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.data = key\n\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.data < node.data:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, node)\n\ndef inorder(root):\n    if root:\n        inorder(root.left)\n        print(root.data)\n        inorder(root.right)\n\ndef preorder(root):\n    if root:\n        print(root.data)\n        preorder(root.left)\n        preorder(root.right)\n\ndef postorder(root):\n    if root:\n        postorder(root.left)\n        postorder(root.right)\n        print(root.data)\n\nr = Node(50)\ninsert(r, Node(30))\ninsert(r, Node(20))\ninsert(r, Node(40))\ninsert(r, Node(70))\ninsert(r, Node(60))\ninsert(r, Node(80))\n\ninorder(r)\nprint(\"\")\npreorder(r)\nprint(\"\")\npostorder(r)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline())\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set([int(x) for x in line[1:]])\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present)\n    print('\\n'.join([str(x) for x in sorted(list(villagers))]))\n\n\nmain()\n", "\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 1 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]):  # pylint: disable=E1136\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i + 1 in villagers_nights[j] for j in songs):\n            print(i + 1)\n\nmain()\n", "\n\ndef main():\n    \"\"\"Main function\"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 1 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]):\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i in villagers_nights[j] for j in songs):\n            print(i + 1)\n\nmain()\n", "import math\n\nimport sys\n\ndef main():\n    nums = [int(x) for x in sys.stdin.readline().strip().split()]\n    n = nums[0]\n    k = nums[1]\n    if k == 0:\n        print(n)\n    else:\n        print(math.ceil(n/k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 1 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]): # pylint: disable=bad-continuation\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i in villagers_nights[j] for j in songs): # pylint: disable=bad-continuation\n            print(i + 1)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(line[j])\n    print(len(songs))\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0]) + 1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(2, n + 1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0:\n                q.append(i)\n\n    for i in range(1, n + 1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = {}\n    for i in range(n+1):\n        songs[i] = set()\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(1, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0:\n                q.append(i)\n\n    for i in range(n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(1, k + 1):\n            songs.add(int(line[j]))\n    for i in range(1, n + 1):\n        if i not in songs:\n            print(i)\n\nmain()\n", "\ndef main():\n    \"\"\"Bard\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(1)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nvillagers = int(input())\nnights = int(input())\nbard = 1\nnights_songs = []\nfor i in range(nights):\n    nights_songs.append(input().split()[1:])\n\nsongs = set()\nfor i in range(nights):\n    if bard in nights_songs[i]:\n        songs.add(i)\n    else:\n        for j in range(nights):\n            if i != j and set(nights_songs[i]).intersection(set(nights_songs[j])) != set() and j not in songs:\n                songs.add(i)\n                songs.add(j)\n\nfor i in range(1, villagers+1):\n    for j in range(nights):\n        if i in nights_songs[j] and j not in songs:\n            break\n    else:\n        print(i)\n", "\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    a = b = c = 0\n    for j in range(len(s)):\n        if s[j] == 'a':\n            a += 1\n        elif s[j] == 'b':\n            b += 1\n        elif s[j] == 'c':\n            c += 1\n\n    print(a, b, c)\n", "\n\nimport sys\nsys.setrecursionlimit(1000000)\nn, m = map(int, input().split())\ngraph = [[] for i in range(n)]\nvisited = [False] * n\n\nfor i in range(m):\n    x, y = map(int, input().split())\n    graph[x].append(y)\n    graph[y].append(x)\n\ndef dfs(graph, node, visited):\n    visited[node] = True\n    for i in graph[node]:\n        if not visited[i]:\n            dfs(graph, i, visited)\n\nk = 0\nfor i in range(n):\n    if not visited[i]:\n        dfs(graph, i, visited)\n        k += 1\nprint(k)\n", "\n\ndef main():\n    \"\"\"Bard\"\"\"\n    num_villagers = int(input())\n    num_villagers_present = int(input())\n    villager_list = [int(i) for i in input().split()]\n    print(villager_list)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Bard.\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = [1]\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        for i in villager_list:\n            if i not in bard_list:\n                bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1,n+1):\n        if str(i) not in songs:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(math.factorial(n))\n", "\n\ndef main():\n    \"\"\"Bard.\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(1)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline())\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set([int(x) for x in line[1:]])\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present)\n    print('\\n'.join([str(x) for x in sorted(list(villagers))]))\n\nmain()\n", "\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = {}\n    for i in range(1, n+1):\n        songs[i] = set()\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, int(line[0])+1):\n            songs[int(line[j])].add(i)\n\n    q = deque()\n    q.append(1)\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(2, n+1):\n            if i not in known and len(songs[i].difference(songs[curr])) == 0:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if i in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline())\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set([int(x) for x in line[1:]])\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present)\n    print('\\n'.join([str(x) for x in sorted(list(villagers))])\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    e = int(sys.stdin.readline().strip())\n    songs = set()\n    for i in range(e):\n        line = sys.stdin.readline().strip().split()\n        k = int(line[0])\n        for j in range(k):\n            songs.add(int(line[j]))\n    for i in range(1, n + 1):\n        print(i)\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\ndef main():\n    n = int(stdin.readline())\n    e = int(stdin.readline())\n    songs = [set() for i in range(n+1)]\n\n    for i in range(e):\n        line = stdin.readline().split()\n        for j in range(1, len(line)):\n            songs[int(line[j])].add(line[0])\n\n    q = deque()\n    q.append(\"1\")\n    known = set()\n    while len(q) > 0:\n        curr = q.popleft()\n        known.add(curr)\n        for i in range(1, n+1):\n            if str(i) not in known and len(songs[i].difference(songs[int(curr)])) == 0:\n                q.append(i)\n\n    for i in range(1, n+1):\n        if str(i) in known:\n            print(i)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    villagers = int(sys.stdin.readline().strip())\n    evenings = int(sys.stdin.readline().strip())\n    songs = []\n    for evening in range(evenings):\n        singers = [int(x) for x in sys.stdin.readline().strip().split()]\n        if singers[0] == 1:\n            songs.append(singers[1])\n        else:\n            songs.extend(singers[1:])\n    for villager in range(1,villagers+1):\n        if songs.count(villager) == len(songs):\n            print(villager)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"Bard\"\"\"\n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(0)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        if 0 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nvillagers = int(input())\nnights = int(input())\nbard = 1\nnights_songs = []\nfor i in range(nights):\n    nights_songs.append(input().split()[1:])\n\nsongs = set()\nfor i in range(nights):\n    if bard in nights_songs[i]:\n        songs.add(i)\n    else:\n        for j in range(nights):\n            if i != j and set(nights_songs[i]).intersection(set(nights_songs[j])) != set():\n                songs.add(i)\n                songs.add(j)\n\nfor i in range(1, villagers+1):\n    print(i)\n", "\n#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    e = int(input())\n    songs = set()\n    for _ in range(e):\n        for i in input().split()[1:]:\n            songs.add(i)\n    for i in range(1,n+1):\n        if str(i) not in songs:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport os\n\ndef main():\n    n = int(sys.stdin.readline())\n    e = int(sys.stdin.readline())\n    bard = 1\n    villagers = set(range(1, n + 1))\n    for i in range(e):\n        line = sys.stdin.readline().split()\n        k = int(line[0])\n        present = set([int(x) for x in line[1:]])\n        if bard in present:\n            villagers = present\n        else:\n            villagers = villagers.intersection(present)\n    print('\\n'.join([str(x) for x in sorted(list(villagers))])\n\nmain()\n", "\n\ndef main():\n    \"\"\" Main function \"\"\"\n    num_villagers = int(input())\n    num_nights = int(input())\n    villagers_nights = []\n    for _ in range(num_nights):\n        villagers_nights.append(set(map(int, input().split())))\n    songs = set()\n    for i in range(num_nights):\n        if 1 in villagers_nights[i]:\n            songs.add(i)\n        else:\n            for j in range(i):\n                if villagers_nights[i].intersection(villagers_nights[j]):\n                    songs.add(i)\n                    break\n    for i in range(num_villagers):\n        if i == 0 or all(i + 1 in villagers_nights[j] for j in songs):\n            print(i + 1)\n\nmain()\n", "import sys\n\ndef main():\n    villagers = int(sys.stdin.readline().strip())\n    evenings = int(sys.stdin.readline().strip())\n    songs = []\n    for evening in range(evenings):\n        singers = [int(x) for x in sys.stdin.readline().strip().split()]\n        if singers[0] == 1:\n            songs.append(singers[1])\n        else:\n            songs.extend(singers[1:])\n    for villager in range(1,villagers+1):\n        if songs.count(villager) == len(songs):\n            print(villager)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"Bard\"\"\" \n    num_villagers = int(input())\n    num_evenings = int(input())\n    bard_list = []\n    bard_list.append(1)\n    for _ in range(num_evenings):\n        num_villagers_present = int(input())\n        villager_list = [int(i) for i in input().split()]\n        if 1 in villager_list:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n        else:\n            for i in villager_list:\n                if i not in bard_list:\n                    bard_list.append(i)\n    bard_list.sort()\n    for i in bard_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nn = int(sys.stdin.readline())\ne = int(sys.stdin.readline())\nbard = 1\nvillagers = set(range(1, n + 1))\nfor i in range(e):\n    line = sys.stdin.readline().split()\n    k = int(line[0])\n    present = set([int(x) for x in line[1:]])\n    if bard in present:\n        villagers = present\n    else:\n        villagers = villagers.intersection(present)\nprint('\\n'.join([str(x) for x in sorted(list(villagers))]))\n", "import sys\nimport math\n\n\ndef main():\n    inp = sys.stdin.readlines()\n    for i in range(1, len(inp), 2):\n        n = int(inp[i])\n        a = [int(x) for x in inp[i + 1].split()]\n        a.sort()\n        print(a[int(math.ceil(len(a) / 2))])\n\nif __name__ == \"__main__\":\n    main()\n"]