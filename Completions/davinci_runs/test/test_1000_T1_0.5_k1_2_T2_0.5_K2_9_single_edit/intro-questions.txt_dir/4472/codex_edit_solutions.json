["import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(n/2)] == b[int(n/2)]:\n            return solve(a[:int(n/2)] + a[int(n/2)+1:], b[:int(n/2)] + b[int(n/2)+1:])\n        else:\n            return 1\n    else:\n        if a[int(n/2)-1:int(n/2)+1] == b[int(n/2)-1:int(n/2)+1]:\n            return solve(a[:int(n/2)-1] + a[int(n/2)+1:], b[:int(n/2)-1] + b[int(n/2)+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\n\ndef main():\n    n = int(input())\n    a = input()\n    b = input()\n    print(solve(a, b))\n\nif __name__ == \"__main__\":\n    main()\n", "var fs = require('fs')\nvar path = require('path')\nvar pathToConfigFile = path.join(__dirname, 'config.json')\n\n\nvar config = JSON.parse(fs.readFileSync(pathToConfigFile))\n\nconsole.log(config.port)\n\n\n\nvar http = require('http')\nvar server = http.createServer(function (req, res) {\n    res.writeHead(200)\n    res.end('Hello world')\n})\n\nserver.listen(config.port, function () {\n    console.log('Server started on port ' + config.port)\n})\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] == b[int(math.floor(n/2))]:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] == b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\n\ndef main():\n    n = int(input())\n    a = input()\n    b = input()\n    print(solve(a, b))\n\n\nif __name__ == \"__main__\":\n    main()\n", "console.log('Hello World!');\n", "const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, 'data', 'file.txt');\n\nfs.readFile(filePath, { encoding: 'utf-8' }, (err, data) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(data);\n  }\n});\n", "\nimport math\n\ndef solve(a, b, n):\n    if a == b:\n        return 0\n    if n % 2 == 1:\n        if a[math.floor(n/2)] == b[math.floor(n/2)]: # if the middle characters are equal\n            return solve(a[:math.floor(n/2)] + a[math.floor(n/2)+1:], b[:math.floor(n/2)] + b[math.floor(n/2)+1:], n-1)\n        else:\n            return 1\n    else:\n        if a[math.floor(n/2)-1:math.floor(n/2)+1] == b[math.floor(n/2)-1:math.floor(n/2)+1]:\n            return solve(a[:math.floor(n/2)-1] + a[math.floor(n/2)+1:], b[:math.floor(n/2)-1] + b[math.floor(n/2)+1:], n-2)\n        else:\n            return 1\n\ndef solve_wrapper(a, b):\n    n = len(a)\n    return solve(a, b, n)\n\n\ndef test():\n    assert solve_wrapper(\"abacaba\", \"bacabaa\") == 4\n    assert solve_wrapper(\"zcabd\", \"dbacz\") == 0\n    assert solve_wrapper(\"abcabc\", \"abcabc\") == 0\n    assert solve_wrapper(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve_wrapper(\"a\", \"a\") == 0\n    assert solve_wrapper(\"a\", \"b\") == 1\n    assert solve_wrapper(\"ab\", \"ba\") == 1\n    assert solve_wrapper(\"ab\", \"ab\") == 0\n    assert solve_wrapper(\"abcd\", \"abcd\") == 0\n    assert solve_wrapper(\"abcd\", \"dcba\") == 1\n    assert solve_wrapper(\"abcde\", \"abcde\") == 0\n    assert solve_wrapper(\"abcde\", \"edcba\") == 1\n\ntest()\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[math.floor(n/2)] == b[math.floor(n/2)]:\n            return solve(a[:math.floor(n/2)] + a[math.floor(n/2)+1:], b[:math.floor(n/2)] + b[math.floor(n/2)+1:])\n        else:\n            return 1\n    else:\n        if a[math.floor(n/2)-1:math.floor(n/2)+1] == b[math.floor(n/2)-1:math.floor(n/2)+1]:\n            return solve(a[:math.floor(n/2)-1] + a[math.floor(n/2)+1:], b[:math.floor(n/2)-1] + b[math.floor(n/2)+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\ntest()\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] == b[int(math.floor(n/2))]:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] == b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4, \"abacaba\"\n    assert solve(\"zcabd\", \"dbacz\") == 0, \"zcabd\"\n    assert solve(\"abcabc\", \"abcabc\") == 0, \"abcabc\"\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0, \"abcdabcd\"\n    assert solve(\"a\", \"a\") == 0, \"a\"\n    assert solve(\"a\", \"b\") == 1, \"a\"\n    assert solve(\"ab\", \"ba\") == 1, \"ab\"\n    assert solve(\"ab\", \"ab\") == 0, \"ab\"\n    assert solve(\"abcd\", \"abcd\") == 0, \"abcd\"\n    assert solve(\"abcd\", \"dcba\") == 1, \"abcd\"\n    assert solve(\"abcde\", \"abcde\") == 0, \"abcde\"\n    assert solve(\"abcde\", \"edcba\") == 1, \"abcde\"\n\ntest()\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] == b[int(math.floor(n/2))]:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] == b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n", "// const fs = require('fs');\n\n// fs.writeFile('./text.txt', 'Hello World!', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log('File successfully created!')\n//     }\n// });\n\n// fs.readFile('./text.txt', 'utf8', function(err, data){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log(data)\n//     }\n// });\n\n// fs.rename('./text.txt', './hello.txt', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log('File successfully renamed!')\n//     }\n// });\n\n// fs.appendFile('./hello.txt', '\\nHello Again!', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log('File successfully updated!')\n//     }\n// });\n\n// fs.unlink('./hello.txt', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log('File successfully deleted!')\n//     }\n// });\n\n// fs.mkdir('tutorial', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log('Folder successfully created!')\n//     }\n// });\n\n// fs.rmdir('tutorial', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log('Folder successfully deleted!')\n//     }\n// });\n\n// fs.mkdir('tutorial', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         fs.writeFile('./tutorial/example.txt', '123', function(err){\n//             if(err){\n//                 console.log(err);\n//             }else{\n//                 console.log('File successfully created!')\n//             }\n//         });\n//     }\n// });\n\n// fs.unlink('./tutorial/example.txt', function(err){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         fs.rmdir('tutorial', function(err){\n//             if(err){\n//                 console.log(err);\n//             }else{\n//                 console.log('Folder successfully deleted!')\n//             }\n//         });\n//     }\n// });\n\n// fs.readdir('example', function(err, files){\n//     if(err){\n//         console.log(err);\n//     }else{\n//         console.log(files);\n//     }\n// });\n\nconst fs = require('fs');\n\nfs.readdir('example', function(err, files){\n    if(err){\n        console.log(err);\n    }else{\n        for(let file of files){\n            fs.unlink('./example/' + file, function(err){\n                if(err){\n                    console.log(err);\n                }else{\n                    console.log('File successfully deleted!')\n                }\n            });\n        }\n    }\n});\n", "// file.js\nimport fs from 'fs';\n\nexport default {\n  readFile: (path, callback) => {\n    fs.readFile(path, 'utf8', (err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      callback(data);\n    });\n  },\n\n  writeFile: (path, data, callback) => {\n    fs.writeFile(path, data, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      callback();\n    });\n  }\n}\n", "#!/usr/bin/env python3\n\nimport os\nimport glob\n\ndef main():\n    print(\"This is the files program.\")\n    print()\n\n    # change to desired directory\n    os.chdir(\"/home/student/mycode/\")\n\n    # print a list of all files in current directory\n    print(glob.glob('*'))\n\n    # create a new directory\n    os.mkdir('/home/student/mycode/test')\n\n    # move to new directory\n    os.chdir('/home/student/mycode/test')\n\n    # print a list of all files in current directory\n    print(glob.glob('*'))\n\n    # create a new file\n    with open(\"file3.txt\", \"w\") as f:\n        f.write(\"This is file3.\")\n\n    # print a list of all files in current directory\n    print(glob.glob('*'))\n\n    # rename a file\n    os.rename(\"file3.txt\", \"file4.txt\")\n\n    # print a list of all files in current directory\n    print(glob.glob('*'))\n\n    # move a file to a different directory\n    os.rename(\"file4.txt\", \"/home/student/mycode/file4.txt\")\n\n    # print a list of all files in current directory\n    print(glob.glob('*'))\n\n    # change directories to the parent directory\n    os.chdir(\"/home/student/mycode/\")\n\n    # remove the directory\n    os.rmdir(\"/home/student/mycode/test\")\n\n    # print a list of all files in current directory\n    print(glob.glob('*'))\n\n    # delete a file\n    os.remove(\"file4.txt\")\n\n    # print a list of all files in current directory\n    print(glob.glob('*'))\n\n    # delete a directory\n    os.rmdir(\"/home/student/mycode/test\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(n/2)] == b[int(n/2)]:\n            return solve(a[:int(n/2)] + a[int(n/2)+1:], b[:int(n/2)] + b[int(n/2)+1:])\n        else:\n            return 1\n    else:\n        if a[int(n/2)-1:int(n/2)+1] == b[int(n/2)-1:int(n/2)+1]:\n            return solve(a[:int(n/2)-1] + a[int(n/2)+1:], b[:int(n/2)-1] + b[int(n/2)+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n", "const fs = require('fs');\n\nfunction readFile(filename) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filename, 'utf-8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nfunction writeFile(filename, data) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(filename, data, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  readFile,\n  writeFile\n};\n"]