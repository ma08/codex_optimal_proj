["\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # Find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # Check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0: # j-th person is not honest\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0: # j-th person lied\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\t# read input\n\tn = int(sys.stdin.readline())\n\ttestimonies = []\n\tfor i in range(n):\n\t\ta = int(sys.stdin.readline())\n\t\ttestimonies.append([])\n\t\tfor j in range(a):\n\t\t\ttestimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n\t# find max honest people\n\tmax_honest_people = 0\n\tfor i in range(2**n):\n\t\t# check if it is possible to have i honest people\n\t\thonest_people = 0\n\t\tfor j in range(n):\n\t\t\tif (i & (1 << j)) == 0:\n\t\t\t\tcontinue\n\t\t\thonest_people += 1\n\t\t\tfor testimony in testimonies[j]:\n\t\t\t\tif (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n\t\t\t\t\thonest_people = -1\n\t\t\t\t\tbreak\n\t\t\tif honest_people == -1:\n\t\t\t\tbreak\n\t\tif honest_people == -1:\n\t\t\tcontinue\n\t\tmax_honest_people = max(max_honest_people, honest_people)\n\n\tprint(max_honest_people)\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\n\n\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=None):\n    \"\"\"is_honest function\"\"\"\n    if visited is None:\n        visited = set()\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(1<<n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys \n  \n# Function to return gcd of a and b \ndef gcd(a,b): \n    if a == 0 : \n        return b \n      \n    return gcd(b%a, a) \n  \n# Function to find gcd of array of  \n# numbers \ndef findGCD(arr, n): \n      \n    result = arr[0] \n    for i in range(1, n): \n        result = gcd(arr[i], result) \n          \n    return result \n  \n# Driver Code \narr = [2, 4, 6, 8, 16] \nn = len(arr) \nprint(findGCD(arr, n)) \n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = []\n    for person in range(num_person):\n        graph.append([])\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in range(len(graph)):\n        if is_honest(graph, person + 1):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person - 1]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    if not graph[person]:\n        return True\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n", "\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n", "\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(raw_input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(raw_input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, raw_input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) != 0:\n                honest_people += 1\n                continue\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2 ** n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0: # test if the person is honest and the testimony is not\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main function\n    \"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    \"\"\"solve function\n    \"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\n    \"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"]