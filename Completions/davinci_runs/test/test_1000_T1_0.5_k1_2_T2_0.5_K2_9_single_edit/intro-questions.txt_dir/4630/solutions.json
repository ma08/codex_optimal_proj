["for _ in range(int(input())):\n    n = int(input())\n    P = list(map(int, input().split()))\n    ans = [0] * n\n    for i in range(n):\n        if ans[i] == 0:\n            now = i\n            cnt = 0\n            cll = []\n            while True:\n                now = P[now] - 1\n                cnt += 1\n                cll.append(now)\n                if now == i:\n                    break\n            for u in cll:\n                ans[u] = cnt\n    print(' '.join(list(map(str, ans))))", "import math\nfrom collections import deque, defaultdict\nfrom sys import stdin, stdout\ninput = stdin.readline\n# print = stdout.write\nlistin = lambda : list(map(int, input().split()))\nmapin = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i]-=1\n    col = [0 for i in range(n)]\n    c = 1\n    for i in range(n):\n        if not col[i]:\n            s = i\n            while col[s] == 0:\n                col[s] = c\n                s = a[s]\n            c+=1\n    d = defaultdict(int)\n    for i in col:\n        d[i]+=1\n    ans = [0 for i in range(n)]\n    for i in range(n):\n        ans[i] = d[col[i]]\n    print(*ans)", "tc = int(input())\n\nwhile tc > 0:\n\ttc -= 1\n\tn = int(input())\n\tp = [0] + list(map(int, input().split()))\n\n\tans = [0] * (n + 1)\n\tmk = [False] * (n + 1)\n\n\tfor i in range(1 , n + 1):\n\t\tif not mk[i]:\n\t\t\tsz = 1\n\t\t\tcurr = p[i]\n\t\t\tmk[i] = True\n\t\t\twhile curr != i:\n\t\t\t\tsz += 1\n\t\t\t\tmk[curr] = True\n\t\t\t\tcurr = p[curr]\n\n\t\t\tans[i] = sz\n\t\t\tcurr = p[i]\n\t\t\twhile curr != i:\n\t\t\t\tans[curr] = sz\n\t\t\t\tcurr = p[curr]\n\n\tprint(\" \".join([str(x) for x in ans[1:]]))\n\n\n", "tc = int(input())\n\nwhile tc > 0:\n\ttc -= 1\n\tn = int(input())\n\tp = [0] + list(map(int, input().split()))\n\n\tans = [0] * (n + 1)\n\tmk = [False] * (n + 1)\n\n\tfor i in range(1 , n + 1):\n\t\tif not mk[i]:\n\t\t\tsz = 1\n\t\t\tcurr = p[i]\n\t\t\tmk[i] = True\n\t\t\twhile curr != i:\n\t\t\t\tsz += 1\n\t\t\t\tmk[curr] = True\n\t\t\t\tcurr = p[curr]\n\n\t\t\tans[i] = sz\n\t\t\tcurr = p[i]\n\t\t\twhile curr != i:\n\t\t\t\tans[curr] = sz\n\t\t\t\tcurr = p[curr]\n\n\tprint(\" \".join([str(x) for x in ans[1:]]))\n\n\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [-1] * n\n    for i in range(n):\n        if ans[i] != -1:\n            continue\n        memo = {}\n        tmp = i\n        memo[tmp] = 1\n        cnt = 1\n        while True:\n            tmp = p[tmp] - 1\n            if tmp in memo:\n                break\n            else:\n                memo[tmp] = 1\n                cnt += 1\n        for j in memo:\n            ans[j] = cnt\n    print(*ans)\n", "import sys\ninput = sys.stdin.readline\n\nq=int(input())\n\ndef find(x):\n    while Group[x] != x:\n        x=Group[x]\n    return x\n\ndef Union(x,y):\n    if find(x) != find(y):\n        Group[find(y)]=Group[find(x)]=min(find(y),find(x))\n\nfor testcases in range(q):\n    n=int(input())\n    P=list(map(int,input().split()))\n\n    Group=[i for i in range(n)]\n\n    for i in range(n):\n        Union(i,P[i]-1)\n\n    G=[find(i) for i in range(n)]\n\n    count=[0]*n\n\n    for g in G:\n        count[g]+=1\n\n    for i in range(n):\n        print(count[G[i]],end=\" \")\n    print()\n\n\n\n    \n", "import sys\ndef I():\n    return sys.stdin.readline().rstrip()\nq = int( I() )\nfor _ in range( q ):\n    n = int( I() )\n    c = [ -1 ] * n\n    def getp( i ):\n        s = []\n        while c[ i ] >= 0:\n            s.append( i )\n            i = c[ i ]\n        for j in s:\n            c[ j ] = i\n        return i\n    p = list( map( int, I().split() ) )\n    p = [ i - 1 for i in p ]\n    for i, q in enumerate( p ):\n        a, b = getp( i ), getp( q )\n        if a != b:\n            c[ a ] += c[ b ]\n            c[ b ] = a\n    for i in p:\n        print( -c[ getp( i ) ], end = \" \" )\n    print()\n", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [-1 for i in range(n)]\n    c = [0 for i in range(n + 2)]\n    used = [True for i in range(n)]\n    for i in range(n):\n        if used[i]:\n            d = a[i] - 1\n            cell = a[i] - 1\n            b[cell] = d\n            c[d] += 1\n            used[cell] = False\n            while cell != i:\n                cell = a[cell] - 1\n                c[d] += 1\n                b[cell] = d\n                used[cell] = False\n    for i in range(n):\n        print(c[b[i]], end=\" \")\n    print()", "\nq = int(input())\n\nfor i in range(q):\n\n    n = int(input())\n\n    lis = [0] * n\n    \n\n    a = list(map(int,input().split()))\n    \n    q = []\n    ind = 0\n    now = 0\n    end = 0\n    while end < n:\n\n        while ind < n:\n            if lis[ind] == 0:\n                now = ind\n                break\n            ind += 1\n\n        q = []\n\n        while len(q) == 0 or now != q[0]:\n            q.append(now)\n            now = a[now] - 1\n\n        for i in q:\n            lis[i] = len(q)\n\n        end += len(q)\n\n    print(\" \".join(map(str,lis)))\n", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) - 1 for i in input().split()]\n    res = []\n    v = [0] * n\n    for i in range(n):\n        if (v[i] == 0):\n            temp = i\n            v[temp] = 1\n            res.append({temp})\n            while (l[temp] not in res[-1]):\n                res[-1].add(l[temp])\n                temp = l[temp]\n                v[temp] = 1\n    # print(res)\n    for i in res:\n        for j in i:\n            v[j] = len(i)\n    print(*v)", "def read():\n    return list(map(int,input().split()))\n\nq = int(input())\nfor test in range(q):\n    n = int(input())\n    a = read()\n    for i in range(n):\n        a[i] -= 1\n    used = [False]*n\n    ans = [0]*n\n    for i in range(n):\n        if not used[i]:\n            j = a[i]\n            k = 1\n            while j!=i:\n                k += 1\n                j = a[j]\n            j = a[i]\n            ans[i] = k\n            while j!=i:\n                j = a[j]\n                ans[j] = k\n                used[j] = True\n    print(*ans)\n", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = [0] * n\n    for i in range(n):\n        if ans[i] == 0:\n            numbers_now = []\n            now = a[a[i] - 1]\n            numbers_now.append(i)\n            numbers_now.append(a[i] - 1)\n            count = 1\n            while now != a[i]:\n                now = a[now - 1]\n                numbers_now.append(now - 1)\n                count += 1\n            for i in numbers_now:\n                ans[i] = count\n        else:\n            continue\n    print(*ans)", "\nq = int(input())\nfor i in range(q):\n    a = int(input())\n    cycle = [1 for i in range(a)]\n\n    tab = list(map(int, input().split()))\n\n    for indice, j in enumerate(tab):\n        if cycle[indice] != 1:\n            continue\n        var = indice +1\n\n        while tab[var-1] != indice+1:\n            var = tab[var-1]\n            cycle[indice] += 1\n\n        var = indice +1\n\n        while tab[var-1] != indice+1:\n            var = tab[var-1]\n            cycle[var-1] = cycle[indice]\n\n\n    print(*cycle)", "I = lambda: list(map(int, input().split()))\n\nt, = I()\nwhile t:\n    t -= 1\n    n, = I()\n    l = I()\n    l = [i-1 for i in l]\n    p = [i for i in range(n)]\n    v = [0]*n\n    for i in range(n):\n        if not v[i]:\n            v[i] = 1\n            j = l[i]\n            while not v[j]:\n                v[j] = 1\n                v[i] += 1\n                p[j] = i\n                j = l[j]\n                \n    #print(v)\n    for i in range(n):\n        print(v[p[i]], end = ' ')\n    print()\n", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    p = list(map(int,input('').split(' ')))\n    d = {}\n    for i in range(n):\n        d[p[i]] = i+1\n    exp = [False]*(n+1)\n    ans = {}\n    for i in range(1,n+1,1):\n        if(not exp[i]):\n            a = [i]\n            c = 1\n            t = i\n            while(d[t] != i):\n                t = d[t]\n                exp[t] = True\n                c = c+1\n                a.append(t)\n            for f in a:\n                ans[f] = c\n\n    for i in range(1,n+1,1):\n        print(ans[i], end = ' ')\n    print('')\n            ", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] -= 1\n\n    ans = dict()\n\n    for i in range(n):\n        # st = i + 1\n        if i not in ans:\n            p = []\n\n            j = i\n            p.append(j)\n            ca = 0\n            while True:\n                ca += 1\n                j = a[j]\n                p.append(j)\n                if j == i:\n                    for x in p:\n                        ans[x] = ca\n                    break\n\n    for i in range(n):\n        print(ans   [i], end=\" \")\n    print()\n\n\nfor _ in range(int(input())):\n    solve()\n", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 1000010\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\ndef fib(n,m):\n    if n == 0:\n        return [0, 1]\n    else:\n        a, b = fib(n // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n\n    return (num*(pow(den,MOD-2,MOD)))%MOD\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\n\ndef bfs(v):\n    q = [v]\n    vis[v] = 1\n    s = 0\n    l = []\n    while q:\n        x = q.pop(0)\n        l.append(x)\n        s+=1\n        st[x] = s\n        for i in d[x]:\n            if not vis[i]:\n                q.append(i)\n                vis[i] = 1\n            else:\n                t = s+1-st[i]\n                break\n    for i in l:\n        ans[i] = t\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = arrIN()\n    d = defaultdict(list)\n    for i in range(1,n+1):\n        d[i].append(a[i-1])\n    vis = [0]*(n+1)\n    st = [0]*(n+1)\n    ans = [0]*(n+1)\n    for i in range(1,n+1):\n        if not vis[i]:\n            bfs(i)\n    print(*ans[1:])", "import sys\ninput = sys.stdin.readline\n\nq = int(input())\n\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    for i in range(n):\n        p[i] -= 1\n    \n    flag = [-1] * n\n    ans = [-1] * n\n    \n    for i in range(n):\n        cur = i\n        \n        if flag[cur] == 1:\n            continue\n\n        flag[cur] = 1\n        l = [cur]\n        \n        while True:\n            if flag[p[cur]] == 1:\n                break\n            \n            if flag[p[cur]] == -1:\n                flag[p[cur]] = 1\n            \n            cur = p[cur]\n            l.append(cur)\n        \n        for li in l:\n            ans[li] = len(l)\n    \n    print(*ans)", "import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(100000)\n\n\ndef getN():\n    return int(input())\n\n\ndef getList():\n    return list(map(int, input().split()))\n\n\nimport math\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n+1)]\n        self.rank = [0] * (n+1)\n        self.size = [1] * (n+1)\n\n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n            self.size[y] += self.size[x]\n        else:\n            self.par[y] = x\n            self.size[x] += self.size[y]\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n\n\n    def same_check(self, x, y):\n        return self.find(x) == self.find(y)\n\n\ndef solve():\n    n = getN()\n    nums = getList()\n    uf = UnionFind(n)\n    # print(nums)\n    for i, num in enumerate(nums):\n        uf.par[i+1] = uf.find(i+1)\n        uf.par[num] = uf.find(num)\n        # print(uf.size)\n        # print(uf.par)\n        # print(\"============\")\n        if not uf.same_check(i+1, num):\n            uf.union(i+1, num)\n\n    for i in range(n+1):\n        uf.find(i)\n    ans = []\n    for i in range(n):\n        ans.append(uf.size[uf.par[i+1]])\n    print(*ans)\n    # print(uf.size)\n    # print(uf.par)\n\ndef main():\n    q = getN()\n    for _ in range(q):\n        solve()\n\ndef __starting_point():\n    main()\n\n\"\"\"\n1\n3\n2 3 1\n\"\"\"\n__starting_point()", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    Q = list(map(int,input().split()))\n    res=[1]*n\n    for i in range(n):\n        if res[i]==1:\n            t = Q[i]\n            tl = [t]\n            while t!=i+1:\n                t=Q[t-1]\n                tl.append(t)\n                res[i]+=1\n            for k in tl:\n                res[k-1]=res[i]\n    print(*res)", "#    !/usr/bin/env python3\n#    encoding: UTF-8\n#    Last Modified: 22/Oct/2019 08:25:41 PM\n\n\nimport sys\n\n\ndef main():\n    for tc in range(int(input())):\n        n = int(input())\n        arr = get_array()\n        for i in range(n):\n            arr[i] -= 1\n        ans = [1] * n\n        d = {}\n        for i in range(n):\n            if i in d:\n                continue\n            tmp = {}\n            j = arr[i]\n            while j != i:\n                ans[i] += 1\n                j = arr[j]\n                tmp[arr[j]] = 1\n            for j in tmp:\n                ans[j] = ans[i]\n                d[j] = 1\n\n        print(*ans)\n\n\nget_array = lambda: list(map(int, sys.stdin.readline().split()))\n\n\nget_ints = lambda: list(map(int, sys.stdin.readline().split()))\n\n\ninput = lambda: sys.stdin.readline().strip()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport itertools\nimport math\nimport collections\nfrom collections import Counter\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = prime[1] = False\n    r = [p for p in range(n + 1) if prime[p]]\n    return r\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef ceil(n, k): return n // k + (n % k != 0)\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef prr(a, sep=' '): print(sep.join(map(str, a)))\ndef dd(): return collections.defaultdict(int)\n\nt = ii()\nfor i in range(t):\n    n = ii()\n    d = li()\n    s = [0]*n\n    used = [-1]*n\n\n    for i in range(n):\n        if used[i] == -1:\n            u, v = i, d[i] - 1\n            while True:\n                s[i] += 1\n                used[u] = i\n                u, v = v, d[v] - 1\n                if u == i:\n                    break\n    res = []\n    for i in range(n):\n        res.append(s[used[d[i] - 1]])\n    prr(res)\n\n\n\n\n\n", "for _ in range(int(input())):\n\n    n = int(input())\n    p = [int(x) - 1 for x in input().split()]\n\n    used = [False] * n\n    r = [0] * n\n\n    for i in range(n):\n        if not used[i]:\n            j = i\n            cycle = []\n            while not used[j]:\n                cycle.append(p[j])\n                used[j] = True\n                j = p[j]\n            for c in cycle:\n                r[c] = len(cycle)\n    print(*r)\n"]