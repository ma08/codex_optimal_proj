2022-04-16 07:08:50.140862 num operations 1
2022-04-16 07:08:50.140881 size on input set 1
2022-04-16 07:09:30.851361 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import os\nimport sys\nimport re\nimport json\n\ndef get_file_list(dir_path):\n    file_list = []\n    for root, dirs, files in os.walk(dir_path):\n        for f in files:\n            file_list.append(os.path.join(root, f))\n    return file_list\n\ndef get_file_content(file_path):\n    with open(file_path, 'rb') as f:\n        content = f.read().decode('utf-8', 'ignore')\n        return content\n\ndef get_file_name(file_path):\n    return file_path.split('/')[-1]\n\ndef get_file_suffix(file_path):\n    return file_path.split('.')[-1]\n\ndef get_file_size(file_path):\n    return os.path.getsize(file_path)\n\ndef get_file_abspath(file_path):\n    return os.path.abspath(file_path)\n\ndef get_file_abspath_list(file_path_list):\n    abspath_list = []\n    for file_path in file_path_list:\n        abspath_list.append(os.path.abspath(file_path))\n    return abspath_list\n\ndef get_file_absdir(file_path):\n    return os.path.dirname(os.path.abspath(file_path))\n\ndef get_file_type(file_path):\n    cmd = 'file ' + file_path\n    return os.popen(cmd).read().strip()\n\ndef get_file_md5(file_path):\n    cmd = 'md5sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha1(file_path):\n    cmd = 'sha1sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha256(file_path):\n    cmd = 'sha256sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha512(file_path):\n    cmd = 'sha512sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha(file_path):\n    file_sha = {\n        'md5': get_file_md5(file_path),\n        'sha1': get_file_sha1(file_path),\n        'sha256': get_file_sha256(file_path),\n        'sha512': get_file_sha512(file_path)\n    }\n    return file_sha\n\ndef get_file_magic(file_path):\n    cmd = 'file -b ' + file_path\n    return os.popen(cmd).read().strip()\n\ndef get_file_info(file_path):\n    file_info = {}\n    file_info['name'] = get_file_name(file_path)\n    file_info['suffix'] = get_file_suffix(file_path)\n    file_info['size'] = get_file_size(file_path)\n    file_info['abspath'] = get_file_abspath(file_path)\n    file_info['absdir'] = get_file_absdir(file_path)\n    file_info['type'] = get_file_type(file_path)\n    file_info['magic'] = get_file_magic(file_path)\n    file_info['md5'] = get_file_md5(file_path)\n    file_info['sha1'] = get_file_sha1(file_path)\n    file_info['sha256'] = get_file_sha256(file_path)\n    file_info['sha512'] = get_file_sha512(file_path)\n    file_info['sha'] = get_file_sha(file_path)\n    return file_info\n\ndef get_file_info_list(file_path_list):\n    file_info_list = []\n    for file_path in file_path_list:\n        file_info_list.append(get_file_info(file_path))\n    return file_info_list\n\ndef get_file_info_list_by_dir(dir_path):\n    file_path_list = get_file_list(dir_path)\n    return get_file_info_list(file_path_list)\n\ndef get_file_info_list_by_dir_json(dir_path):\n    return json.dumps(get_file_info_list_by_dir(dir_path))\n\ndef get_file_info_list_by_dir_json_file(dir_path, file_path):\n    with open(file_path, 'w') as f:\n        f.write(get_file_info_list_by_dir_json(dir_path))\n\ndef get_file_info_list_by_dir_json_file_gzip(dir_path, file_path):\n    cmd = 'python file.py ' + dir_path + ' | gzip > ' + file_path\n    os.system(cmd)\n\nif __name__ == '__main__':\n    if len(sys.argv) == 3:\n        dir_path = sys.argv[1]\n        file_path = sys.argv[2]\n        get_file_info_list_by_dir_json_file_gzip(dir_path, file_path)\n    else:\n        print('Usage: python file.py DIR_PATH FILE_PATH')\n"
    },
    {
      "index": 1,
      "text": "const fs = require('fs');\nconst path = require('path');\nconst dir = path.resolve(__dirname, './');\n\nfs.readdir(dir, (err, files) => {\n    if (err) {\n        console.log(err);\n        return;\n    }\n    files.forEach((file) => {\n        console.log(file);\n    });\n});\n"
    },
    {
      "index": 2,
      "text": "var fs = require('fs');\n\n//var readMe = fs.readFileSync('readMe.txt', 'utf8');\n//console.log(readMe);\n\n//fs.writeFileSync('writeMe.txt', readMe);\n\nfs.readFile('readMe.txt', 'utf8', function(err, data){\n    console.log(data);\n});\n\nconsole.log('test');\n"
    },
    {
      "index": 3,
      "text": "const fs = require('fs')\nconst path = require('path')\n\nconst getFileByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        fs.readFile(fPath, (err, data) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(data)\n            }\n        })\n    })\n}\n\nconst getFileNameList = (fPath) => {\n    return new Promise((resolve, reject) => {\n        fs.readdir(fPath, (err, files) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(files)\n            }\n        })\n    })\n}\n\nconst getFileNameListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileNameList(fPath)\n            .then(files => {\n                let result = files.map(file => {\n                    return path.join(fPath, file)\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getFileStat = (fPath) => {\n    return new Promise((resolve, reject) => {\n        fs.stat(fPath, (err, stats) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(stats)\n            }\n        })\n    })\n}\n\nconst getFileStatListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileNameListByPath(fPath)\n            .then(files => {\n                let promises = files.map(file => {\n                    return getFileStat(file)\n                })\n                Promise.all(promises)\n                    .then(stats => {\n                        resolve(stats)\n                    })\n                    .catch(err => {\n                        reject(err)\n                    })\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getFileListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileStatListByPath(fPath)\n            .then(stats => {\n                let result = stats.map(stat => {\n                    return stat.isFile()\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getDirListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileStatListByPath(fPath)\n            .then(stats => {\n                let result = stats.map(stat => {\n                    return stat.isDirectory()\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getDirListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileStatListByPath(fPath)\n            .then(stats => {\n                let result = stats.map(stat => {\n                    return stat.isDirectory()\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getFileAndDirListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        Promise.all([getFileListByPath(fPath), getDirListByPath(fPath)])\n            .then(results => {\n                let files = results[0]\n                let dirs = results[1]\n                let result = []\n                for (let i = 0; i < files.length; i++) {\n                    let type = 'file'\n                    if (dirs[i]) {\n                        type = 'dir'\n                    }\n                    result.push({\n                        name: files[i],\n                        type: type\n                    })\n                }\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nmodule.exports = {\n    getFileByPath,\n    getFileNameList,\n    getFileNameListByPath,\n    getFileStat,\n    getFileStatListByPath,\n    getFileListByPath,\n    getDirListByPath,\n    getFileAndDirListByPath\n}\n"
    },
    {
      "index": 4,
      "text": "const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, '/input.txt');\n\nfs.readFile(filePath, {encoding: 'utf-8'}, function(err,data){\n    if (!err) {\n        console.log('received data: ' + data);\n        processData(data);\n    } else {\n        console.log(err);\n    }\n});\n\nfunction processData(data) {\n    const lines = data.split('\\n');\n    const numCases = lines[0];\n    for (var i = 1; i <= numCases; i++) {\n        const num = lines[i];\n        const output = countDigits(num);\n        console.log(`Case #${i}: ${output}`);\n    }\n}\n\nfunction countDigits(num) {\n    let count = 0;\n    for (var i = 0; i < num.length; i++) {\n        const digit = parseInt(num[i]);\n        if (digit !== 0 && num % digit === 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"
    },
    {
      "index": 5,
      "text": "//\n// Created by kier on 2019/1/25.\n//\n\n#ifndef TENSORSTACK_FILE_H\n#define TENSORSTACK_FILE_H\n\n#include <string>\n#include <fstream>\n\nnamespace ts {\n    namespace file {\n        bool is_exist(const std::string &path);\n\n        void create_dir(const std::string &path);\n\n        void remove_dir(const std::string &path);\n\n        void remove_file(const std::string &path);\n\n        std::fstream append_file(const std::string &path);\n    }\n}\n\n\n#endif //TENSORSTACK_FILE_H\n"
    },
    {
      "index": 6,
      "text": "const fs = require('fs');\n\nconst readFile = (filename, enc) => {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filename, enc, (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n};\n\nconst writeFile = (filename, data) => {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(filename, data, (err) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n};\n\nmodule.exports = {\n    readFile,\n    writeFile\n};\n"
    },
    {
      "index": 7,
      "text": "// var fs = require('fs')\n// var path = require('path')\n// var dir = process.argv[2]\n// var ext = '.' + process.argv[3]\n// fs.readdir(dir, function(err, files){\n//   if(err){\n//     return console.log(err)\n//   }\n//   files.forEach(function(file){\n//     if(path.extname(file) === ext){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\nvar fs = require('fs')\nvar path = require('path')\nfs.readdir(process.argv[2], function(err, files){\n  files.forEach(function(file){\n    if(path.extname(file) === '.' + process.argv[3]){\n      console.log(file)\n    }\n  })\n})\n"
    },
    {
      "index": 8,
      "text": "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\nvar str = file.toString();\nvar arr = str.split('\\n');\nconsole.log(arr.length - 1);\n"
    }
  ],
  "created": 1650092930,
  "object": "edit"
}
2022-04-16 07:09:30.851770 fix syntax errors 9 ["import os\nimport sys\nimport re\nimport json\n\ndef get_file_list(dir_path):\n    file_list = []\n    for root, dirs, files in os.walk(dir_path):\n        for f in files:\n            file_list.append(os.path.join(root, f))\n    return file_list\n\ndef get_file_content(file_path):\n    with open(file_path, 'rb') as f:\n        content = f.read().decode('utf-8', 'ignore')\n        return content\n\ndef get_file_name(file_path):\n    return file_path.split('/')[-1]\n\ndef get_file_suffix(file_path):\n    return file_path.split('.')[-1]\n\ndef get_file_size(file_path):\n    return os.path.getsize(file_path)\n\ndef get_file_abspath(file_path):\n    return os.path.abspath(file_path)\n\ndef get_file_abspath_list(file_path_list):\n    abspath_list = []\n    for file_path in file_path_list:\n        abspath_list.append(os.path.abspath(file_path))\n    return abspath_list\n\ndef get_file_absdir(file_path):\n    return os.path.dirname(os.path.abspath(file_path))\n\ndef get_file_type(file_path):\n    cmd = 'file ' + file_path\n    return os.popen(cmd).read().strip()\n\ndef get_file_md5(file_path):\n    cmd = 'md5sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha1(file_path):\n    cmd = 'sha1sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha256(file_path):\n    cmd = 'sha256sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha512(file_path):\n    cmd = 'sha512sum ' + file_path\n    return os.popen(cmd).read().strip().split(' ')[0]\n\ndef get_file_sha(file_path):\n    file_sha = {\n        'md5': get_file_md5(file_path),\n        'sha1': get_file_sha1(file_path),\n        'sha256': get_file_sha256(file_path),\n        'sha512': get_file_sha512(file_path)\n    }\n    return file_sha\n\ndef get_file_magic(file_path):\n    cmd = 'file -b ' + file_path\n    return os.popen(cmd).read().strip()\n\ndef get_file_info(file_path):\n    file_info = {}\n    file_info['name'] = get_file_name(file_path)\n    file_info['suffix'] = get_file_suffix(file_path)\n    file_info['size'] = get_file_size(file_path)\n    file_info['abspath'] = get_file_abspath(file_path)\n    file_info['absdir'] = get_file_absdir(file_path)\n    file_info['type'] = get_file_type(file_path)\n    file_info['magic'] = get_file_magic(file_path)\n    file_info['md5'] = get_file_md5(file_path)\n    file_info['sha1'] = get_file_sha1(file_path)\n    file_info['sha256'] = get_file_sha256(file_path)\n    file_info['sha512'] = get_file_sha512(file_path)\n    file_info['sha'] = get_file_sha(file_path)\n    return file_info\n\ndef get_file_info_list(file_path_list):\n    file_info_list = []\n    for file_path in file_path_list:\n        file_info_list.append(get_file_info(file_path))\n    return file_info_list\n\ndef get_file_info_list_by_dir(dir_path):\n    file_path_list = get_file_list(dir_path)\n    return get_file_info_list(file_path_list)\n\ndef get_file_info_list_by_dir_json(dir_path):\n    return json.dumps(get_file_info_list_by_dir(dir_path))\n\ndef get_file_info_list_by_dir_json_file(dir_path, file_path):\n    with open(file_path, 'w') as f:\n        f.write(get_file_info_list_by_dir_json(dir_path))\n\ndef get_file_info_list_by_dir_json_file_gzip(dir_path, file_path):\n    cmd = 'python file.py ' + dir_path + ' | gzip > ' + file_path\n    os.system(cmd)\n\nif __name__ == '__main__':\n    if len(sys.argv) == 3:\n        dir_path = sys.argv[1]\n        file_path = sys.argv[2]\n        get_file_info_list_by_dir_json_file_gzip(dir_path, file_path)\n    else:\n        print('Usage: python file.py DIR_PATH FILE_PATH')\n", "const fs = require('fs');\nconst path = require('path');\nconst dir = path.resolve(__dirname, './');\n\nfs.readdir(dir, (err, files) => {\n    if (err) {\n        console.log(err);\n        return;\n    }\n    files.forEach((file) => {\n        console.log(file);\n    });\n});\n", "var fs = require('fs');\n\n//var readMe = fs.readFileSync('readMe.txt', 'utf8');\n//console.log(readMe);\n\n//fs.writeFileSync('writeMe.txt', readMe);\n\nfs.readFile('readMe.txt', 'utf8', function(err, data){\n    console.log(data);\n});\n\nconsole.log('test');\n", "const fs = require('fs')\nconst path = require('path')\n\nconst getFileByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        fs.readFile(fPath, (err, data) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(data)\n            }\n        })\n    })\n}\n\nconst getFileNameList = (fPath) => {\n    return new Promise((resolve, reject) => {\n        fs.readdir(fPath, (err, files) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(files)\n            }\n        })\n    })\n}\n\nconst getFileNameListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileNameList(fPath)\n            .then(files => {\n                let result = files.map(file => {\n                    return path.join(fPath, file)\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getFileStat = (fPath) => {\n    return new Promise((resolve, reject) => {\n        fs.stat(fPath, (err, stats) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(stats)\n            }\n        })\n    })\n}\n\nconst getFileStatListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileNameListByPath(fPath)\n            .then(files => {\n                let promises = files.map(file => {\n                    return getFileStat(file)\n                })\n                Promise.all(promises)\n                    .then(stats => {\n                        resolve(stats)\n                    })\n                    .catch(err => {\n                        reject(err)\n                    })\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getFileListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileStatListByPath(fPath)\n            .then(stats => {\n                let result = stats.map(stat => {\n                    return stat.isFile()\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getDirListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileStatListByPath(fPath)\n            .then(stats => {\n                let result = stats.map(stat => {\n                    return stat.isDirectory()\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getDirListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        getFileStatListByPath(fPath)\n            .then(stats => {\n                let result = stats.map(stat => {\n                    return stat.isDirectory()\n                })\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nconst getFileAndDirListByPath = (fPath) => {\n    return new Promise((resolve, reject) => {\n        Promise.all([getFileListByPath(fPath), getDirListByPath(fPath)])\n            .then(results => {\n                let files = results[0]\n                let dirs = results[1]\n                let result = []\n                for (let i = 0; i < files.length; i++) {\n                    let type = 'file'\n                    if (dirs[i]) {\n                        type = 'dir'\n                    }\n                    result.push({\n                        name: files[i],\n                        type: type\n                    })\n                }\n                resolve(result)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n}\n\nmodule.exports = {\n    getFileByPath,\n    getFileNameList,\n    getFileNameListByPath,\n    getFileStat,\n    getFileStatListByPath,\n    getFileListByPath,\n    getDirListByPath,\n    getFileAndDirListByPath\n}\n", "const fs = require('fs');\nconst path = require('path');\n\nconst filePath = path.join(__dirname, '/input.txt');\n\nfs.readFile(filePath, {encoding: 'utf-8'}, function(err,data){\n    if (!err) {\n        console.log('received data: ' + data);\n        processData(data);\n    } else {\n        console.log(err);\n    }\n});\n\nfunction processData(data) {\n    const lines = data.split('\\n');\n    const numCases = lines[0];\n    for (var i = 1; i <= numCases; i++) {\n        const num = lines[i];\n        const output = countDigits(num);\n        console.log(`Case #${i}: ${output}`);\n    }\n}\n\nfunction countDigits(num) {\n    let count = 0;\n    for (var i = 0; i < num.length; i++) {\n        const digit = parseInt(num[i]);\n        if (digit !== 0 && num % digit === 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", '//\n// Created by kier on 2019/1/25.\n//\n\n#ifndef TENSORSTACK_FILE_H\n#define TENSORSTACK_FILE_H\n\n#include <string>\n#include <fstream>\n\nnamespace ts {\n    namespace file {\n        bool is_exist(const std::string &path);\n\n        void create_dir(const std::string &path);\n\n        void remove_dir(const std::string &path);\n\n        void remove_file(const std::string &path);\n\n        std::fstream append_file(const std::string &path);\n    }\n}\n\n\n#endif //TENSORSTACK_FILE_H\n', "const fs = require('fs');\n\nconst readFile = (filename, enc) => {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filename, enc, (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n};\n\nconst writeFile = (filename, data) => {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(filename, data, (err) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n};\n\nmodule.exports = {\n    readFile,\n    writeFile\n};\n", "// var fs = require('fs')\n// var path = require('path')\n// var dir = process.argv[2]\n// var ext = '.' + process.argv[3]\n// fs.readdir(dir, function(err, files){\n//   if(err){\n//     return console.log(err)\n//   }\n//   files.forEach(function(file){\n//     if(path.extname(file) === ext){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\n// var fs = require('fs')\n// var path = require('path')\n// fs.readdir(process.argv[2], function(err, files){\n//   files.forEach(function(file){\n//     if(path.extname(file) === '.' + process.argv[3]){\n//       console.log(file)\n//     }\n//   })\n// })\n\nvar fs = require('fs')\nvar path = require('path')\nfs.readdir(process.argv[2], function(err, files){\n  files.forEach(function(file){\n    if(path.extname(file) === '.' + process.argv[3]){\n      console.log(file)\n    }\n  })\n})\n", "var fs = require('fs');\n\nvar file = fs.readFileSync(process.argv[2]);\nvar str = file.toString();\nvar arr = str.split('\\n');\nconsole.log(arr.length - 1);\n"]
2022-04-16 07:09:30.851944 size on output set 9
2022-04-16 07:09:30.851957 num operations 1
2022-04-16 07:09:30.851963 size on input set 1
2022-04-16 07:10:06.502313 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\nfrom io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\n# def solve(n, a):\n#     # Write your code here\n#     a.sort()\n#     if n == 1:\n#         return a[0]\n#     elif n == 2:\n#         return a[1]\n#     else:\n#         return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\n# q = int(input())\n# for query_number in range(q):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     print(solve(n, a))\n\ndef solve(n):\n    # Write your code here.\n    if n == 0:\n        return -1\n    if n == 1:\n        return 1\n    else:\n        return math.ceil(n/2)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(solve(n))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n"
    },
    {
      "index": 3,
      "text": "\ndef find_max_sum_subarray(arr):\n    # [1, 2, 3, -4, 5]\n    # [1, 2, 3, -4, 5, -2, 3]\n    # [1, 2, 3, -4, 5, -2, 3, -1]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27]\n    arr.sort()\n    return arr[-1] * arr[-2] * arr[-3]\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n        # print(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n\n# test\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] * a[n - 1])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n"
    }
  ],
  "created": 1650092970,
  "object": "edit"
}
2022-04-16 07:10:06.502551 fix syntax errors 9 ['import sys\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n', '\n\nimport math\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\nfrom io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\n# def solve(n, a):\n#     # Write your code here\n#     a.sort()\n#     if n == 1:\n#         return a[0]\n#     elif n == 2:\n#         return a[1]\n#     else:\n#         return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\n# q = int(input())\n# for query_number in range(q):\n#     n = int(input())\n#     a = list(map(int, input().split()))\n#     print(solve(n, a))\n\ndef solve(n):\n    # Write your code here.\n    if n == 0:\n        return -1\n    if n == 1:\n        return 1\n    else:\n        return math.ceil(n/2)\n\n\nif __name__ == "__main__":\n    n = int(input())\n    print(solve(n))\n', '\nimport math\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n', '\ndef find_max_sum_subarray(arr):\n    # [1, 2, 3, -4, 5]\n    # [1, 2, 3, -4, 5, -2, 3]\n    # [1, 2, 3, -4, 5, -2, 3, -1]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26]\n    # [1, 2, 3, -4, 5, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27]\n    arr.sort()\n    return arr[-1] * arr[-2] * arr[-3]\n', '\n\nimport sys\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n', '\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n', '\nimport sys\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n        # print(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n', '\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n\n# test\n', '\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] * a[n - 1])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n']
2022-04-16 07:10:06.502708 size on output set 9
