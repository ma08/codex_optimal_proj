["\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = float(g1_sides)/g2_sides\n    e1_prob = float(e1_sides)/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n", "\n\ndef main():\n    gunnar_dice_one = list(map(int, input().split()))  # [1, 6]\n    gunnar_dice_two = list(map(int, input().split()))  # [1, 6]\n    emma_dice_one = list(map(int, input().split()))  # [1, 6]\n    emma_dice_two = list(map(int, input().split()))  # [1, 6]\n\n    gunnar_probability = calculate_probability(\n        gunnar_dice_one, gunnar_dice_two)\n    emma_probability = calculate_probability(\n        emma_dice_one, emma_dice_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\n\ndef calculate_probability(dice_one, dice_two):\n    sum_probability = 0\n    for die_one in range(dice_one[0], dice_one[1] + 1):\n        for die_two in range(dice_two[0], dice_two[1] + 1):\n            sum_probability += 1 / \\\n                (dice_one[1] - dice_one[0] + 1) / \\\n                (dice_two[1] - dice_two[0] + 1)\n    return sum_probability\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    #a1, b1, a2, b2 = list(map(int, input().split()))\n    #a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, 6-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/6\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n", "\n\ndef main():\n    gunnar_dice_one = list(map(int, input().split()))\n    gunnar_dice_two = list(map(int, input().split()))\n    emma_dice_one = list(map(int, input().split()))\n    emma_dice_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_dice_one, gunnar_dice_two)\n    emma_probability = calculate_probability(emma_dice_one, emma_dice_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(dice_one, dice_two):\n    sum_probability = 0\n    for die_one in range(dice_one[0], dice_one[1]+1):\n        for die_two in range(dice_two[0], dice_two[1]+1):\n            sum_probability += 1/(dice_one[1]-dice_one[0]+1) * 1/(dice_two[1]-dice_two[0]+1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b + 1):\n        distr.append(1/(b-a+1))\n\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i] * distr2[j])\n    return prob\n\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1) / 2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1 / (g_b1 - g_a1 + 1)\ng_p2 = 1 / (g_b2 - g_a2 + 1)\ne_p1 = 1 / (e_b1 - e_a1 + 1)\ne_p2 = 1 / (e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i * g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i * g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i * e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i * e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n", "\n\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1.0/(g_b1 - g_a1 + 1)\ng_p2 = 1.0/(g_b2 - g_a2 + 1)\ne_p1 = 1.0/(e_b1 - e_a1 + 1)\ne_p2 = 1.0/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1): g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1): g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1): e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1): e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n", "\n\ndef main():\n    # a1, b1, a2, b2 = list(map(int, input().split()))\n    # a3, b3, a4, b4 = list(map(int, input().split()))\n    #a1, b1, a2, b2 = 1, 4, 1, 4\n    #a3, b3, a4, b4 = 1, 6, 1, 6\n    #gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    #emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    #if gunnar > emma:\n        #print('Gunnar')\n    #elif gunnar < emma:\n        #print('Emma')\n    #else:\n        #print('Tie')\n    n = int(input())\n    print(n)\n\n\nif __name__ == '__main__':\n\n    main()\n", "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n    \n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/6\n    e1_prob = e1_sides/6\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n", "\ndef func(a, b, c, d):\n    return (b - a + 1) * (d - c + 1)\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\np1 = func(a1, b1, a2, b2)\np2 = func(c1, d1, c2, d2)\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n", "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1/e2\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n", "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1) / 2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    if prob_gunnar < prob_emma:\n        return \"Emma\"\n    return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Get input\n    inp = input().split()\n    g_a1 = int(inp[0])\n    g_b1 = int(inp[1])\n    g_a2 = int(inp[2])\n    g_b2 = int(inp[3])\n    inp = input().split()\n    e_a1 = int(inp[0])\n    e_b1 = int(inp[1])\n    e_a2 = int(inp[2])\n    e_b2 = int(inp[3])\n\n    # Calculate probabilities\n    g_p1 = 1/(g_b1 - g_a1 + 1)\n    g_p2 = 1/(g_b2 - g_a2 + 1)\n    e_p1 = 1/(e_b1 - e_a1 + 1)\n    e_p2 = 1/(e_b2 - e_a2 + 1)\n\n    # Calculate expected values\n    g_e = 0\n    for i in range(g_a1, g_b1 + 1):\n        g_e += i*g_p1\n    for i in range(g_a2, g_b2 + 1):\n        g_e += i*g_p2\n    e_e = 0\n    for i in range(e_a1, e_b1 + 1):\n        e_e += i*e_p1\n    for i in range(e_a2, e_b2 + 1):\n        e_e += i*e_p2\n\n    # Compare expected values\n    if g_e == e_e:\n        print(\"Tie\")\n    elif g_e > e_e:\n        print(\"Gunnar\")\n    else:\n        print(\"Emma\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\n# def get_prob(a, b):\n#     diff = b-a+1\n#     return (1/diff)\n\nfor i in range(a1, b1 + 1):\n    for j in range(a2, b2 + 1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)): \n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob1[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    gunnar_dice_one = list(map(int, input().split(\" \")))\n    gunnar_dice_two = list(map(int, input().split(\" \")))\n    emma_dice_one = list(map(int, input().split(\" \")))\n    emma_dice_two = list(map(int, input().split(\" \")))\n\n    gunnar_probability = calculate_probability(gunnar_dice_one, gunnar_dice_two)\n    emma_probability = calculate_probability(emma_dice_one, emma_dice_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(dice_one, dice_two):\n    sum_probability = 0\n    for die_one in range(dice_one[0], dice_one[1]+1):\n        for die_two in range(dice_two[0], dice_two[1]+1):\n            sum_probability += 1/(dice_one[1]-dice_one[0]+1)/(dice_two[1]-dice_two[0]+1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n", "\n\na1,b1,a2,b2 = [int(x) for x in input().split()]\nc1,d1,c2,d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\nprint(g, e)\n\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    # a1, b1, a2, b2 = 1, 4, 1, 4\n    # a3, b3, a4, b4 = 1, 6, 1, 6\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "\n\na1,b1,a2,b2 = [int(x) for x in input().split()] # gunnar\nc1,d1,c2,d2 = [int(x) for x in input().split()] # emma\n\ng = 0 # gunnar\ne = 0 # emma\n\ndef get_prob(a, b): # probability\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2: # gunnar wins\n            g += 1\n        elif i+j < c1+c2+d1+d2: # emma wins\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob, e1_prob = g1_sides/g2_sides, e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n", "\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\na1,b1,a2,b2 = [int(x) for x in input().split()]\nc1,d1,c2,d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return 1/diff\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n", "\n\n# g1 = [1,4,1,4]\n# g1 = [1,8,1,8]\n# e1 = [1,6,1,6]\n# e1 = [1,10,2,5]\n\ng = [[g1[0], g1[1]], [g1[2], g1[3]]]\ne = [[e1[0], e1[1]], [e1[2], e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0], g[0][1]+1):\n    for j in range(g[1][0], g[1][1]+1):\n        for k in range(e[0][0], e[0][1]+1):\n            for l in range(e[1][0], e[1][1]+1):\n                if i+j > k+l:  # Gunnar wins\n                    g_win += 1\n                elif i+j < k+l:  # Emma wins\n                    e_win += 1\n\nif g_win > e_win:  # Gunnar wins\n    print(\"Gunnar\")\nelif g_win < e_win:  # Emma wins\n    print(\"Emma\")\nelse:\n    print(\"Tie\")  # Tie\n", "\n\n# Get input\n\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n", "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar wins\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b - a + 1\n    return (1 / diff)\n\nfor i in range(a1, b1 + 1):\n    for j in range(a2, b2 + 1):\n        if i + j > c1 + c2 + d1 + d2:\n            g += 1\n        elif i + j < c1 + c2 + d1 + d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n", "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\ndef main():\n    gunnar_dice_one = list(map(int, input().split(\" \")))\n    gunnar_dice_two = list(map(int, input().split(\" \")))\n    emma_dice_one = list(map(int, input().split(\" \")))\n    emma_dice_two = list(map(int, input().split(\" \")))\n\n    gunnar_probability = calculate_probability(gunnar_dice_one, gunnar_dice_two)\n    emma_probability = calculate_probability(emma_dice_one, emma_dice_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(dice_one, dice_two):\n    sum_probability = 0\n    for die_one in range(dice_one[0], dice_one[1]+1):\n        for die_two in range(dice_two[0], dice_two[1]+1):\n            sum_probability += 1 / (dice_one[1] - dice_one[0] + 1) / (dice_two[1] - dice_two[0] + 1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n", "\n\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1 - a1 + 1) * (b2 - a2 + 1)\np2 = (d1 - c1 + 1) * (d2 - c2 + 1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 > p2 else \"Gunnar\")\n", "\n\nn = int(input())\n\nfor i in range(n):\n    arr = [int(x) for x in input().split()]\n    if arr[0] == 1:\n        print(arr[1])\n    else:\n        print(arr[1] + arr[2])\n\na1,b1,a2,b2 = [int(x) for x in input().split()]\nc1,d1,c2,d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+d1+c2+d2:\n            g += 1\n        elif i+j < c1+d1+c2+d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\n# Get input\ninp = input().split()\na1 = int(inp[0])\nb1 = int(inp[1])\na2 = int(inp[2])\nb2 = int(inp[3])\ninp = input().split()\na3 = int(inp[0])\nb3 = int(inp[1])\na4 = int(inp[2])\nb4 = int(inp[3])\n\n# Calculate probabilities\np1 = 1/(b1 - a1 + 1)\np2 = 1/(b2 - a2 + 1)\np3 = 1/(b3 - a3 + 1)\np4 = 1/(b4 - a4 + 1)\n\n# Calculate expected values\ne1 = 0\nfor i in range(a1, b1 + 1):\n    e1 += i*p1\nfor i in range(a2, b2 + 1):\n    e1 += i*p2\ne2 = 0\nfor i in range(a3, b3 + 1):\n    e2 += i*p3\nfor i in range(a4, b4 + 1):\n    e2 += i*p4\n\n# Compare expected values\nif e1 == e2:\n    print(\"Tie\")\nelif e1 > e2:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n", "\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\np1 = (b1 - a1 + 1) * (b2 - a2 + 1)\np2 = (d1 - c1 + 1) * (d2 - c2 + 1)\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n", "\n\n# Get input\ng_a1, g_b1, g_a2, g_b2 = input().split()\ng_a1, g_b1, g_a2, g_b2 = int(g_a1), int(g_b1), int(g_a2), int(g_b2)\ne_a1, e_b1, e_a2, e_b2 = input().split()\ne_a1, e_b1, e_a2, e_b2 = int(e_a1), int(e_b1), int(e_a2), int(e_b2)\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n", "\n\ndef main():\n    gunnar_dice_one = list(map(int, input().split()))\n    gunnar_dice_two = list(map(int, input().split()))\n    emma_dice_one = list(map(int, input().split()))\n    emma_dice_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_dice_one, gunnar_dice_two)\n    emma_probability = calculate_probability(emma_dice_one, emma_dice_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(dice_one, dice_two):\n    sum_probability = 0\n    for die_one in range(dice_one[0], dice_one[1]+1):\n        for die_two in range(dice_two[0], dice_two[1]+1):\n            sum_probability += 1/(dice_one[1]-dice_one[0]+1)/(dice_two[1]-dice_two[0]+1) if die_one > die_two else 0\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n", "\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n", "\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 > p2 else \"Gunnar\")\n", "\n\ndef main():\n    gunnar_dice_one = list(map(int, input().split()))  # [1, 4]\n    gunnar_dice_two = list(map(int, input().split()))  # [1, 6]\n    emma_dice_one = list(map(int, input().split()))  # [1, 6]\n    emma_dice_two = list(map(int, input().split()))  # [1, 6]\n\n    gunnar_probability = calculate_probability(gunnar_dice_one, gunnar_dice_two)\n    emma_probability = calculate_probability(emma_dice_one, emma_dice_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(dice_one, dice_two):\n    sum_probability = 0  # 0.0\n    for die_one in range(dice_one[0], dice_one[1]+1):\n        for die_two in range(dice_two[0], dice_two[1]+1):\n            sum_probability += 1/(dice_one[1]-dice_one[0]+1)/(dice_two[1]-dice_two[0]+1)  # sum_probability += 0.001388888888888889\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i * g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i * g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i * e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i * e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n", "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\ndef main():\n    # a1, b1, a2, b2 = list(map(int, input().split()))\n    # a3, b3, a4, b4 = list(map(int, input().split()))\n    a1, b1, a2, b2 = 1, 4, 1, 4\n    a3, b3, a4, b4 = 1, 6, 1, 6\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2\n    e1_prob = e1_sides/e2\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n", "\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b-a+1 \n    return (1/diff) \n\nfor i in range(a1, b1+1): \n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n\n", "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides / g2_sides\n    e1_prob = e1_sides / e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n", "\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n", "\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\n\ndef get_prob(a, b):\n    diff = b - a + 1\n    return (1 / diff)\n\n\nfor i in range(a1, b1 + 1):\n    for j in range(a2, b2 + 1):\n        if i + j > c1 + c2 + d1 + d2:\n            g += 1\n        elif i + j < c1 + c2 + d1 + d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\n#e1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n", "\n\ndef main():\n    #a1, b1, a2, b2 = list(map(int, input().split()))\n    #a3, b3, a4, b4 = list(map(int, input().split()))\n    a1, b1, a2, b2 = 1, 4, 1, 4 #TODO: fix this\n    a3, b3, a4, b4 = 1, 6, 1, 6 #TODO: fix this\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    gunnar_dice_one = list(map(int, input().split()))\n    gunnar_dice_two = list(map(int, input().split()))\n    emma_dice_one = list(map(int, input().split()))\n    emma_dice_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_dice_one, gunnar_dice_two)\n    emma_probability = calculate_probability(emma_dice_one, emma_dice_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(dice_one, dice_two):\n    sum_probability = 0\n    for die_one in range(dice_one[0], dice_one[1]+1):\n        for die_two in range(dice_two[0], dice_two[1]+1):\n            sum_probability += 1 / (dice_one[1] - dice_one[0] + 1) / (dice_two[1] - dice_two[0] + 1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n"]