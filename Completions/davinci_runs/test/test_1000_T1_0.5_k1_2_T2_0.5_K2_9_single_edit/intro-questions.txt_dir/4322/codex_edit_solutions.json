["\n\n# TODO:\n# - [x] add solution\n# - [ ] add test\n# - [ ] add solution to leetcode\n\n# SOLUTION\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n\nif __name__ == \"__main__\":\n    main() \n", "\n\n# SOLUTION 2\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n", "import sys\n\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solution\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n", "\n# SOLUTION\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1, a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1, a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n", "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nans = []\nlast = None\nimport math\nfor h in a:\n    if last is None or abs(h - last) <= 1:\n        ans.append(h)\n        last = h\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "\n# SOLUTION\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1, a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    heights = [int(x) for x in sys.stdin.readline().strip().split()]\n    heights.sort()\n    balanced = []\n    last = None\n    for h in heights:\n        if last is None or abs(h - last) <= 1:\n            balanced.append(h)\n            last = h\n    print(len(balanced))\n    print(' '.join(map(str, balanced)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# v1\n# SOLUTION\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n\n# v2\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n", "\n\n# SOLUTIONS\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n", "\n# SOLUTION\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nif n == 1:\n    print(1)\n    print(a[0])\nelse:\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    max_val = max(d.values())\n    if max_val == 1:\n        print(1)\n        print(a[0])\n    else:\n        res = []\n        for i in d:\n            if d[i] == max_val:\n                res.append(i)\n        res.sort()\n        print(len(res))\n        for i in res:\n            print(i, end=' ')\n"]