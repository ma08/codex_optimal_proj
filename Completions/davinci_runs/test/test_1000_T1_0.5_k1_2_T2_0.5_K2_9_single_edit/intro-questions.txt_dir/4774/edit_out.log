2022-04-16 10:43:17.742920 num operations 1
2022-04-16 10:43:17.742935 size on input set 1
2022-04-16 10:43:58.560982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nelif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nelif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nelif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nelif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nelif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nelif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nelif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nelif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nelif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nelif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nelif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nelif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nelif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nelif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nelif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\nelse:\n    print('none')\n"
    },
    {
      "index": 1,
      "text": "\n#import sys\n#sys.stdin = open(\"sample_input.txt\",\"r\")\n\na, b, c, d = map(int, input().split())\n\nif a * b == c * d:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\nif a + b == c + d:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a - b == c - d:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a * b == c + d:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a + b == c * d:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\nif a - b == c + d:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a - b == c * d:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\nif a * b == c - d:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a / b == c / d and b != 0 and d != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a + b == c / d and d != 0:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a - b == c / d and d != 0:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a * b == c / d and d != 0:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a / b == c + d and b != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a / b == c - d and b != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a + b == c - d:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a / b == c * d and b != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\n"
    },
    {
      "index": 2,
      "text": "import sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na, b, c, d = map(int,input().split())\n\nif a * b == c * d:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\nif a + b == c + d:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a - b == c - d:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a * b == c + d:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a + b == c * d:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\nif a - b == c + d:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a - b == c * d:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\nif a * b == c - d:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a / b == c / d and b != 0 and d != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a + b == c / d and d != 0:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a - b == c / d and d != 0:\n    print(str(a) + ' - ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a * b == c / d and d != 0:\n    print(str(a) + ' * ' + str(b) + ' = ' + str(c) + ' / ' + str(d))\nif a / b == c + d and b != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' + ' + str(d))\nif a / b == c - d and b != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a + b == c - d:\n    print(str(a) + ' + ' + str(b) + ' = ' + str(c) + ' - ' + str(d))\nif a / b == c * d and b != 0:\n    print(str(a) + ' / ' + str(b) + ' = ' + str(c) + ' * ' + str(d))\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 5,
      "text": "\n\n#import sys\n#sys.stdin = open(\"sample_input.txt\",\"r\")\n#\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 6,
      "text": "\n\n#import sys\n#sys.stdin = open(\"sample_input.txt\",\"r\")\n#\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d: print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d: print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d: print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d: print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d: print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d: print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d: print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d: print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0: print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0: print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0: print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0: print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0: print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0: print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d: print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0: print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    }
  ],
  "created": 1650105797,
  "object": "edit"
}
2022-04-16 10:43:58.561417 fix syntax errors 9 ['\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nelif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nelif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nelif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nelif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nelif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nelif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nelif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nelif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nelif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nelif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nelif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nelif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nelif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nelif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nelif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nelse:\n    print(\'none\')\n', '\n#import sys\n#sys.stdin = open("sample_input.txt","r")\n\na, b, c, d = map(int, input().split())\n\nif a * b == c * d:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\nif a + b == c + d:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a - b == c - d:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a * b == c + d:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a + b == c * d:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\nif a - b == c + d:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a - b == c * d:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\nif a * b == c - d:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a / b == c / d and b != 0 and d != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a + b == c / d and d != 0:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a - b == c / d and d != 0:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a * b == c / d and d != 0:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a / b == c + d and b != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a / b == c - d and b != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a + b == c - d:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a / b == c * d and b != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\n', 'import sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na, b, c, d = map(int,input().split())\n\nif a * b == c * d:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\nif a + b == c + d:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a - b == c - d:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a * b == c + d:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a + b == c * d:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\nif a - b == c + d:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a - b == c * d:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\nif a * b == c - d:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a / b == c / d and b != 0 and d != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a + b == c / d and d != 0:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a - b == c / d and d != 0:\n    print(str(a) + \' - \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a * b == c / d and d != 0:\n    print(str(a) + \' * \' + str(b) + \' = \' + str(c) + \' / \' + str(d))\nif a / b == c + d and b != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' + \' + str(d))\nif a / b == c - d and b != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a + b == c - d:\n    print(str(a) + \' + \' + str(b) + \' = \' + str(c) + \' - \' + str(d))\nif a / b == c * d and b != 0:\n    print(str(a) + \' / \' + str(b) + \' = \' + str(c) + \' * \' + str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\n#import sys\n#sys.stdin = open("sample_input.txt","r")\n#\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\n#import sys\n#sys.stdin = open("sample_input.txt","r")\n#\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d: print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d: print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d: print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d: print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d: print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d: print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d: print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d: print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0: print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0: print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0: print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0: print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0: print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0: print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d: print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0: print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n']
2022-04-16 10:43:58.561558 size on output set 7
2022-04-16 10:43:58.561571 num operations 1
2022-04-16 10:43:58.561576 size on input set 1
2022-04-16 10:44:16.109238 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c / d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c / d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c / d\n    if op1 == '/' and op2 == '*':\n        return a / b == c * d\n    if op1 == '/' and op2 == '+':\n        return a / b == c + d\n    if op1 == '/' and op2 == '-':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '+':\n            return a * b == c + d\n        if op2 == '-':\n            return a * b == c - d\n        if op2 == '/':\n            return a * b == c // d\n    if op1 == '+':\n        if op2 == '*':\n            return a + b == c * d\n        if op2 == '-':\n            return a + b == c - d\n        if op2 == '/':\n            return a + b == c // d\n    if op1 == '-':\n        if op2 == '*':\n            return a - b == c * d\n        if op2 == '+':\n            return a - b == c + d\n        if op2 == '/':\n            return a - b == c // d\n    if op1 == '/':\n        if op2 == '*':\n            return a // b == c * d\n        if op2 == '+':\n            return a // b == c + d\n        if op2 == '-':\n            return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c // d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c // d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c // d\n    if op1 == '/' and op2 == '*':\n        return a // b == c * d\n    if op1 == '/' and op2 == '+':\n        return a // b == c + d\n    if op1 == '/' and op2 == '-':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split()) # <class 'list'>: [1, 2, 3, 4]\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append('{} {} {} = {} {} {}'.format(a, op1, b, c, op2, d))\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c / d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c / d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c / d\n    if op1 == '/' and op2 == '*':\n        return a / b == c * d\n    if op1 == '/' and op2 == '+':\n        return a / b == c + d\n    if op1 == '/' and op2 == '-':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d and c != 0 and d != 0\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d and c != 0 and d != 0\n    if op1 == '*' and op2 == '/':\n        return a * b == c // d and c != 0 and d != 0\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d and c != 0 and d != 0\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d and c != 0 and d != 0\n    if op1 == '+' and op2 == '/':\n        return a + b == c // d and c != 0 and d != 0\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d and c != 0 and d != 0\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d and c != 0 and d != 0\n    if op1 == '-' and op2 == '/':\n        return a - b == c // d and c != 0 and d != 0\n    if op1 == '/' and op2 == '*':\n        return a // b == c * d and c != 0 and d != 0\n    if op1 == '/' and op2 == '+':\n        return a // b == c + d and c != 0 and d != 0\n    if op1 == '/' and op2 == '-':\n        return a // b == c - d and c != 0 and d != 0\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c // d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c // d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c // d\n    if op1 == '/' and op2 == '*':\n        return a // b == c * d\n    if op1 == '/' and op2 == '+':\n        return a // b == c + d\n    if op1 == '/' and op2 == '-':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead') # lol\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c / d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c / d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c / d\n    if op1 == '/' and op2 == '*':\n        return a / b == c * d\n    if op1 == '/' and op2 == '+':\n        return a / b == c + d\n    if op1 == '/' and op2 == '-':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c / d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c / d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c / d\n    if op1 == '/' and op2 == '*':\n        return a / b == c * d\n    if op1 == '/' and op2 == '+':\n        return a / b == c + d\n    if op1 == '/' and op2 == '-':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c / d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c / d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c / d\n    if op1 == '/' and op2 == '*':\n        return a / b == c * d\n    if op1 == '/' and op2 == '+':\n        return a / b == c + d\n    if op1 == '/' and op2 == '-':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650105838,
  "object": "edit"
}
2022-04-16 10:44:16.109579 fix syntax errors 9 ['\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c / d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c / d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c / d\n    if op1 == \'/\' and op2 == \'*\':\n        return a / b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a / b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\':\n        if op2 == \'+\':\n            return a * b == c + d\n        if op2 == \'-\':\n            return a * b == c - d\n        if op2 == \'/\':\n            return a * b == c // d\n    if op1 == \'+\':\n        if op2 == \'*\':\n            return a + b == c * d\n        if op2 == \'-\':\n            return a + b == c - d\n        if op2 == \'/\':\n            return a + b == c // d\n    if op1 == \'-\':\n        if op2 == \'*\':\n            return a - b == c * d\n        if op2 == \'+\':\n            return a - b == c + d\n        if op2 == \'/\':\n            return a - b == c // d\n    if op1 == \'/\':\n        if op2 == \'*\':\n            return a // b == c * d\n        if op2 == \'+\':\n            return a // b == c + d\n        if op2 == \'-\':\n            return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c // d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c // d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c // d\n    if op1 == \'/\' and op2 == \'*\':\n        return a // b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a // b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split()) # <class \'list\'>: [1, 2, 3, 4]\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(\'{} {} {} = {} {} {}\'.format(a, op1, b, c, op2, d))\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c / d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c / d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c / d\n    if op1 == \'/\' and op2 == \'*\':\n        return a / b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a / b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', 'from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d and c != 0 and d != 0\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d and c != 0 and d != 0\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c // d and c != 0 and d != 0\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d and c != 0 and d != 0\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d and c != 0 and d != 0\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c // d and c != 0 and d != 0\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d and c != 0 and d != 0\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d and c != 0 and d != 0\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c // d and c != 0 and d != 0\n    if op1 == \'/\' and op2 == \'*\':\n        return a // b == c * d and c != 0 and d != 0\n    if op1 == \'/\' and op2 == \'+\':\n        return a // b == c + d and c != 0 and d != 0\n    if op1 == \'/\' and op2 == \'-\':\n        return a // b == c - d and c != 0 and d != 0\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', 'from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c // d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c // d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c // d\n    if op1 == \'/\' and op2 == \'*\':\n        return a // b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a // b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\') # lol\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c / d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c / d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c / d\n    if op1 == \'/\' and op2 == \'*\':\n        return a / b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a / b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', 'from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c / d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c / d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c / d\n    if op1 == \'/\' and op2 == \'*\':\n        return a / b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a / b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c / d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c / d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c / d\n    if op1 == \'/\' and op2 == \'*\':\n        return a / b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a / b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:44:16.109711 size on output set 6
2022-04-16 10:44:16.109722 num operations 1
2022-04-16 10:44:16.109727 size on input set 1
2022-04-16 10:44:25.997738 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "def solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]  # noqa: E501\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]  # noqa: E501\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]  # noqa: E501\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]  # noqa: E501\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650105856,
  "object": "edit"
}
2022-04-16 10:44:25.998042 fix syntax errors 9 ['\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', 'def solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]  # noqa: E501\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]  # noqa: E501\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]  # noqa: E501\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]  # noqa: E501\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 10:44:25.998164 size on output set 4
2022-04-16 10:44:25.998175 num operations 1
2022-04-16 10:44:25.998180 size on input set 1
2022-04-16 10:44:45.708547 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# file\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef parse_line(line):\n    return [int(x) for x in line.split()]\n\ndef add(a, b, c, d):\n    return a + b == c + d\n\ndef subtract(a, b, c, d):\n    return a - b == c - d\n\ndef multiply(a, b, c, d):\n    return a * b == c * d\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [float(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d and a != c and b != d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d and a != c and b != d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d and a != c and b != d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d and a != c and b != d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"
    }
  ],
  "created": 1650105866,
  "object": "edit"
}
2022-04-16 10:44:45.708778 fix syntax errors 9 ["# file\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef parse_line(line):\n    return [int(x) for x in line.split()]\n\ndef add(a, b, c, d):\n    return a + b == c + d\n\ndef subtract(a, b, c, d):\n    return a - b == c - d\n\ndef multiply(a, b, c, d):\n    return a * b == c * d\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [float(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d and a != c and b != d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d and a != c and b != d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d and a != c and b != d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d and a != c and b != d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n"]
2022-04-16 10:44:45.708939 size on output set 6
2022-04-16 10:44:45.708953 num operations 1
2022-04-16 10:44:45.708958 size on input set 1
2022-04-16 10:45:08.513728 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        if op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('no solution')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import itertools\n\na, b, c, d = map(float, input().split())\n\n\ndef check(a, b, c, d, op1, op2, epsilon=0.000001):\n    if op1 == '*':\n        if op2 == '*':\n            if abs(a * b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a * b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a * b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a * b - c / d) < epsilon:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if abs(a + b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a + b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a + b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a + b - c / d) < epsilon:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if abs(a - b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a - b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a - b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a - b - c / d) < epsilon:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if abs(a / b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a / b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a / b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a / b - c / d) < epsilon:\n                return True\n    return False\n\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' +\n                          op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "import itertools\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        else:\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        else:\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        else:\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        else:\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python3\nimport itertools\n\na, b, c, d = map(float, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d and d != 0:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d and d != 0:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d and d != 0:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d and d != 0:\n                return True\n    return False\n\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d and c % d == 0:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d and c % d == 0:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d and c % d == 0:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d and c % d == 0:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d) + '\\n')\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "import itertools\n\na, b, c, d = map(float, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d)) \n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output): \n            print(line) \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "import itertools\n\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\n\ndef main(a, b, c, d):\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650105885,
  "object": "edit"
}
2022-04-16 10:45:08.514110 fix syntax errors 9 ["\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        if op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('no solution')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\na, b, c, d = map(float, input().split())\n\n\ndef check(a, b, c, d, op1, op2, epsilon=0.000001):\n    if op1 == '*':\n        if op2 == '*':\n            if abs(a * b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a * b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a * b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a * b - c / d) < epsilon:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if abs(a + b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a + b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a + b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a + b - c / d) < epsilon:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if abs(a - b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a - b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a - b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a - b - c / d) < epsilon:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if abs(a / b - c * d) < epsilon:\n                return True\n        elif op2 == '+':\n            if abs(a / b - c + d) < epsilon:\n                return True\n        elif op2 == '-':\n            if abs(a / b - c - d) < epsilon:\n                return True\n        elif op2 == '/':\n            if abs(a / b - c / d) < epsilon:\n                return True\n    return False\n\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' +\n                          op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        else:\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        else:\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        else:\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        else:\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\nimport itertools\n\na, b, c, d = map(float, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d and d != 0:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d and d != 0:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d and d != 0:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d and d != 0:\n                return True\n    return False\n\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d and c % d == 0:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d and c % d == 0:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d and c % d == 0:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d and c % d == 0:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d) + '\\n')\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\na, b, c, d = map(float, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d)) \n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output): \n            print(line) \n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\n\ndef main(a, b, c, d):\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 10:45:08.514303 size on output set 9
2022-04-16 10:45:08.514319 num operations 1
2022-04-16 10:45:08.514324 size on input set 1
2022-04-16 10:45:48.413560 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: Make this faster and shorter\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y,\n    '//': lambda x, y: x // y,\n    '%': lambda x, y: x % y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    try:\n        if ops[p[0]](a, b) == ops[p[1]](c, d):\n            valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n    except ZeroDivisionError:\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(float, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 2,
      "text": "\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y,\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(\n            str(a)\n            + ' '\n            + p[0]\n            + ' '\n            + str(b)\n            + ' = '\n            + str(c)\n            + ' '\n            + p[1]\n            + ' '\n            + str(d)\n        )\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 3,
      "text": "\n\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 4,
      "text": "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y,\n    '^': lambda x, y: x ** y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 3):\n    if ops[p[0]](ops[p[1]](a, b), c) == ops[p[2]](d, a):\n        valid.append(str(a) + ' ' + p[1] + ' ' + str(b) + ' ' + p[0] + ' ' + str(c) + ' = ' + str(d) + ' ' + p[2] + ' ' + str(a))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 5,
      "text": "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 6,
      "text": "\n\n# TODO: Make this faster?\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 7,
      "text": "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n    for v in valid:\n        print(v)\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 8,
      "text": "\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    }
  ],
  "created": 1650105908,
  "object": "edit"
}
2022-04-16 10:45:48.413894 fix syntax errors 9 ["\n\n# TODO: Make this faster and shorter\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y,\n    '//': lambda x, y: x // y,\n    '%': lambda x, y: x % y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    try:\n        if ops[p[0]](a, b) == ops[p[1]](c, d):\n            valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n    except ZeroDivisionError:\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(float, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y,\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(\n            str(a)\n            + ' '\n            + p[0]\n            + ' '\n            + str(b)\n            + ' = '\n            + str(c)\n            + ' '\n            + p[1]\n            + ' '\n            + str(d)\n        )\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y,\n    '^': lambda x, y: x ** y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 3):\n    if ops[p[0]](ops[p[1]](a, b), c) == ops[p[2]](d, a):\n        valid.append(str(a) + ' ' + p[1] + ' ' + str(b) + ' ' + p[0] + ' ' + str(c) + ' = ' + str(d) + ' ' + p[2] + ' ' + str(a))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\n# a, b, c, d = map(int, input().split())\n\n# ops = {\n#     '+': lambda x, y: x + y,\n#     '-': lambda x, y: x - y,\n#     '*': lambda x, y: x * y,\n#     '/': lambda x, y: x / y\n# }\n\n# valid = []\n\n# for p in permutations(list(ops.keys()), 2):\n#     if ops[p[0]](a, b) == ops[p[1]](c, d):\n#         valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\n# if len(valid) == 0:\n#     print('problems ahead')\n# else:\n#     for v in valid:\n#         print(v)\n\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster?\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n    for v in valid:\n        print(v)\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"]
2022-04-16 10:45:48.414031 size on output set 9
2022-04-16 10:45:48.414043 num operations 1
2022-04-16 10:45:48.414048 size on input set 1
2022-04-16 10:45:57.787884 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(f\"{a}{p[0]}{b} == {c}{p[1]}{d}\"):\n        valid.append(f\"{a} {p[0]} {b} = {c} {p[1]} {d}\")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 2,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval('{}{}{} == {}{}{}'.format(a,p[0],b,c,p[1],d)):\n        valid.append('{} {} {} = {} {} {}'.format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 3,
      "text": "from itertools import product\na, b, c, d = map(int, input().split())\nvalid = []\nfor p in product(['+', '-', '*', '/'], repeat=2):\n    if eval(f\"{a}{p[0]}{b} == {c}{p[1]}{d}\"):\n        valid.append(f\"{a} {p[0]} {b} = {c} {p[1]} {d}\")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 4,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(str(a)+p[0]+str(b) == str(c)+p[1]+str(d)):\n        valid.append(str(a)+\" \"+p[0]+\" \"+str(b)+\" = \"+str(c)+\" \"+p[1]+\" \"+str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 5,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 6,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(str(a)+str(p[0])+str(b) == str(c)+str(p[1])+str(d)):\n        valid.append(str(a) + \" \" + str(p[0]) + \" \" + str(b) + \" = \" + str(c) + \" \" + str(p[1]) + \" \" + str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 7,
      "text": "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    },
    {
      "index": 8,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(str(a)+p[0]+str(b) == str(c)+p[1]+str(d)):\n        valid.append(str(a)+\" \"+p[0]+\" \"+str(b)+\" = \"+str(c)+\" \"+p[1]+\" \"+str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n"
    }
  ],
  "created": 1650105948,
  "object": "edit"
}
2022-04-16 10:45:57.788140 fix syntax errors 9 ['from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(f"{a}{p[0]}{b} == {c}{p[1]}{d}"):\n        valid.append(f"{a} {p[0]} {b} = {c} {p[1]} {d}")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(\'{}{}{} == {}{}{}\'.format(a,p[0],b,c,p[1],d)):\n        valid.append(\'{} {} {} = {} {} {}\'.format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', 'from itertools import product\na, b, c, d = map(int, input().split())\nvalid = []\nfor p in product([\'+\', \'-\', \'*\', \'/\'], repeat=2):\n    if eval(f"{a}{p[0]}{b} == {c}{p[1]}{d}"):\n        valid.append(f"{a} {p[0]} {b} = {c} {p[1]} {d}")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(str(a)+p[0]+str(b) == str(c)+p[1]+str(d)):\n        valid.append(str(a)+" "+p[0]+" "+str(b)+" = "+str(c)+" "+p[1]+" "+str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(str(a)+str(p[0])+str(b) == str(c)+str(p[1])+str(d)):\n        valid.append(str(a) + " " + str(p[0]) + " " + str(b) + " = " + str(c) + " " + str(p[1]) + " " + str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', 'from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(str(a)+p[0]+str(b) == str(c)+p[1]+str(d)):\n        valid.append(str(a)+" "+p[0]+" "+str(b)+" = "+str(c)+" "+p[1]+" "+str(d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead")\n']
2022-04-16 10:45:57.788185 size on output set 7
2022-04-16 10:45:57.788196 num operations 1
2022-04-16 10:45:57.788201 size on input set 1
2022-04-16 10:46:10.365460 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\na,b,c,d = [int(x) for x in input().split()]\noperators = [\"+\",\"-\",\"*\",\"/\"]\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 1,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 2,
      "text": "\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"No solution\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 3,
      "text": "\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 4,
      "text": "\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [\"{0} {1} {2} = {3} {4} {5}\".format(a, i, b, c, j, d) for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 5,
      "text": "\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\")) == True]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 6,
      "text": "\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [\"{} {} {} = {} {} {}\".format(a, i, b, c, j, d) for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 7,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na, b, c, d = [int(x) for x in input().split()]\n\noperators = [\"+\", \"-\", \"*\", \"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]  # f string\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\", \"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 8,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    }
  ],
  "created": 1650105957,
  "object": "edit"
}
2022-04-16 10:46:10.365768 fix syntax errors 9 ['\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\na,b,c,d = [int(x) for x in input().split()]\noperators = ["+","-","*","/"]\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("No solution")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = ["{0} {1} {2} = {3} {4} {5}".format(a, i, b, c, j, d) for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n#The solution is pretty straightforward.\n#We use a list of operators, and then use a list comprehension to generate all possible expressions.\n#Then, we filter out the ones that are not valid.\n#Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","==")) == True]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = ["{} {} {} = {} {} {}".format(a, i, b, c, j, d) for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na, b, c, d = [int(x) for x in input().split()]\n\noperators = ["+", "-", "*", "/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]  # f string\n\nexpressions = [x for x in expressions if eval(x.replace("=", "=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n']
2022-04-16 10:46:10.365831 size on output set 8
