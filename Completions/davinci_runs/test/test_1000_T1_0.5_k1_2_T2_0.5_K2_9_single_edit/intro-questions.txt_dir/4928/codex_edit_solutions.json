["\nn = int(input())\n\nprint(n + 1)\n", "\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        print(n*2-2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        print(n*2 - 2) #\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nprint(int(sys.stdin.readline()) + 1)\n", "\n\ndef main():\n    n = int(input()) # input() is a built-in function in Python 3\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Get input\nn = int(input())\n\n# Calculate and output\nprint(n - 1)\n", "\n\ndef main():\n    n = int(input())\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\"\"\"\n\"\"\"\n\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        print(n * 2 - 2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n + 1)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n# Get input\nn = int(sys.stdin.readline())\n\n# Calculate and output\nprint(n + 1)\n", "\n\n# Workaround for raw_input in Python 3 \ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\ndef main():\n    n = int(input())\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    print(n*2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get input.\nn = int(input())\n\n# Calculate and output.\nprint(n + 1)\n", "\n\ndef main():\n    n = int(input())\n    print(n*n) \n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n# Get input\nn = int(input())\n\n# Calculate and output\nprint(n + 1)\n", "\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        print(n * 2 - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Workaround for raw_input in Python 3\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\ndef main():\n    n = int(input())\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# The number of cuts is the number of squares.\n# So the maximum number of pieces is the number of squares plus one.\n# The number of squares is the sum of the number of squares in each row and column.\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus...\n# The number of squares in the first row/column is 1.\n# The number of squares in the second row/column is 2.\n# ...\n# The number of squares in the nth row/column is n.\n# The sum of the first n natural numbers is n(n+1)/2.\n# So the number of squares is n(n+1).\n# So the maximum number of pieces is n(n+1)+1.\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n * (n + 1) + 1)\n", "\ndef main():\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        print(n*2 - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n# The number of cuts is the number of squares.\n# So the maximum number of pieces is the number of squares plus one.\n# The number of squares is the sum of the number of squares in each row and column.\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus...\n# The number of squares in the first row/column is 1.\n# The number of squares in the second row/column is 2.\n# ...\n# The number of squares in the nth row/column is n.\n# The sum of the first n natural numbers is n(n+1)/2.\n# So the number of squares is n(n+1).\n# So the maximum number of pieces is n(n+1)+1.\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n*(n+1)+1)\n", "\n\n# The number of cuts is the number of squares.\n# So the maximum number of pieces is the number of squares plus one.\n# The number of squares is the sum of the number of squares in each row and column.\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus ...\n# The number of squares in the first row/column is 1\n# The number of squares in the second row/column is 2\n# ...\n# The number of squares in the nth row/column is n\n# The sum of the first n natural numbers is n(n+1)/2\n# So the number of squares is n(n+1)\n# So the maximum number of pieces is n(n+1)+1\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n*(n+1)+1)\n", "\n\ndef main():\n    n = int(input())\n    print(n + 1)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\nprint(int(sys.stdin.readline()) + 1\n", "\n\n# Get input\nn = int(input(\"n = \"))\n\n# Calculate and output\nprint(n + 1)\n", "\n\ndef main():\n    n = int(input())\n    print(n * n)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# The number of cuts is the number of squares.\n# So the maximum number of pieces is the number of squares plus one.\n# The number of squares is the sum of the number of squares in each row and column.\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus... \n# The number of squares in the first row/column is 1.\n# The number of squares in the second row/column is 2.\n# ...\n# The number of squares in the nth row/column is n.\n# The sum of the first n natural numbers is n(n+1)/2.\n# So the number of squares is n(n+1).\n# So the maximum number of pieces is n(n+1)+1.\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n*(n+1)+1)\n", "\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        print(n*2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Get input\nn = int(input())\n# Calculate and output\nprint(n + 1)\n", "\n# Workaround for raw_input in Python 3\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\ndef main():\n    n = int(input()) # input() returns a string, so we need to convert it to int\n    print(n + 1) # print() automatically adds a newline\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# The number of cuts is the number of squares.\n# So the maximum number of pieces is the number of cuts plus one.\n# The number of squares is the sum of the number of squares in each row and column.\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus...\n# The number of squares in the first row/column is 1.\n# The number of squares in the second row/column is 2.\n# ...\n# The number of squares in the nth row/column is n.\n# The sum of the first n natural numbers is n(n+1)/2.\n# So the number of squares is n(n+1).\n# So the number of cuts is n(n+1).\n# So the maximum number of pieces is n(n+1)+1\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n*(n+1)+1, end = \"\")\n", "\n\n# The number of cuts is the number of squares\n# So the maximum number of pieces is the number of squares plus one\n# The number of squares is the sum of the number of squares in each row and column\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus... \n# The number of squares in the first row/column is 1\n# The number of squares in the second row/column is 2\n# ... \n# The number of squares in the nth row/column is n\n# The sum of the first n natural numbers is n(n+1)/2\n# So the number of squares is n(n+1)\n# So the maximum number of pieces is n(n+1)+1\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n*(n+1)+1)\n", "\n\nimport sys\n\nprint(int(sys.stdin.readline()) + 2)\n", "\n\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The number of cuts is the number of squares.\n# So the maximum number of pieces is the number of squares plus one.\n# The number of squares is the sum of the number of squares in each row and column.\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus...\n# The number of squares in the first row/column is 1.\n# The number of squares in the second row/column is 2.\n# ...\n# The number of squares in the nth row/column is n.\n# The sum of the first n natural numbers is n(n+1)/2.\n# So the number of squares is n(n+1).\n# So the maximum number of pieces is n(n+1)/2+1.\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(int(n*(n+1)/2+1))\n", "\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        print(n * 2 - 2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n\n\nprint(int(sys.stdin.readline()) + 1)\n", "\n# Workaround for raw_input in Python 3\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\ndef main():\n    n = int(input())\n    print(n + 1) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# The number of cuts is the number of squares.\n# So the maximum number of pieces is the number of squares plus one.\n# The number of squares is the sum of the number of squares in each row and the number of squares in each column.\n# The number of squares in each row is the number of squares in the first row plus the number of squares in the second row plus...\n# The number of squares in each column is the number of squares in the first column plus the number of squares in the second column plus...\n# The number of squares in the first row is 1.\n# The number of squares in the second row is 2.\n# The number of squares in the first column is 1.\n# The number of squares in the second column is 2.\n# ...\n# The number of squares in the nth row is n.\n# The number of squares in the nth column is n.\n# The sum of the first n natural numbers is n(n+1)/2.\n# So the number of squares is n(n+1).\n# So the maximum number of pieces is n(n+1)+1.\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n*(n+1)+1)\n", "\n\ndef main():\n    n = int(input())\n    print(n*n*n)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n + 1)\n\nif __name__ == '__main__':\n\n    main()\n", "\n\n#\n# The number of cuts is the number of squares.\n#\n# So the maximum number of pieces is the number of squares plus one.\n#\n# The number of squares is the sum of the number of squares in each row and column.\n#\n# The number of squares in each row and column is the number of squares in the first row/column plus the number of squares in the second row/column plus...\n#\n# The number of squares in the first row/column is 1.\n#\n# The number of squares in the second row/column is 2.\n#\n# ...\n#\n# The number of squares in the nth row/column is n.\n#\n# The sum of the first n natural numbers is n(n+1)/2.\n#\n# So the number of squares is n(n+1).\n# So the maximum number of pieces is n(n+1)+1.\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(n*(n+1)+1)\n", "\n\n# Get input\nn = int(input())\n\n# Calculate and output \nprint(n + 1)\n", "\n\n# Workaround for raw_input in Python 3\ntry:\n    input = raw_input()\nexcept NameError:\n    pass\n\ndef main():\n    n = int(input())\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nprint(int(sys.stdin.readline()) + 1)\n", "\n\n# Workaround for raw_input in Python 3\ntry:\n    input = raw_input()\nexcept NameError:\n    pass\n\ndef main():\n    n = int(input)\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n"]