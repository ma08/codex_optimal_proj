2022-04-16 15:10:54.648873 num operations 1
2022-04-16 15:10:54.648890 size on input set 1
2022-04-16 15:11:37.314404 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n'''\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n'''\n"
    },
    {
      "index": 1,
      "text": "\n\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\n\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) \n            else float('inf')\n\nprint(HI.index(max(HI)))\n"
    },
    {
      "index": 2,
      "text": "\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n"
    },
    {
      "index": 3,
      "text": "\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n"
    },
    {
      "index": 4,
      "text": "\n\n# Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n"
    },
    {
      "index": 5,
      "text": "\n\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split())) \n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n"
    },
    {
      "index": 6,
      "text": "\n# Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n"
    },
    {
      "index": 7,
      "text": "\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = list(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b}) | {a}\n    similar[b] = similar.get(b, set()).union({a}) | {b}\n\nHI = [0] * N  # horror index\nfor h in horror:  # set horror index of horror movies to 0\n    HI[h] = 0  # 0 means not horror\n\nQ = 0  # number of horror movies\nwhile Q < N:  # until all movies are horror\n    Q = max(HI) + 1  # increase horror index\n    for i in range(N):  # for all movies\n        if HI[i] == 0:  # if not horror\n            continue  # skip\n        else:  # if horror\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')  # if all similar movies are not horror, then it is horror, otherwise it is not horror\n\nprint(HI.index(max(HI)))\n"
    },
    {
      "index": 8,
      "text": "\n#\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n"
    }
  ],
  "created": 1650121854,
  "object": "edit"
}
2022-04-16 15:11:37.314700 fix syntax errors 9 ["\n'''\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n'''\n", "\n\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\n\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) \n            else float('inf')\n\nprint(HI.index(max(HI)))\n", "\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n", "\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n", "\n\n# Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n", "\n\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split())) \n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n", "\n# Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n", "\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = list(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b}) | {a}\n    similar[b] = similar.get(b, set()).union({a}) | {b}\n\nHI = [0] * N  # horror index\nfor h in horror:  # set horror index of horror movies to 0\n    HI[h] = 0  # 0 means not horror\n\nQ = 0  # number of horror movies\nwhile Q < N:  # until all movies are horror\n    Q = max(HI) + 1  # increase horror index\n    for i in range(N):  # for all movies\n        if HI[i] == 0:  # if not horror\n            continue  # skip\n        else:  # if horror\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')  # if all similar movies are not horror, then it is horror, otherwise it is not horror\n\nprint(HI.index(max(HI)))\n", "\n#\n#Solution:\n\nN, H, L = map(int, input().split())\nhorror = set(map(int, input().split()))\n\nsimilar = {}\nfor _ in range(L):\n    a, b = map(int, input().split())\n    similar[a] = similar.get(a, set()).union({b})\n    similar[b] = similar.get(b, set()).union({a})\n\nHI = [0] * N\nfor h in horror:\n    HI[h] = 0\n\nQ = 0\nwhile Q < N:\n    Q = max(HI) + 1\n    for i in range(N):\n        if HI[i] == 0:\n            continue\n        else:\n            HI[i] = Q if all(HI[j] == 0 for j in similar.get(i, [])) else float('inf')\n\nprint(HI.index(max(HI)))\n"]
2022-04-16 15:11:37.314837 size on output set 9
2022-04-16 15:11:37.314848 num operations 1
2022-04-16 15:11:37.314853 size on input set 1
2022-04-16 15:12:20.618028 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return \"1\" \n"
    },
    {
      "index": 1,
      "text": "\n\nclass Solution:\n    def solve(self, input_lines):  # noqa: D102\n        # TODO: Implement solution\n        return \"1\"\n"
    },
    {
      "index": 2,
      "text": "\n\n\nclass Solution:\n    def solve(self, input_lines):\n        # return \"1\"\n        return input_lines[0]\n"
    },
    {
      "index": 3,
      "text": "\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return 1\n"
    },
    {
      "index": 4,
      "text": "from collections import namedtuple\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return \"1\"\n"
    },
    {
      "index": 5,
      "text": "\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return 1\n"
    },
    {
      "index": 6,
      "text": "\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return \"1\" \n"
    },
    {
      "index": 7,
      "text": "\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return \"1\\n\"\n"
    },
    {
      "index": 8,
      "text": "\n\ndef solve(input_lines):\n        # TODO: Implement solution\n    return \"1\"\n"
    }
  ],
  "created": 1650121897,
  "object": "edit"
}
2022-04-16 15:12:20.618260 fix syntax errors 9 ['\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return "1" \n', '\n\nclass Solution:\n    def solve(self, input_lines):  # noqa: D102\n        # TODO: Implement solution\n        return "1"\n', '\n\n\nclass Solution:\n    def solve(self, input_lines):\n        # return "1"\n        return input_lines[0]\n', '\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return 1\n', 'from collections import namedtuple\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return "1"\n', '\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return 1\n', '\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return "1" \n', '\n\nclass Solution:\n    def solve(self, input_lines):\n        # TODO: Implement solution\n        return "1\\n"\n', '\n\ndef solve(input_lines):\n        # TODO: Implement solution\n    return "1"\n']
2022-04-16 15:12:20.618290 size on output set 7
2022-04-16 15:12:20.618301 num operations 1
2022-04-16 15:12:20.618305 size on input set 1
2022-04-16 15:12:31.355008 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = {int(x) for x in sys.stdin.readline().split()}\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) - 1 for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) - 1 for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = np.zeros(N, dtype=np.int8)\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.iinfo(np.int8).max\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set(int(x) for x in sys.stdin.readline().split())\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "import sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650121940,
  "object": "edit"
}
2022-04-16 15:12:31.355370 fix syntax errors 9 ['\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = {int(x) for x in sys.stdin.readline().split()}\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) - 1 for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) - 1 for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = np.zeros(N, dtype=np.int8)\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.iinfo(np.int8).max\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set(int(x) for x in sys.stdin.readline().split())\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nimport numpy as np\n\ndef main():\n    N, H, L = (int(x) for x in sys.stdin.readline().split())\n    horror_list = set([int(x) for x in sys.stdin.readline().split()])\n    similar = np.zeros((N, N), dtype=np.int8)\n    for _ in range(L):\n        a, b = (int(x) for x in sys.stdin.readline().split())\n        similar[a][b] = 1\n        similar[b][a] = 1\n    horror_index = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            continue\n        horror_index[i] = np.inf\n        for j in range(N):\n            if similar[i][j] == 1:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n    print(np.argmax(horror_index))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 15:12:31.355443 size on output set 6
2022-04-16 15:12:31.355454 num operations 1
2022-04-16 15:12:31.355459 size on input set 1
2022-04-16 15:12:46.964058 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# coding: utf-8\n\n# In[1]:\n\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n\n\n# In[2]:\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n\n\n# In[ ]:\n\n\n\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "# https://open.kattis.com/problems/horror\n\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [float('inf')] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = float('inf')\n        else:\n            HI[i] = min([HI[j] for j in sim[i]] + [0]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport sys\n\ndef main():\n\tN, H, L = map(int, sys.stdin.readline().split())\n\thorror = set(map(int, sys.stdin.readline().split()))\n\tsim = {}\n\tfor i in range(L):\n\t\ta, b = map(int, sys.stdin.readline().split())\n\t\tsim.setdefault(a, set()).add(b)\n\t\tsim.setdefault(b, set()).add(a)\n\tHI = [0] * N\n\tfor i in range(N):\n\t\tif i in horror:\n\t\t\tHI[i] = 0\n\t\telse:\n\t\t\tHI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n\tprint(HI.index(max(HI)))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 3,
      "text": "\n \nimport sys\n\ndef main():\n    N, M, L = map(int, sys.stdin.readline().split())\n    horror = map(int, sys.stdin.readline().split())\n    sim = [set() for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, sys.stdin.readline().split()) - 1\n        sim[a].add(b)\n        sim[b].add(a)\n    HI = [0] * N \n    for i in range(1, N):\n        if i in horror: HI[i] = 0\n        else: HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)) + 1)\n \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "import sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())  # type: int, int, int\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())  # type: int, int\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650121951,
  "object": "edit"
}
2022-04-16 15:12:46.964376 fix syntax errors 9 ["\n\n# coding: utf-8\n\n# In[1]:\n\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n\n\n# In[2]:\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n\n\n# In[ ]:\n\n\n\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n", "# https://open.kattis.com/problems/horror\n\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [float('inf')] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = float('inf')\n        else:\n            HI[i] = min([HI[j] for j in sim[i]] + [0]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n\tN, H, L = map(int, sys.stdin.readline().split())\n\thorror = set(map(int, sys.stdin.readline().split()))\n\tsim = {}\n\tfor i in range(L):\n\t\ta, b = map(int, sys.stdin.readline().split())\n\t\tsim.setdefault(a, set()).add(b)\n\t\tsim.setdefault(b, set()).add(a)\n\tHI = [0] * N\n\tfor i in range(N):\n\t\tif i in horror:\n\t\t\tHI[i] = 0\n\t\telse:\n\t\t\tHI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n\tprint(HI.index(max(HI)))\n\nif __name__ == '__main__':\n\tmain()\n", "\n \nimport sys\n\ndef main():\n    N, M, L = map(int, sys.stdin.readline().split())\n    horror = map(int, sys.stdin.readline().split())\n    sim = [set() for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, sys.stdin.readline().split()) - 1\n        sim[a].add(b)\n        sim[b].add(a)\n    HI = [0] * N \n    for i in range(1, N):\n        if i in horror: HI[i] = 0\n        else: HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)) + 1)\n \nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())  # type: int, int, int\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())  # type: int, int\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, H, L = map(int, sys.stdin.readline().split())\n    horror = set(map(int, sys.stdin.readline().split()))\n    sim = {}\n    for i in range(L):\n        a, b = map(int, sys.stdin.readline().split())\n        sim.setdefault(a, set()).add(b)\n        sim.setdefault(b, set()).add(a)\n    HI = [0] * N\n    for i in range(N):\n        if i in horror:\n            HI[i] = 0\n        else:\n            HI[i] = max([HI[j] for j in sim[i]] + [float('inf')]) + 1\n    print(HI.index(max(HI)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:12:46.964444 size on output set 8
2022-04-16 15:12:46.964454 num operations 1
2022-04-16 15:12:46.964459 size on input set 1
2022-04-16 15:13:04.984489 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# # Solution\n# def solve():\n#     N, H, L = map(int, input().split())\n#     horror_list = set(map(int, input().split()))\n#     similarities = [list(map(int, input().split())) for _ in range(L)]\n#     HI = [0] * N\n#     for i in range(N):\n#         if i in horror_list:\n#             HI[i] = 0\n#         else:\n#             HI[i] = float('inf')\n#     for a, b in similarities:\n#         if HI[a] < HI[b]:\n#             HI[b] = HI[a] + 1\n#         elif HI[b] < HI[a]:\n#             HI[a] = HI[b] + 1\n#     print(HI.index(max(HI)))\n\n# Solution\ndef solve():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            if a[j][i] == 1:\n                for k in range(n):\n                    if a[k][i] == 1 and k != j:\n                        a[k][i] = 0\n    ans = 0\n    for i in range(n):\n        if sum(a[i]) == 0:\n            ans += 1\n    print(ans)\n\nsolve()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = list(map(int, input().split()))\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n"
    },
    {
      "index": 2,
      "text": "\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split())) - {0}\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)) + 1)\n\nsolve()\n"
    },
    {
      "index": 3,
      "text": "\n\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split()))\n    similarities = [[int(x) for x in input().split()] for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n"
    },
    {
      "index": 4,
      "text": "\n# Solution\ndef solve():\n    n, h, l = map(int, input().split())\n    horror_list = set(map(int, input().split())) # \u30db\u30e9\u30fc\u6620\u753b\u30ea\u30b9\u30c8\n    similarities = [list(map(int, input().split())) for _ in range(l)] # \u985e\u4f3c\u5ea6\u30ea\u30b9\u30c8\n    hi = [0] * n # \u30db\u30e9\u30fc\u6620\u753b\u5ea6\n    for i in range(n):\n        if i in horror_list: # \u30db\u30e9\u30fc\u6620\u753b\u5ea6\u304c0\n            hi[i] = 0\n        else: # \u30db\u30e9\u30fc\u6620\u753b\u5ea6\u304cinf\n            hi[i] = float('inf')\n    for a, b in similarities: # \u985e\u4f3c\u5ea6\u30ea\u30b9\u30c8\u3092\u30eb\u30fc\u30d7\n        if hi[a] < hi[b]:\n            hi[b] = hi[a] + 1\n        elif hi[b] < hi[a]:\n            hi[a] = hi[b] + 1\n    print(hi.index(max(hi)))\n\nsolve()\n"
    },
    {
      "index": 5,
      "text": "\n# Solution\ndef solve():\n    n, h, l = map(int, input().split())\n    horrors = set(map(int, input().split()))\n    similar_movies = [list(map(int, input().split())) for _ in range(l)]\n    hi = [0] * n\n    for i in range(n):\n        hi[i] = 0 if i in horrors else float('inf')\n    for a, b in similar_movies:\n        if hi[a] < hi[b]:\n            hi[b] = hi[a] + 1\n        elif hi[b] < hi[a]:\n            hi[a] = hi[b] + 1\n    print(hi.index(max(hi)))\n\n\nsolve()\n"
    },
    {
      "index": 6,
      "text": "\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split()))\n    similarities = [list(map(int, input().split())) for _ in range(L)] # \u540c\u3058\u90e8\u5c4b\u306b\u3044\u308b\u4eba\u306e\u30ea\u30b9\u30c8\n\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list: # \u6016\u3044\u4eba\u306f0\n            HI[i] = 0\n        else:\n            HI[i] = float('inf') # \u6016\u3044\u4eba\u4ee5\u5916\u306finf\n\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n"
    },
    {
      "index": 7,
      "text": "\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split()))\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\n\nsolve()\n"
    },
    {
      "index": 8,
      "text": "\n\n# Solution\ndef solve():\n    N, H, L = map(int, input().split()) # number of books, number of horror books, number of similarities\n    horror_list = set(map(int, input().split())) # list of horror books\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N # list of horror index\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n"
    }
  ],
  "created": 1650121967,
  "object": "edit"
}
2022-04-16 15:13:04.984814 fix syntax errors 9 ["# # Solution\n# def solve():\n#     N, H, L = map(int, input().split())\n#     horror_list = set(map(int, input().split()))\n#     similarities = [list(map(int, input().split())) for _ in range(L)]\n#     HI = [0] * N\n#     for i in range(N):\n#         if i in horror_list:\n#             HI[i] = 0\n#         else:\n#             HI[i] = float('inf')\n#     for a, b in similarities:\n#         if HI[a] < HI[b]:\n#             HI[b] = HI[a] + 1\n#         elif HI[b] < HI[a]:\n#             HI[a] = HI[b] + 1\n#     print(HI.index(max(HI)))\n\n# Solution\ndef solve():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            if a[j][i] == 1:\n                for k in range(n):\n                    if a[k][i] == 1 and k != j:\n                        a[k][i] = 0\n    ans = 0\n    for i in range(n):\n        if sum(a[i]) == 0:\n            ans += 1\n    print(ans)\n\nsolve()\n", "\n\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = list(map(int, input().split()))\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n", "\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split())) - {0}\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)) + 1)\n\nsolve()\n", "\n\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split()))\n    similarities = [[int(x) for x in input().split()] for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n", "\n# Solution\ndef solve():\n    n, h, l = map(int, input().split())\n    horror_list = set(map(int, input().split())) # ホラー映画リスト\n    similarities = [list(map(int, input().split())) for _ in range(l)] # 類似度リスト\n    hi = [0] * n # ホラー映画度\n    for i in range(n):\n        if i in horror_list: # ホラー映画度が0\n            hi[i] = 0\n        else: # ホラー映画度がinf\n            hi[i] = float('inf')\n    for a, b in similarities: # 類似度リストをループ\n        if hi[a] < hi[b]:\n            hi[b] = hi[a] + 1\n        elif hi[b] < hi[a]:\n            hi[a] = hi[b] + 1\n    print(hi.index(max(hi)))\n\nsolve()\n", "\n# Solution\ndef solve():\n    n, h, l = map(int, input().split())\n    horrors = set(map(int, input().split()))\n    similar_movies = [list(map(int, input().split())) for _ in range(l)]\n    hi = [0] * n\n    for i in range(n):\n        hi[i] = 0 if i in horrors else float('inf')\n    for a, b in similar_movies:\n        if hi[a] < hi[b]:\n            hi[b] = hi[a] + 1\n        elif hi[b] < hi[a]:\n            hi[a] = hi[b] + 1\n    print(hi.index(max(hi)))\n\n\nsolve()\n", "\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split()))\n    similarities = [list(map(int, input().split())) for _ in range(L)] # 同じ部屋にいる人のリスト\n\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list: # 怖い人は0\n            HI[i] = 0\n        else:\n            HI[i] = float('inf') # 怖い人以外はinf\n\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n", "\n# Solution\ndef solve():\n    N, H, L = map(int, input().split())\n    horror_list = set(map(int, input().split()))\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\n\nsolve()\n", "\n\n# Solution\ndef solve():\n    N, H, L = map(int, input().split()) # number of books, number of horror books, number of similarities\n    horror_list = set(map(int, input().split())) # list of horror books\n    similarities = [list(map(int, input().split())) for _ in range(L)]\n    HI = [0] * N # list of horror index\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 0\n        else:\n            HI[i] = float('inf')\n    for a, b in similarities:\n        if HI[a] < HI[b]:\n            HI[b] = HI[a] + 1\n        elif HI[b] < HI[a]:\n            HI[a] = HI[b] + 1\n    print(HI.index(max(HI)))\n\nsolve()\n"]
2022-04-16 15:13:04.984906 size on output set 9
2022-04-16 15:13:04.984953 num operations 1
2022-04-16 15:13:04.984959 size on input set 1
2022-04-16 15:13:36.591219 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror:\n        horror_index[i-1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror_set:\n        horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set and b not in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set and a not in horror_set:\n            horror_index[a] = 0\n    for i in range(1, n + 1):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(1, n + 1):\n            if horror_index[j] != 0:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * (n + 1)\n    for i in horror_set:\n        horror_index[i] = 1\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 1\n        elif b in horror_set:\n            horror_index[a] = 1\n    for i in range(n):\n        if horror_index[i] == 1:\n            continue\n        horror_index[i] = float('inf') # \u521d\u671f\u5316\n        for j in range(1, l + 1):\n            a, b = map(int, sys.stdin.readline().split()) # \u8fba\u306e\u53d6\u5f97\n            if a == i: # \u8fba\u306e\u59cb\u70b9\u304c\u73fe\u5728\u306e\u5834\u6240\u306a\u3089\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1) # \u6b21\u306e\u5834\u6240\u306e\u30b3\u30b9\u30c8\u3092\u6bd4\u8f03\n            elif b == i: # \u8fba\u306e\u7d42\u70b9\u304c\u73fe\u5728\u306e\u5834\u6240\u306a\u3089\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1) # \u6b21\u306e\u5834\u6240\u306e\u30b3\u30b9\u30c8\u3092\u6bd4\u8f03\n        if horror_index[i] == float('inf'): # \u6700\u77ed\u7d4c\u8def\u304c\u5b58\u5728\u3057\u306a\u3044\u306a\u3089\n            horror_index[i] = -1 # -1\u3092\u4ee3\u5165\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror_set:\n        horror_index[i - 1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b - 1] = 0\n        elif b in horror_set:\n            horror_index[a - 1] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a - 1 == i:\n                horror_index[i] = min(horror_index[i], horror_index[b - 1] + 1)\n            elif b - 1 == i:\n                horror_index[i] = min(horror_index[i], horror_index[a - 1] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i + 1)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror:\n        horror_index[i-1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b-1] = 0\n        elif b in horror_set:\n            horror_index[a-1] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b-1] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror[1:])\n    horror_index = [0] * n\n    for i in horror[1:]:\n        horror_index[i - 1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b - 1] = 0\n        elif b in horror_set:\n            horror_index[a - 1] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b - 1] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a - 1] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in range(n):\n        if i in horror:\n            horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in range(n):\n        if i in horror:\n            horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror) \n    horror_index = [0] * n\n    for i in horror:\n        horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650121985,
  "object": "edit"
}
2022-04-16 15:13:36.591621 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror:\n        horror_index[i-1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror_set:\n        horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set and b not in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set and a not in horror_set:\n            horror_index[a] = 0\n    for i in range(1, n + 1):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(1, n + 1):\n            if horror_index[j] != 0:\n                horror_index[i] = min(horror_index[i], horror_index[j] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * (n + 1)\n    for i in horror_set:\n        horror_index[i] = 1\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 1\n        elif b in horror_set:\n            horror_index[a] = 1\n    for i in range(n):\n        if horror_index[i] == 1:\n            continue\n        horror_index[i] = float('inf') # 初期化\n        for j in range(1, l + 1):\n            a, b = map(int, sys.stdin.readline().split()) # 辺の取得\n            if a == i: # 辺の始点が現在の場所なら\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1) # 次の場所のコストを比較\n            elif b == i: # 辺の終点が現在の場所なら\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1) # 次の場所のコストを比較\n        if horror_index[i] == float('inf'): # 最短経路が存在しないなら\n            horror_index[i] = -1 # -1を代入\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror_set:\n        horror_index[i - 1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b - 1] = 0\n        elif b in horror_set:\n            horror_index[a - 1] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a - 1 == i:\n                horror_index[i] = min(horror_index[i], horror_index[b - 1] + 1)\n            elif b - 1 == i:\n                horror_index[i] = min(horror_index[i], horror_index[a - 1] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i + 1)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in horror:\n        horror_index[i-1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b-1] = 0\n        elif b in horror_set:\n            horror_index[a-1] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b-1] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror[1:])\n    horror_index = [0] * n\n    for i in horror[1:]:\n        horror_index[i - 1] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b - 1] = 0\n        elif b in horror_set:\n            horror_index[a - 1] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b - 1] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a - 1] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in range(n):\n        if i in horror:\n            horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror)\n    horror_index = [0] * n\n    for i in range(n):\n        if i in horror:\n            horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, l = map(int, sys.stdin.readline().split())\n    horror = list(map(int, sys.stdin.readline().split()))\n    horror_set = set(horror) \n    horror_index = [0] * n\n    for i in horror:\n        horror_index[i] = 0\n    for i in range(l):\n        a, b = map(int, sys.stdin.readline().split())\n        if a in horror_set:\n            horror_index[b] = 0\n        elif b in horror_set:\n            horror_index[a] = 0\n    for i in range(n):\n        if horror_index[i] == 0:\n            continue\n        horror_index[i] = float('inf')\n        for j in range(l):\n            a, b = map(int, sys.stdin.readline().split())\n            if a == i:\n                horror_index[i] = min(horror_index[i], horror_index[b] + 1)\n            elif b == i:\n                horror_index[i] = min(horror_index[i], horror_index[a] + 1)\n        if horror_index[i] == float('inf'):\n            horror_index[i] = -1\n    max_hi = max(horror_index)\n    max_indices = []\n    for i in range(n):\n        if horror_index[i] == max_hi:\n            max_indices.append(i)\n    print(min(max_indices))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:13:36.591768 size on output set 8
2022-04-16 15:13:36.591780 num operations 1
2022-04-16 15:13:36.591785 size on input set 1
2022-04-16 15:13:53.665998 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n#Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n"
    },
    {
      "index": 2,
      "text": "\n\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n"
    },
    {
      "index": 3,
      "text": "\n#Program to print the nth number in Fibonacci series\nn = int(input())\na = 0\nb = 1\nfor i in range(n):\n    print(a, end = ' ')\n    c = a+b\n    a = b\n    b = c\n"
    },
    {
      "index": 4,
      "text": "\n\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 1\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nif max_hi == 0:\n    print(-1)\nprint(min(max_hi_movies))\n"
    },
    {
      "index": 5,
      "text": "\n\n#Program\ndef main():\n    n,h,l = map(int,input().split())\n    horror_list = list(map(int,input().split()))\n    similar = {}\n    for _ in range(l):\n        a,b = map(int,input().split())\n        if a not in similar:\n            similar[a] = [b]\n        else:\n            similar[a].append(b)\n        if b not in similar:\n            similar[b] = [a]\n        else:\n            similar[b].append(a)\n\n    hi = [0]*n\n    for i in horror_list:\n        hi[i] = 0\n    for i in horror_list:\n        for j in similar[i]:\n            if hi[j] == 0:\n                continue\n            elif hi[j] == 1:\n                hi[j] = 0\n            else:\n                hi[j] = 1\n\n    max_hi = max(hi)\n    max_hi_movies = []\n    for i in range(n):\n        if hi[i] == max_hi:\n            max_hi_movies.append(i)\n    print(min(max_hi_movies))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\n# Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n"
    },
    {
      "index": 7,
      "text": "\n#Program\nn, h, l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a, b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n"
    },
    {
      "index": 8,
      "text": "\n\n#Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 1\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n"
    }
  ],
  "created": 1650122016,
  "object": "edit"
}
2022-04-16 15:13:53.666239 fix syntax errors 9 ['\n\n# Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n', '#!/usr/bin/env python3\n\n#Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n', '\n\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n', "\n#Program to print the nth number in Fibonacci series\nn = int(input())\na = 0\nb = 1\nfor i in range(n):\n    print(a, end = ' ')\n    c = a+b\n    a = b\n    b = c\n", '\n\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 1\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nif max_hi == 0:\n    print(-1)\nprint(min(max_hi_movies))\n', "\n\n#Program\ndef main():\n    n,h,l = map(int,input().split())\n    horror_list = list(map(int,input().split()))\n    similar = {}\n    for _ in range(l):\n        a,b = map(int,input().split())\n        if a not in similar:\n            similar[a] = [b]\n        else:\n            similar[a].append(b)\n        if b not in similar:\n            similar[b] = [a]\n        else:\n            similar[b].append(a)\n\n    hi = [0]*n\n    for i in horror_list:\n        hi[i] = 0\n    for i in horror_list:\n        for j in similar[i]:\n            if hi[j] == 0:\n                continue\n            elif hi[j] == 1:\n                hi[j] = 0\n            else:\n                hi[j] = 1\n\n    max_hi = max(hi)\n    max_hi_movies = []\n    for i in range(n):\n        if hi[i] == max_hi:\n            max_hi_movies.append(i)\n    print(min(max_hi_movies))\n\n\nif __name__ == '__main__':\n    main()\n", '\n\n# Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n', '\n#Program\nn, h, l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a, b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 0\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n', '\n\n#Program\nn,h,l = map(int,input().split())\nhorror_list = list(map(int,input().split()))\nsimilar = {}\nfor _ in range(l):\n    a,b = map(int,input().split())\n    if a not in similar:\n        similar[a] = [b]\n    else:\n        similar[a].append(b)\n    if b not in similar:\n        similar[b] = [a]\n    else:\n        similar[b].append(a)\n\nhi = [0]*n\nfor i in horror_list:\n    hi[i] = 1\nfor i in horror_list:\n    for j in similar[i]:\n        if hi[j] == 0:\n            continue\n        elif hi[j] == 1:\n            hi[j] = 0\n        else:\n            hi[j] = 1\n\nmax_hi = max(hi)\nmax_hi_movies = []\nfor i in range(n):\n    if hi[i] == max_hi:\n        max_hi_movies.append(i)\nprint(min(max_hi_movies))\n']
2022-04-16 15:13:53.666461 size on output set 8
2022-04-16 15:13:53.666495 num operations 1
2022-04-16 15:13:53.666501 size on input set 1
2022-04-16 15:14:06.010076 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    for _ in range(k):\n        a, b = map(int, input().split())\n        a -= 1\n        b -= 1\n        print(a, b)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a-1].append(b-1)\n        similar[b-1].append(a-1)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index))+1)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, h, l = map(int, input().split())  # n: number of movies, h: number of horror movies, l: number of similar movies\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]  # similar[i]: the list of movies similar to movie i\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [0] * n  # horror_index[i]: the number of horror movies in the list of movies similar to movie i\n    for i in range(n):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n + 1)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = list(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a - 1].append(b - 1)\n        similar[b - 1].append(a - 1)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror - 1:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)) + 1)\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, _, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())  # a\u3068b\u306f\u985e\u4f3c\u3057\u3066\u3044\u308b\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n    import sys\n    sys.setrecursionlimit(10**6)\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [-1] * n\n    for i in horror:\n        horror_index[i] = 0\n    for i in range(n):  # i is not horror\n        if horror_index[i] == -1:\n            horror_index[i] = dfs(i, similar, horror_index)\n    print(horror_index.index(max(horror_index)))  # index of max\n\n\ndef dfs(i, similar, horror_index):\n    if horror_index[i] != -1:\n        return horror_index[i]\n    horror_index[i] = max(dfs(j, similar, horror_index) for j in similar[i]) + 1\n    return horror_index[i]\n\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split())) - {0}\n    similar = [[] for _ in range(n + 1)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b - 1)\n        similar[b].append(a - 1)\n    horror_index = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)) - 1)\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = list(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a - 1].append(b - 1)\n        similar[b - 1].append(a - 1)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror - 1:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1 if similar[i] else 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n"
    }
  ],
  "created": 1650122033,
  "object": "edit"
}
2022-04-16 15:14:06.010326 fix syntax errors 9 ['\n\ndef main():\n    n, k = map(int, input().split())\n    for _ in range(k):\n        a, b = map(int, input().split())\n        a -= 1\n        b -= 1\n        print(a, b)\n\nmain()\n', '\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a-1].append(b-1)\n        similar[b-1].append(a-1)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index))+1)\n\nmain()\n', '\n\ndef main():\n    n, h, l = map(int, input().split())  # n: number of movies, h: number of horror movies, l: number of similar movies\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]  # similar[i]: the list of movies similar to movie i\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [0] * n  # horror_index[i]: the number of horror movies in the list of movies similar to movie i\n    for i in range(n):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n', '\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n + 1)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n', '\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = list(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a - 1].append(b - 1)\n        similar[b - 1].append(a - 1)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror - 1:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)) + 1)\n\nmain()\n', '\n\ndef main():\n    n, _, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())  # aとbは類似している\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n', '\n\n    import sys\n    sys.setrecursionlimit(10**6)\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b)\n        similar[b].append(a)\n    horror_index = [-1] * n\n    for i in horror:\n        horror_index[i] = 0\n    for i in range(n):  # i is not horror\n        if horror_index[i] == -1:\n            horror_index[i] = dfs(i, similar, horror_index)\n    print(horror_index.index(max(horror_index)))  # index of max\n\n\ndef dfs(i, similar, horror_index):\n    if horror_index[i] != -1:\n        return horror_index[i]\n    horror_index[i] = max(dfs(j, similar, horror_index) for j in similar[i]) + 1\n    return horror_index[i]\n\n\nmain()\n', '\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = set(map(int, input().split())) - {0}\n    similar = [[] for _ in range(n + 1)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a].append(b - 1)\n        similar[b].append(a - 1)\n    horror_index = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i not in horror:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1\n    print(horror_index.index(max(horror_index)) - 1)\n\nmain()\n', '\n\ndef main():\n    n, h, l = map(int, input().split())\n    horror = list(map(int, input().split()))\n    similar = [[] for _ in range(n)]\n    for _ in range(l):\n        a, b = map(int, input().split())\n        similar[a - 1].append(b - 1)\n        similar[b - 1].append(a - 1)\n    horror_index = [0] * n\n    for i in range(n):\n        if i not in horror - 1:\n            horror_index[i] = max(horror_index[j] for j in similar[i]) + 1 if similar[i] else 1\n    print(horror_index.index(max(horror_index)))\n\nmain()\n']
2022-04-16 15:14:06.010476 size on output set 9
