["\ndef f(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return f(n - 1) + f(n - 2)\n", "\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nres = []\nfor i in range(1, m + 1):\n    if i not in [seg[0] for seg in segments] and i not in [seg[1] for seg in segments] and i <= segments[-1][-1]:\n        res.append(i)\n\nprint(len(res))\nprint(*res)\n", "\n \nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nres = []\nfor i in range(1, m + 1):\n    if i not in [seg[0] for seg in segments] and i not in [seg[1] for seg in segments]:\n        res.append(i)\n\nprint(len(res))\nprint(*res)\n", "\nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\ncounter = 0\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        counter += 1\n    elif left[i] > right[i]:\n        print(counter)\n        break\nelse:\n    print(counter)\n", "#\n\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nres = []\nfor i in range(1, m + 1):\n    if i not in [seg[0] for seg in segments] and i not in [seg[1] for seg in segments]:\n        res.append(i)\n\nprint(len(res))\nprint(*res)\n", "\n\nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\nprint(left)\nprint(right)\ncounter = 0\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        counter += 1\n    elif left[i] > right[i]:\n        print(counter)\n        break\nelse:\n    print(counter)\n", "\nn, m = map(int, input().split())\n\nleft = [0] * (m + 2)\nright = [0] * (m + 2)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\ncounter = 0\nfor i in range(1, m + 2):\n    if left[i] == right[i]:\n        counter += 1\n    elif left[i] > right[i]:\n        print(counter)\n        break\nelse:\n    print(counter)\n", "\nn, m = map(int, input().split())\n\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\n\ncounter = 0\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        counter += 1\n    elif left[i] > right[i]:\n        print(counter)\n        break\nelse:\n    print(counter)\n", "\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort(key=lambda x: x[0])\n\nres = []\nfor i in range(1, m + 1):\n    if i not in [seg[0] for seg in segments] and i not in [seg[1] for seg in segments]:\n        res.append(i)\n\nprint(len(res))\nprint(*res)\n", "\nn, m = map(int, input().split())\nleft = [0] * (m + 1)\nright = [0] * (m + 1)\nfor i in range(n):\n    l, r = map(int, input().split())\n    left[l] += 1\n    right[r] += 1\ncounter = 0\nfor i in range(1, m + 1):\n    if left[i] == right[i]:\n        counter += 1\n    elif left[i] > right[i]:\n        print(counter)\n        break\nelse:\n    print(counter)\n", "import sys\n\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nres = []\nfor i in range(1, m + 1):\n    if i not in [seg[0] for seg in segments] and i not in [seg[1] for seg in segments]:\n        res.append(i)\n\nprint(len(res))\nsys.stdout.write(' '.join(map(str, res)))\n", "\n\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nres = []\nfor i in range(1, m + 1):\n    if i not in [seg[0] for seg in segments] and i not in [seg[1] for seg in segments]:\n        res.append(i)\n\nprint(len(res))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(*res)\n", "\nn, m = map(int, input().split())\n\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort(key=lambda x: x[0])\n\n# print(segments)\n\nres = []\nfor i in range(1, m + 1):\n    if i not in [seg[0] for seg in segments] and i not in [seg[1] for seg in segments]:\n        res.append(i)\n\nprint(len(res))\nprint(*res)\n"]