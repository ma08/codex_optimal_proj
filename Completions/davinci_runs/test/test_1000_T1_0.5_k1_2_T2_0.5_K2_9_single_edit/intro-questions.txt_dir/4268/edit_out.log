2022-04-16 06:14:16.268621 num operations 1
2022-04-16 06:14:16.268641 size on input set 1
2022-04-16 06:14:24.535097 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\n\ndef distance(p1: list, p2: list) -> float:\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\nimport math\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]) == int(distance(points[i], points[j])):\n            count += 1\n\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\nimport math\nn, d = map(int, input().split())\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\nprint(count)\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n"
    },
    {
      "index": 5,
      "text": "\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer(): # is_integer() is a method to check if a float is an integer\n            count += 1\n\nprint(count)\n"
    },
    {
      "index": 6,
      "text": "import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n"
    },
    {
      "index": 7,
      "text": "import math\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\nprint(count)\n"
    },
    {
      "index": 8,
      "text": "import math\nn, d = map(int, input().split())\npoints = []\n\n\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650089656,
  "object": "edit"
}
2022-04-16 06:14:24.535411 fix syntax errors 9 ['import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\n\ndef distance(p1: list, p2: list) -> float:\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n', '\nimport math\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n', '\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]) == int(distance(points[i], points[j])):\n            count += 1\n\nprint(count)\n', '\nimport math\nn, d = map(int, input().split())\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\nprint(count)\n', '\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n', '\nimport math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer(): # is_integer() is a method to check if a float is an integer\n            count += 1\n\nprint(count)\n', 'import math\n\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\n\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n', 'import math\nn, d = map(int, input().split())\n\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\nprint(count)\n', 'import math\nn, d = map(int, input().split())\npoints = []\n\n\nfor _ in range(n):\n    points.append(list(map(int, input().split())))\ndef distance(p1, p2):\n    dist = 0\n    for i in range(d):\n        dist += (p1[i] - p2[i]) ** 2\n    return math.sqrt(dist)\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if distance(points[i], points[j]).is_integer():\n            count += 1\n\nprint(count)\n']
2022-04-16 06:14:24.535555 size on output set 9
2022-04-16 06:14:24.535571 num operations 1
2022-04-16 06:14:24.535577 size on input set 1
2022-04-16 06:14:36.399154 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()][:d]))\n\n    count = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))\n\ndef main():\n    n, d = map(int, sys.stdin.readline().split())\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, sys.stdin.readline().split())))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1 \n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))  # noqa\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))  # noqa\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))])) # noqa\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()])) # noqa\n\n    count = 0\n    for i in range(n): # noqa\n        for j in range(i+1, n): # noqa\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count) # noqa\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple(int(x) for x in sys.stdin.readline().split()))\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n-1):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n-1):\n            if distance(points[i], points[j]) % 1 == 0: count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n\n    points = []\n    for _ in range(n):\n        points.append([int(x) for x in sys.stdin.readline().split()])\n\n    points = sorted(points, key=lambda x: x[0])\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                if points[i][0] != points[j][0]:\n                    count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650089664,
  "object": "edit"
}
2022-04-16 06:14:36.399444 fix syntax errors 9 ["\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()][:d]))\n\n    count = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))\n\ndef main():\n    n, d = map(int, sys.stdin.readline().split())\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, sys.stdin.readline().split())))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1 \n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))  # noqa\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))  # noqa\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))])) # noqa\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()])) # noqa\n\n    count = 0\n    for i in range(n): # noqa\n        for j in range(i+1, n): # noqa\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count) # noqa\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple(int(x) for x in sys.stdin.readline().split()))\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n-1):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(int(count))\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(len(p1))]))\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n-1):\n            if distance(points[i], points[j]) % 1 == 0: count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n    points = []\n    for _ in range(n):\n        points.append(tuple([int(x) for x in sys.stdin.readline().split()]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: implement\n\nimport sys\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\n\n\ndef main():\n    n, d = [int(x) for x in sys.stdin.readline().split()]\n\n    points = []\n    for _ in range(n):\n        points.append([int(x) for x in sys.stdin.readline().split()])\n\n    points = sorted(points, key=lambda x: x[0])\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distance(points[i], points[j]) % 1 == 0:\n                if points[i][0] != points[j][0]:\n                    count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 06:14:36.399577 size on output set 9
