2022-04-16 15:01:29.062249 num operations 1
2022-04-16 15:01:29.062267 size on input set 1
2022-04-16 15:01:52.185981 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split()) # get the dimensions of the grid\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n): # loop through grid\n        for j in range(m):\n            if grid[i][j] == '.': # if current position is empty\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.': # check if adjacent positions are empty\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.strip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\nimport math\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\nimport math\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n                    elif j == m-1:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.':\n                            grid[i][j] = 'E'\n                    else:\n                        if grid[i-1][j] == '.' or grid[i+1][j] == '.' or grid[i][j-1] == '.' or grid[i][j+1] == '.':\n                            grid[i][j] = 'E'\n    for i in range(n):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650121289,
  "object": "edit"
}
2022-04-16 15:01:52.186413 fix syntax errors 9 ['import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split()) # get the dimensions of the grid\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n): # loop through grid\n        for j in range(m):\n            if grid[i][j] == \'.\': # if current position is empty\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\': # check if adjacent positions are empty\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.strip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\n\ndef main():\n    lines = sys.stdin.readlines()\n    n, m = map(int, lines[0].split())\n    grid = [list(line.rstrip()) for line in lines[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                if i == 0:\n                    if j == 0:\n                        if grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                elif i == n-1:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                else:\n                    if j == 0:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n                    elif j == m-1:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\':\n                            grid[i][j] = \'E\'\n                    else:\n                        if grid[i-1][j] == \'.\' or grid[i+1][j] == \'.\' or grid[i][j-1] == \'.\' or grid[i][j+1] == \'.\':\n                            grid[i][j] = \'E\'\n    for i in range(n):\n        print(\'\'.join(grid[i]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 15:01:52.186608 size on output set 6
2022-04-16 15:01:52.186621 num operations 1
2022-04-16 15:01:52.186627 size on input set 1
2022-04-16 15:02:07.619540 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + \"E\" + grid[i][j + 1 :]\n                if i > 0 and grid[i - 1][j] == \".\":\n                    grid[i - 1] = grid[i - 1][:j] + \"E\" + grid[i - 1][j + 1 :]\n                if j > 0 and grid[i][j - 1] == \".\":\n                    grid[i] = grid[i][:j - 1] + \"E\" + grid[i][j :]\n                if i < n - 1 and grid[i + 1][j] == \".\":\n                    grid[i + 1] = grid[i + 1][:j] + \"E\" + grid[i + 1][j + 1 :]\n                if j < m - 1 and grid[i][j + 1] == \".\":\n                    grid[i] = grid[i][:j + 1] + \"E\" + grid[i][j + 2 :]\n    for i in range(n):\n        print(grid[i])\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n                for i in range(n):\n                    print(grid[i])\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j + 1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i - 1] = grid[i - 1][:j] + 'E' + grid[i - 1][j + 1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j - 1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i + 1] = grid[i + 1][:j] + 'E' + grid[i + 1][j + 1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j + 1] + 'E' + grid[i][j + 2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650121312,
  "object": "edit"
}
2022-04-16 15:02:07.619805 NO RESULT
2022-04-16 15:02:07.619813 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-16 15:02:07.620009 fix syntax errors 8 ['import sys\n\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'.\':\n                grid[i] = grid[i][:j] + "E" + grid[i][j + 1 :]\n                if i > 0 and grid[i - 1][j] == ".":\n                    grid[i - 1] = grid[i - 1][:j] + "E" + grid[i - 1][j + 1 :]\n                if j > 0 and grid[i][j - 1] == ".":\n                    grid[i] = grid[i][:j - 1] + "E" + grid[i][j :]\n                if i < n - 1 and grid[i + 1][j] == ".":\n                    grid[i + 1] = grid[i + 1][:j] + "E" + grid[i + 1][j + 1 :]\n                if j < m - 1 and grid[i][j + 1] == ".":\n                    grid[i] = grid[i][:j + 1] + "E" + grid[i][j + 2 :]\n    for i in range(n):\n        print(grid[i])\n\n\nmain()\n', "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n                for i in range(n):\n                    print(grid[i])\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j + 1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i - 1] = grid[i - 1][:j] + 'E' + grid[i - 1][j + 1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j - 1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i + 1] = grid[i + 1][:j] + 'E' + grid[i + 1][j + 1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j + 1] + 'E' + grid[i][j + 2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + 'E' + grid[i-1][j+1:]\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + 'E' + grid[i][j:]\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + 'E' + grid[i+1][j+1:]\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + 'E' + grid[i][j+2:]\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:02:07.620086 size on output set 6
2022-04-16 15:02:07.620096 num operations 1
2022-04-16 15:02:07.620101 size on input set 1
2022-04-16 15:02:20.139995 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') or \\\n               (i < n-1 and output[i+1][j] != 'E') or \\\n               (j > 0 and output[i][j-1] != 'E') or \\\n               (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and (i < n-1 and output[i+1][j] != 'E') and (j > 0 and output[i][j-1] != 'E') and (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i - 1][j] != 'E') and \\\n               (i < n - 1 and output[i + 1][j] != 'E') and \\\n               (j > 0 and output[i][j - 1] != 'E') and \\\n               (j < m - 1 and output[i][j + 1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E' and grid[i-1][j] != '#') and \\\n               (i < n-1 and output[i+1][j] != 'E' and grid[i+1][j] != '#') and \\\n               (j > 0 and output[i][j-1] != 'E' and grid[i][j-1] != '#') and \\\n               (j < m-1 and output[i][j+1] != 'E' and grid[i][j+1] != '#'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and \\\n               (i < n-1 and output[i+1][j] != 'E') and \\\n               (j > 0 and output[i][j-1] != 'E') and \\\n               (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and \\\n               (i < n-1 and output[i+1][j] != 'E') and \\\n               (j > 0 and output[i][j-1] != 'E') and \\\n               (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n    sys.stdout.flush()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": " \nimport sys\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        if i == 0:\n            print(\"Hello World\")\n        else:\n            a = int(input())\n            b = int(input())\n            print(a+b)\n \nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and (i < n-1 and output[i+1][j] != 'E') and (j > 0 and output[i][j-1] != 'E') and (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and (i < n-1 and output[i+1][j] != 'E') and (j > 0 and output[i][j-1] != 'E') and (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650121327,
  "object": "edit"
}
2022-04-16 15:02:20.140358 fix syntax errors 9 ["\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') or \\\n               (i < n-1 and output[i+1][j] != 'E') or \\\n               (j > 0 and output[i][j-1] != 'E') or \\\n               (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and (i < n-1 and output[i+1][j] != 'E') and (j > 0 and output[i][j-1] != 'E') and (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i - 1][j] != 'E') and \\\n               (i < n - 1 and output[i + 1][j] != 'E') and \\\n               (j > 0 and output[i][j - 1] != 'E') and \\\n               (j < m - 1 and output[i][j + 1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E' and grid[i-1][j] != '#') and \\\n               (i < n-1 and output[i+1][j] != 'E' and grid[i+1][j] != '#') and \\\n               (j > 0 and output[i][j-1] != 'E' and grid[i][j-1] != '#') and \\\n               (j < m-1 and output[i][j+1] != 'E' and grid[i][j+1] != '#'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and \\\n               (i < n-1 and output[i+1][j] != 'E') and \\\n               (j > 0 and output[i][j-1] != 'E') and \\\n               (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and \\\n               (i < n-1 and output[i+1][j] != 'E') and \\\n               (j > 0 and output[i][j-1] != 'E') and \\\n               (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n    sys.stdout.flush()\n\nif __name__ == '__main__':\n    main()\n", ' \nimport sys\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        if i == 0:\n            print("Hello World")\n        else:\n            a = int(input())\n            b = int(input())\n            print(a+b)\n \nif __name__ == \'__main__\':\n    main()\n', "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and (i < n-1 and output[i+1][j] != 'E') and (j > 0 and output[i][j-1] != 'E') and (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline() for _ in range(n)]\n    output = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            # place shop if no shop in adjacent cells\n            if (i > 0 and output[i-1][j] != 'E') and (i < n-1 and output[i+1][j] != 'E') and (j > 0 and output[i][j-1] != 'E') and (j < m-1 and output[i][j+1] != 'E'):\n                output[i][j] = 'E'\n    for row in output:\n        sys.stdout.write(''.join(row))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:02:20.140458 size on output set 8
2022-04-16 15:02:20.140471 num operations 1
2022-04-16 15:02:20.140476 size on input set 1
2022-04-16 15:02:35.235489 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print (''.join(row))\n"
    },
    {
      "index": 1,
      "text": "\na = [1, 2, 3]\nb = a\na[0] = 10\nprint b\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print ''.join(row)\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print(''.join(row))\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom sys import stdin, stdout\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    stdout.write(''.join(row))\n    stdout.write('\\n')\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print(''.join(row))\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i - 1][j] == '.':\n                grid[i - 1][j] = '#'\n            if i < n - 1 and grid[i + 1][j] == '.':\n                grid[i + 1][j] = '#'\n            if j > 0 and grid[i][j - 1] == '.':\n                grid[i][j - 1] = '#'\n            if j < m - 1 and grid[i][j + 1] == '.':\n                grid[i][j + 1] = '#'\n\nfor row in grid:\n    print ''.join(row)\n"
    },
    {
      "index": 7,
      "text": "from sys import stdin\nfrom collections import deque\n\n\ndef bfs(grid, start):\n    n, m = len(grid), len(grid[0])\n    queue = deque([start])\n    grid[start[0]][start[1]] = '#'\n    while queue:\n        r, c = queue.popleft()\n        for dr, dc in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == '.':\n                grid[nr][nc] = '#'\n                queue.append((nr, nc))\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for _ in range(n)]\n\nfor r in range(n):\n    for c in range(m):\n        if grid[r][c] == '.':\n            grid[r][c] = 'E'\n            bfs(grid, (r, c))\n            break\n\nfor row in grid:\n    print ''.join(row)\n"
    },
    {
      "index": 8,
      "text": "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print(''.join(row))\n"
    }
  ],
  "created": 1650121340,
  "object": "edit"
}
2022-04-16 15:02:35.235802 fix syntax errors 9 ["\nfrom sys import stdin\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print (''.join(row))\n", '\na = [1, 2, 3]\nb = a\na[0] = 10\nprint b\n', "\nfrom sys import stdin\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print ''.join(row)\n", "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nfrom sys import stdin, stdout\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    stdout.write(''.join(row))\n    stdout.write('\\n')\n", "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i - 1][j] == '.':\n                grid[i - 1][j] = '#'\n            if i < n - 1 and grid[i + 1][j] == '.':\n                grid[i + 1][j] = '#'\n            if j > 0 and grid[i][j - 1] == '.':\n                grid[i][j - 1] = '#'\n            if j < m - 1 and grid[i][j + 1] == '.':\n                grid[i][j + 1] = '#'\n\nfor row in grid:\n    print ''.join(row)\n", "from sys import stdin\nfrom collections import deque\n\n\ndef bfs(grid, start):\n    n, m = len(grid), len(grid[0])\n    queue = deque([start])\n    grid[start[0]][start[1]] = '#'\n    while queue:\n        r, c = queue.popleft()\n        for dr, dc in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == '.':\n                grid[nr][nc] = '#'\n                queue.append((nr, nc))\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for _ in range(n)]\n\nfor r in range(n):\n    for c in range(m):\n        if grid[r][c] == '.':\n            grid[r][c] = 'E'\n            bfs(grid, (r, c))\n            break\n\nfor row in grid:\n    print ''.join(row)\n", "\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\ngrid = [list(stdin.readline().strip()) for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '.':\n            grid[i][j] = 'E'\n            if i > 0 and grid[i-1][j] == '.':\n                grid[i-1][j] = '#'\n            if i < n-1 and grid[i+1][j] == '.':\n                grid[i+1][j] = '#'\n            if j > 0 and grid[i][j-1] == '.':\n                grid[i][j-1] = '#'\n            if j < m-1 and grid[i][j+1] == '.':\n                grid[i][j+1] = '#'\n\nfor row in grid:\n    print(''.join(row))\n"]
2022-04-16 15:02:35.235868 size on output set 7
2022-04-16 15:02:35.235885 num operations 1
2022-04-16 15:02:35.235891 size on input set 1
2022-04-16 15:03:18.171773 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#from sys import stdin\n#from collections import deque\n\n#n, m = map(int, stdin.readline().split())\n#grid = []\n#for _ in range(n):\n#    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\n#q = deque()\n#q.append((0, 0))\n#while q:\n#    i, j = q.popleft()\n#    if grid[i][j] == '.':\n#        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n#        if i > 0 and grid[i-1][j] == '.':\n#            q.append((i-1, j))\n#        if j > 0 and grid[i][j-1] == '.':\n#            q.append((i, j-1))\n#        if i < n-1 and grid[i+1][j] == '.':\n#            q.append((i+1, j))\n#        if j < m-1 and grid[i][j+1] == '.':\n#            q.append((i, j+1))\n\n#print(*grid, sep='\\n')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().rstrip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n\n\n\n# from sys import stdin\n# from collections import deque\n\n# n, m = map(int, stdin.readline().split())\n# grid = []\n# for _ in range(n):\n#     grid.append(stdin.readline().strip())\n\n# # Breadth-first search\n# # We start from the first land cell and place a coffee shop there.\n# # Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# # and add them to the queue. We repeat this process until the queue is empty.\n# q = deque()\n# q.append((0, 0))\n# while q:\n#     i, j = q.popleft()\n#     if grid[i][j] == '.':\n#         grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n#         if i > 0 and grid[i-1][j] == '.':\n#             q.append((i-1, j))\n#         if j > 0 and grid[i][j-1] == '.':\n#             q.append((i, j-1))\n#         if i < n-1 and grid[i+1][j] == '.':\n#             q.append((i+1, j))\n#         if j < m-1 and grid[i][j+1] == '.':\n#             q.append((i, j+1))\n\n# print(*grid, sep='\\n')\n"
    },
    {
      "index": 3,
      "text": "\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n"
    },
    {
      "index": 4,
      "text": "\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j + 1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i - 1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j - 1))\n        if i < n - 1 and grid[i + 1][j] == '.':\n            q.append((i + 1, j))\n        if j < m - 1 and grid[i][j + 1] == '.':\n            q.append((i, j + 1))\n\nprint(*grid, sep='\\n')\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop\n# there and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint('\\n'.join(grid))\n"
    },
    {
      "index": 8,
      "text": "\n\nfrom sys import stdin, stdout\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nstdout.write('\\n'.join(grid))\n"
    }
  ],
  "created": 1650121355,
  "object": "edit"
}
2022-04-16 15:03:18.172153 fix syntax errors 9 ["\n\n#from sys import stdin\n#from collections import deque\n\n#n, m = map(int, stdin.readline().split())\n#grid = []\n#for _ in range(n):\n#    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\n#q = deque()\n#q.append((0, 0))\n#while q:\n#    i, j = q.popleft()\n#    if grid[i][j] == '.':\n#        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n#        if i > 0 and grid[i-1][j] == '.':\n#            q.append((i-1, j))\n#        if j > 0 and grid[i][j-1] == '.':\n#            q.append((i, j-1))\n#        if i < n-1 and grid[i+1][j] == '.':\n#            q.append((i+1, j))\n#        if j < m-1 and grid[i][j+1] == '.':\n#            q.append((i, j+1))\n\n#print(*grid, sep='\\n')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().rstrip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n\n\n\n# from sys import stdin\n# from collections import deque\n\n# n, m = map(int, stdin.readline().split())\n# grid = []\n# for _ in range(n):\n#     grid.append(stdin.readline().strip())\n\n# # Breadth-first search\n# # We start from the first land cell and place a coffee shop there.\n# # Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# # and add them to the queue. We repeat this process until the queue is empty.\n# q = deque()\n# q.append((0, 0))\n# while q:\n#     i, j = q.popleft()\n#     if grid[i][j] == '.':\n#         grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n#         if i > 0 and grid[i-1][j] == '.':\n#             q.append((i-1, j))\n#         if j > 0 and grid[i][j-1] == '.':\n#             q.append((i, j-1))\n#         if i < n-1 and grid[i+1][j] == '.':\n#             q.append((i+1, j))\n#         if j < m-1 and grid[i][j+1] == '.':\n#             q.append((i, j+1))\n\n# print(*grid, sep='\\n')\n", "\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n", "\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j + 1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i - 1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j - 1))\n        if i < n - 1 and grid[i + 1][j] == '.':\n            q.append((i + 1, j))\n        if j < m - 1 and grid[i][j + 1] == '.':\n            q.append((i, j + 1))\n\nprint(*grid, sep='\\n')\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop\n# there and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint(*grid, sep='\\n')\n", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nprint('\\n'.join(grid))\n", "\n\nfrom sys import stdin, stdout\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\ngrid = []\nfor _ in range(n):\n    grid.append(stdin.readline().strip())\n\n# Breadth-first search\n# We start from the first land cell and place a coffee shop there.\n# Then we check all the adjacent cells. If they are land cells, we place a coffee shop there\n# and add them to the queue. We repeat this process until the queue is empty.\nq = deque()\nq.append((0, 0))\nwhile q:\n    i, j = q.popleft()\n    if grid[i][j] == '.':\n        grid[i] = grid[i][:j] + 'E' + grid[i][j+1:]\n        if i > 0 and grid[i-1][j] == '.':\n            q.append((i-1, j))\n        if j > 0 and grid[i][j-1] == '.':\n            q.append((i, j-1))\n        if i < n-1 and grid[i+1][j] == '.':\n            q.append((i+1, j))\n        if j < m-1 and grid[i][j+1] == '.':\n            q.append((i, j+1))\n\nstdout.write('\\n'.join(grid))\n"]
2022-04-16 15:03:18.172273 size on output set 8
2022-04-16 15:03:18.172284 num operations 1
2022-04-16 15:03:18.172289 size on input set 1
2022-04-16 15:03:37.504067 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import deque\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "from collections import deque\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if 0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]:\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)] \n    visited = [[False] * m for _ in range(n)]\n\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\nfrom collections import deque\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline().rstrip() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n \nfrom collections import deque\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    dq = deque()\n    dq.append((0, 0))\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        if grid[row][col] == '.':\n            for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n                if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                    dq.append((x, y))\n                    visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        m, n = [int(x) for x in input().split()]\n        grid = [input() for _ in range(m)]\n        visited = [[False] * n for _ in range(m)]\n        dq = deque()\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '.':\n                    visited[i][j] = True\n                    dq.append((i, j))\n                    break\n            if len(dq) > 0:\n                break\n        while len(dq) > 0:\n            row, col = dq.popleft()\n            for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n                if (0 <= x < m and 0 <= y < n and grid[x][y] == '.' and not visited[x][y]):\n                    dq.append((x, y))\n                    visited[x][y] = True\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '.':\n                    grid[i][j] = 'E'\n        for i in range(m):\n            print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nfrom collections import deque\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    dq.append((0, 0))\n    visited[0][0] = True\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650121398,
  "object": "edit"
}
2022-04-16 15:03:37.504414 fix syntax errors 9 ["\n\nfrom collections import deque\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "from collections import deque\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if 0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]:\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)] \n    visited = [[False] * m for _ in range(n)]\n\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import deque\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline().rstrip() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "\n \nfrom collections import deque\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    dq = deque()\n    dq.append((0, 0))\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        if grid[row][col] == '.':\n            for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n                if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                    dq.append((x, y))\n                    visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                visited[i][j] = True\n                dq.append((i, j))\n                break\n        if len(dq) > 0:\n            break\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        m, n = [int(x) for x in input().split()]\n        grid = [input() for _ in range(m)]\n        visited = [[False] * n for _ in range(m)]\n        dq = deque()\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '.':\n                    visited[i][j] = True\n                    dq.append((i, j))\n                    break\n            if len(dq) > 0:\n                break\n        while len(dq) > 0:\n            row, col = dq.popleft()\n            for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n                if (0 <= x < m and 0 <= y < n and grid[x][y] == '.' and not visited[x][y]):\n                    dq.append((x, y))\n                    visited[x][y] = True\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '.':\n                    grid[i][j] = 'E'\n        for i in range(m):\n            print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import deque\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = [input() for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    dq = deque()\n    dq.append((0, 0))\n    visited[0][0] = True\n    while len(dq) > 0:\n        row, col = dq.popleft()\n        for x, y in ((row - 1, col), (row, col - 1), (row, col + 1), (row + 1, col)):\n            if (0 <= x < n and 0 <= y < m and grid[x][y] == '.' and not visited[x][y]):\n                dq.append((x, y))\n                visited[x][y] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n    for i in range(n):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:03:37.504498 size on output set 9
2022-04-16 15:03:37.504510 num operations 1
2022-04-16 15:03:37.504516 size on input set 1
2022-04-16 15:03:50.066501 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # This is the main function.\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Read in the first line.\n    line = raw_input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = raw_input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Read in the first line.\n    line = input()\n    line = line.split( )\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input( )\n        grid.append(list(line) )\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.' :\n                if row == 0:\n                    if grid[row+1][col] == '.' :\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.' :\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.' :\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.' :\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.' :\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.' :\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Read in the first line.\n    line = input()\n    line = line.strip().split()\n    n, m = int(line[0]), int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):  # noqa: F841\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):  # noqa\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row + 1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row - 1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row - 1][col] == '.' or grid[row + 1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col + 1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col - 1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col - 1] == '.' or grid[row][col + 1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n\n    # Read in the first line.\n    line = raw_input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = raw_input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    # This is the main function.\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"
    }
  ],
  "created": 1650121417,
  "object": "edit"
}
2022-04-16 15:03:50.068277 fix syntax errors 9 ["\n\ndef main():\n    # This is the main function.\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n", '\n\ndef main():\n    """\n    This is the main function.\n    """\n\n    # Read in the first line.\n    line = raw_input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = raw_input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \'.\':\n                if row == 0:\n                    if grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                elif row == n-1:\n                    if grid[row-1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row-1][col] == \'.\' or grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n\n                if col == 0:\n                    if grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n                elif col == m-1:\n                    if grid[row][col-1] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row][col-1] == \'.\' or grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end=\'\')\n        print()\n\nmain()\n', '\n\ndef main():\n    """\n    This is the main function.\n    """\n\n    # Read in the first line.\n    line = input()\n    line = line.split( )\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input( )\n        grid.append(list(line) )\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \'.\' :\n                if row == 0:\n                    if grid[row+1][col] == \'.\' :\n                        grid[row][col] = \'E\'\n                elif row == n-1:\n                    if grid[row-1][col] == \'.\' :\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row-1][col] == \'.\' or grid[row+1][col] == \'.\' :\n                        grid[row][col] = \'E\'\n\n                if col == 0:\n                    if grid[row][col+1] == \'.\' :\n                        grid[row][col] = \'E\'\n                elif col == m-1:\n                    if grid[row][col-1] == \'.\' :\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row][col-1] == \'.\' or grid[row][col+1] == \'.\' :\n                        grid[row][col] = \'E\'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end=\'\')\n        print()\n\nmain()\n', '\n\ndef main():\n    """\n    This is the main function.\n    """\n\n    # Read in the first line.\n    line = input()\n    line = line.strip().split()\n    n, m = int(line[0]), int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \'.\':\n                if row == 0:\n                    if grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                elif row == n-1:\n                    if grid[row-1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row-1][col] == \'.\' or grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n\n                if col == 0:\n                    if grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n                elif col == m-1:\n                    if grid[row][col-1] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row][col-1] == \'.\' or grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end=\'\')\n        print()\n\nmain()\n', '\n\ndef main():\n    """\n    This is the main function.\n    """\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):  # noqa: F841\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \'.\':\n                if row == 0:\n                    if grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                elif row == n-1:\n                    if grid[row-1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row-1][col] == \'.\' or grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n\n                if col == 0:\n                    if grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n                elif col == m-1:\n                    if grid[row][col-1] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row][col-1] == \'.\' or grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end=\'\')\n        print()\n\nmain()\n', '\n\ndef main():\n    """\n    This is the main function.\n    """\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):  # noqa\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \'.\':\n                if row == 0:\n                    if grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                elif row == n-1:\n                    if grid[row-1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row-1][col] == \'.\' or grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n\n                if col == 0:\n                    if grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n                elif col == m-1:\n                    if grid[row][col-1] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row][col-1] == \'.\' or grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end=\'\')\n        print()\n\nmain()\n', '\n\ndef main():\n    """\n    This is the main function.\n    """\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \'.\':\n                if row == 0:\n                    if grid[row + 1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                elif row == n-1:\n                    if grid[row - 1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row - 1][col] == \'.\' or grid[row + 1][col] == \'.\':\n                        grid[row][col] = \'E\'\n\n                if col == 0:\n                    if grid[row][col + 1] == \'.\':\n                        grid[row][col] = \'E\'\n                elif col == m-1:\n                    if grid[row][col - 1] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row][col - 1] == \'.\' or grid[row][col + 1] == \'.\':\n                        grid[row][col] = \'E\'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end=\'\')\n        print()\n\nmain()\n', '\ndef main():\n    """\n    This is the main function.\n    """\n\n    # Read in the first line.\n    line = raw_input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = raw_input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == \'.\':\n                if row == 0:\n                    if grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                elif row == n-1:\n                    if grid[row-1][col] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row-1][col] == \'.\' or grid[row+1][col] == \'.\':\n                        grid[row][col] = \'E\'\n\n                if col == 0:\n                    if grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n                elif col == m-1:\n                    if grid[row][col-1] == \'.\':\n                        grid[row][col] = \'E\'\n                else:\n                    if grid[row][col-1] == \'.\' or grid[row][col+1] == \'.\':\n                        grid[row][col] = \'E\'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end=\'\')\n        print()\n\nmain()\n', "\n\ndef main():\n    # This is the main function.\n\n    # Read in the first line.\n    line = input()\n    line = line.split()\n    n = int(line[0])\n    m = int(line[1])\n\n    # Read in the rest of the lines.\n    grid = []\n    for _ in range(n):\n        line = input()\n        grid.append(list(line))\n\n    # Go through each cell and determine whether or not it should be a coffee shop.\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '.':\n                if row == 0:\n                    if grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n                elif row == n-1:\n                    if grid[row-1][col] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row-1][col] == '.' or grid[row+1][col] == '.':\n                        grid[row][col] = 'E'\n\n                if col == 0:\n                    if grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n                elif col == m-1:\n                    if grid[row][col-1] == '.':\n                        grid[row][col] = 'E'\n                else:\n                    if grid[row][col-1] == '.' or grid[row][col+1] == '.':\n                        grid[row][col] = 'E'\n\n    # Print out the grid.\n    for row in range(n):\n        for col in range(m):\n            print(grid[row][col], end='')\n        print()\n\nmain()\n"]
2022-04-16 15:03:50.068493 size on output set 8
2022-04-16 15:03:50.068555 num operations 1
2022-04-16 15:03:50.068575 size on input set 1
2022-04-16 15:04:14.184057 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E' or i < n-1 and grid[i+1][j] == 'E' or j > 0 and grid[i][j-1] == 'E' or j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E' or i < n-1 and grid[i+1][j] == 'E' or j > 0 and grid[i][j-1] == 'E' or j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n,m=map(int,sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n): grid.append(list(sys.stdin.readline().strip()))\n    for i in range(n): \n        for j in range(m): \n            if grid[i][j]=='.': \n                #Check if adjacent to a coffee shop\n                if i>0 and grid[i-1][j]=='E': grid[i][j]='E'\n                elif i<n-1 and grid[i+1][j]=='E': grid[i][j]='E'\n                elif j>0 and grid[i][j-1]=='E': grid[i][j]='E'\n                elif j<m-1 and grid[i][j+1]=='E': grid[i][j]='E'\n    for i in range(n): \n        for j in range(m): \n            if grid[i][j]=='E': \n                #Check if adjacent to another coffee shop\n                if i>0 and grid[i-1][j]=='E': grid[i][j]='.'\n                elif i<n-1 and grid[i+1][j]=='E': grid[i][j]='.'\n                elif j>0 and grid[i][j-1]=='E': grid[i][j]='.'\n                elif j<m-1 and grid[i][j+1]=='E': grid[i][j]='.'\n    for i in range(n): \n        for j in range(m): \n            sys.stdout.write(grid[i][j]) \n        sys.stdout.write('\\n')\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            print(grid[i][j], end = '')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if (i > 0 and grid[i-1][j] == 'E') or \\\n                   (i < n-1 and grid[i+1][j] == 'E') or \\\n                   (j > 0 and grid[i][j-1] == 'E') or \\\n                   (j < m-1 and grid[i][j+1] == 'E'):\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if (i > 0 and grid[i-1][j] == 'E') or \\\n                   (i < n-1 and grid[i+1][j] == 'E') or \\\n                   (j > 0 and grid[i][j-1] == 'E') or \\\n                   (j < m-1 and grid[i][j+1] == 'E'):\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in xrange(n):\n        for j in xrange(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in xrange(n):\n        for j in xrange(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650121430,
  "object": "edit"
}
2022-04-16 15:04:14.184417 fix syntax errors 9 ["\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E' or i < n-1 and grid[i+1][j] == 'E' or j > 0 and grid[i][j-1] == 'E' or j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E' or i < n-1 and grid[i+1][j] == 'E' or j > 0 and grid[i][j-1] == 'E' or j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n,m=map(int,sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n): grid.append(list(sys.stdin.readline().strip()))\n    for i in range(n): \n        for j in range(m): \n            if grid[i][j]=='.': \n                #Check if adjacent to a coffee shop\n                if i>0 and grid[i-1][j]=='E': grid[i][j]='E'\n                elif i<n-1 and grid[i+1][j]=='E': grid[i][j]='E'\n                elif j>0 and grid[i][j-1]=='E': grid[i][j]='E'\n                elif j<m-1 and grid[i][j+1]=='E': grid[i][j]='E'\n    for i in range(n): \n        for j in range(m): \n            if grid[i][j]=='E': \n                #Check if adjacent to another coffee shop\n                if i>0 and grid[i-1][j]=='E': grid[i][j]='.'\n                elif i<n-1 and grid[i+1][j]=='E': grid[i][j]='.'\n                elif j>0 and grid[i][j-1]=='E': grid[i][j]='.'\n                elif j<m-1 and grid[i][j+1]=='E': grid[i][j]='.'\n    for i in range(n): \n        for j in range(m): \n            sys.stdout.write(grid[i][j]) \n        sys.stdout.write('\\n')\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            print(grid[i][j], end = '')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if (i > 0 and grid[i-1][j] == 'E') or \\\n                   (i < n-1 and grid[i+1][j] == 'E') or \\\n                   (j > 0 and grid[i][j-1] == 'E') or \\\n                   (j < m-1 and grid[i][j+1] == 'E'):\n                    grid[i][j] = 'E'\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if (i > 0 and grid[i-1][j] == 'E') or \\\n                   (i < n-1 and grid[i+1][j] == 'E') or \\\n                   (j > 0 and grid[i][j-1] == 'E') or \\\n                   (j < m-1 and grid[i][j+1] == 'E'):\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline().strip()))\n\n    for i in xrange(n):\n        for j in xrange(m):\n            if grid[i][j] == '.':\n                # Check if adjacent to a coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = 'E'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = 'E'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = 'E'\n\n    for i in xrange(n):\n        for j in xrange(m):\n            if grid[i][j] == 'E':\n                # Check if adjacent to another coffee shop\n                if i > 0 and grid[i-1][j] == 'E':\n                    grid[i][j] = '.'\n                elif i < n-1 and grid[i+1][j] == 'E':\n                    grid[i][j] = '.'\n                elif j > 0 and grid[i][j-1] == 'E':\n                    grid[i][j] = '.'\n                elif j < m-1 and grid[i][j+1] == 'E':\n                    grid[i][j] = '.'\n\n    for i in range(n):\n        for j in range(m):\n            sys.stdout.write(grid[i][j])\n        sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 15:04:14.184546 size on output set 6
