2022-04-16 08:47:20.792793 num operations 1
2022-04-16 08:47:20.792813 size on input set 1
2022-04-16 08:47:29.653089 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1], end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n, a, b = int(input()), [int(x) for x in input().split()], [0, 0]\n        for j in range(n):\n            if j % 2 == 0: b[0] += a[j]\n            else: b[1] += a[j]\n        print(n, b[0], b[1])\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    # sys.stdin = open(\"input.txt\", \"r\")\n    # sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\nimport sys\n\ndef main():\n    sys.stdin = open(\"input.txt\", \"r\")\n    sys.stdout = open(\"output.txt\", \"w\")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j] * a[j]\n            else:\n                b[1] += a[j] * a[j]\n        print(n, b[0], b[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650098840,
  "object": "edit"
}
2022-04-16 08:47:29.653375 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1], end=" ")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n, a, b = int(input()), [int(x) for x in input().split()], [0, 0]\n        for j in range(n):\n            if j % 2 == 0: b[0] += a[j]\n            else: b[1] += a[j]\n        print(n, b[0], b[1])\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # sys.stdin = open("input.txt", "r")\n    # sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j]\n            else:\n                b[1] += a[j]\n        print(n, b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    sys.stdin = open("input.txt", "r")\n    sys.stdout = open("output.txt", "w")\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        b = [0, 0]\n        for j in range(n):\n            if j % 2 == 0:\n                b[0] += a[j] * a[j]\n            else:\n                b[1] += a[j] * a[j]\n        print(n, b[0], b[1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 08:47:29.653502 size on output set 7
2022-04-16 08:47:29.653514 num operations 1
2022-04-16 08:47:29.653519 size on input set 1
2022-04-16 08:47:47.851246 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)\n    assert candy_game([1, 1, 1]) == (2, 1, 2)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46)\n    assert candy_game([2, 1]) == (2, 2, 1)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef test_candy_game(candy_sizes):\n    assert candy_game(candy_sizes) == (6, 23, 21)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)\n    assert candy_game([1, 1, 1]) == (2, 1, 2)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 44)\n    assert candy_game([2, 1]) == (2, 2, 1)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 2)\n\ndef candy_game(candy_sizes):\n    alice_score, bob_score = 0, 0\n    alice_turn = True\n    moves = 0 \n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score or bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef test_candy_game():\n    assert candy_game(\n        [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    ) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)  # noqa: E501\n    assert candy_game([1, 1, 1]) == (2, 1, 2)  # noqa: E501\n    assert candy_game(\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    ) == (6, 45, 46)  # noqa: E501\n    assert candy_game([2, 1]) == (2, 2, 1)  # noqa: E501\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)  # noqa: E501\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3)  # noqa: E501\n\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21), \"test 1\"\n    assert candy_game([1000]) == (1, 1000, 0), \"test 2\"\n    assert candy_game([1, 1, 1]) == (2, 1, 2), \"test 3\"\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46), \"test 4\"\n    assert candy_game([2, 1]) == (2, 2, 1), \"test 5\"\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2), \"test 6\"\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3), \"test 7\"\n\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 6, 23, 21\n    assert candy_game([1000]) == 1, 1000, 0\n    assert candy_game([1, 1, 1]) == 2, 1, 2\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 6, 45, 46\n    assert candy_game([2, 1]) == 2, 2, 1\n    assert candy_game([1, 1, 1, 1, 1, 1]) == 3, 4, 2\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == 4, 4, 3\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return moves, alice_score, bob_score\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef test_game():\n    pass\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21, True)\n    assert candy_game([1000]) == (1, 1000, 0, True)\n    assert candy_game([1, 1, 1]) == (2, 1, 2, False)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46, True)\n    assert candy_game([2, 1]) == (2, 2, 1, True)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2, False)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3, True)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score, alice_turn)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob, alice_turn = candy_game(candy_sizes)\n        print(moves, alice, bob, alice_turn)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650098849,
  "object": "edit"
}
2022-04-16 08:47:47.851631 fix syntax errors 9 ['\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)\n    assert candy_game([1, 1, 1]) == (2, 1, 2)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46)\n    assert candy_game([2, 1]) == (2, 2, 1)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\nif __name__ == "__main__":\n    main()\n', '\ndef test_candy_game(candy_sizes):\n    assert candy_game(candy_sizes) == (6, 23, 21)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)\n    assert candy_game([1, 1, 1]) == (2, 1, 2)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 44)\n    assert candy_game([2, 1]) == (2, 2, 1)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 2)\n\ndef candy_game(candy_sizes):\n    alice_score, bob_score = 0, 0\n    alice_turn = True\n    moves = 0 \n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score or bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef test_candy_game():\n    assert candy_game(\n        [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    ) == (6, 23, 21)\n    assert candy_game([1000]) == (1, 1000, 0)  # noqa: E501\n    assert candy_game([1, 1, 1]) == (2, 1, 2)  # noqa: E501\n    assert candy_game(\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    ) == (6, 45, 46)  # noqa: E501\n    assert candy_game([2, 1]) == (2, 2, 1)  # noqa: E501\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2)  # noqa: E501\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3)  # noqa: E501\n\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21), "test 1"\n    assert candy_game([1000]) == (1, 1000, 0), "test 2"\n    assert candy_game([1, 1, 1]) == (2, 1, 2), "test 3"\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46), "test 4"\n    assert candy_game([2, 1]) == (2, 2, 1), "test 5"\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2), "test 6"\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3), "test 7"\n\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score)\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 6, 23, 21\n    assert candy_game([1000]) == 1, 1000, 0\n    assert candy_game([1, 1, 1]) == 2, 1, 2\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 6, 45, 46\n    assert candy_game([2, 1]) == 2, 2, 1\n    assert candy_game([1, 1, 1, 1, 1, 1]) == 3, 4, 2\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == 4, 4, 3\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return moves, alice_score, bob_score\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob = candy_game(candy_sizes)\n        print(moves, alice, bob)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef test_game():\n    pass\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef test_candy_game():\n    assert candy_game([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == (6, 23, 21, True)\n    assert candy_game([1000]) == (1, 1000, 0, True)\n    assert candy_game([1, 1, 1]) == (2, 1, 2, False)\n    assert candy_game([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (6, 45, 46, True)\n    assert candy_game([2, 1]) == (2, 2, 1, True)\n    assert candy_game([1, 1, 1, 1, 1, 1]) == (3, 4, 2, False)\n    assert candy_game([1, 1, 1, 1, 1, 1, 1]) == (4, 4, 3, True)\n\ndef candy_game(candy_sizes):\n    alice_score = 0\n    bob_score = 0\n    alice_turn = True\n    moves = 0\n    while len(candy_sizes) > 0:\n        if alice_turn:\n            alice_score += candy_sizes[0]\n            candy_sizes.pop(0)\n        else:\n            bob_score += candy_sizes[-1]\n            candy_sizes.pop()\n        if alice_score > bob_score:\n            alice_turn = not alice_turn\n            moves += 1\n        elif bob_score > alice_score:\n            alice_turn = not alice_turn\n            moves += 1\n    return (moves, alice_score, bob_score, alice_turn)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        candy_sizes = list(map(int, input().split()))\n        moves, alice, bob, alice_turn = candy_game(candy_sizes)\n        print(moves, alice, bob, alice_turn)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 08:47:47.851742 size on output set 9
