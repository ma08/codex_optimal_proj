2022-04-16 13:49:58.883782 num operations 1
2022-04-16 13:49:58.883924 size on input set 1
2022-04-16 13:50:09.519603 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")\n                return\n        if layer == 0:\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef check(h, w, bricks):\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == len(bricks):\n                return True\n        if layer == 0:\n            return False\n    return False\n\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    if check(h, w, bricks):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for i in range(h):\n        layer = 0\n        while layer + bricks[j] <= w:\n            layer += bricks[j]\n            j += 1\n            if j == n:\n                print(\"YES\")\n                return\n        if layer == 0:\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    index = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[index] <= w:\n            layer += bricks[index]\n            index += 1\n            if index == n:\n                print(\"YES\")\n                return\n        if layer == 0:\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i, layer = 0, 0\n    for _ in range(h):\n        while layer + bricks[i] <= w:\n            if layer == w:\n                layer = 0\n                break\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")\n                return\n        if layer != 0:\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())  # \u4e00\u884c\u76ee\u3092\u53d6\u5f97\n    bricks = list(map(int, input().split()))  # \u4e8c\u884c\u76ee\u3092\u53d6\u5f97\n    i = 0\n    for _ in range(h):\n        layer = 0  # \u5c64\u3092\u521d\u671f\u5316\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")\n                return\n        if layer == 0:  # \u3053\u306e\u5c64\u306b\u7a4d\u3081\u308b\u30d6\u30ed\u30c3\u30af\u304c\u306a\u3044\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())  # input\n    bricks = list(map(int, input().split()))  # input\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")  # output\n                return\n        if layer == 0:\n            print(\"NO\")  # output\n            return\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\ndef main():\n    h, w, n = list(map(int, input().split()))\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")\n                return\n        if layer == 0:\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650116999,
  "object": "edit"
}
2022-04-16 13:50:09.519905 fix syntax errors 9 ['\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print("YES")\n                return\n        if layer == 0:\n            print("NO")\n            return\n    print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef check(h, w, bricks):\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == len(bricks):\n                return True\n        if layer == 0:\n            return False\n    return False\n\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    if check(h, w, bricks):\n        print("YES")\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for i in range(h):\n        layer = 0\n        while layer + bricks[j] <= w:\n            layer += bricks[j]\n            j += 1\n            if j == n:\n                print("YES")\n                return\n        if layer == 0:\n            print("NO")\n            return\n    print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    index = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[index] <= w:\n            layer += bricks[index]\n            index += 1\n            if index == n:\n                print("YES")\n                return\n        if layer == 0:\n            print("NO")\n            return\n    print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i, layer = 0, 0\n    for _ in range(h):\n        while layer + bricks[i] <= w:\n            if layer == w:\n                layer = 0\n                break\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print("YES")\n                return\n        if layer != 0:\n            print("NO")\n            return\n    print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    h, w, n = map(int, input().split())  # 一行目を取得\n    bricks = list(map(int, input().split()))  # 二行目を取得\n    i = 0\n    for _ in range(h):\n        layer = 0  # 層を初期化\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print("YES")\n                return\n        if layer == 0:  # この層に積めるブロックがない\n            print("NO")\n            return\n    print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    h, w, n = map(int, input().split())  # input\n    bricks = list(map(int, input().split()))  # input\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print("YES")  # output\n                return\n        if layer == 0:\n            print("NO")  # output\n            return\n\n    print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    h, w, n = list(map(int, input().split()))\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print("YES")\n                return\n        if layer == 0:\n            print("NO")\n            return\n    print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 13:50:09.520049 size on output set 9
2022-04-16 13:50:09.520060 num operations 1
2022-04-16 13:50:09.520066 size on input set 1
2022-04-16 13:50:18.546638 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h - 1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "import sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = sorted(map(int, sys.stdin.readline().split()))\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print \"NO\"\n    else:\n        if h == 1:\n            print \"YES\"\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print \"YES\"\n            else:\n                print \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h * w:\n        print \"NO\"\n    else:\n        if h == 1:\n            print \"YES\"\n        else:\n            layer = 0\n            while bricks and layer < h - 1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print \"YES\"\n            else:\n                print \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print \"NO\"\n    else:\n        if h == 1:\n            print \"YES\"\n        else:\n            layer = 0\n            while bricks and layer < h - 1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print \"YES\"\n            else:\n                print \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650117009,
  "object": "edit"
}
2022-04-16 13:50:18.547106 fix syntax errors 9 ['\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h * w:\n        print("NO")\n    else:\n        if h == 1:\n            print("YES")\n        else:\n            layer = 0\n            while bricks and layer < h - 1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print("YES")\n            else:\n                print("NO")\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print("NO")\n    else:\n        if h == 1:\n            print("YES")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print("YES")\n            else:\n                print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print("NO")\n    else:\n        if h == 1:\n            print("YES")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print("YES")\n            else:\n                print("NO")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print("NO")\n    else:\n        if h == 1:\n            print("YES")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print("YES")\n            else:\n                print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = sorted(map(int, sys.stdin.readline().split()))\n\n    if sum(bricks) < h*w:\n        print("NO")\n    else:\n        if h == 1:\n            print("YES")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print("YES")\n            else:\n                print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print "NO"\n    else:\n        if h == 1:\n            print "YES"\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print "YES"\n            else:\n                print "NO"\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print("NO")\n    else:\n        if h == 1:\n            print("YES")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print("YES")\n            else:\n                print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h * w:\n        print "NO"\n    else:\n        if h == 1:\n            print "YES"\n        else:\n            layer = 0\n            while bricks and layer < h - 1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print "YES"\n            else:\n                print "NO"\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print "NO"\n    else:\n        if h == 1:\n            print "YES"\n        else:\n            layer = 0\n            while bricks and layer < h - 1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print "YES"\n            else:\n                print "NO"\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 13:50:18.547206 size on output set 8
2022-04-16 13:50:18.547224 num operations 1
2022-04-16 13:50:18.547229 size on input set 1
2022-04-16 13:50:28.594788 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    print(n*m-1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650117018,
  "object": "edit"
}
2022-04-16 13:50:28.595126 fix syntax errors 9 ['\nimport sys\n\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    print(n*m-1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print("NO")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print("NO")\n            return\n        if bricks[i] < w:\n            print("NO")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print("YES")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-16 13:50:28.595185 size on output set 6
2022-04-16 13:50:28.595196 num operations 1
2022-04-16 13:50:28.595201 size on input set 1
2022-04-16 13:50:40.227496 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#!/usr/bin/env python\n\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    h,w,n = map(int,sys.stdin.readline().split())\n    bricks = map(int,sys.stdin.readline().split())\n    bricks.sort()\n    sum = 0\n    i = 0\n    for i in range(n):\n        sum += bricks[i]\n        if sum >= w:\n            h -= 1\n            sum = 0\n            i -= 1\n        if h == 0:\n            print \"YES\"\n            break\n    if h != 0:\n        print \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint (\"YES\")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint (\"NO\")\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 6,
      "text": "\n\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint(\"NO\")\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\nimport sys\n\ndef main():\n    h,w,n = map(int,sys.stdin.readline().split())\n    bricks = map(int,sys.stdin.readline().split())\n    bricks.sort()\n    sum = 0\n    i = 0\n    for i in range(n):\n        sum += bricks[i]\n        if sum >= w:\n            h -= 1\n            sum = 0\n            i -= 1\n        if h == 0:\n            print \"YES\"\n            break\n    if h != 0:\n        print \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 8,
      "text": "\n\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint(\"NO\")\n\nif __name__ == \"__main__\":\n\tmain()\n"
    }
  ],
  "created": 1650117028,
  "object": "edit"
}
2022-04-16 13:50:40.227824 fix syntax errors 9 ['\n\n#!/usr/bin/env python\n\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint "YES"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint "NO"\n\n\nif __name__ == "__main__":\n\tmain()\n', '#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint "YES"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint "NO"\n\nif __name__ == "__main__":\n\tmain()\n', '\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint "YES"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint "NO"\n\nif __name__ == "__main__":\n\tmain()\n', '#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint "YES"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint "NO"\n\nif __name__ == "__main__":\n\tmain()\n', '\n\nimport sys\n\ndef main():\n    h,w,n = map(int,sys.stdin.readline().split())\n    bricks = map(int,sys.stdin.readline().split())\n    bricks.sort()\n    sum = 0\n    i = 0\n    for i in range(n):\n        sum += bricks[i]\n        if sum >= w:\n            h -= 1\n            sum = 0\n            i -= 1\n        if h == 0:\n            print "YES"\n            break\n    if h != 0:\n        print "NO"\n\nif __name__ == "__main__":\n    main()\n', '\n\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint ("YES")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint ("NO")\n\nif __name__ == "__main__":\n\tmain()\n', '\n\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint("YES")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint("NO")\n\nif __name__ == "__main__":\n\tmain()\n', '#!/usr/bin/env python\nimport sys\n\ndef main():\n    h,w,n = map(int,sys.stdin.readline().split())\n    bricks = map(int,sys.stdin.readline().split())\n    bricks.sort()\n    sum = 0\n    i = 0\n    for i in range(n):\n        sum += bricks[i]\n        if sum >= w:\n            h -= 1\n            sum = 0\n            i -= 1\n        if h == 0:\n            print "YES"\n            break\n    if h != 0:\n        print "NO"\n\nif __name__ == "__main__":\n    main()\n', '\n\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint("YES")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint("NO")\n\nif __name__ == "__main__":\n\tmain()\n']
2022-04-16 13:50:40.227877 size on output set 7
2022-04-16 13:50:40.227894 num operations 1
2022-04-16 13:50:40.227899 size on input set 1
2022-04-16 13:50:50.127898 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    },
    {
      "index": 2,
      "text": "\n\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    },
    {
      "index": 3,
      "text": "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    },
    {
      "index": 4,
      "text": "\n\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    },
    {
      "index": 5,
      "text": "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# n = int(input())\n#\n# s = 0\n#\n# for i in range(n):\n#     s += int(input())\n#\n# if s % n == 0:\n#     print('YES')\n# else:\n#     print('NO')\n"
    },
    {
      "index": 6,
      "text": "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    },
    {
      "index": 7,
      "text": "\nn = int(input())\ns = 0\n\nfor i in range(n):\n    s += int(input())\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    },
    {
      "index": 8,
      "text": "\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"
    }
  ],
  "created": 1650117040,
  "object": "edit"
}
2022-04-16 13:50:50.128134 fix syntax errors 9 ["\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# n = int(input())\n#\n# s = 0\n#\n# for i in range(n):\n#     s += int(input())\n#\n# if s % n == 0:\n#     print('YES')\n# else:\n#     print('NO')\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\nn = int(input())\ns = 0\n\nfor i in range(n):\n    s += int(input())\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n"]
2022-04-16 13:50:50.128167 size on output set 5
2022-04-16 13:50:50.128178 num operations 1
2022-04-16 13:50:50.128182 size on input set 1
2022-04-16 13:51:07.123548 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k >= w-1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k == w:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w-1):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k == w-2:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-2:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-2:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-2:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n-1):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k == w:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    print('Hello World')\n\nmain()\n"
    },
    {
      "index": 8,
      "text": "\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n-1):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i-1]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(bricks[i-1]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i-1]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for j in range(w):\n        if layers[h - 1][j] == 0:\n            for k in range(bricks[n-1]):\n                layers[h - 1][j] += 1\n                if j + k == w - 1:\n                    break\n            break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n"
    }
  ],
  "created": 1650117050,
  "object": "edit"
}
2022-04-16 13:51:07.123918 fix syntax errors 9 ["\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\n\nmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\n\nmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k >= w-1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k == w:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w-1):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k == w-2:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-2:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-2:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w-2:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n-1):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j+k == w:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j+k == w:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\ndef main():\n    print('Hello World')\n\nmain()\n", "\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n-1):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i-1]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(bricks[i-1]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i-1]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for j in range(w):\n        if layers[h - 1][j] == 0:\n            for k in range(bricks[n-1]):\n                layers[h - 1][j] += 1\n                if j + k == w - 1:\n                    break\n            break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n"]
2022-04-16 13:51:07.124080 size on output set 8
2022-04-16 13:51:07.124092 num operations 1
2022-04-16 13:51:07.124097 size on input set 1
2022-04-16 13:51:14.899413 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print 'YES'\n    else:\n        print 'NO'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    print 'YES' if sum(bricks) >= h * w else 'NO'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()] \n    if sum(bricks) >= h * w: \n        print 'YES'\n    else:\n        print 'NO' \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print ('YES')\n    else:\n        print ('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 8,
      "text": "'''\nhttps://open.kattis.com/problems/bricks\n'''\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650117067,
  "object": "edit"
}
2022-04-16 13:51:14.899668 fix syntax errors 9 ["#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print 'YES'\n    else:\n        print 'NO'\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    print 'YES' if sum(bricks) >= h * w else 'NO'\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()] \n    if sum(bricks) >= h * w: \n        print 'YES'\n    else:\n        print 'NO' \n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print ('YES')\n    else:\n        print ('NO')\n\nif __name__ == '__main__':\n    main()\n", "'''\nhttps://open.kattis.com/problems/bricks\n'''\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 13:51:14.899712 size on output set 8
