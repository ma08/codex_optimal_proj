["const fs = require('fs');\nconst path = require('path');\n\nconst readFile = (fileName) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(fileName, (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst writeFile = (fileName, data) => {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(fileName, data, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nconst file = {\n  readFile: readFile,\n  writeFile: writeFile\n};\n\nmodule.exports = file;\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#define BUFFER_SIZE 1024\n\nint main(int argc, char *argv[]) {\n  if (argc < 2) {\n    printf(\"Please provide a filename.\\n\");\n    exit(1);\n  }\n  char *filename = argv[1];\n  int fd = open(filename, O_RDONLY);\n  if (fd == -1) {\n    printf(\"Could not open file.\\n\");\n    exit(1);\n  }\n  struct stat fileStats;\n  fstat(fd, &fileStats);\n  printf(\"File Size: %ld\\n\", fileStats.st_size);\n  printf(\"File Permissions: %o\\n\", fileStats.st_mode);\n  bool isExecutable = fileStats.st_mode & S_IXUSR;\n  printf(\"Executable: %s\\n\", isExecutable ? \"true\" : \"false\");\n  char buffer[BUFFER_SIZE + 1];\n  ssize_t bytesRead;\n  while ((bytesRead = read(fd, buffer, BUFFER_SIZE))) {\n    buffer[bytesRead] = '\\0';\n    printf(\"%s\", buffer);\n  }\n}\n", "<!DOCTYPE html>\n<html>\n<body>\n\n<?php\necho \"My first PHP script!\";\n?>\n\n</body>\n</html>\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nfile: file.py\n\nDescription: file object for working with files in the file system\n\nauthor: Yoann Dupont\n\nMIT License\n\nCopyright (c) 2018 Yoann Dupont\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"\n\nimport os\nimport codecs\n\nclass File(object):\n    def __init__(self, file):\n        self.file = file\n        self.path = os.path.abspath(file)\n        self.name = os.path.basename(file)\n        self.dir = os.path.dirname(file)\n        self.is_dir = os.path.isdir(file)\n        self.is_file = os.path.isfile(file)\n        self.is_link = os.path.islink(file)\n        self.is_abs = os.path.isabs(file)\n        self.is_hidden = self.name.startswith(\".\")\n        self.stat = os.stat(file)\n        self.size = self.stat.st_size\n    \n    def __str__(self):\n        return self.file\n    __repr__ = __str__\n    \n    def __eq__(self, other):\n        return self.path == other.path\n    \n    def __hash__(self):\n        return hash(self.path)\n    \n    def __getitem__(self, key):\n        if key == \"path\":\n            return self.path\n        elif key == \"name\":\n            return self.name\n        elif key == \"dir\":\n            return self.dir\n        elif key == \"is_dir\":\n            return self.is_dir\n        elif key == \"is_file\":\n            return self.is_file\n        elif key == \"is_link\":\n            return self.is_link\n        elif key == \"is_abs\":\n            return self.is_abs\n        elif key == \"is_hidden\":\n            return self.is_hidden\n        elif key == \"stat\":\n            return self.stat\n        elif key == \"size\":\n            return self.size\n        else:\n            raise KeyError(\"File object has no attribute '%s'\" % key)\n    \n    def __setitem__(self, key, value):\n        if key == \"path\":\n            self.path = value\n        elif key == \"name\":\n            self.name = value\n        elif key == \"dir\":\n            self.dir = value\n        elif key == \"is_dir\":\n            self.is_dir = value\n        elif key == \"is_file\":\n            self.is_file = value\n        elif key == \"is_link\":\n            self.is_link = value\n        elif key == \"is_abs\":\n            self.is_abs = value\n        elif key == \"is_hidden\":\n            self.is_hidden = value\n        elif key == \"stat\":\n            self.stat = value\n        elif key == \"size\":\n            self.size = value\n        else:\n            raise KeyError(\"File object has no attribute '%s'\" % key)\n    \n    def __contains__(self, key):\n        if key == \"path\":\n            return True\n        elif key == \"name\":\n            return True\n        elif key == \"dir\":\n            return True\n        elif key == \"is_dir\":\n            return True\n        elif key == \"is_file\":\n            return True\n        elif key == \"is_link\":\n            return True\n        elif key == \"is_abs\":\n            return True\n        elif key == \"is_hidden\":\n            return True\n        elif key == \"stat\":\n            return True\n        elif key == \"size\":\n            return True\n        else:\n            return False\n    \n    def __iter__(self):\n        return iter([\"path\", \"name\", \"dir\", \"is_dir\", \"is_file\", \"is_link\", \"is_abs\", \"is_hidden\", \"stat\", \"size\"])\n    \n    def __len__(self):\n        return 10\n    \n    def __delitem__(self, key):\n        raise NotImplementedError(\"File object has no attribute '%s'\" % key)\n    \n    def __delattr__(self, key):\n        raise NotImplementedError(\"File object has no attribute '%s'\" % key)\n    \n    def __getattr__(self, key):\n        if key == \"path\":\n            return self.path\n        elif key == \"name\":\n            return self.name\n        elif key == \"dir\":\n            return self.dir\n        elif key == \"is_dir\":\n            return self.is_dir\n        elif key == \"is_file\":\n            return self.is_file\n        elif key == \"is_link\":\n            return self.is_link\n        elif key == \"is_abs\":\n            return self.is_abs\n        elif key == \"is_hidden\":\n            return self.is_hidden\n        elif key == \"stat\":\n            return self.stat\n        elif key == \"size\":\n            return self.size\n        else:\n            raise AttributeError(\"File object has no attribute '%s'\" % key)\n    \n    def __setattr__(self, key, value):\n        if key == \"path\":\n            self.__dict__[\"path\"] = value\n        elif key == \"name\":\n            self.__dict__[\"name\"] = value\n        elif key == \"dir\":\n            self.__dict__[\"dir\"] = value\n        elif key == \"is_dir\":\n            self.__dict__[\"is_dir\"] = value\n        elif key == \"is_file\":\n            self.__dict__[\"is_file\"] = value\n        elif key == \"is_link\":\n            self.__dict__[\"is_link\"] = value\n        elif key == \"is_abs\":\n            self.__dict__[\"is_abs\"] = value\n        elif key == \"is_hidden\":\n            self.__dict__[\"is_hidden\"] = value\n        elif key == \"stat\":\n            self.__dict__[\"stat\"] = value\n        elif key == \"size\":\n            self.__dict__[\"size\"] = value\n        else:\n            raise AttributeError(\"File object has no attribute '%s'\" % key)\n    \n    def open(self, mode=\"r\", encoding=\"utf-8\"):\n        return codecs.open(self.file, mode, encoding)\n", "\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "const fs = require('fs');\n\n\nfs.writeFileSync('notes.txt', 'My name is Jeremy.');\nfs.appendFileSync('notes.txt', ' I am a full stack web developer.');\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  file.py\n#  \n#  Copyright 2018 yorlysoro <yorlysoro@gmail.com>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#  \n\ndef main(args):\n    return 0\n\nif __name__ == '__main__':\n    import sys\n    sys.exit(main(sys.argv))\n", "#!/usr/bin/env python\n\nimport sys\nimport os\nimport json\n\ndef main(argv):\n    if len(argv) < 2:\n        print \"Usage: %s <file>\" % argv[0]\n        sys.exit(1)\n    path = argv[1]\n\n    if not os.path.exists(path):\n        print \"File %s doesn't exist\" % path\n        sys.exit(1)\n\n    print json.dumps({\"changed\": False, \"failed\": False, \"msg\": \"File %s exists\" % path})\n    sys.exit(0)\n\nif __name__ == '__main__':\n    main(sys.argv)\n", "var fs = require('fs');\nvar path = require('path');\nvar dir = process.argv[2];\nvar ext = process.argv[3];\n\nfs.readdir(dir, function(err, list){\n\tif(err) throw err;\n\tlist.forEach(function(file){\n\t\tif(path.extname(file) === '.' + ext){\n\t\t\tconsole.log(file);\n\t\t}\n\t});\n});\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport shutil\n\n\ndef main():\n    if len(sys.argv) < 2:\n        print('Usage: file.py <filename>')\n        sys.exit(1)\n\n    filename = sys.argv[1]\n    if not os.path.isfile(filename):\n        print('Error: {0} file not found'.format(filename))\n        sys.exit(2)\n\n    basename = os.path.basename(filename)\n    dirname = os.path.dirname(filename)\n\n    dirname = os.path.join(dirname, 'backup')\n    if not os.path.isdir(dirname):\n        os.mkdir(dirname)\n\n    shutil.copy(filename, dirname)\n\n    os.remove(filename)\n\n\nif __name__ == '__main__':\n    main()\n", "from collections import deque\nfrom math import floor\nfrom sys import stdin\n\n\ndef main():\n    N, M, Q = map(int, stdin.readline().split())\n    A = [list(map(int, stdin.readline().split())) for _ in range(Q)]\n    ans = 0\n    for i in range(M):\n        for j in range(i + 1, M + 1):\n            for k in range(M):\n                for l in range(k + 1, M + 1):\n                    if i >= k and j <= l:\n                        continue\n                    if k >= i and l <= j:\n                        continue\n                    tmp = 0\n                    for m in range(Q):\n                        if i <= A[m][1] <= j and k <= A[m][2] <= l:\n                            tmp += A[m][0]\n                    ans = max(ans, tmp)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]