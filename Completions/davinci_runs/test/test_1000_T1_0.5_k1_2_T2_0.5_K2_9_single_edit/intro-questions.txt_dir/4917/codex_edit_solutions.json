["\n\ndef main():\n    n = int(input())\n    times = []\n    for i in range(n):\n        times.append(list(map(int, input().split())))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"edward is right\")\n        quit()\n\nprint(\"gunilla has a point\")\n", "import sys\ninput = sys.stdin.readline\n\n\nn = int(input()) \n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split()) \n    intervals.append((a, b))\n\nintervals.sort() \n\nfor i in range(n-1): \n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a: \n        print(\"edward is right\") \n        exit(0) \n\nprint(\"gunilla has a point\")\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in input().split(\" \")])\n\n    # Check for common time\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")  # noqa\n    else:\n        print(\"edward is right\")  # noqa\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n", "\nimport sys\n\ndef solve(times, n):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for i in range(n):\n        for j in range(n):\n            if i != j and times[i][0] >= times[j][0] and times[i][1] <= times[j][1]:\n                return \"gunilla is right\"\n    return \"gunilla has a point\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times, n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a or a_next > b:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append(list(map(int, input().split())))\n\n    # Check for common time\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")\n    else:\n        print(\"edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][0] != times[i + 1][0]:\n        print(\"edward is right\")\n        exit()\n\nprint(\"gunilla has a point\")\n", "\n# program\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\")\nelse:\n    print(\"edward is right\")\n", "\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print('edward is right')\n        exit()\n\nprint('gunilla has a point')\n", "\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split())))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"edward is right\")\n        quit()\n\nprint(\"gunilla has a point\")\n", "\nprint(\"Hello World!\")\n", "import sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"edward is right\\n\"\n    return \"gunilla has a point\\n\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = [[]] * n\n    for i in range(n):\n        intervals[i] = [int(i) for i in input().split(\" \")]\n\n    # Check for common time\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")\n    else:\n        print(\"edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"Edward is right\")\n    else:\n        print(\"Gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\"\"\"\nKattis: Edward Learns to Talk\nAugust 10, 2019\n\"\"\"\n\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"edward is right\"\n    return \"gunilla has a point\"\n\ndef main():\n    for line in sys.stdin:\n        n = int(line.strip())\n        times = []\n        for _ in range(n):\n            times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n        print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=a[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip().split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"edward is right\")\n    else:\n        print(\"gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\ncount = 0\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if a_next > b:\n        count += 1\n    if count > 1:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n", "\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times):\n    if times[i][1] != times[0][1]:\n        print(\"edward is right\")\n        exit()\n\nprint(\"gunilla has a point\")\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in input().split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"edward is right\")\n    else:\n        print(\"gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in input().split(\" \")])\n\n    # Check for common time\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == len(times):\n        print(\"gunilla has a point\")\n    else:\n        print(\"edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n')) \n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()] \n        intervals.append([a, b])\n    intervals.sort() \n    intervals_in_common = []\n    for i in range(n-1): \n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end: \n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0: \n        print(\"edward is right\")\n    else: \n        print(\"gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"edward is right\")\n    else:\n        print(\"gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in input().split()])\n\n    # Check for common time\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")\n    else:\n        print(\"edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print(\"edward is right\")\n        exit()\n\nprint(\"gunilla has a point\")\n", "\n\nnum_times = int(input())  # Number of times Edward and Gunilla meet\n\ntimes = []\nfor i in range(num_times):  # Read all times\n    times.append([int(x) for x in input().split()])  # Split input into a list of integers\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print(\"edward is right\")\n        exit()\n\nprint(\"gunilla has a point\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i]: \n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]: #TODO: test this\n                return \"edward is right\"\n    return \"gunilla has a point\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    print(sys.stdin.readline().strip())\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(n)\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split()))) # input data\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"edward is right\")\n        quit() # if edward is right, print edward is right and quit\n\nprint(\"gunilla has a point\")\n", "\n\n#program\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\")\nelse:\n    print(\"edward is right\")\n", "\n\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\nif num_times == 1:\n    print(\"gunilla has a point\")\nelse:\n    # Check if all times are the same\n    for i in range(num_times - 1):\n        if times[i][1] != times[i + 1][1]:\n            print(\"edward is right\")\n            exit()\n\nprint(\"gunilla has a point\")\n", "\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split())))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"edward is right\")\n    else:\n        print(\"gunilla has a point\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i+1]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "import sys\n\n\n\ndef main():\n    num_times = int(input())\n\n    times = []\n    for i in range(num_times):\n        times.append([int(x) for x in input().split()])\n\n    # Check if all times are the same\n    for i in range(num_times - 1):\n        if times[i][1] != times[i + 1][1]:\n            print(\"edward is right\")\n            sys.exit()\n\n    print(\"gunilla has a point\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys, math\n\ndef main():\n    for line in sys.stdin:\n        n = int(line)\n        if n < 4:\n            print(n)\n            continue\n        if n % 2 == 0:\n            print(int(math.ceil(n/2)))\n        else:\n            print(int(math.ceil(n/2)) - 1)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print(\"Edward is right\")\n        exit()\n\nprint(\"Gunilla has a point\")\n", "\nn = int(input())\ns = input()\n\nprint(s)\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i] and a[i]<=b[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split()) # a = start, b = end\n    intervals.append((a, b)) # append as tuples\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n", "\n\nimport os\nimport sys\n\ndef solve(n, m, k, l):\n    # if there are more than k + 1 files, it is impossible\n    # if there are k + 1 files, then the answer is the number of files - 1\n    # otherwise, the answer is the number of files\n    if n > k + 1:\n        return -1\n    elif n == k + 1:\n        return n - 1\n    else:\n        return n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    m = int(sys.stdin.readline().strip())\n    k = int(sys.stdin.readline().strip())\n    l = int(sys.stdin.readline().strip())\n    print(solve(n, m, k, l))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in input().split(\" \")])\n\n    # Check for common time \n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")\n    else:\n        print(\"edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#program \n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int,input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\")\nelse:\n    print(\"edward is right\")\n", "\n\n# program\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\")\nelse:\n    print(\"edward is right\")\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))  # number of test cases\n    for i in range(n):\n        intervals = []\n        for j in range(n):\n            a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n            intervals.append([a, b])\n        intervals.sort()\n        intervals_in_common = []\n        for i in range(n-1):\n            start = max(intervals[i][0], intervals[i+1][0])\n            end = min(intervals[i][1], intervals[i+1][1])\n            if start <= end:\n                intervals_in_common.append([start, end])\n        if len(intervals_in_common) == 0:\n            print(\"edward is right\")\n        else:\n            print(\"gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split())))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"edward is right\")\n        break\n\nprint(\"gunilla has a point\")\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n - 1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i + 1]\n    if b_next < a:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                start = max(intervals[i][0], intervals[j][0])\n                end = min(intervals[i][1], intervals[j][1])\n                if start <= end:\n                    intervals_in_common.append([start, end])\n    print(intervals_in_common)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"edward is right\"\n    return \"gunilla has a point\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n = int(raw_input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in raw_input().split(\" \")])\n\n    # Check for common time\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")\n    else:\n        print(\"edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a or b_next < b:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n"]