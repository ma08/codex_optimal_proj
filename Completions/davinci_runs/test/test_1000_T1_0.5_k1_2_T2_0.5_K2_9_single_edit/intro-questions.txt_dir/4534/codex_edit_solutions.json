["class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n", "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        if len(nums) < 3:\n            return []\n        nums.sort()\n        result = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            if nums[i] > 0:\n                break\n            l = i + 1\n            r = len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    result.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return result\n\n#\n\nclass Solution:\n#     def threeSum(self, nums: List[int]) -> List[List[int]]:\n#         if len(nums) < 3:\n#             return []\n#         nums.sort()\n#         result = []\n#         for i in range(len(nums) - 2):\n#             if i > 0 and nums[i] == nums[i - 1]:\n#                 continue\n#             if nums[i] > 0:\n#                 break\n#             l = i + 1\n#             r = len(nums) - 1\n#             while l < r:\n#                 s = nums[i] + nums[l] + nums[r]\n#                 if s < 0:\n#                     l += 1\n#                 elif s > 0:\n#                     r -= 1\n#                 else:\n#                     result.append([nums[i], nums[l], nums[r]])\n#                     while l < r and nums[l] == nums[l + 1]:\n#                         l += 1\n#                     while l < r and nums[r] == nums[r - 1]:\n#                         r -= 1\n#                     l += 1\n#                     r -= 1\n#         return result\n", "\nclass Solution:\n    def getRow(self, rowIndex):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "\nclass Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex: int):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "\nclass Solution:\n    def getRow(self, rowIndex):\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2019/10/10 11:33\n# @Author  : mrwuzs\n# @Site    : \n# @File    : test.py\n# @Software: PyCharm\nclass Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "\nclass Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0] * (rowIndex+1)\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "from typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n", "class Solution:\n    def getRow(self, rowIndex):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "class Solution:\n    def getRow(self, rowIndex: int):\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex):\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                if i == ')':\n                    if stack.pop() != '(':\n                        return False\n                if i == '}':\n                    if stack.pop() != '{':\n                        return False\n                if i == ']':\n                    if stack.pop() != '[':\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n\n", "from typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(i-1)] + [1]\n        return res\n\n    def getRow2(self, rowIndex: int) -> List[int]:\n        res = [0 for _ in range(rowIndex+1)]\n        res[0] = 1\n        for i in range(1, rowIndex+1):\n            for j in range(i, 0, -1):\n                res[j] += res[j-1]\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.getRow(3))\n    print(s.getRow2(3))\n", "from typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = result[j - 1] + result[j]\n            result = temp\n        return result\n"]