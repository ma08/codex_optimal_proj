["# python3\n\nimport sys\n\ndef solve(n, a):\n    a.sort()\n    result = 0\n    cur_sum = 0\n    for i in range(n):\n        cur_sum += a[i]\n        result = max(result, cur_sum * a[i])\n    return result\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    print(solve(n, a))\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2 \n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq * sum_lin)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2 * an\n\n    # so the answer is (k - (n - k)) * an^2 * an * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * an * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i])\n    if current_value > max_value:\n        max_value = current_value\n\n\nprint(max_value)\n", "\n#\n# import sys\n#\n# def main():\n#     n = int(sys.stdin.readline().strip())\n#     a = []\n#     for i in range(n):\n#         a.append(int(sys.stdin.readline().strip()))\n#     a.sort()\n#     sum_sq = 0\n#     sum_lin = 0\n#     for i in range(n):\n#         if i < (n//2):\n#             sum_sq += a[i]**2\n#         else:\n#             sum_lin += a[i]\n#     print(sum_sq*sum_lin)\n#\n# if __name__ == '__main__':\n#     main()\n", "\ndef main\n", "\n\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i]**2)\n    if current_value > max_value:\n        max_value = current_value\n\nprint(max_value)\n", "\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\nprint(res)\n", "\n\nimport sys\nimport bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    inputs = [int(sys.stdin.readline()) for _ in range(n)]\n    inputs.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, inputs[i] * sum(inputs[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, inputs[i] * sum(inputs[:i]))\n        else:\n            max_val = max(max_val, inputs[i] * sum(inputs[:i]) + inputs[i] * sum(inputs[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq * sum_lin)\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\nimport bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for _ in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i]) * 3.14\n    if current_value > max_value:\n        max_value = current_value\n\nprint(max_value)\n", "\n\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n\na.sort()\n\ns1 = 0\ns2 = 0\nfor i in range(len(a)):\n    if i < len(a) // 2:\n        s1 += a[i]**2\n    else:\n        s2 += a[i]\n\nprint(s1 * s2)\n", "import sys\n\n\ndef main():\n    n = int(input())\n\n    a = []\n\n    for _ in range(n):\n        a.append(int(input()))\n\n    a.sort()\n\n    max_value = 0\n\n    for i in range(n):\n        current_value = a[i]**2 * (sum(a[i+1:]) + a[i])\n        if current_value > max_value:\n            max_value = current_value\n\n    print(max_value)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys, bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for i in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n\na.sort()\n\ns1 = 0\ns2 = 0\nfor i in range(len(a)):\n    if i < len(a) / 2:\n        s1 += a[i]**2\n    else:\n        s2 += a[i]\nprint(s1 * s2)\n", "\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n\na.sort()\n\ns1 = 0\ns2 = 0\nfor i in range(len(a)):\n    if i < len(a) / 2:\n        s1 += a[i]**2\n    else:\n        s2 += a[i]\n\nprint(s1 * s2)\n", "\nimport sys\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        cur += a[i]\n        ans = max(ans, cur * a[i])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for _ in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# -*- coding: utf-8 -*-\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        cur += a[i]\n        ans = max(ans, cur * a[i])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n\na.sort()\n\ns1 = 0\ns2 = 0\nfor i in range(len(a)):\n    if i < len(a) / 2:\n        s1 += a[i] ** 2\n    else:\n        s2 += a[i]\n\nprint(s1 * s2)\n", "\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i])\n    if current_value > max_value:\n        max_value = current_value\n\nprint(max_value)\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1^2 + ... + an^2)\n    # = (a1^2 + ... + ak^2) * (a1^2 + ... + an^2) - (a1^2 + ... + ak^2) * (a1^2 + ... + ak^2)\n    # = (a1^2 + ... + ak^2) * (a1^2 + ... + an^2) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1^2 + ... + an^2 - a1^2 - ... - ak^2)\n    # = (a1^2 + ... + ak^2) * (a1^2 + ... + an^2 - a1^2 - ... - ak^2)\n    # = (a1^2 + ... + ak^2) * (an^2 - ak^2)\n    # = (a1^2 + ... + ak^2) * (an^2 - ak^2)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        cur += a[i]\n        ans = max(ans, cur * a[i])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport numpy as np\n\n\ndef main():\n    a = np.array([[1, 2, 3], [4, 5, 6]])\n    print(np.sum(a, axis=0))\n    print(np.sum(a, axis=1))\n    print(np.sum(a, axis=0, keepdims=True))\n    print(a.sum(axis=0))\n    print(a.sum(axis=0, keepdims=True))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#%%\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:])\nprint(res)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq*sum_lin)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq*sum_lin)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#%%\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*sum(arr[1:])\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\nprint(res)\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0.0\n    sum_lin = 0.0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += (a[i]**2)\n        else:\n            sum_lin += a[i]\n    print(int(sum_sq*sum_lin))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\n#%%\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\nprint(res)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [0]*n\n    for i in range(n):\n        a[i] = int(sys.stdin.readline().strip())\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq*sum_lin)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i]) if i < n-1 else a[i]**2 * a[i]\n    if current_value > max_value:\n        max_value = current_value\n\nprint(max_value)\n", "\n\nimport sys\nimport bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    lst = [int(sys.stdin.readline()) for _ in range(n)]\n    lst.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, lst[i] * sum(lst[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, lst[i] * sum(lst[:i]))\n        else:\n            max_val = max(max_val, lst[i] * sum(lst[:i]) + lst[i] * sum(lst[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    a.sort()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        cur += a[i]\n        ans = max(ans, cur * a[i])\n    print(ans, end=\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n#%%\nn = int(input())\narr = [int(input()) for _ in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\nprint(res)\n", "\n\n#%%\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:])) # res = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:])) # res = max(res, sum(arr[:i])*sum(arr[i:]))\nprint(res)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        cur += a[i]\n        ans = max(ans, cur * a[i])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for _ in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n#%%\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\nprint(res)\n", "\nimport sys\nimport bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for _ in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n"]