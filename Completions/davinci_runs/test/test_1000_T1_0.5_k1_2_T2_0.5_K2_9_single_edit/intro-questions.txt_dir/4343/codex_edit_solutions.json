["\n\ndef median(s, t):\n    if s == t:\n        return s\n    \n    mid = (ord(t[0]) - ord(s[0])) / 2\n    if mid == 0:\n        return s + median(s[1:], t[1:])\n    if mid == ord(t[0]) - ord(s[0]):\n        return t[0] + median(s[1:], t[1:])\n    \n    return chr(ord(s[0]) + mid) + median(s[1:], t[1:])\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t))\n", "def main():\n    k = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        print(s)\n        return\n    if k == 1:\n        print(s)\n        return\n    if k == 2:\n        if s[0] == t[0]:\n            print(s[0] + chr(ord(s[1]) + 1))\n            return\n        else:\n            print(s[0] + chr(ord(s[0]) + 1))\n            return\n    ans = []\n    ans.append(s)\n    while True:\n        if len(ans) == int((k + 1) / 2):\n            break\n        if ans[-1] == t:\n            break\n        if ans[-1][-1] == 'z':\n            ans.append(ans[-1][:-1] + 'a')\n        else:\n            ans.append(ans[-1][:-1] + chr(ord(ans[-1][-1]) + 1))\n    print(ans[-1])\n\nmain()\n", "\ndef median(s, t):\n    if s == t:\n        return s\n\n    mid = (ord(t[0]) - ord(s[0])) // 2\n    if mid == 0:\n        return s + median(s[1:], t[1:])\n    if mid == ord(t[0]) - ord(s[0]):\n        return t[0] + median(s[1:], t[1:])\n\n    return chr(ord(s[0]) + mid) + median(s[1:], t[1:])\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t))\n", "\n\ndef median(s, t):\n    if s == t:\n        return s\n    \n    mid = (ord(t[0]) - ord(s[0])) // 2 + 1\n    if mid == 0:\n        return s[0] + median(s[1:], t[1:])\n    if mid == ord(t[0]) - ord(s[0]):\n        return t + median(s[1:], t[1:])\n    \n    return chr(ord(s[0]) + mid - 1) + median(s[1:], t[1:])\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t))\n", "\n\n# def median(s, t):\n#     if s == t:\n#         return s\n#\n#     mid = (ord(t[0]) - ord(s[0])) // 2\n#     if mid == 0:\n#         return s + median(s[1:], t[1:])\n#     if mid == ord(t[0]) - ord(s[0]):\n#         return t[0] + median(s[1:], t[1:])\n#\n#     return chr(ord(s[0]) + mid) + median(s[1:], t[1:])\n#\n# k = int(input())\n# s = input()\n# t = input()\n#\n# print(median(s, t))\nprint(chr(ord('a') + 1))\n", "\ndef main():\n    k = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        print(s)\n        return\n    if k == 1:\n        print(s)\n        return\n    if k == 2:\n        if s[0] == t[0]:\n            print(s[0] + chr(ord(s[1]) + 1))\n            return\n        else:\n            print(s[0] + chr(ord(s[0]) + 1))\n            return\n    ans = []\n    ans.append(s)\n    while True:\n        if len(ans) == int((k + 1) / 2) or ans[-1] == t:\n            break\n        if ans[-1][-1] == 'z' or ans[-1][-1] == t[-1]:\n            ans.append(ans[-1][:-1] + chr(ord(ans[-1][-1]) + 1))\n        else:\n            ans.append(ans[-1][:-1] + chr(ord(ans[-1][-1]) + 1))\n    print(ans[-1])\n\nmain()\n", "\ndef main():\n    k = int(input())\n    s = input()\n    t = input()\n    ans = []\n    while True:\n        ans.append(s)\n        if len(ans) == k:\n            break\n        s = s[-1] + s[:-1]\n    for i in range(len(ans)):\n        print(ans[i])\n\nmain()\n", "\ndef main():\n    k = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        print(s)\n        return\n    if k == 1:\n        print(s)\n        return\n    if k == 2:\n        if s[0] == t[0]:\n            print(s[0] + chr(ord(s[1]) + 1))\n            return\n        else:\n            print(s[0] + chr(ord(s[0]) + 1))\n            return\n    ans = []\n    while True:\n        if len(ans) == int((k + 1) / 2) or ans[-1] == t:\n            break\n        if s[-1] == 'z':\n            ans.append(s[:-1] + 'a')\n        else:\n            ans.append(s[:-1] + chr(ord(s[-1]) + 1))\n    print(ans[-1])\n\nmain()\n", "\ndef main():\n    k = int(input()) # k is the number of characters\n    s = input()\n    t = input()\n    if s == t:\n        print(s)\n        return\n    if k == 1:\n        print(s)\n        return\n    if k == 2:\n        if s[0] == t[0]:\n            print(s[0] + chr(ord(s[1]) + 1))\n            return\n        else:\n            print(s[0] + chr(ord(s[0]) + 1))\n            return\n    ans = []\n    ans.append(s)\n    while True:\n        if len(ans) == int((k + 1) / 2):\n            break\n        if ans[-1] == t: # if s and t are the same, then break\n            break\n        if ans[-1][-1] == 'z': # if the last character is z, then change it to a\n            ans.append(ans[-1][:-1] + 'a')\n        else:\n            ans.append(ans[-1][:-1] + chr(ord(ans[-1][-1]) + 1))\n    print(ans[-1])\n\nmain()\n", "#!/usr/bin/env python3\n\n\ndef median(s, t, k):\n    if k == 0:\n        return \"\"\n    if s[0] == t[0]:\n        return s[0] + median(s[1:], t[1:], k - 1)\n    if len(s) == 1:\n        return t[0] + median(s[1:], t[1:], k - 1)\n    if len(t) == 1:\n        return s[0] + median(s[1:], t[1:], k - 1)\n    if k == 1:\n        return min(s[0], t[0])\n    if s[0] < t[0]:\n        return s[0] + median(s[1:], t, k - 1)\n    return t[0] + median(s, t[1:], k - 1)\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t, k))\n", "import sys\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += b[a[i] - 1]\n        if i >= 1 and a[i] - a[i - 1] == 1:\n            ans += c[a[i - 1] - 1]\n    print(ans)\nmain()\n", "\ndef main():\n    k = int(input())\n    s = input()\n    t = input()\n    # if s == t:\n    #     print(s)\n    #     return\n    # if k == 1:\n    #     print(s)\n    #     return\n    # if k == 2:\n    #     if s[0] == t[0]:\n    #         print(s[0] + chr(ord(s[1]) + 1))\n    #         return\n    #     else:\n    #         print(s[0] + chr(ord(s[0]) + 1))\n    #         return\n    # ans = []\n    # ans.append(s)\n    # while True:\n    #     if len(ans) == int((k + 1) / 2):\n    #         break\n    #     if ans[-1] == t:\n    #         break\n    #     if ans[-1][-1] == 'z':\n    #         ans.append(ans[-1][:-1] + 'a')\n    #     else:\n    #         ans.append(ans[-1][:-1] + chr(ord(ans[-1][-1]) + 1))\n    # print(ans[-1])\n\nmain()\n", "\n\ndef median(s, t):\n    if s == t:\n        return s\n    \n    mid = (ord(t[0]) - ord(s[0])) // 2 + 1\n    if mid == 0:\n        return s[0] + median(s[1:], t[1:])\n    if mid == ord(t[0]) - ord(s[0]) + 1:\n        return t[0] + median(s[1:], t[1:])\n    \n    return chr(ord(s[0]) + mid) + median(s[1:], t[1:])\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t))\n", "\ndef main():\n    k = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        print(s)\n        return\n    if k == 1:\n        print(s)\n        return\n    if k == 2:\n        if s[0] == t[0]:\n            print(s[0] + chr(ord(s[1]) + 1))\n            return\n        else:\n            print(s[0] + chr(ord(s[0]) + 1))\n            return\n    ans = []\n    ans.append(s)\n    while True:\n        if len(ans) == int((k + 1) // 2):\n            break\n        if ans[-1] == t:\n            break\n        if ans[-1][-1] == 'z':\n            ans.append(ans[-1][:-1] + 'a')\n        else:\n            ans.append(ans[-1][:-1] + chr(ord(ans[-1][-1]) + 1))\n    print(ans[-1])\n\nmain()\n", "\n\ndef median(s, t):\n    if s == t:\n        return s\n    \n    mid = (ord(t[0]) - ord(s[0])) >> 1\n    if mid == 0:\n        return s + median(s[1:], t[1:])\n    if mid == ord(t[0]) - ord(s[0]):\n        return t[0] + median(s[1:], t[1:])\n    \n    return chr(ord(s[0]) + mid) + median(s[1:], t[1:])\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t))\n", "\n\ndef median(s, t):\n    if s == t:\n        return s\n    \n    mid = (ord(t[0]) - ord(s[0])) / 2\n    if mid == 0.0:\n        return s + median(s[1:], t[1:])\n    if mid == ord(t[0]) - ord(s[0]) - 1:\n        return t[0] + median(s[1:], t[1:])\n    \n    return chr(ord(s[0]) + mid) + median(s[1:], t[1:])\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t))\n", "\n\ndef median(s, t):\n    if s == t:\n        return s\n    \n    mid = (ord(t[0]) - ord(s[0])) // 2 + 1\n    if mid == 0:\n        return s[0] + median(s[1:], t[1:])\n    if mid == ord(t[0]) - ord(s[0]) + 1:\n        return t[0] + median(s, t[1:])\n    \n    return chr(ord(s[0]) + mid) + median(s[1:], t[1:])\n\nk = int(input())\ns = input()\nt = input()\n\nprint(median(s, t))\n"]