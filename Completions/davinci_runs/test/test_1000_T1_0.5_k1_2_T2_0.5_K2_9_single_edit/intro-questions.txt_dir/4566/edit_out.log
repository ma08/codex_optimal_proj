2022-04-16 08:17:59.252850 num operations 1
2022-04-16 08:17:59.252867 size on input set 1
2022-04-16 08:18:10.176079 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\n# coding: utf-8\nn = int(input())\na = list(map(int, input().split()))\nk = int(input())\nprint(sum(a[:k]))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nn, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())  # \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 3,
      "text": "\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 4,
      "text": "n, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 5,
      "text": "\nn, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 6,
      "text": "\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 7,
      "text": "\nn, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 8,
      "text": "import math\n\n\ndef main():\n    # \u5165\u529b\n    n, m = map(int, input().split())\n\n    roads = []\n    for i in range(m):\n        a, b = map(int, input().split())\n        roads.append([a, b])\n\n    # \u51fa\u529b\n    for i in range(1, n+1):\n        count = 0\n        for road in roads:\n            if i in road:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650097079,
  "object": "edit"
}
2022-04-16 08:18:10.176366 fix syntax errors 9 ['\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\n# coding: utf-8\nn = int(input())\na = list(map(int, input().split()))\nk = int(input())\nprint(sum(a[:k]))\n', '#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nn, m = map(int, input().split())\n\n# 入力\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())  # スペース区切り\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', 'n, m = map(int, input().split())\n\n# 入力\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\nn, m = map(int, input().split())\n\n# 入力\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\nn, m = map(int, input().split())\n\n# 入力\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', "import math\n\n\ndef main():\n    # 入力\n    n, m = map(int, input().split())\n\n    roads = []\n    for i in range(m):\n        a, b = map(int, input().split())\n        roads.append([a, b])\n\n    # 出力\n    for i in range(1, n+1):\n        count = 0\n        for road in roads:\n            if i in road:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-16 08:18:10.176427 size on output set 8
2022-04-16 08:18:10.176436 num operations 1
2022-04-16 08:18:10.176441 size on input set 1
2022-04-16 08:18:17.674086 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 1,
      "text": "# coding:utf-8\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 3,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 4,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 5,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedges = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edges.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 6,
      "text": "\nN, M = map(int, input().split())\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 7,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append((a, b))\n    degree[a] += 1  # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[b] += 1  # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 8,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    }
  ],
  "created": 1650097090,
  "object": "edit"
}
2022-04-16 08:18:17.674405 fix syntax errors 9 ['\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedge = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '# coding:utf-8\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedge = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedge = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedge = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedge = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedges = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edges.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedge = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append((a, b))\n    degree[a] += 1  # 次数を計算する\n    degree[b] += 1  # 次数を計算する\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列\nedge = []\n\n# 各頂点の次数を格納する配列\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n']
2022-04-16 08:18:17.674467 size on output set 5
