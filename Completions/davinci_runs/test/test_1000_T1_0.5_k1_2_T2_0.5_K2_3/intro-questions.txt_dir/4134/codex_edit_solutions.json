["\n\n# Solution by Andrew Xing, ACM ICPC 2017.\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\ndef main():\n\n  n, m, k = map(int, input().split())\n  grid = [list(map(int, input().split())) for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution by Andrew Xing, 2019-2020\n# Problem: https://open.kattis.com/problems/xor\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()] # n = rows, m = columns, k = xor value\n  grid = [[int(x) for x in input().split()] for i in range(n)] # input grid of values\n  \n  # iterate through table\n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)] # dp table\n  dp[1][1][grid[0][0]] = 1 # initial value\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n        # if not in first row, add from above\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        # if not in first column, add from left\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k]) # print result\n\nif __name__ == \"__main__\":\n  main()\n", "def solve(n, m, k, grid, dp):\n    return 0\n\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution by Andrew Xing\n# Problem: https://open.kattis.com/problems/xor \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid, max(max(row) for row in grid)))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, max_num):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    max_num = max(max(row) for row in grid)\n    print(solve(n, m, k, grid, max_num))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution by Andrew Xing\n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n\n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n    print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\ndef solve(n, m, k, grid, dp, dx, dy):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    dx = [-1, 1, 0, 0]\n    dy = [0, 0, -1, 1]\n    print(solve(n, m, k, grid, dp, dx, dy))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid, max(max(grid))))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution by Andrew Xing, 2019\n# Problem: https://open.kattis.com/problems/xor\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n", "\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"]