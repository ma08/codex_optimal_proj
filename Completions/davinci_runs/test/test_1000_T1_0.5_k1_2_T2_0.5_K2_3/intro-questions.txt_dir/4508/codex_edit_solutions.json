["\n# solution\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, parent):\n    for v in adj[u]:\n        if v != parent:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# python3 solution:\n\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, parent):\n    for v in adj[u]:\n        if v != parent:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "\n# solution\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v, w):\n    adj[u].append((v, w))\n    adj[v].append((u, w))\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par, visited):\n    visited[u] = True\n    for v in adj[u]: \n        if visited[v] == False: \n            dfs(adj, v, u, visited)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par, visited):\n    visited[u] = True\n    count = 1\n    for v in adj[u]: \n        if visited[v] == False: \n            count += dfs(adj, v, u, visited) \n    return count\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/3)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# solution 1\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n\n\n# solution 2\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def Read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n\n    def compute_height(self):\n        maxHeight = 0\n        for vertex in range(self.n):\n            height = 0\n            i = vertex\n            while i != -1:\n                height += 1\n                i = self.parent[i]\n            maxHeight = max(maxHeight, height);\n        return maxHeight;\n\n\ndef main():\n    tree = TreeHeight()\n    tree.Read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n", "\n\n# python3\n# solution: https://codility.com/demo/results/trainingQQ6Q3W-KXU/\n", "\n\n# python3\n# solution:\n\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n", "\n\n\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, parent):\n    for v in adj[u]:\n        if v != parent:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n"]