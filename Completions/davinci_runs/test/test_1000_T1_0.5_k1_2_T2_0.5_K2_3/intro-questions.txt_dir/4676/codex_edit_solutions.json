["# get the odd characters\n\n# get the even characters\nO = input()\nE = input()\n\n# if the length of O is larger than E, then add a blank space to E\nif len(O) > len(E):\n    E = E + \" \"\n\n# initialize the final password\npassword = \"\"\n\n# for each character in O, append the character and the next character in E\nfor i in range(len(O)):\n    password = password + O[i] + E[i]\n\n# print the password\nprint(password)\n", "\nO = input()\nE = input()\n# if the length of O is longer than E, then add a blank character to E\nif len(O) > len(E):\n    E = E + \" \"\n# initialize the final password\npassword = \"\"\n# for each character in O, append the character and the next character in E\nfor i in range(len(O)):\n    password = password + O[i] + E[i]\n# print the password\nprint(password)\n", "\no = input()\ne = input()\n\nans = \"\"\nfor i in range(len(o)):\n    ans += o[i]\n    if i < len(e):\n        ans += e[i]\nprint(ans)\n", "\nodd = input()\neven = input()\n\nans = \"\"\nfor i in range(len(odd)):\n    ans += odd[i]\n    if i < len(even):\n        ans += even[i]\n\nprint(ans)\n", "\nO = input()\nE = input().split(\" \")\n\n# if the length of O is larger than E, then add a blank space to E\nif len(O) > len(E):\n    E.append(\" \")\n\n# initialize the final password\npassword = \"\"\n\n# for each character in O, append the character and the next character in E\nfor i in range(len(O)):\n    password = password + O[i] + E[i]\n\n# print the password\nprint(password)\n", "\n\no, e = input().split()\n\nans = \"\"\nfor i in range(len(o)):\n    ans += o[i]\n    if i < len(e):\n        ans += e[i]\n\nprint(ans) \n", "\n\nO = input()\nE = input()\n\n# if the length of O is larger than E, then add a space to E\nif len(O) > len(E):\n    E = E + \" \" # this will add a space to the end of E\n\n# initialize the final password\npassword = \"\"\n\n# for each character in O, append the character and the next character in E\nfor i in range(len(O)):\n    password = password + O[i] + E[i]\n\n# print the password\nprint(password)\n", "\n\nO = input(\"\")\nE = input(\"\")\n\n# if the length of O is longer than E, then add a blank character to E\nif len(O) > len(E):\n    E = E + \" \"\n\n# initialize the final password\npassword = \"\"\n\n# for each character in O, append the character and the next character in E\nfor i in range(len(O)):\n    password = password + O[i] + E[i]\n\n# print the password\nprint(password)\n", "\no = input() \ne = input() \n\nans = \"\"\nfor i in range(len(o)): \n    ans += o[i]\n    if i < len(e): \n        ans += e[i]\n\nprint(ans) \n", "\n\nodd = input().strip()\neven = input().strip()\n\nans = \"\"\nfor i in range(len(odd)):\n    ans += odd[i]\n    if i < len(even):\n        ans += even[i]\n\nprint(ans)\n", "\n\nO = input().strip()\nE = input().strip()\n\n# if the length of O is longer than E, then add a blank character to E\nif len(O) > len(E):\n    E = E + \" \"\n\n# initialize the final password\npassword = \"\"\n\n# for each character in O, append the character and the next character in E\nfor i in range(len(O)):\n    password = password + O[i] + E[i]\n\n# print the password\nprint(password)\n"]