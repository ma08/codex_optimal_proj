2022-04-13 00:59:31.206635 num operations 2
2022-04-13 00:59:31.206646 size on input set 1
2022-04-13 00:59:34.233819 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811571,
  "object": "edit"
}
2022-04-13 00:59:34.234041 fix spelling mistakes 3 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-13 00:59:34.234112 size on output set 3
2022-04-13 00:59:34.234120 size on input set 3
2022-04-13 00:59:38.669523 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BB') > 0 or grid[i].count('WW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2] \\\n                and grid[i][j] == grid[i][j+3]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811574,
  "object": "edit"
}
2022-04-13 00:59:38.669815 fix syntax errors 3 ["\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BB') > 0 or grid[i].count('WW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2] \\\n                and grid[i][j] == grid[i][j+3]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "#!/usr/bin/env python3\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Count the number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares\n# in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-13 00:59:56.459130 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# \n# n = int(input())\n#\n# grid = []\n# for _ in range(n):\n#     grid.append(input())\n#\n# # Check for the same number of black and white squares\n# # in each row and column\n# row_count = []\n# col_count = []\n# for i in range(n):\n#     row_count.append(grid[i].count('B'))\n#     col_count.append(0)\n#     for j in range(n):\n#         col_count[i] += 1 if grid[j][i] == 'B' else 0\n#\n# # Check for adjacent squares of the same color\n# for i in range(n):\n#     if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n#         print(0)\n#         exit()\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n#             print(0)\n#             exit()\n#\n# # Check for the same number of black and white squares in each row and column\n# for i in range(n):\n#     if row_count[i] != n//2:\n#         print(0)\n#         exit()\n#     if col_count[i] != n//2:\n#         print(0)\n#         exit()\n#\n# print(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    }
  ],
  "created": 1649811578,
  "object": "edit"
}
2022-04-13 00:59:56.459322 NO RESULT
2022-04-13 00:59:56.459328 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-13 00:59:56.459433 fix syntax errors 2 ["\n# \n# n = int(input())\n#\n# grid = []\n# for _ in range(n):\n#     grid.append(input())\n#\n# # Check for the same number of black and white squares\n# # in each row and column\n# row_count = []\n# col_count = []\n# for i in range(n):\n#     row_count.append(grid[i].count('B'))\n#     col_count.append(0)\n#     for j in range(n):\n#         col_count[i] += 1 if grid[j][i] == 'B' else 0\n#\n# # Check for adjacent squares of the same color\n# for i in range(n):\n#     if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n#         print(0)\n#         exit()\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n#             print(0)\n#             exit()\n#\n# # Check for the same number of black and white squares in each row and column\n# for i in range(n):\n#     if row_count[i] != n//2:\n#         print(0)\n#         exit()\n#     if col_count[i] != n//2:\n#         print(0)\n#         exit()\n#\n# print(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for the same number of black and white squares\n# in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:00:04.231976 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"hello\")\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Nov  9 21:22:43 2019\n\n@author: michaelboles\n\"\"\"\n\n# set up grid\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811596,
  "object": "edit"
}
2022-04-13 01:00:04.232247 fix syntax errors 3 ['\nprint("hello")\n', "n = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\nprint(1)\n", '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sat Nov  9 21:22:43 2019\n\n@author: michaelboles\n"""\n\n# set up grid\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count(\'B\'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == \'B\' else 0\n\n# check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count(\'BBB\') > 0 or grid[i].count(\'WWW\') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n']
2022-04-13 01:00:04.232288 size on output set 8
2022-04-13 01:00:04.232298 num operations 2
2022-04-13 01:00:04.232303 size on input set 1
2022-04-13 01:00:17.182027 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# def check_row(row):\n#     color = row[0]\n#     count = 0\n#     for i in range(n):\n#         if row[i] == color:\n#             count += 1\n#         else:\n#             color = row[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_column(column):\n#     color = column[0]\n#     count = 0\n#     for i in range(n):\n#         if column[i] == color:\n#             count += 1\n#         else:\n#             color = column[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_grid():\n#     for i in range(n):\n#         if not check_row(grid[i]):\n#             return False\n#         column = \"\"\n#         for j in range(n):\n#             column += grid[j][i]\n#         if not check_column(column):\n#             return False\n#     return True\n#\n# if check_grid():\n#     print(1)\n# else:\n#     print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = []\n    for j in range(n):\n        grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    }
  ],
  "created": 1649811604,
  "object": "edit"
}
2022-04-13 01:00:17.182230 fix spelling mistakes 3 ['\n#\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# def check_row(row):\n#     color = row[0]\n#     count = 0\n#     for i in range(n):\n#         if row[i] == color:\n#             count += 1\n#         else:\n#             color = row[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_column(column):\n#     color = column[0]\n#     count = 0\n#     for i in range(n):\n#         if column[i] == color:\n#             count += 1\n#         else:\n#             color = column[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_grid():\n#     for i in range(n):\n#         if not check_row(grid[i]):\n#             return False\n#         column = ""\n#         for j in range(n):\n#             column += grid[j][i]\n#         if not check_column(column):\n#             return False\n#     return True\n#\n# if check_grid():\n#     print(1)\n# else:\n#     print(0)\n', '\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = []\n    for j in range(n):\n        grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n']
2022-04-13 01:00:17.182351 size on output set 3
2022-04-13 01:00:17.182359 size on input set 3
2022-04-13 01:00:31.812037 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 2,
      "text": "\n#\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# def check_row(row):\n#     color = row[0]\n#     count = 0\n#     for i in range(n):\n#         if row[i] == color:\n#             count += 1\n#         else:\n#             color = row[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_column(column):\n#     color = column[0]\n#     count = 0\n#     for i in range(n):\n#         if column[i] == color:\n#             count += 1\n#         else:\n#             color = column[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_grid():\n#     for i in range(n):\n#         if not check_row(grid[i]):\n#             return False\n#         column = \"\"\n#         for j in range(n):\n#             column += grid[j][i]\n#         if not check_column(column):\n#             return False\n#     return True\n#\n# if check_grid():\n#     print(1)\n# else:\n#     print(0)\n\n\n# def check_row(row):\n#     color = row[0]\n#     count = 0\n#     for i in range(n):\n#         if row[i] == color:\n#             count += 1\n#         else:\n#             color = row[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_column(column):\n#     color = column[0]\n#     count = 0\n#     for i in range(n):\n#         if column[i] == color:\n#             count += 1\n#         else:\n#             color = column[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_grid():\n#     for i in range(n):\n#         if not check_row(grid[i]):\n#             return False\n#         column = \"\"\n#         for j in range(n):\n#             column += grid[j][i]\n#         if not check_column(column):\n#             return False\n#     return True\n#\n# if check_grid():\n#     print(1)\n# else:\n#     print(0)\n"
    }
  ],
  "created": 1649811617,
  "object": "edit"
}
2022-04-13 01:00:31.812229 fix syntax errors 3 ['\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\n#\n# n = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n#\n# def check_row(row):\n#     color = row[0]\n#     count = 0\n#     for i in range(n):\n#         if row[i] == color:\n#             count += 1\n#         else:\n#             color = row[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_column(column):\n#     color = column[0]\n#     count = 0\n#     for i in range(n):\n#         if column[i] == color:\n#             count += 1\n#         else:\n#             color = column[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_grid():\n#     for i in range(n):\n#         if not check_row(grid[i]):\n#             return False\n#         column = ""\n#         for j in range(n):\n#             column += grid[j][i]\n#         if not check_column(column):\n#             return False\n#     return True\n#\n# if check_grid():\n#     print(1)\n# else:\n#     print(0)\n\n\n# def check_row(row):\n#     color = row[0]\n#     count = 0\n#     for i in range(n):\n#         if row[i] == color:\n#             count += 1\n#         else:\n#             color = row[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_column(column):\n#     color = column[0]\n#     count = 0\n#     for i in range(n):\n#         if column[i] == color:\n#             count += 1\n#         else:\n#             color = column[i]\n#             count = 1\n#         if count == 3:\n#             return False\n#     return True\n#\n# def check_grid():\n#     for i in range(n):\n#         if not check_row(grid[i]):\n#             return False\n#         column = ""\n#         for j in range(n):\n#             column += grid[j][i]\n#         if not check_column(column):\n#             return False\n#     return True\n#\n# if check_grid():\n#     print(1)\n# else:\n#     print(0)\n']
2022-04-13 01:00:45.460394 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = [input() for j in range(n)]\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(len(row)):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(len(column)):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(len(grid)):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(len(grid)):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = []\n    for j in range(n):\n        grid.append(input())\n\n    def check_row(row):\n        color = row[0]\n        count = 0\n        for i in range(n):\n            if row[i] == color:\n                count += 1\n            else:\n                color = row[i]\n                count = 1\n            if count == 3:\n                return False\n        return True\n\n    def check_column(column):\n        color = column[0]\n        count = 0\n        for i in range(n):\n            if column[i] == color:\n                count += 1\n            else:\n                color = column[i]\n                count = 1\n            if count == 3:\n                return False\n        return True\n\n    def check_grid():\n        for i in range(n):\n            if not check_row(grid[i]):\n                return False\n            column = \"\"\n            for j in range(n):\n                column += grid[j][i]\n            if not check_column(column):\n                return False\n        return True\n\n    if check_grid():\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 2,
      "text": "\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = []\n    for j in range(n):\n    if check_grid():\n        print(1)\n    else:\n        print(0)\n        grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n"
    }
  ],
  "created": 1649811631,
  "object": "edit"
}
2022-04-13 01:00:45.460634 fix syntax errors 3 ['\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = [input() for j in range(n)]\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(len(row)):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(len(column)):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(len(grid)):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(len(grid)):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = []\n    for j in range(n):\n        grid.append(input())\n\n    def check_row(row):\n        color = row[0]\n        count = 0\n        for i in range(n):\n            if row[i] == color:\n                count += 1\n            else:\n                color = row[i]\n                count = 1\n            if count == 3:\n                return False\n        return True\n\n    def check_column(column):\n        color = column[0]\n        count = 0\n        for i in range(n):\n            if column[i] == color:\n                count += 1\n            else:\n                color = column[i]\n                count = 1\n            if count == 3:\n                return False\n        return True\n\n    def check_grid():\n        for i in range(n):\n            if not check_row(grid[i]):\n                return False\n            column = ""\n            for j in range(n):\n                column += grid[j][i]\n            if not check_column(column):\n                return False\n        return True\n\n    if check_grid():\n        print(1)\n    else:\n        print(0)\n', '\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = []\n    for j in range(n):\n    if check_grid():\n        print(1)\n    else:\n        print(0)\n        grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n']
2022-04-13 01:00:50.292601 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]) or not check_column(grid[i]):\n            return False\n        # column = \"\"\n        # for j in range(n):\n        #     column += grid[j][i]\n        # if not check_column(column):\n        #     return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] != color:\n            color = row[i]\n            count = 1\n        else:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    }
  ],
  "created": 1649811645,
  "object": "edit"
}
2022-04-13 01:00:50.292931 fix syntax errors 3 ['\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]) or not check_column(grid[i]):\n            return False\n        # column = ""\n        # for j in range(n):\n        #     column += grid[j][i]\n        # if not check_column(column):\n        #     return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] != color:\n            color = row[i]\n            count = 1\n        else:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 4:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n']
2022-04-13 01:00:50.292985 size on output set 8
2022-04-13 01:00:50.292997 num operations 2
2022-04-13 01:00:50.293002 size on input set 1
2022-04-13 01:00:52.154084 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n"
    }
  ],
  "created": 1649811650,
  "object": "edit"
}
2022-04-13 01:00:52.154312 fix spelling mistakes 3 ['\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n']
2022-04-13 01:00:52.154350 size on output set 3
2022-04-13 01:00:52.154356 size on input set 3
2022-04-13 01:01:01.138856 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# Check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# If all conditions are satisfied.\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\ndef run():\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    \n    # check rows\n    for row in grid:\n        count = 0\n        for i in range(n-1):\n            if row[i] == row[i+1]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n    \n    # check columns\n    for i in range(n):\n        count = 0\n        for j in range(n-1):\n            if grid[j][i] == grid[j+1][i]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n    \n    # if all conditions are satisfied.\n    print(1)\n    \nrun()\n"
    }
  ],
  "created": 1649811652,
  "object": "edit"
}
2022-04-13 01:01:01.139176 fix syntax errors 3 ['\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# Check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# If all conditions are satisfied.\nprint(1)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n', '\ndef run():\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    \n    # check rows\n    for row in grid:\n        count = 0\n        for i in range(n-1):\n            if row[i] == row[i+1]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n    \n    # check columns\n    for i in range(n):\n        count = 0\n        for j in range(n-1):\n            if grid[j][i] == grid[j+1][i]:\n                count += 1\n            else:\n                count = 0\n            if count == 2:\n                print(0)\n                exit()\n    \n    # if all conditions are satisfied.\n    print(1)\n    \nrun()\n']
2022-04-13 01:01:08.174929 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n# check row\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    for j in range(n-2):\n        if grid[j][i] == grid[j+1][i]:\n            if grid[j+1][i] == grid[j+2][i]:\n                print(0)\n                exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    }
  ],
  "created": 1649811661,
  "object": "edit"
}
2022-04-13 01:01:08.175162 fix syntax errors 3 ['#!/usr/bin/env python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n# check row\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check columns\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check rows\nfor i in range(n):\n    for j in range(n-2):\n        if grid[j][i] == grid[j+1][i]:\n            if grid[j+1][i] == grid[j+2][i]:\n                print(0)\n                exit()\n\n# if all conditions are satisfied\nprint(1)\n']
2022-04-13 01:01:12.058712 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j + 1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n - 1):\n        if row[i] == row[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n - 1):\n        if grid[j][i] == grid[j + 1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    }
  ],
  "created": 1649811668,
  "object": "edit"
}
2022-04-13 01:01:12.058909 NO RESULT
2022-04-13 01:01:12.058917 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-13 01:01:12.059041 fix syntax errors 2 ['\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j + 1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n - 1):\n        if row[i] == row[i + 1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n - 1):\n        if grid[j][i] == grid[j + 1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n']
2022-04-13 01:01:12.059072 size on output set 8
2022-04-13 01:01:12.059085 num operations 2
2022-04-13 01:01:12.059090 size on input set 1
2022-04-13 01:01:14.811290 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811672,
  "object": "edit"
}
2022-04-13 01:01:14.811500 fix spelling mistakes 3 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-13 01:01:14.811629 size on output set 3
2022-04-13 01:01:14.811637 size on input set 3
2022-04-13 01:01:26.611358 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([row.count('B') for row in grid])\nnum_white = sum([row.count('W') for row in grid])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)]) # sum of a list of booleans is 1 if any are True\n    num_white = sum([grid[j][i] == 'W' for j in range(n)]) # sum of a list of booleans is 0 if all are False\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]): # Python does not allow chained comparisons\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input()) \n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811674,
  "object": "edit"
}
2022-04-13 01:01:26.611585 fix syntax errors 3 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([row.count('B') for row in grid])\nnum_white = sum([row.count('W') for row in grid])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)]) # sum of a list of booleans is 1 if any are True\n    num_white = sum([grid[j][i] == 'W' for j in range(n)]) # sum of a list of booleans is 0 if all are False\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]): # Python does not allow chained comparisons\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input()) \n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-13 01:01:35.718106 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811686,
  "object": "edit"
}
2022-04-13 01:01:35.718332 fix syntax errors 3 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "n = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-13 01:01:45.546235 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):  # first 3\n        print(0)\n        exit()\n    for j in range(n-2):  # middle 3\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):  # last 3\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):  # first 3\n        print(0)\n        exit()\n    for j in range(n-2):  # middle 3\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):  # last 3\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811695,
  "object": "edit"
}
2022-04-13 01:01:45.546454 fix syntax errors 3 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):  # first 3\n        print(0)\n        exit()\n    for j in range(n-2):  # middle 3\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):  # last 3\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):  # first 3\n        print(0)\n        exit()\n    for j in range(n-2):  # middle 3\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):  # last 3\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-13 01:01:45.546580 size on output set 9
2022-04-13 01:01:45.546593 num operations 2
2022-04-13 01:01:45.546599 size on input set 1
2022-04-13 01:01:49.277561 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n"
    }
  ],
  "created": 1649811705,
  "object": "edit"
}
2022-04-13 01:01:49.277751 fix spelling mistakes 3 ["\n\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n", "\n\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n", "\n\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n"]
2022-04-13 01:01:49.277792 size on output set 3
2022-04-13 01:01:49.277798 size on input set 3
2022-04-13 01:01:53.958692 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2] :\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n"
    }
  ],
  "created": 1649811709,
  "object": "edit"
}
2022-04-13 01:01:53.958961 fix syntax errors 3 ["\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n", "\n\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2] :\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n", "\n# Read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# Check the first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# Check the third condition\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# If the grid is correct, print 1\nprint(1)\n"]
2022-04-13 01:01:58.727278 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition. (the number of black and white cells should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition. (the number of black and white cells should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition. (there should be no 3x3 blocks of the same color)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n"
    }
  ],
  "created": 1649811713,
  "object": "edit"
}
2022-04-13 01:01:58.727490 fix syntax errors 3 ["\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition. (the number of black and white cells should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition. (the number of black and white cells should be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition. (there should be no 3x3 blocks of the same color)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n", "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n", "\n# read the input data.\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition.\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition.\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] or [row[i] for row in grid][j] == [row[i] for row in grid][j + 1] == [row[i] for row in grid][j + 2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1.\nprint(1)\n"]
2022-04-13 01:02:04.272643 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - \\\n        [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == \\\n                [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n"
    }
  ],
  "created": 1649811718,
  "object": "edit"
}
2022-04-13 01:02:04.272839 fix syntax errors 3 ["\n\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - \\\n        [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == \\\n                [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n", "\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n", "\n# read input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check first condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check second condition\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if grid is correct, print 1\nprint(1)\n"]
2022-04-13 01:02:04.272879 size on output set 8
2022-04-13 01:02:04.272891 num operations 2
2022-04-13 01:02:04.272896 size on input set 1
2022-04-13 01:02:06.838455 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811724,
  "object": "edit"
}
2022-04-13 01:02:06.838667 fix spelling mistakes 3 ["\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:02:06.838790 size on output set 3
2022-04-13 01:02:06.838798 size on input set 3
2022-04-13 01:02:10.007458 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n - 2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n - 2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811726,
  "object": "edit"
}
2022-04-13 01:02:10.007657 fix syntax errors 3 ["\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n - 2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n - 2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consective\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:02:13.112766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W') or row.count('B') > n/2:\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W') or column.count('B') > n/2:\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811730,
  "object": "edit"
}
2022-04-13 01:02:13.112970 fix syntax errors 3 ["n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W') or row.count('B') > n/2:\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W') or column.count('B') > n/2:\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:02:50.434370 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811733,
  "object": "edit"
}
2022-04-13 01:02:50.434582 fix syntax errors 3 ["#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\n#!/usr/bin/env python\n# coding: utf-8\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check colors\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check colors\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:02:50.434734 size on output set 8
2022-04-13 01:02:50.434753 num operations 2
2022-04-13 01:02:50.434759 size on input set 1
2022-04-13 01:02:53.115684 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same colour\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1649811770,
  "object": "edit"
}
2022-04-13 01:02:53.115873 fix spelling mistakes 3 ["\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same colour\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-13 01:02:53.115919 size on output set 3
2022-04-13 01:02:53.115926 size on input set 3
2022-04-13 01:02:56.602607 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if the row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if the column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if there are no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if each row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if each column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if there are no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1649811773,
  "object": "edit"
}
2022-04-13 01:02:56.602902 fix syntax errors 3 ["#!/usr/bin/env python3\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if the row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if the column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if there are no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if each row has an equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if each column has an equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if there are no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-13 01:02:59.989956 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares.\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares.\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color.\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(\"Hello World\")\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1649811776,
  "object": "edit"
}
2022-04-13 01:02:59.990182 fix syntax errors 3 ["\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares.\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares.\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color.\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", '\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count(\'B\') != row.count(\'W\'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count(\'B\') != column.count(\'W\'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if \'BBB\' in row or \'WWW\' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if \'BBB\' in column or \'WWW\' in column:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    print("Hello World")\n', "\n\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-13 01:03:10.026789 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_correct(board):\n    # check rows\n    for row in board:\n        if row.count('X') != row.count('O'):\n            return False\n    # check columns\n    for i in range(len(board)):\n        column = [row[i] for row in board]\n        if column.count('X') != column.count('O'):\n            return False\n    # check if there are three consecutive X's or O's\n    for row in board:\n        if 'XXX' in row or 'OOO' in row:\n            return False\n    for i in range(len(board)):\n        column = [row[i] for row in board]\n        if 'XXX' in column or 'OOO' in column:\n            return False\n    return True  # if all tests pass, return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    board = [input() for _ in range(n)]\n    if is_correct(board):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if each row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if each column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same colour\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 2,
      "text": "\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same colour\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1649811780,
  "object": "edit"
}
2022-04-13 01:03:10.026992 fix syntax errors 3 ["\n\ndef is_correct(board):\n    # check rows\n    for row in board:\n        if row.count('X') != row.count('O'):\n            return False\n    # check columns\n    for i in range(len(board)):\n        column = [row[i] for row in board]\n        if column.count('X') != column.count('O'):\n            return False\n    # check if there are three consecutive X's or O's\n    for row in board:\n        if 'XXX' in row or 'OOO' in row:\n            return False\n    for i in range(len(board)):\n        column = [row[i] for row in board]\n        if 'XXX' in column or 'OOO' in column:\n            return False\n    return True  # if all tests pass, return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    board = [input() for _ in range(n)]\n    if is_correct(board):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if each row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if each column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same colour\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\ndef is_correct(grid):\n    n = len(grid)\n    # check if row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same colour\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-13 01:03:10.027059 size on output set 9
2022-04-13 01:03:10.027072 num operations 2
2022-04-13 01:03:10.027077 size on input set 1
2022-04-13 01:03:14.242032 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') != 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811790,
  "object": "edit"
}
2022-04-13 01:03:14.242317 fix spelling mistakes 3 ["\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') != 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:03:14.242366 size on output set 3
2022-04-13 01:03:14.242373 size on input set 3
2022-04-13 01:03:18.790156 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') > 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW < n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811794,
  "object": "edit"
}
2022-04-13 01:03:18.790383 fix syntax errors 3 ["\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('.') > 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW < n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:03:24.000347 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('W') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countW != n // 2:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    count_b = 0\n    count_w = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            count_b += 1\n        elif grid[i][j] == 'W':\n            count_w += 1\n    if count_b != n // 2 or count_b != count_w:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n - 2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811798,
  "object": "edit"
}
2022-04-13 01:03:24.000572 fix syntax errors 3 ["\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('W') != n // 2:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countW != n // 2:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    count_b = 0\n    count_w = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            count_b += 1\n        elif grid[i][j] == 'W':\n            count_w += 1\n    if count_b != n // 2 or count_b != count_w:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares.\nfor i in range(n):\n    for j in range(n - 2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares.\nfor j in range(n):\n    for i in range(n - 2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:03:29.345563 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())  # number of rows and columns\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i][0] == grid[i][1]:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or grid[0][j] == grid[1][j]:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') == 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB == 0:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649811804,
  "object": "edit"
}
2022-04-13 01:03:29.345860 fix syntax errors 3 ["\n\nn = int(input())  # number of rows and columns\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i][0] == grid[i][1]:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or grid[0][j] == grid[1][j]:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') == 0:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB == 0:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-13 01:03:29.345914 size on output set 8
