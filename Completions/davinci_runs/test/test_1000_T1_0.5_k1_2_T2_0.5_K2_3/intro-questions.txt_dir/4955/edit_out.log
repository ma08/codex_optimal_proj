2022-04-13 08:34:17.656558 num operations 2
2022-04-13 08:34:17.656567 size on input set 1
2022-04-13 08:34:23.229773 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2221212']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in get_notes_from_note('A'):\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649838857,
  "object": "edit"
}
2022-04-13 08:34:23.230000 fix spelling mistakes 3 ["\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2221212']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in get_notes_from_note('A'):\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:34:23.230136 size on output set 3
2022-04-13 08:34:23.230144 size on input set 3
2022-04-13 08:34:34.481005 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2221212']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(sorted(song_scales)))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_notes(note):\n    return [note, note + \"#\", note + \"##\"]\n\ndef get_notes_from_scale(scale):\n    notes = []\n    for note in scale:\n        if note == \"2\":\n            notes.append(get_notes(notes[-1])[1])\n        else:\n            notes.append(get_notes(notes[-1])[2])\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]:\n        for scale in [\"2212221\", \"2122212\", \"2221221\", \"2212212\", \"1222221\", \"2122221\", \"2221212\"]:\n            scales.append(note + \" \" + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(\" \")\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(\" \")\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(\" \".join(song_scales))\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2221212']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline().strip()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649838863,
  "object": "edit"
}
2022-04-13 08:34:34.481203 fix syntax errors 3 ["#!/usr/bin/env python3\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2221212']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(sorted(song_scales)))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", '\nimport sys\n\ndef get_notes(note):\n    return [note, note + "#", note + "##"]\n\ndef get_notes_from_scale(scale):\n    notes = []\n    for note in scale:\n        if note == "2":\n            notes.append(get_notes(notes[-1])[1])\n        else:\n            notes.append(get_notes(notes[-1])[2])\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]:\n        for scale in ["2212221", "2122212", "2221221", "2212212", "1222221", "2122221", "2221212"]:\n            scales.append(note + " " + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(" ")\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(" ")\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(" ".join(song_scales))\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', "\n\nimport sys\n\ndef get_notes(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes(note)[1]\n        else:\n            note = get_notes(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2221212']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline().strip()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:34:46.421300 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    notes = []\n    for i in range(0, len(scale)):\n        notes += get_notes_from_note(scale[i])\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122', '1222122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes and note != '\\n':\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')[1]\n        if is_scale(scale, song):\n            song_scales.append(scale)\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for interval in scale[1:]:\n        if interval == '2':\n            note = get_notes_from_note(note)[1] # half-tone\n        else:\n            note = get_notes_from_note(note)[2] # whole-tone\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    intervals = ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']\n    for note in notes:\n        for interval in intervals:\n            scales.append(note + ' ' + interval)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for i in range(len(song)):\n        if song[i] not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ') # ['C', '2212221']\n        if is_scale(scale[1], song): # [2212221, 'E C D E F G A B C']\n            song_scales.append(scale[0]) # ['C']\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline().rstrip()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649838874,
  "object": "edit"
}
2022-04-13 08:34:46.421525 fix syntax errors 3 ["\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    notes = []\n    for i in range(0, len(scale)):\n        notes += get_notes_from_note(scale[i])\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122', '1222122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes and note != '\\n':\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')[1]\n        if is_scale(scale, song):\n            song_scales.append(scale)\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for interval in scale[1:]:\n        if interval == '2':\n            note = get_notes_from_note(note)[1] # half-tone\n        else:\n            note = get_notes_from_note(note)[2] # whole-tone\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    intervals = ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']\n    for note in notes:\n        for interval in intervals:\n            scales.append(note + ' ' + interval)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for i in range(len(song)):\n        if song[i] not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ') # ['C', '2212221']\n        if is_scale(scale[1], song): # [2212221, 'E C D E F G A B C']\n            song_scales.append(scale[0]) # ['C']\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline().rstrip()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']:\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_notes_from_song(song):\n    return song.split(' ')\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_notes_from_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:34:59.045131 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in get_notes_from_note('A'):\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_notes_from_note(note):\n    return note, note + '#', note + '##'\n\ndef get_notes_from_scale(scale):\n    notes = []\n    for note in scale:\n        if note == '2':\n            notes.append(get_notes_from_note(notes[-1])[1])\n        elif note == '1':\n            notes.append(get_notes_from_note(notes[-1])[2])\n    return notes\n\ndef get_scales():\n    scales = []\n    for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n        scales.append(get_notes_from_scale(scale))\n    return scales\n\ndef get_song(song):\n    song = song.split()\n    return song\n\ndef is_scale(scale, song):\n    return set(scale).issubset(set(song))\n\ndef get_song_scales(song):\n    scales = get_scales()\n    return [scale[0] for scale in scales if is_scale(scale, song)]\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline().rstrip()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(sorted(song_scales)))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in get_notes_from_note('A'):\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649838886,
  "object": "edit"
}
2022-04-13 08:34:59.045331 fix syntax errors 3 ["\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in get_notes_from_note('A'):\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_notes_from_note(note):\n    return note, note + '#', note + '##'\n\ndef get_notes_from_scale(scale):\n    notes = []\n    for note in scale:\n        if note == '2':\n            notes.append(get_notes_from_note(notes[-1])[1])\n        elif note == '1':\n            notes.append(get_notes_from_note(notes[-1])[2])\n    return notes\n\ndef get_scales():\n    scales = []\n    for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n        scales.append(get_notes_from_scale(scale))\n    return scales\n\ndef get_song(song):\n    song = song.split()\n    return song\n\ndef is_scale(scale, song):\n    return set(scale).issubset(set(song))\n\ndef get_song_scales(song):\n    scales = get_scales()\n    return [scale[0] for scale in scales if is_scale(scale, song)]\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline().rstrip()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(sorted(song_scales)))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_notes_from_note(note):\n    return [note, note + '#', note + '##']\n\ndef get_notes_from_scale(scale):\n    note = scale[0]\n    notes = [note]\n    for i in range(1, len(scale)):\n        if scale[i] == '2':\n            note = get_notes_from_note(note)[1]\n        else:\n            note = get_notes_from_note(note)[2]\n        notes.append(note)\n    return notes\n\ndef get_scales():\n    scales = []\n    for note in get_notes_from_note('A'):\n        for scale in ['2212221', '2122212', '2221221', '2212212', '1222221', '2122221', '2212122']:\n            scales.append(note + ' ' + scale)\n    return scales\n\ndef get_song(song):\n    song = song.split(' ')\n    return song\n\ndef is_scale(scale, song):\n    notes = get_notes_from_scale(scale)\n    for note in song:\n        if note not in notes:\n            return False\n    return True\n\ndef get_song_scales(song):\n    scales = get_scales()\n    song_scales = []\n    for scale in scales:\n        scale = scale.split(' ')\n        if is_scale(scale[1], song):\n            song_scales.append(scale[0])\n    return song_scales\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = sys.stdin.readline()\n    song = get_song(song)\n    song_scales = get_song_scales(song)\n    if song_scales:\n        print(' '.join(song_scales))\n    else:\n        print('none')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:34:59.045489 size on output set 8
2022-04-13 08:34:59.045504 num operations 2
2022-04-13 08:34:59.045509 size on input set 1
2022-04-13 08:35:01.649537 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649838899,
  "object": "edit"
}
2022-04-13 08:35:01.649705 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:35:01.649744 size on output set 3
2022-04-13 08:35:01.649750 size on input set 3
2022-04-13 08:35:06.084749 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n\ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\n        \"A\",\n        \"A#\",\n        \"B\",\n        \"C\",\n        \"C#\",\n        \"D\",\n        \"D#\",\n        \"E\",\n        \"F\",\n        \"F#\",\n        \"G\",\n        \"G#\",\n    ]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n\n\ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nall_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649838901,
  "object": "edit"
}
2022-04-13 08:35:06.085011 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n\ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\n        "A",\n        "A#",\n        "B",\n        "C",\n        "C#",\n        "D",\n        "D#",\n        "E",\n        "F",\n        "F#",\n        "G",\n        "G#",\n    ]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n\n\ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nall_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:35:10.975608 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nall_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nall_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649838906,
  "object": "edit"
}
2022-04-13 08:35:10.975824 fix syntax errors 3 ['\n\n\nall_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nall_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0 or i % 7 == 3:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 5:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:35:12.686511 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n\ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649838911,
  "object": "edit"
}
2022-04-13 08:35:12.686779 fix syntax errors 3 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n\ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    song = list(sys.stdin.readline().split())\n    all_scales = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n    scales = []\n    for scale in all_scales:\n        if check_scale(song, scale, all_scales):\n            scales.append(scale)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(" ".join(scales))\n    \ndef check_scale(song, scale, all_scales):\n    scale_index = all_scales.index(scale)\n    for i in range(len(song)):\n        if song[i] != all_scales[scale_index]:\n            return False\n        if i % 7 == 0:\n            scale_index += 2\n        elif i % 7 == 2 or i % 7 == 6:\n            scale_index += 1\n        scale_index = scale_index % 12\n    return True\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:35:12.686822 size on output set 9
2022-04-13 08:35:12.686848 num operations 2
2022-04-13 08:35:12.686854 size on input set 1
2022-04-13 08:35:18.825163 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    },
    {
      "index": 1,
      "text": "\n\n#Program starts here.\nimport sys\n\n#Reading in input.\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n#Initializing variables.\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n#Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n#Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    },
    {
      "index": 2,
      "text": "\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    }
  ],
  "created": 1649838912,
  "object": "edit"
}
2022-04-13 08:35:18.825447 fix spelling mistakes 3 ["\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n", "\n\n#Program starts here.\nimport sys\n\n#Reading in input.\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n#Initializing variables.\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n#Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n#Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n", "\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"]
2022-04-13 08:35:18.825516 size on output set 3
2022-04-13 08:35:18.825523 size on input set 3
2022-04-13 08:35:23.082280 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits is True:\n            print(notes_list[i], end=' ')\n\nif fits is False:\n    print('none')\n"
    },
    {
      "index": 1,
      "text": "\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    }
  ],
  "created": 1649838918,
  "object": "edit"
}
2022-04-13 08:35:23.082542 fix syntax errors 3 ["\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits is True:\n            print(notes_list[i], end=' ')\n\nif fits is False:\n    print('none')\n", "\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"]
2022-04-13 08:35:25.682932 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits is True:\n            print(notes_list[i], end=' ')\n\nif fits is False:\n    print('none')\n"
    },
    {
      "index": 1,
      "text": "\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits:\n            print(notes_list[i], end=' ')\n\nif not fits:\n    print('none')\n"
    },
    {
      "index": 2,
      "text": "\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits:\n            print(notes_list[i], end=' ')\n\nif not fits:\n    print('none')\n"
    }
  ],
  "created": 1649838923,
  "object": "edit"
}
2022-04-13 08:35:25.683204 fix syntax errors 3 ["\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits is True:\n            print(notes_list[i], end=' ')\n\nif fits is False:\n    print('none')\n", "\n\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits:\n            print(notes_list[i], end=' ')\n\nif not fits:\n    print('none')\n", "\n# Program starts here\nimport sys\n\n# Reading in input\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits:\n            print(notes_list[i], end=' ')\n\nif not fits:\n    print('none')\n"]
2022-04-13 08:35:33.763952 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#Program starts here.\nimport sys\n\n#Reading in input.\nn = int(sys.stdin.readline().strip()) #the number of notes\nnotes = sys.stdin.readline().strip().split() #the notes\n\n#Initializing variables.\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n#Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n#Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('None')\n"
    },
    {
      "index": 1,
      "text": "\n\n# Program starts here.\nimport sys\n\n# Reading in input.\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables.\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n"
    },
    {
      "index": 2,
      "text": "\n\n# Program starts here.\nimport sys\n\n# Reading in input.\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables.\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits is True:\n            print(notes_list[i], end=' ')\n\nif fits is False:\n    print('none')\n"
    }
  ],
  "created": 1649838925,
  "object": "edit"
}
2022-04-13 08:35:33.764214 fix syntax errors 3 ["\n#Program starts here.\nimport sys\n\n#Reading in input.\nn = int(sys.stdin.readline().strip()) #the number of notes\nnotes = sys.stdin.readline().strip().split() #the notes\n\n#Initializing variables.\nnotes_dict = {'A':0, 'A#':1, 'B':2, 'C':3, 'C#':4, 'D':5, 'D#':6, 'E':7, 'F':8, 'F#':9, 'G':10, 'G#':11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n#Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n#Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('None')\n", "\n\n# Program starts here.\nimport sys\n\n# Reading in input.\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables.\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits == True:\n            print(notes_list[i], end=' ')\n\nif fits == False:\n    print('none')\n", "\n\n# Program starts here.\nimport sys\n\n# Reading in input.\nn = int(sys.stdin.readline().strip())\nnotes = sys.stdin.readline().strip().split()\n\n# Initializing variables.\nnotes_dict = {'A': 0, 'A#': 1, 'B': 2, 'C': 3, 'C#': 4, 'D': 5, 'D#': 6, 'E': 7, 'F': 8, 'F#': 9, 'G': 10, 'G#': 11}\nnotes_list = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n# Finding the scale.\nif notes[0] in notes_dict:\n    starting_note = notes_dict[notes[0]]\nelse:\n    starting_note = notes_dict[notes[0][0] + '#']\n\nscale_dict = {}\n\nfor i in range(0, 12):\n    scale_dict[i] = [0] * 12\n\nfor i in range(0, 12):\n    scale_dict[i][i] = 1\n\n    if i + 2 <= 11:\n        scale_dict[i][i + 2] = 1\n    elif i + 2 > 11:\n        scale_dict[i][i + 2 - 12] = 1\n\n    if i + 4 <= 11:\n        scale_dict[i][i + 4] = 1\n    elif i + 4 > 11:\n        scale_dict[i][i + 4 - 12] = 1\n\n    if i + 5 <= 11:\n        scale_dict[i][i + 5] = 1\n    elif i + 5 > 11:\n        scale_dict[i][i + 5 - 12] = 1\n\n    if i + 7 <= 11:\n        scale_dict[i][i + 7] = 1\n    elif i + 7 > 11:\n        scale_dict[i][i + 7 - 12] = 1\n\n    if i + 9 <= 11:\n        scale_dict[i][i + 9] = 1\n    elif i + 9 > 11:\n        scale_dict[i][i + 9 - 12] = 1\n\n    if i + 11 <= 11:\n        scale_dict[i][i + 11] = 1\n    elif i + 11 > 11:\n        scale_dict[i][i + 11 - 12] = 1\n\n# Checking if the notes fit in the scale.\nfits = False\n\nfor i in range(0, 12):\n    if scale_dict[i][starting_note] == 1:\n        fits = True\n        for j in range(0, n):\n            if notes[j] in notes_dict:\n                if scale_dict[i][notes_dict[notes[j]]] == 0:\n                    fits = False\n            elif notes[j][0] + '#' in notes_dict:\n                if scale_dict[i][notes_dict[notes[j][0] + '#']] == 0:\n                    fits = False\n        if fits is True:\n            print(notes_list[i], end=' ')\n\nif fits is False:\n    print('none')\n"]
2022-04-13 08:35:33.764287 size on output set 9
2022-04-13 08:35:33.764300 num operations 2
2022-04-13 08:35:33.764305 size on input set 1
2022-04-13 08:35:40.283176 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] #the notes\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] \n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] # notes[0] = A\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    }
  ],
  "created": 1649838933,
  "object": "edit"
}
2022-04-13 08:35:40.283429 fix spelling mistakes 3 ['\n\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] #the notes\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\n\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] \n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\n\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] # notes[0] = A\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n']
2022-04-13 08:35:40.283472 size on output set 3
2022-04-13 08:35:40.283478 size on input set 3
2022-04-13 08:35:44.216143 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]  # notes[0] = A\n\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]  # notes[0] = A\n\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\n\nmain()\n"
    }
  ],
  "created": 1649838940,
  "object": "edit"
}
2022-04-13 08:35:44.216310 fix syntax errors 3 ['\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]  # notes[0] = A\n\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\n\nmain()\n', '\n\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]  # notes[0] = A\n\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\n\nmain()\n']
2022-04-13 08:36:03.798113 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] \n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] \n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    }
  ],
  "created": 1649838944,
  "object": "edit"
}
2022-04-13 08:36:03.798283 NO RESULT
2022-04-13 08:36:03.798289 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-13 08:36:03.798326 fix syntax errors 2 ['\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] \n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] \n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n']
2022-04-13 08:36:05.982152 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] #the notes\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] #the notes\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split() #split the song into notes\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\n\n# This is a comment\nimport sys\n\nnotes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] #the notes\n\n    print(\"hello world\")\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(fits))\n\nmain()\n"
    }
  ],
  "created": 1649838963,
  "object": "edit"
}
2022-04-13 08:36:05.982324 fix syntax errors 3 ['import sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] #the notes\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\n\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] #the notes\n\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split() #split the song into notes\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n', '\n\n\n# This is a comment\nimport sys\n\nnotes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"] #the notes\n\n    print("hello world")\ndef main():\n    num_notes = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 2 == 0:\n                scale.append(notes[(i + 2 * j) % 12])\n            else:\n                scale.append(notes[(i + 2 * j - 1) % 12])\n        scales.append(scale)\n    fits = []\n    for scale in scales:\n        fit = True\n        for note in song:\n            if note not in scale:\n                fit = False\n                break\n        if fit:\n            fits.append(scale[0])\n    fits.sort()\n    if len(fits) == 0:\n        print("none")\n    else:\n        print(" ".join(fits))\n\nmain()\n']
2022-04-13 08:36:05.982443 size on output set 6
2022-04-13 08:36:05.982455 num operations 2
2022-04-13 08:36:05.982460 size on input set 1
2022-04-13 08:36:19.265440 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint 'none'\n\telse:\n\t\tprint ' '.join(scales)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_possible_scales(song):\n    \"\"\"\n    >>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n    ['A#', 'C', 'D#', 'F']\n    \"\"\"\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    if len(scales) == 0:\n        print 'none'\n    else:\n        print ' '.join(scales)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint 'none'\n\telse:\n\t\tprint ' '.join(scales)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    }
  ],
  "created": 1649838966,
  "object": "edit"
}
2022-04-13 08:36:19.265618 fix spelling mistakes 3 ['\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint \'none\'\n\telse:\n\t\tprint \' \'.join(scales)\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n', '\n\ndef get_possible_scales(song):\n    """\n    >>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n    [\'A#\', \'C\', \'D#\', \'F\']\n    """\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    if len(scales) == 0:\n        print \'none\'\n    else:\n        print \' \'.join(scales)\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n', '\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint \'none\'\n\telse:\n\t\tprint \' \'.join(scales)\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n']
2022-04-13 08:36:19.265661 size on output set 3
2022-04-13 08:36:19.265668 size on input set 3
2022-04-13 08:36:24.219207 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_possible_scales(song):\n    \"\"\"\n    >>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C']) # doctest: +NORMALIZE_WHITESPACE\n    ['A#', 'C', 'D#', 'F']\n    \"\"\"\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    if len(scales) == 0:\n        print('none')\n    else:\n        print(' '.join(scales))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_possible_scales(song):\n    \"\"\"\n    >>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C']) # doctest: +NORMALIZE_WHITESPACE\n    A# C D# F\n    \"\"\"\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    if len(scales) == 0:\n        print('none')\n    else:\n        print(' '.join(scales))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_possible_scales(song):\n    \"\"\"\n    >>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C']) #doctest: +NORMALIZE_WHITESPACE\n    A# C D# F\n    \"\"\"\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    return ' '.join(scales) if scales else 'none'\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    }
  ],
  "created": 1649838979,
  "object": "edit"
}
2022-04-13 08:36:24.219459 fix syntax errors 3 ['\n\ndef get_possible_scales(song):\n    """\n    >>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\']) # doctest: +NORMALIZE_WHITESPACE\n    [\'A#\', \'C\', \'D#\', \'F\']\n    """\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    if len(scales) == 0:\n        print(\'none\')\n    else:\n        print(\' \'.join(scales))\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n', '\n\ndef get_possible_scales(song):\n    """\n    >>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\']) # doctest: +NORMALIZE_WHITESPACE\n    A# C D# F\n    """\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    if len(scales) == 0:\n        print(\'none\')\n    else:\n        print(\' \'.join(scales))\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n', '\n\ndef get_possible_scales(song):\n    """\n    >>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\']) #doctest: +NORMALIZE_WHITESPACE\n    A# C D# F\n    """\n    def get_scale(note):\n        scale = [note]\n        while len(scale) < 8:\n            if len(scale) == 3 or len(scale) == 7:\n                scale.append(notes[notes.index(scale[-1]) + 1])\n            else:\n                scale.append(notes[notes.index(scale[-1]) + 2])\n        return scale\n\n    notes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n    scales = []\n    for note in notes:\n        scale = get_scale(note)\n        if all(song_note in scale for song_note in song):\n            scales.append(note)\n    return \' \'.join(scales) if scales else \'none\'\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n']
2022-04-13 08:36:32.619741 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C']) == ['A#', 'C', 'D#', 'F']\n\tTrue\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\treturn 'none'\n\telse:\n\t\treturn ' '.join(scales)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'], 'C')\n\t['A#', 'C', 'D#', 'F', 'G']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 12:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note + 'm' if note[-1] == '#' else note)\n\tif len(scales) == 0:\n\t\tprint 'None'\n\telse:\n\t\tprint ' '.join(sorted(scales))\n\nif __name__ == '__main__':\n\t# import doctest\n\t# doctest.testmod()\n\tget_possible_scales(sys.argv[1].split(','), sys.argv[2])\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint('none')\n\telse:\n\t\tprint(' '.join(scales))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    }
  ],
  "created": 1649838984,
  "object": "edit"
}
2022-04-13 08:36:32.619934 fix syntax errors 3 ['\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\']) == [\'A#\', \'C\', \'D#\', \'F\']\n\tTrue\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\treturn \'none\'\n\telse:\n\t\treturn \' \'.join(scales)\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n', '\n\nimport sys\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'], \'C\')\n\t[\'A#\', \'C\', \'D#\', \'F\', \'G\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 12:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note + \'m\' if note[-1] == \'#\' else note)\n\tif len(scales) == 0:\n\t\tprint \'None\'\n\telse:\n\t\tprint \' \'.join(sorted(scales))\n\nif __name__ == \'__main__\':\n\t# import doctest\n\t# doctest.testmod()\n\tget_possible_scales(sys.argv[1].split(\',\'), sys.argv[2])\n', '\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % len(notes)])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % len(notes)])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint(\'none\')\n\telse:\n\t\tprint(\' \'.join(scales))\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n']
2022-04-13 08:36:37.185094 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % 12])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % 12])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint 'none'\n\telse:\n\t\tprint ' '.join(scales)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'G', 'F', 'F', 'C'])\n\tA# C D# F\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint('none')\n\telse:\n\t\tprint(' '.join(scales))\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_possible_scales(song):\n\t\"\"\"\n\t>>> get_possible_scales(['C', 'D', 'F', 'D', 'C', 'D', 'F', 'F', 'F', 'C'])\n\t['A#', 'C', 'D#', 'F']\n\t\"\"\"\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % 12])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % 12])\n\t\treturn scale\n\n\tnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint 'none'\n\telse:\n\t\tprint ' '.join(scales)\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n"
    }
  ],
  "created": 1649838992,
  "object": "edit"
}
2022-04-13 08:36:37.185274 fix syntax errors 3 ['\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % 12])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % 12])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint \'none\'\n\telse:\n\t\tprint \' \'.join(scales)\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n', '\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'G\', \'F\', \'F\', \'C\'])\n\tA# C D# F\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 1])\n\t\t\telse:\n\t\t\t\tscale.append(notes[notes.index(scale[-1]) + 2])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint(\'none\')\n\telse:\n\t\tprint(\' \'.join(scales))\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n', '\n\ndef get_possible_scales(song):\n\t"""\n\t>>> get_possible_scales([\'C\', \'D\', \'F\', \'D\', \'C\', \'D\', \'F\', \'F\', \'F\', \'C\'])\n\t[\'A#\', \'C\', \'D#\', \'F\']\n\t"""\n\tdef get_scale(note):\n\t\tscale = [note]\n\t\twhile len(scale) < 8:\n\t\t\tif len(scale) == 3 or len(scale) == 7:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 1) % 12])\n\t\t\telse:\n\t\t\t\tscale.append(notes[(notes.index(scale[-1]) + 2) % 12])\n\t\treturn scale\n\n\tnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\tscales = []\n\tfor note in notes:\n\t\tscale = get_scale(note)\n\t\tif all(song_note in scale for song_note in song):\n\t\t\tscales.append(note)\n\tif len(scales) == 0:\n\t\tprint \'none\'\n\telse:\n\t\tprint \' \'.join(scales)\n\nif __name__ == \'__main__\':\n\timport doctest\n\tdoctest.testmod()\n']
2022-04-13 08:36:37.185314 size on output set 8
2022-04-13 08:36:37.185326 num operations 2
2022-04-13 08:36:37.185331 size on input set 1
2022-04-13 08:36:45.307305 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales]    \n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales_list]\n    if len(valid_scales_list) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales_list)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649838997,
  "object": "edit"
}
2022-04-13 08:36:45.307579 fix spelling mistakes 3 ['\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales]    \n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales_list]\n    if len(valid_scales_list) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales_list)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 08:36:45.307642 size on output set 3
2022-04-13 08:36:45.307648 size on input set 3
2022-04-13 08:36:50.813156 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales_list] #chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\")\n    if len(valid_scales_list) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales_list)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + (\"#\" if l[0] % 12 != 11 else \"\") for l in valid_scales_list]\n    if len(valid_scales_list) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales_list)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales_list] # convert to letters\n    if len(valid_scales_list) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales_list)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649839005,
  "object": "edit"
}
2022-04-13 08:36:50.813580 fix syntax errors 3 ['\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales_list] #chr(l[0]+64) + ("#" if l[0] < 11 else "")\n    if len(valid_scales_list) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales_list)\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + ("#" if l[0] % 12 != 11 else "") for l in valid_scales_list]\n    if len(valid_scales_list) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales_list)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales_list = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales_list.append(notes[i:q+1])\n    valid_scales_list = list(set(tuple(sorted(l)) for l in valid_scales_list))\n    valid_scales_list = [list(l) for l in valid_scales_list]\n    valid_scales_list = sorted(valid_scales_list, key=lambda x: x[0])\n    valid_scales_list = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales_list] # convert to letters\n    if len(valid_scales_list) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales_list)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 08:37:04.660279 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    return len(notes) == 8 and notes[0] == notes[7] and notes[1] == notes[0] + 2 and notes[2] == notes[1] + 2 and notes[3] == notes[2] + 1 and notes[4] == notes[3] + 2 and notes[5] == notes[4] + 2 and notes[6] == notes[5] + 2\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = list(map(int, sys.stdin.readline().strip().split()))\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]): valid_scales.append(notes[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales]    \n    print(\"none\" if len(valid_scales) == 0 else \" \".join(valid_scales))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport itertools\n\ndef scale_check(notes_list):\n    return (len(notes_list) == 8 and notes_list[0] == notes_list[7] and \n            notes_list[1] == notes_list[0] + 2 and notes_list[2] == notes_list[1] + 2 and\n            notes_list[3] == notes_list[2] + 1 and notes_list[4] == notes_list[3] + 2 and\n            notes_list[5] == notes_list[4] + 2 and notes_list[6] == notes_list[5] + 2)\n\ndef main():\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes_list = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes_list[i:q+1]):\n                                        valid_scales.append(notes_list[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print(\"none\")\n    else:\n        print(\" \".join(valid_scales))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649839010,
  "object": "edit"
}
2022-04-13 08:37:04.660535 fix syntax errors 3 ['\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    return len(notes) == 8 and notes[0] == notes[7] and notes[1] == notes[0] + 2 and notes[2] == notes[1] + 2 and notes[3] == notes[2] + 1 and notes[4] == notes[3] + 2 and notes[5] == notes[4] + 2 and notes[6] == notes[5] + 2\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = list(map(int, sys.stdin.readline().strip().split()))\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]): valid_scales.append(notes[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales]    \n    print("none" if len(valid_scales) == 0 else " ".join(valid_scales))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\nimport itertools\n\ndef scale_check(notes_list):\n    return (len(notes_list) == 8 and notes_list[0] == notes_list[7] and \n            notes_list[1] == notes_list[0] + 2 and notes_list[2] == notes_list[1] + 2 and\n            notes_list[3] == notes_list[2] + 1 and notes_list[4] == notes_list[3] + 2 and\n            notes_list[5] == notes_list[4] + 2 and notes_list[6] == notes_list[5] + 2)\n\ndef main():\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes_list = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes_list[i:q+1]):\n                                        valid_scales.append(notes_list[i:q+1])    \n    valid_scales = sorted(list(set(tuple(sorted(l)) for l in valid_scales)))\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print("none")\n    else:\n        print(" ".join(valid_scales))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 08:37:20.126823 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\") for l in valid_scales] # chr(l[0]+64) + (\"#\" if l[0] < 11 else \"\")\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] > 11 else \"\") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 7:\n        return False\n    elif notes[0] != notes[6]:\n        return False\n    elif notes[1] != notes[0] + 1:\n        return False\n    elif notes[2] != notes[1] + 1:\n        return False\n    elif notes[3] != notes[2] + 2:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 1:\n        return False\n    # elif notes[6] != notes[5] + 2:\n    #     return False\n    else:\n        return True\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    valid_scales = [notes[i:i+7] for i in xrange(n-6) if scale_check(notes[i:i+7])]\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales if l[0] < l[6]))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + (\"#\" if l[0] < 10 else \"\") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print \"none\"\n    else:\n        print \" \".join(valid_scales)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649839024,
  "object": "edit"
}
2022-04-13 08:37:20.127078 fix syntax errors 3 ['\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 11 else "") for l in valid_scales] # chr(l[0]+64) + ("#" if l[0] < 11 else "")\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 8:\n        return False\n    elif notes[0] != notes[7]:\n        return False\n    elif notes[1] != notes[0] + 2:\n        return False\n    elif notes[2] != notes[1] + 2:\n        return False\n    elif notes[3] != notes[2] + 1:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 2:\n        return False\n    elif notes[6] != notes[5] + 2:\n        return False\n    else:\n        return True\n\ndef main():\n    notes = []\n    valid_scales = []\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            for k in xrange(j+1, n):\n                for l in xrange(k+1, n):\n                    for m in xrange(l+1, n):\n                        for o in xrange(m+1, n):\n                            for p in xrange(o+1, n):\n                                for q in xrange(p+1, n):\n                                    if scale_check(notes[i:q+1]):\n                                        valid_scales.append(notes[i:q+1])\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] > 11 else "") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\nimport itertools\n\ndef scale_check(notes):\n    if len(notes) != 7:\n        return False\n    elif notes[0] != notes[6]:\n        return False\n    elif notes[1] != notes[0] + 1:\n        return False\n    elif notes[2] != notes[1] + 1:\n        return False\n    elif notes[3] != notes[2] + 2:\n        return False\n    elif notes[4] != notes[3] + 2:\n        return False\n    elif notes[5] != notes[4] + 1:\n        return False\n    # elif notes[6] != notes[5] + 2:\n    #     return False\n    else:\n        return True\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    notes = map(int, sys.stdin.readline().strip().split())\n    valid_scales = [notes[i:i+7] for i in xrange(n-6) if scale_check(notes[i:i+7])]\n    valid_scales = list(set(tuple(sorted(l)) for l in valid_scales if l[0] < l[6]))\n    valid_scales = [list(l) for l in valid_scales]\n    valid_scales = sorted(valid_scales, key=lambda x: x[0])\n    valid_scales = [chr(l[0]+64) + ("#" if l[0] < 10 else "") for l in valid_scales]\n    if len(valid_scales) == 0:\n        print "none"\n    else:\n        print " ".join(valid_scales)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 08:37:20.127132 size on output set 9
2022-04-13 08:37:20.127143 num operations 2
2022-04-13 08:37:20.127148 size on input set 1
2022-04-13 08:37:22.985031 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"None\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = [input()]\n    for i in range(n-1):\n        note = input()\n        if note != notes[-1]:\n            notes.append(note)\n    notes.append(notes[0]) # to make a circle\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649839040,
  "object": "edit"
}
2022-04-13 08:37:22.985238 fix spelling mistakes 3 ['\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("None")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes = [input()]\n    for i in range(n-1):\n        note = input()\n        if note != notes[-1]:\n            notes.append(note)\n    notes.append(notes[0]) # to make a circle\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n']
2022-04-13 08:37:22.985387 size on output set 3
2022-04-13 08:37:22.985402 size on input set 3
2022-04-13 08:37:27.541007 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0])  # Add the first note to the end of the list so that\n                            # we can easily use the modulus operator\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:  # A perfect octave\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:  # The major second and third\n                scale.append(notes[i+2])\n            else:  # The minor second, fourth, fifth, and sixth\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"None\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    notes[0] = notes[0][0].upper() + notes[0][1:]\n    for i in range(1, len(notes)):\n        notes[i] = notes[i][0].lower() + notes[i][1:]\n    notes = input().split()\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 3 or j % 7 == 4:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 5:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"None\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0]) # add the first note to the end for the scale\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale): # if all the notes are in the scale\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"None\")\n\nmain()\n"
    }
  ],
  "created": 1649839043,
  "object": "edit"
}
2022-04-13 08:37:27.541186 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0])  # Add the first note to the end of the list so that\n                            # we can easily use the modulus operator\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:  # A perfect octave\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:  # The major second and third\n                scale.append(notes[i+2])\n            else:  # The minor second, fourth, fifth, and sixth\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("None")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes[0] = notes[0][0].upper() + notes[0][1:]\n    for i in range(1, len(notes)):\n        notes[i] = notes[i][0].lower() + notes[i][1:]\n    notes = input().split()\n    notes.append(notes[0])\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 3 or j % 7 == 4:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 5:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("None")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    notes.append(notes[0]) # add the first note to the end for the scale\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale): # if all the notes are in the scale\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("None")\n\nmain()\n']
2022-04-13 08:37:30.977202 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            else:\n                scale.append(notes[(i+j)%12])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 2:\n                scale.append(notes[i])\n            elif j % 7 == 1:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649839047,
  "object": "edit"
}
2022-04-13 08:37:30.977417 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            else:\n                scale.append(notes[(i+j)%12])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 2:\n                scale.append(notes[i])\n            elif j % 7 == 1:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes = input().split()\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n']
2022-04-13 08:37:39.418881 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = []\n    for i in range(n):\n        notes.append(input())\n    notes.append(notes[0]) # to make a circle\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = [input()]\n    for i in range(n-1):\n        note = input()\n        if note != notes[-1]:\n            notes.append(note)\n    notes.append(notes[0])  # to make a circle\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i + 2])\n            else:\n                scale.append(notes[i + 1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    notes = []\n    for i in range(n-1):\n        notes.append(input())\n    notes.append(notes[0]) # to make a circle\n    scales = []\n    for i in range(12):\n        scale = []\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 1:\n                scale.append(notes[i])\n            elif j % 7 == 2 or j % 7 == 3:\n            elif j % 7 == 4 or j % 7 == 5:\n                scale.append(notes[i+3])\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(\" \".join(scales))\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649839051,
  "object": "edit"
}
2022-04-13 08:37:39.419071 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    notes = []\n    for i in range(n):\n        notes.append(input())\n    notes.append(notes[0]) # to make a circle\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes = [input()]\n    for i in range(n-1):\n        note = input()\n        if note != notes[-1]:\n            notes.append(note)\n    notes.append(notes[0])  # to make a circle\n    scales = []\n    for i in range(12):\n        scale = [notes[i]]\n        for j in range(1, 8):\n            if j % 7 == 0:\n                scale.append(notes[i])\n            elif j % 7 == 1 or j % 7 == 2:\n                scale.append(notes[i + 2])\n            else:\n                scale.append(notes[i + 1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    notes = []\n    for i in range(n-1):\n        notes.append(input())\n    notes.append(notes[0]) # to make a circle\n    scales = []\n    for i in range(12):\n        scale = []\n        for j in range(1, 8):\n            if j % 7 == 0 or j % 7 == 1:\n                scale.append(notes[i])\n            elif j % 7 == 2 or j % 7 == 3:\n            elif j % 7 == 4 or j % 7 == 5:\n                scale.append(notes[i+3])\n                scale.append(notes[i+2])\n            else:\n                scale.append(notes[i+1])\n        if set(notes) <= set(scale):\n            scales.append(notes[i])\n    if scales:\n        print(" ".join(scales))\n    else:\n        print("none")\n\nmain()\n']
2022-04-13 08:37:39.419129 size on output set 9
2022-04-13 08:37:39.419140 num operations 2
2022-04-13 08:37:39.419145 size on input set 1
2022-04-13 08:37:46.909348 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'] \n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'] #mashed up my keyboard to get this\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n#\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1649839059,
  "object": "edit"
}
2022-04-13 08:37:46.909550 fix spelling mistakes 3 ['\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\'] \n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '\n\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\'] #mashed up my keyboard to get this\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '\n\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n#\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n']
2022-04-13 08:37:46.909651 size on output set 3
2022-04-13 08:37:46.909660 size on input set 3
2022-04-13 08:37:50.854640 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'] \n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1649839066,
  "object": "edit"
}
2022-04-13 08:37:50.854805 fix syntax errors 3 ['import sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\n\nmain()\n', 'import sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\'] \n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '#!/usr/bin/env python3\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n']
2022-04-13 08:37:52.784515 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1649839070,
  "object": "edit"
}
2022-04-13 08:37:52.784682 fix syntax errors 3 ['\n\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '\nimport sys\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '\n\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n']
2022-04-13 08:37:59.402888 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'] \n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nprint \"hello world!\"\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nnotes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print(\"none\")\n    else:\n        print(' '.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1649839072,
  "object": "edit"
}
2022-04-13 08:37:59.403056 fix syntax errors 3 ['\n\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\'] \n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n', '\nprint "hello world!"\n', '\n\nimport sys\n\nnotes = [\'A\', \'A#\', \'B\', \'C\', \'C#\', \'D\', \'D#\', \'E\', \'F\', \'F#\', \'G\', \'G#\']\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    song = sys.stdin.readline().strip().split()\n    song = [notes.index(x) for x in song]\n    scales = []\n    for i in range(12):\n        if valid(i, song):\n            scales.append(i)\n    if len(scales) == 0:\n        print("none")\n    else:\n        print(\' \'.join([notes[x] for x in scales]))\n\ndef valid(i, song):\n    scale = [i, (i+2)%12, (i+4)%12, (i+5)%12, (i+7)%12, (i+9)%12, (i+11)%12]\n    for note in song:\n        if note not in scale:\n            return False\n    return True\n\nmain()\n']
2022-04-13 08:37:59.403089 size on output set 7
