2022-04-13 04:57:54.227699 num operations 2
2022-04-13 04:57:54.227709 size on input set 1
2022-04-13 04:57:55.950381 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 2,
      "text": "\n\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    }
  ],
  "created": 1649825874,
  "object": "edit"
}
2022-04-13 04:57:55.950580 fix spelling mistakes 3 ["\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"]
2022-04-13 04:57:55.950607 size on output set 3
2022-04-13 04:57:55.950614 size on input set 3
2022-04-13 04:57:57.487837 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    }
  ],
  "created": 1649825875,
  "object": "edit"
}
2022-04-13 04:57:57.488005 fix syntax errors 3 ["#!/usr/bin/env python3\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"]
2022-04-13 04:57:58.940294 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n"
    }
  ],
  "created": 1649825877,
  "object": "edit"
}
2022-04-13 04:57:58.940463 fix syntax errors 3 ["#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n", "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n", "\n\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\nprint(' '.join(map(str, res)))\n"]
2022-04-13 04:58:00.379726 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"
    }
  ],
  "created": 1649825878,
  "object": "edit"
}
2022-04-13 04:58:00.379903 fix syntax errors 3 ["#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n"]
2022-04-13 04:58:00.379927 size on output set 5
2022-04-13 04:58:00.379937 num operations 2
2022-04-13 04:58:00.379942 size on input set 1
2022-04-13 04:58:01.975452 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# WORKS FINE\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 1,
      "text": "\n\n# WORKS \n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 2,
      "text": "\n\n# WORKS (TESTED)\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    }
  ],
  "created": 1649825880,
  "object": "edit"
}
2022-04-13 04:58:01.975703 fix spelling mistakes 3 ['\n\n# WORKS FINE\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n# WORKS \n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n# WORKS (TESTED)\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n']
2022-04-13 04:58:01.975732 size on output set 3
2022-04-13 04:58:01.975738 size on input set 3
2022-04-13 04:58:17.544704 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# WORKS (TESTED)\n\nN, C = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]  # sequence of numbers\n\nfreq_dict = {}  # dictionary of frequencies of numbers\n\nfor i in range(C+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []  # new sequence of numbers\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 1,
      "text": "\n\n# WORKS (TESTED) \n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 2,
      "text": "\n\n# WORKS (TESTED) - 1\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n\n####################################################################################\n\n# WORKS (TESTED) - 2\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nprint(\" \".join([str(i) for i in arr]))\n\n####################################################################################\n\n# WORKS (TESTED) - 3\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nprint(\" \".join([str(i) for i in arr]))\n\n####################################################################################\n\n# WORKS (TESTED) - 4\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i], end=\" \")\n\n####################################################################################\n\n# WORKS (TESTED) - 5\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nfor i in range(n):\n    print(arr[i], end=\" \")\n\n####################################################################################\n\n# WORKS (TESTED) - 6\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i])\n\n####################################################################################\n\n# WORKS (TESTED) - 7\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nfor i in range(n):\n    print(arr[i])\n\n####################################################################################\n\n# WORKS (TESTED) - 8\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i], end=\" \")\n\nprint()\n\n####################################################################################\n\n# WORKS (TESTED) - 9\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nfor i in range(n):\n    print(arr[i], end=\" \")\n\nprint()\n\n####################################################################################\n\n# WORKS (TESTED) - 10\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i])\n\nprint()\n\n####################################################################################\n"
    }
  ],
  "created": 1649825882,
  "object": "edit"
}
2022-04-13 04:58:17.544889 fix syntax errors 3 ['\n\n# WORKS (TESTED)\n\nN, C = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]  # sequence of numbers\n\nfreq_dict = {}  # dictionary of frequencies of numbers\n\nfor i in range(C+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []  # new sequence of numbers\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n# WORKS (TESTED) \n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n# WORKS (TESTED) - 1\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n\n####################################################################################\n\n# WORKS (TESTED) - 2\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nprint(" ".join([str(i) for i in arr]))\n\n####################################################################################\n\n# WORKS (TESTED) - 3\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nprint(" ".join([str(i) for i in arr]))\n\n####################################################################################\n\n# WORKS (TESTED) - 4\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i], end=" ")\n\n####################################################################################\n\n# WORKS (TESTED) - 5\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nfor i in range(n):\n    print(arr[i], end=" ")\n\n####################################################################################\n\n# WORKS (TESTED) - 6\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i])\n\n####################################################################################\n\n# WORKS (TESTED) - 7\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nfor i in range(n):\n    print(arr[i])\n\n####################################################################################\n\n# WORKS (TESTED) - 8\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i], end=" ")\n\nprint()\n\n####################################################################################\n\n# WORKS (TESTED) - 9\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort(reverse=True)\n\nfor i in range(n):\n    print(arr[i], end=" ")\n\nprint()\n\n####################################################################################\n\n# WORKS (TESTED) - 10\n\nn = int(input())\n\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nfor i in range(n):\n    print(arr[i])\n\nprint()\n\n####################################################################################\n']
2022-04-13 04:58:22.215369 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# WORKS FINE, just a test\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 1,
      "text": "\n\n# WORKS FINE \n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 2,
      "text": "print(\"Hello\")\n"
    }
  ],
  "created": 1649825897,
  "object": "edit"
}
2022-04-13 04:58:22.215542 fix syntax errors 3 ['\n\n# WORKS FINE, just a test\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n# WORKS FINE \n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', 'print("Hello")\n']
2022-04-13 04:58:27.006352 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# WORKS\n\nn, c = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()] \n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    },
    {
      "index": 1,
      "text": "\n\n# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq])\n"
    },
    {
      "index": 2,
      "text": "\n\n# WORKS\n\n\nn, c = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]  # list of integers\n\nfreq_dict = {}\n\nfor i in range(c + 1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key] * freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"
    }
  ],
  "created": 1649825902,
  "object": "edit"
}
2022-04-13 04:58:27.006533 fix syntax errors 3 ['\n\n# WORKS\n\nn, c = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()] \n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n', '\n\n# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq])\n', '\n\n# WORKS\n\n\nn, c = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]  # list of integers\n\nfreq_dict = {}\n\nfor i in range(c + 1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key] * freq_dict[key])\n\nprint(" ".join([str(i) for i in new_seq]))\n']
2022-04-13 04:58:27.006561 size on output set 9
2022-04-13 04:58:27.006571 num operations 2
2022-04-13 04:58:27.006577 size on input set 1
2022-04-13 04:58:38.015660 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 1,
      "text": "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 2,
      "text": "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    }
  ],
  "created": 1649825907,
  "object": "edit"
}
2022-04-13 04:58:38.015854 fix spelling mistakes 3 ["\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"]
2022-04-13 04:58:38.015881 size on output set 2
2022-04-13 04:58:38.015888 size on input set 2
2022-04-13 04:58:41.753525 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\n    for (int i = 0; i < c + 1; i++)\n    {\n        if (freq[i] > 0)\n        {\n            cout << (to_string(i) + ' ') * freq[i];\n        }\n    }\n}\n"
    },
    {
      "index": 1,
      "text": "\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\n    for (int i = 0; i < c + 1; i++)\n    {\n        if (freq[i] > 0)\n            cout << i << ' ';\n    }\n\n    return 0;\n}\n"
    },
    {
      "index": 2,
      "text": "\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\n    for (int i = 0; i < c + 1; i++)\n    {\n        if (freq[i] > 0)\n        {\n            cout << (str(i) + ' ') * freq[i];\n        }\n    }\n\n    return 0;\n}\n"
    }
  ],
  "created": 1649825918,
  "object": "edit"
}
2022-04-13 04:58:41.753762 fix syntax errors 3 ["#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\n    for (int i = 0; i < c + 1; i++)\n    {\n        if (freq[i] > 0)\n        {\n            cout << (to_string(i) + ' ') * freq[i];\n        }\n    }\n}\n", "\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\n    for (int i = 0; i < c + 1; i++)\n    {\n        if (freq[i] > 0)\n            cout << i << ' ';\n    }\n\n    return 0;\n}\n", "\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, c;\n    cin >> n >> c;\n    int arr[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    int freq[c + 1] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]] += 1;\n    }\n\n    for (int i = 0; i < c + 1; i++)\n    {\n        if (freq[i] > 0)\n        {\n            cout << (str(i) + ' ') * freq[i];\n        }\n    }\n\n    return 0;\n}\n"]
2022-04-13 04:58:44.581643 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n"
    },
    {
      "index": 2,
      "text": "n, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(1, c + 1):\n    print((str(i) + ' ') * freq[i], end='')\n"
    }
  ],
  "created": 1649825921,
  "object": "edit"
}
2022-04-13 04:58:44.581838 fix syntax errors 3 ["n, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "#!/usr/bin/env python3\nn, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "n, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(1, c + 1):\n    print((str(i) + ' ') * freq[i], end='')\n"]
2022-04-13 04:58:44.581865 size on output set 6
2022-04-13 04:58:44.581883 num operations 2
2022-04-13 04:58:44.581890 size on input set 1
2022-04-13 04:58:47.902332 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists \n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    }
  ],
  "created": 1649825924,
  "object": "edit"
}
2022-04-13 04:58:47.902522 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists \n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n']
2022-04-13 04:58:47.902645 size on output set 3
2022-04-13 04:58:47.902653 size on input set 3
2022-04-13 04:58:50.220943 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    line = sys.stdin.readline().split()\n    N = line[0]\n    C = line[1]\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    }
  ],
  "created": 1649825927,
  "object": "edit"
}
2022-04-13 04:58:50.221112 fix syntax errors 3 ['#!/usr/bin/python\n\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    # read the input and convert to integers\n    line = sys.stdin.readline().split()\n    N = line[0]\n    C = line[1]\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists and flatten it\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n']
2022-04-13 04:58:55.465685 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split() # N is the number of integers and C is the number of different integers\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split() # the sequence of integers\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts for each integer\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value in descending order\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists, where each list contains all instances of an integer\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list of lists\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists \n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    }
  ],
  "created": 1649825930,
  "object": "edit"
}
2022-04-13 04:58:55.465935 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split() # N is the number of integers and C is the number of different integers\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split() # the sequence of integers\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts for each integer\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value in descending order\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists, where each list contains all instances of an integer\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list of lists\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists \n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n']
2022-04-13 04:58:59.860484 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()[0:N]\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)[0:C]\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n"
    }
  ],
  "created": 1649825935,
  "object": "edit"
}
2022-04-13 04:58:59.860672 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n', '\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()[0:N]\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)[0:C]\n    # create a list of lists with the same elements\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=" ")\n    print("")\n\nmain()\n']
2022-04-13 04:58:59.860783 size on output set 8
2022-04-13 04:58:59.860814 num operations 2
2022-04-13 04:58:59.860820 size on input set 1
2022-04-13 04:59:02.612623 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and it's\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a character and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each character to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825939,
  "object": "edit"
}
2022-04-13 04:59:02.612821 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and it\'s\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a character and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each character to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:59:02.612875 size on output set 3
2022-04-13 04:59:02.612885 size on input set 3
2022-04-13 04:59:05.793622 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and it's\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and it's\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825942,
  "object": "edit"
}
2022-04-13 04:59:05.793787 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and it\'s\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and it\'s\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:59:10.576955 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] += 1\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[0], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][0] > 0:\n            output.extend([count[i][1]] * count[i][0])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825945,
  "object": "edit"
}
2022-04-13 04:59:10.577135 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] += 1\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[0], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][0] > 0:\n            output.extend([count[i][1]] * count[i][0])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its frequency.\n    # The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:59:18.990450 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    N, C = map(int, input().split())\n    message = list(map(int, input().split()))\n\n    # Create a list of lists where each element represents a character and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each character to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys, heapq\n\ndef main():\n    N, K = map(int, sys.stdin.readline().rstrip().split())\n    A = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a max heap with the heapq module.\n    heap = []\n    for i in range(N):\n        heapq.heappush(heap, -1 * A[i])\n\n    # Pop the first K elements from the heap.\n    for i in range(K):\n        print(-1 * heapq.heappop(heap))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a character and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse = True)\n\n    # Append each character to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print (\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825950,
  "object": "edit"
}
2022-04-13 04:59:18.990624 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    N, C = map(int, input().split())\n    message = list(map(int, input().split()))\n\n    # Create a list of lists where each element represents a character and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each character to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n', "\n\nimport sys, heapq\n\ndef main():\n    N, K = map(int, sys.stdin.readline().rstrip().split())\n    A = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a max heap with the heapq module.\n    heap = []\n    for i in range(N):\n        heapq.heappush(heap, -1 * A[i])\n\n    # Pop the first K elements from the heap.\n    for i in range(K):\n        print(-1 * heapq.heappop(heap))\n\nif __name__ == '__main__':\n    main()\n", '\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a character and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse = True)\n\n    # Append each character to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print (" ".join(map(str, output)))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:59:18.990725 size on output set 8
2022-04-13 04:59:18.990737 num operations 2
2022-04-13 04:59:18.990742 size on input set 1
2022-04-13 04:59:22.658196 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(x):\n    print(x)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, c = list(map(int, input().split()))\n    num = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in num:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825959,
  "object": "edit"
}
2022-04-13 04:59:22.658383 fix spelling mistakes 3 ["\n\ndef main(x):\n    print(x)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    n, c = list(map(int, input().split()))\n    num = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in num:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + " ") * freq[i], end="")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:59:22.658418 size on output set 3
2022-04-13 04:59:22.658426 size on input set 3
2022-04-13 04:59:24.551775 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import os\n\ndef main():\n    print(os.getcwd())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    print(\"This is a file\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825962,
  "object": "edit"
}
2022-04-13 04:59:24.551935 fix syntax errors 3 ['\n\ndef main():\n    print("Hello World")\n\nif __name__ == \'__main__\':\n    main()\n', "import os\n\ndef main():\n    print(os.getcwd())\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    print("This is a file")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:59:26.593994 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    print('hello world')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    x = 1\n    print(x)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(x=0):\n    print(x)\n\nif __name__ == '__main__':\n    main(1)\n"
    }
  ],
  "created": 1649825964,
  "object": "edit"
}
2022-04-13 04:59:26.594197 fix syntax errors 3 ["\n\ndef main():\n    print('hello world')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    x = 1\n    print(x)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main(x=0):\n    print(x)\n\nif __name__ == '__main__':\n    main(1)\n"]
2022-04-13 04:59:32.169120 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(\"Case #{}: \".format(i+1), end=\"\")\n        n, c = list(map(int, input().split()))\n        num = list(map(int, input().split()))\n        freq = [0] * (c+1)\n        for i in num:\n            freq[i] += 1\n        for i in range(1, c+1):\n            print((str(i) + \" \") * freq[i], end=\"\")\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, c = map(int, input().split())\n    num = map(int, input().split())\n    freq = [0] * (c+1)\n    for i in num: freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, c = list(map(int, input().split()))\n    num = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in num:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + \" \") * freq[i], end=\"\")\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825966,
  "object": "edit"
}
2022-04-13 04:59:32.169500 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print("Case #{}: ".format(i+1), end="")\n        n, c = list(map(int, input().split()))\n        num = list(map(int, input().split()))\n        freq = [0] * (c+1)\n        for i in num:\n            freq[i] += 1\n        for i in range(1, c+1):\n            print((str(i) + " ") * freq[i], end="")\n        print()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    n, c = map(int, input().split())\n    num = map(int, input().split())\n    freq = [0] * (c+1)\n    for i in num: freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + " ") * freq[i], end="")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    n, c = list(map(int, input().split()))\n    num = list(map(int, input().split()))\n    freq = [0] * (c+1)\n    for i in num:\n        freq[i] += 1\n    for i in range(1, c+1):\n        print((str(i) + " ") * freq[i], end="")\n    print()\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:59:32.169531 size on output set 9
2022-04-13 04:59:32.169550 num operations 2
2022-04-13 04:59:32.169555 size on input set 1
2022-04-13 04:59:34.307110 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# file.py\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "\n#\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    }
  ],
  "created": 1649825972,
  "object": "edit"
}
2022-04-13 04:59:34.307315 fix spelling mistakes 3 ["# file.py\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n#\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"]
2022-04-13 04:59:34.307342 size on output set 3
2022-04-13 04:59:34.307350 size on input set 3
2022-04-13 04:59:37.278930 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(c + 1):\n    if freq[i]:\n        print(str(i) * freq[i], end=' ') \n"
    },
    {
      "index": 2,
      "text": "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    }
  ],
  "created": 1649825974,
  "object": "edit"
}
2022-04-13 04:59:37.279203 fix syntax errors 3 ["import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(c + 1):\n    if freq[i]:\n        print(str(i) * freq[i], end=' ') \n", "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"]
2022-04-13 04:59:53.885297 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# file.py\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split()) #n is the number of characters in the message and c is the number of distinct characters.\n\nmessage = list(map(int, sys.stdin.readline().split())) #the characters in the message\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "# file.py\n\nimport sys\nimport math\n\nclass Circle:\n    def __init__(self, x, y, r):\n        self.x = x\n        self.y = y\n        self.r = r\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 2,
      "text": "# file\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    }
  ],
  "created": 1649825977,
  "object": "edit"
}
2022-04-13 04:59:53.885493 fix syntax errors 3 ["# file.py\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split()) #n is the number of characters in the message and c is the number of distinct characters.\n\nmessage = list(map(int, sys.stdin.readline().split())) #the characters in the message\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "# file.py\n\nimport sys\nimport math\n\nclass Circle:\n    def __init__(self, x, y, r):\n        self.x = x\n        self.y = y\n        self.r = r\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "# file\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"]
2022-04-13 04:59:55.493485 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# This is a comment\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"
    }
  ],
  "created": 1649825993,
  "object": "edit"
}
2022-04-13 04:59:55.493670 fix syntax errors 3 ["\n# This is a comment\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n"]
2022-04-13 04:59:55.493699 size on output set 8
2022-04-13 04:59:55.493710 num operations 2
2022-04-13 04:59:55.493715 size on input set 1
2022-04-13 05:00:01.537403 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#input\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 1,
      "text": "\n\nmessage = input(\"\")\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 2,
      "text": "\n\narr = input()\narr = arr.split(\" \")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\n\n#print(message)\n\ncount = 1\n\n    if i != len(arr) - 1:\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            print(arr[i], end = \" \")\n            count = 1\n    else:\n        print(arr[i], end = \" \")\n"
    }
  ],
  "created": 1649825995,
  "object": "edit"
}
2022-04-13 05:00:01.537630 fix spelling mistakes 3 ['\n#input\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n', '\n\nmessage = input("")\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n', '\n\narr = input()\narr = arr.split(" ")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\n\n#print(message)\n\ncount = 1\n\n    if i != len(arr) - 1:\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            print(arr[i], end = " ")\n            count = 1\n    else:\n        print(arr[i], end = " ")\n']
2022-04-13 05:00:01.537740 size on output set 3
2022-04-13 05:00:01.537753 size on input set 3
2022-04-13 05:00:08.649476 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#input\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \"\")\n            count = 1\n    else:\n        print(message[i], end = \"\")\n"
    },
    {
      "index": 1,
      "text": "\n# input\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n# print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 2,
      "text": "\n#input\ntry:\n    message = input()\n    message = message.split(\" \")\n\n    for i in range(0,len(message)):\n        message[i] = int(message[i])\n\n    message.sort()\n\n    #print(message)\n\n    count = 1\n\n    for i in range(0,len(message)):\n        if i != len(message) - 1:\n            if message[i] == message[i+1]:\n                count += 1\n            else:\n                print(message[i], end = \" \")\n                count = 1\n        else:\n            print(message[i], end = \" \")\nexcept ValueError:\n    print(\"Invalid input\")\n"
    }
  ],
  "created": 1649826001,
  "object": "edit"
}
2022-04-13 05:00:08.649652 fix syntax errors 3 ['\n#input\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = "")\n            count = 1\n    else:\n        print(message[i], end = "")\n', '\n# input\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n# print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n', '\n#input\ntry:\n    message = input()\n    message = message.split(" ")\n\n    for i in range(0,len(message)):\n        message[i] = int(message[i])\n\n    message.sort()\n\n    #print(message)\n\n    count = 1\n\n    for i in range(0,len(message)):\n        if i != len(message) - 1:\n            if message[i] == message[i+1]:\n                count += 1\n            else:\n                print(message[i], end = " ")\n                count = 1\n        else:\n            print(message[i], end = " ")\nexcept ValueError:\n    print("Invalid input")\n']
2022-04-13 05:00:14.345512 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\narr = input()\narr = arr.split(\" \")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\n\n#print(message)\n\ncount = 1\n\n    if arr[i] == arr[i+1]:\n        count += 1\n    else:\n        print(arr[i], end = \" \") #end = \" \" to print in a single line\n        count = 1\n"
    },
    {
      "index": 1,
      "text": "\n\narr = input()\narr = arr.split(\" \")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\n\n#print(message)\n\ncount = 1\nfor i in range(0,len(arr)):\n    if arr[i] == arr[i+1]:\n        count += 1\n    else:\n        print(arr[i], end = \" \") \n        count = 1\n"
    },
    {
      "index": 2,
      "text": "\n\narr = input()\narr = arr.split(\" \")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\nprint(arr)\n#print(message)\n\ncount = 1\n\n    if arr[i] == arr[i+1]:\n        count += 1\n    else:\n        print(arr[i], end = \" \")\n"
    }
  ],
  "created": 1649826008,
  "object": "edit"
}
2022-04-13 05:00:14.345696 fix syntax errors 3 ['\n\narr = input()\narr = arr.split(" ")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\n\n#print(message)\n\ncount = 1\n\n    if arr[i] == arr[i+1]:\n        count += 1\n    else:\n        print(arr[i], end = " ") #end = " " to print in a single line\n        count = 1\n', '\n\narr = input()\narr = arr.split(" ")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\n\n#print(message)\n\ncount = 1\nfor i in range(0,len(arr)):\n    if arr[i] == arr[i+1]:\n        count += 1\n    else:\n        print(arr[i], end = " ") \n        count = 1\n', '\n\narr = input()\narr = arr.split(" ")\n\nfor i in range(0,len(arr)):\n    arr[i] = int(arr[i])\n\narr.sort()\nprint(arr)\n#print(message)\n\ncount = 1\n\n    if arr[i] == arr[i+1]:\n        count += 1\n    else:\n        print(arr[i], end = " ")\n']
2022-04-13 05:00:17.371630 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 1,
      "text": "\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = \" \")\n            count = 1\n    else:\n        print(message[i], end = \" \")\n"
    },
    {
      "index": 2,
      "text": "# -*- coding: utf-8 -*-\n\nmessage = input(\"\")\nmessage = message.split(\" \")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end=\" \")\n            count = 1\n    else:\n        print(message[i])\n"
    }
  ],
  "created": 1649826014,
  "object": "edit"
}
2022-04-13 05:00:17.371813 fix syntax errors 3 ['\n\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n', '\n\nmessage = input()\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n#print(message)\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end = " ")\n            count = 1\n    else:\n        print(message[i], end = " ")\n', '# -*- coding: utf-8 -*-\n\nmessage = input("")\nmessage = message.split(" ")\n\nfor i in range(0,len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\ncount = 1\n\nfor i in range(0,len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i+1]:\n            count += 1\n        else:\n            print(message[i], end=" ")\n            count = 1\n    else:\n        print(message[i])\n']
2022-04-13 05:00:17.371845 size on output set 8
