["\n\nn = int(input())\nk = int(input())\n\n# Number of operations A + Number of operations B = n (1)\n# Number of operations A * 2 + Number of operations B * k = minimum value (2)\n# Number of operations A * 2 = n - Number of operations B (3)\n# Number of operations A = (n - Number of operations B) / 2 (4)\n# Number of operations B = n - (n - Number of operations B) / 2 (6)\n# Number of operations B = n - n / 2 + Number of operations B / 2 (7)\n# Number of operations B = n / 2 + Number of operations B / 2 (8)\n# Number of operations B / 2 = n / 2 (9)\n# Number of operations B = n (10)\n# Number of operations A = n - Number of operations B (11)\n# Number of operations A = n - n (12)\n# Number of operations A = 0 (13)\n# Number of operations B = n (14)\n# minimum value = Number of operations B * k (15)\nminimum_value = n * k\nprint(minimum_value)\n", "\n\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n - 1, k) * 2 + 1, solve(n - 1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "import sys\n\n\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n-1, k) * 2, solve(n-1, k) + k, sys.maxsize)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\nn = int(input())\nk = int(input())\n\n# Number of operations A + Number of operations B = n (1)\n# Number of operations A * 2 + Number of operations B * k = minimum value (2)\n# Number of operations A * 2 = n - Number of operations B (3)\n# Number of operations A = (n - Number of operations B) / 2 (4)\n# Number of operations B = n - (n - Number of operations B) / 2 (5)\n# Number of operations B = n - n / 2 + Number of operations B / 2 (6)\n# Number of operations B = n / 2 + Number of operations B / 2 (7)\n# Number of operations B / 2 = n / 2 (8)\n# Number of operations B = n (9)\n# Number of operations A = n - Number of operations B (10)\n# Number of operations A = n - n (11)\n# Number of operations A = 0 (12)\n# Number of operations B = n (13)\n# minimum value = Number of operations B * k (14)\nminimum_value = n * k\nprint(minimum_value)\n", "\n\nn = int(input())\nk = int(input())\n\n# Number of operations A + Number of operations B = n\n# Number of operations A * 2 + Number of operations B * k = minimum value\n# Number of operations A * 2 = n - Number of operations B\n# Number of operations A = (n - Number of operations B) / 2\n# Number of operations B = n - Number of operations A\n# Number of operations B = n - (n - Number of operations B) / 2\n# Number of operations B = n - n / 2 + Number of operations B / 2\n# Number of operations B = n / 2 + Number of operations B / 2\n# Number of operations B / 2 = n / 2\n# Number of operations B = n\n# Number of operations A = n - Number of operations B\n# Number of operations A = n - n\n# Number of operations A = 0\n# Number of operations B = n\n# minimum value = Number of operations B * k\nminimum_value = n * k\nprint(minimum_value)\n", "\ndef solve(n, k):\n    if n == 0:\n        return 0\n    return min(solve(n - 1, k) * 2, solve(n - 1, k) + k)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\n\ndef solve(n, k):\n    if n == 0:\n        return 0\n    return min(solve(n-1, k) * 2, solve(n-1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "def solve(n, k):\n    return min(solve(n-1, k) * 2, solve(n-1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\nn = int(input())\nk = int(input())\n\n# Number of operations A + Number of operations B = n\n# Number of operations A * 2 + Number of operations B * k = minimum value\n# Number of operations A * 2 = minimum value - Number of operations B * k\n# Number of operations A = (minimum value - Number of operations B * k) / 2\n# Number of operations A = (n - Number of operations B) / 2\n# Number of operations B = n - (n - Number of operations B) / 2\n# Number of operations B = n - n / 2 + Number of operations B / 2\n# Number of operations B = n / 2 + Number of operations B / 2\n# Number of operations B / 2 = n / 2\n# Number of operations B = n\n# Number of operations A = n - Number of operations B\n# Number of operations A = n - n\n# Number of operations A = 0\n# Number of operations B = n\n# minimum value = Number of operations B * k\nminimum_value = n * k\nprint(minimum_value)\n", "\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n-1, k) * 2, solve(n-1, k) + k) + 1\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\nn = int(input())\nk = int(input())\n\nminimum_value = n * k\nprint(minimum_value)\n", "\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n - 1, k) * 2 + 1, solve(n - 1, k) + k)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n", "\n\ndef solve(n):\n    if n == 1:\n        return 1\n    return solve(n-1) + solve(n-2)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n", "\ndef solve(n, k):\n    if n == 0:\n        return 0\n    else:\n        return min(solve(n - 1, k) * 2, solve(n - 1, k) + k) + 1\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(solve(n, k))\n"]