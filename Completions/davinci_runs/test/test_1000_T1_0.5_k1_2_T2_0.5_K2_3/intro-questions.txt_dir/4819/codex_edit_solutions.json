["\n\n\ndef distinct_modulo42(nums):\n    modulo_nums = [num % 42 for num in nums]\n\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo42(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    # input\n    nums = []\n    for i in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output\n    print(len(set(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42.\ndef distinct():\n    #Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set)) \n\n#Test the function\ndistinct()\n", "\n\nnums = [int(input()) for _ in range(10)]\nprint(len(set([n % 42 for n in nums])))\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42\ndef main():\n    # Dictionary to store the modulo values\n    mod = {}\n    # Loop through 10 inputs.\n    for i in range(10):\n        # Store the modulo of the input.\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values.\n    print(len(set(mod.values())))\n\nmain()\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42\ndef main(n):\n    # Dictionary to store the modulo values.\n    mod = {}\n    # Loop through 10 inputs\n    for i in range(n):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values\n    print(len(set(mod.values())))\n\nmain(10)\n", "\n\n\n\ndef main():\n    nums = [int(input()) for _ in range(10)]\n    print(len(set([n % 42 for n in nums]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef distinct_modulo(numbers):\n    modulo_numbers = [number % 42 for number in numbers]\n\n    return len(set(modulo_numbers))\n\ndef main():\n    numbers = []\n    for _ in range(10):\n        numbers.append(int(input()))\n    print(distinct_modulo(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    modulo_nums = [num % 42 for num in nums]\n    print(len(set(modulo_nums)))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\nnums = [int(input()) for i in range(10)]\nprint(len(set([n % 42 for n in nums])))\n", "\n# Get input\nnums = []\nfor _ in range(10):\n    nums.append(int(input()))\n\n# Get distinct number\nnums = list(set([x % 42 for x in nums]))\n\n# Print output\nprint(len(nums))\n", "\n\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42.\ndef distinct():\n    #Create a list of the 10 numbers\n    nums = []\n    for _ in range(10):\n        nums.append(input())\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for _ in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n\n#Test the function\ndistinct()\n", "\n\n\n\ndef main():\n    nums = [int(input())%42 for i in range(10)]\n    print(len(set(nums)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nmodulo = 42\nnumbers = []\nfor i in range(10): # 10 inputs\n    numbers.append(int(input()) % modulo)\n\nprint(len(set(numbers))) # number of unique numbers\n", "\n\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42.\ndef distinct():\n    #Create a list of the 10 numbers.\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    #Create a list of the 10 numbers modulo 42.\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42.\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set.\n    print(len(nums_mod_set))\n\n#Test the function.\ndistinct()\n", "\n\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42.\ndef distinct():\n    #Create a list of the 10 numbers.\n    nums = []\n    for i in range(10):\n        nums.append(int(input()))\n    #Create a list of the 10 numbers modulo 42.\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42.\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n\n#Test the function\ndistinct()\n", "nums = [int(input()) for i in range(10)]\nprint(len(set(n % 42 for n in nums)))\n", "\ndef main():\n    nums = []\n    for i in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output\n    print(len(set(nums)))\n\nif __name__ == \"__main__\":\n    main()\n", "modulo = 42\nnumbers = []\nfor i in range(10):\n    numbers.append(int(input()) % modulo)\n\nprint(len(set(numbers)))\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42.\ndef main():\n    # Dictionary to store the modulo values.\n    mod = {}\n    # Loop through 10 inputs\n    for i in range(10):\n        # Store the modulo of the input\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values\n    print(len(set(mod.values()))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef distinct_modulo(numbers): \n    modulo_numbers = [number % 42 for number in numbers] \n    return len(set(modulo_numbers)) \n\ndef main(): \n    numbers = [] \n    for _ in range(10): \n        numbers.append(int(input())) \n    print(distinct_modulo(numbers)) \n\nif __name__ == \"__main__\": \n    main() \n", "\n\n# Accepts 10 numbers, outputs number of distinct numbers modulo 42.\n\n\ndef distinct():\n    # Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    # Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    # Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    # Output the length of the set\n    print(len(nums_mod_set))\n\n# Test the function\ndistinct()\n", "\nprint(len(set(int(input()) % 42 for i in range(10))))\n", "\n\n\ndef distinct():\n    # Create a list of the 10 numbers.\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    # Create a list of the 10 numbers modulo 42.\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    # Create a set of the 10 numbers modulo 42.\n    nums_mod_set = set(nums_mod)\n    # Output the length of the set\n    print(len(nums_mod_set))\n\n\n# Test the function\ndistinct()\n", "\nmode = 42\nnums = []\n\nfor _ in range(10):\n    num = int(input()) % mode\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\n\nmod_num = 10\nnums = []\n\nfor _ in range(10):\n    num = int(input()) % mod_num\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\n\ndef main():\n    # input numbers\n    nums = []\n    for _ in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output the number of unique numbers\n    print(len(set(nums)))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    modulo = 42\n    numbers = []\n    for i in range(10):\n        numbers.append(int(input()) % modulo)\n\n    print(len(set(numbers)))\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "print(len(set(int(input())%42 for i in range(10))))\n", "\ndef distinct_modulo(numbers):\n    modulo_numbers = [number % 42 for number in numbers] #list comprehension\n    return len(set(modulo_numbers))\n\ndef main():\n    numbers = []\n    for _ in range(10):\n        numbers.append(int(input()))\n    print(distinct_modulo(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef distinct_modulo_42(nums):\n    modulo_nums = [num % 42 for num in nums]\n\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo_42(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n", "# Accepts 10 inputs and outputs the number of distinct numbers modulo 42.\ndef main():\n    # Dictionary to store the modulo values.\n    mod = {}\n    # Loop through 10 inputs.\n    for i in range(10):\n        # Store the modulo of the input.\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values.\n    print(len(set(mod.values())))\n\nmain()\n", "\n\ndef main():\n    nums = [int(input()) for i in range(10)]\n    print(len(set([n % 42 for n in nums])))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    modulo = 42\n    numbers = []\n    for i in range(10):\n        numbers.append(int(input()) % modulo)\n\n    print(len(set(numbers)))\n\n\nif __name__ == '__main__':\n    main()\n", "\n#Accepts 10 numbers, outputs number of distinct numbers modulo 42.\ndef distinct():\n    #Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(int(input()))\n    #Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    #Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    #Output the length of the set\n    print(len(nums_mod_set))\n\n#Test the function\ndistinct()\n", "\ndef distinct_modulo_42(nums):\n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\n\ndef main():\n    nums = []\n    for i in range(10):\n        nums.append(int(input(\"Enter number {}: \".format(i+1))))\n    print(distinct_modulo_42(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Accepts 10 numbers, outputs number of distinct numbers modulo 42\n\n\ndef distinct():\n    # Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    # Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    # Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    # Output the length of the set\n    print(len(nums_mod_set))\n\n# Test the function\ndistinct()\n", "\n\nprint(len(set([int(input()) % 42 for _ in range(int(input()))])))\n", "\nnums = [int(input()) for i in range(3)]\nprint(len(set([n % 42 for n in nums])\n", "\n\nprint(len(set([int(input()) % 42 for _ in range(10)])))\n", "\n\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42.\ndef main():\n    # Dictionary to store the modulo values.\n    mod = {}\n    # Loop through 10 inputs.\n    for i in range(10):\n        # Store the modulo of the input.\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values.\n    print(len(set(mod.values())))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Accepts 10 inputs and outputs the number of distinct numbers modulo 42.\ndef main():\n    # Dictionary to store the modulo values.\n    mod = {}\n    # Loop through 10 inputs.\n    for i in range(10):\n        # Store the modulo of the input.\n        mod[i] = int(input()) % 42\n    # Output the number of distinct modulo values. \n    print(len(set(mod.values())))\n\nmain()\n", "#!/usr/bin/env python\n\nn = int(input())\ns = set(map(int, input().split()))\n\nfor _ in range(int(input())):\n    command = input().split()\n\n    if 'pop' == command[0]:\n        s.pop()\n    else:\n        getattr(s, command[0])(int(command[1]))\n\nprint(sum(s))\n", "# Accepts 10 numbers, outputs number of distinct numbers modulo 42\n\n\ndef distinct():\n    # Create a list of the 10 numbers\n    nums = []\n    for i in range(10):\n        nums.append(input())\n    # Create a list of the 10 numbers modulo 42\n    nums_mod = []\n    for i in range(10):\n        nums_mod.append(nums[i] % 42)\n    # Create a set of the 10 numbers modulo 42\n    nums_mod_set = set(nums_mod)\n    # Output the length of the set\n    print(len(nums_mod_set))\n\n# Test the function\ndistinct()\n", "\n# Get input.\nnums = []\nfor _ in range(10):\n    nums.append(int(input()))\n\n# Get distinct numbers.\nnums = list(set([x % 42 for x in nums]))\n\n# Print output.\nprint(len(nums))\n", "\n\nprint(len(set([int(input()) % 42 for _ in range(10)]))) \n", "\nmode = 42\nnums = []\n\nfor _ in range(10):\n    num = int(input())\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\nmod = 10\nnums = []\n\nfor _ in range(10):\n    num = int(input()) % mod\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\nn = int(input())\ns = set(map(int, input().split()))\n\nfor _ in range(int(input())):\n    command = input().split()\n\n    if 'pop' == command[0]:\n        s.pop()\n    else:\n        getattr(s, command[0])(int(command[1]))\n\nprint(sum(s))\n", "\n\ndef distinct_modulo_42(nums):\n    modulo_nums = [num % 42 for num in nums]\n    return len(set(modulo_nums))\n\n\ndef main():\n    nums = []\n    for _ in range(10):\n\n        nums.append(int(input()))\n    print(distinct_modulo_42(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nmodulo = 10\nnumbers = []\nfor i in range(10):\n    numbers.append(int(input()) % modulo)\n\nprint(numbers.count(0))\n", "\n\nmode = 42\nnums = []\n\nfor _ in range(int(input())):\n    num = int(input()) % mode\n    if num not in nums:\n        nums.append(num)\n\nprint(len(nums))\n", "\nprint(len(set([int(input()) % 42 for i in range(10)])))\n", "\ndef distinct_modulo42(nums):\n    modulo_nums = [num % 42 for num in nums]  # \uc785\ub825 \ubc1b\uc740 \uc218\ub4e4\uc744 \ub098\ub208 \ub098\uba38\uc9c0\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4ec\n    return len(set(modulo_nums))\n\ndef main():\n    nums = []\n    for _ in range(10):\n        nums.append(int(input()))\n    print(distinct_modulo42(nums))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nmodulo = 42\nnumbers = []\nfor i in range(10): #range(10) -> range(int(input()))\n    numbers.append(int(input()) % modulo)\n\nprint(numbers)\n", "\ndef main():\n    # input\n    nums = []\n    for _ in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output\n    print(len(set(nums)))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    # input numbers\n    nums = []\n    for i in range(10):\n        num = int(input())\n        num %= 42\n        nums.append(num)\n\n    # output the number of unique numbers\n    print(len(set(nums)))\n\nif __name__ == '__main__':\n    main()\n"]