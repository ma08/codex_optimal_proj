2022-04-12 23:21:26.946977 num operations 2
2022-04-12 23:21:26.946986 size on input set 1
2022-04-12 23:21:29.191065 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M)) #symmetric difference\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n#symmetric difference\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    }
  ],
  "created": 1649805687,
  "object": "edit"
}
2022-04-12 23:21:29.191285 fix spelling mistakes 3 ['\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M)) #symmetric difference\n\nfor i in sorted(sym_diff):\n    print(i)\n', '\n#\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n#symmetric difference\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n']
2022-04-12 23:21:29.191310 size on output set 3
2022-04-12 23:21:29.191317 size on input set 3
2022-04-12 23:21:34.247051 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\n\ndef average(array):\n    # your code goes here\n    return sum(set(array)) / len(set(array))\n\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = average(arr)\n    print(result)\n"
    },
    {
      "index": 1,
      "text": "\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M)) #symmetric difference\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 2,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n\nm = int(input())\n\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\n\nsym_diff = M.difference(N).union(N.difference(M)) #symmetric difference\n\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    }
  ],
  "created": 1649805689,
  "object": "edit"
}
2022-04-12 23:21:34.247220 fix syntax errors 3 ["\n\n\n\ndef average(array):\n    # your code goes here\n    return sum(set(array)) / len(set(array))\n\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = average(arr)\n    print(result)\n", '\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M)) #symmetric difference\n\nfor i in sorted(sym_diff):\n    print(i)\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n\nm = int(input())\n\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\n\nsym_diff = M.difference(N).union(N.difference(M)) #symmetric difference\n\n\nfor i in sorted(sym_diff):\n    print(i)\n']
2022-04-12 23:21:36.525233 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n#symmetric difference\nsym_diff = M.difference(N).union(N.difference(M))\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n#symmetric difference\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 2,
      "text": "\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    }
  ],
  "created": 1649805694,
  "object": "edit"
}
2022-04-12 23:21:36.525463 fix syntax errors 3 ['# Enter your code here. Read input from STDIN. Print output to STDOUT\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n#symmetric difference\nsym_diff = M.difference(N).union(N.difference(M))\nfor i in sorted(sym_diff):\n    print(i)\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n#symmetric difference\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n', '\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n']
2022-04-12 23:21:56.141512 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import defaultdict\nfrom heapq import *\n\ndef dijkstra(edges, f, t):\n    g = defaultdict(list)\n    for l,r,c in edges:\n        g[l].append((c,r))\n\n    q, seen = [(0,f,())], set()\n    while q:\n        (cost,v1,path) = heappop(q)\n        if v1 not in seen:\n            seen.add(v1)\n            path = (v1, path)\n            if v1 == t: return (cost, path)\n\n            for c, v2 in g.get(v1, ()):\n                if v2 not in seen:\n                    heappush(q, (cost+c, v2, path))\n\n    return float(\"inf\")\n\nif __name__ == \"__main__\":\n    edges = [\n        (\"A\", \"B\", 7),\n        (\"A\", \"D\", 5),\n        (\"B\", \"C\", 8),\n        (\"B\", \"D\", 9),\n        (\"B\", \"E\", 7),\n        (\"C\", \"E\", 5),\n        (\"D\", \"E\", 15),\n        (\"D\", \"F\", 6),\n        (\"E\", \"F\", 8),\n        (\"E\", \"G\", 9),\n        (\"F\", \"G\", 11)\n    ]\n\n    print(\"=== Dijkstra ===\")\n    print(edges)\n    print(\"A -> E:\")\n    print(dijkstra(edges, \"A\", \"E\"))\n    print(\"F -> G:\")\n    print(dijkstra(edges, \"F\", \"G\"))\n"
    },
    {
      "index": 1,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.union(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.intersection(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.difference(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.symmetric_difference(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(M.issubset(N))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(M.issuperset(N))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(M.isdisjoint(N))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.union(N)):\n    print(i)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.intersection(N)):\n    print(i)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.difference(N)):\n    print(i)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.symmetric_difference(N)):\n    print(i)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    }
  ],
  "created": 1649805696,
  "object": "edit"
}
2022-04-12 23:21:56.141800 fix syntax errors 3 ['from collections import defaultdict\nfrom heapq import *\n\ndef dijkstra(edges, f, t):\n    g = defaultdict(list)\n    for l,r,c in edges:\n        g[l].append((c,r))\n\n    q, seen = [(0,f,())], set()\n    while q:\n        (cost,v1,path) = heappop(q)\n        if v1 not in seen:\n            seen.add(v1)\n            path = (v1, path)\n            if v1 == t: return (cost, path)\n\n            for c, v2 in g.get(v1, ()):\n                if v2 not in seen:\n                    heappush(q, (cost+c, v2, path))\n\n    return float("inf")\n\nif __name__ == "__main__":\n    edges = [\n        ("A", "B", 7),\n        ("A", "D", 5),\n        ("B", "C", 8),\n        ("B", "D", 9),\n        ("B", "E", 7),\n        ("C", "E", 5),\n        ("D", "E", 15),\n        ("D", "F", 6),\n        ("E", "F", 8),\n        ("E", "G", 9),\n        ("F", "G", 11)\n    ]\n\n    print("=== Dijkstra ===")\n    print(edges)\n    print("A -> E:")\n    print(dijkstra(edges, "A", "E"))\n    print("F -> G:")\n    print(dijkstra(edges, "F", "G"))\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.union(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.intersection(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.difference(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(len(M.symmetric_difference(N)))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(M.issubset(N))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(M.issuperset(N))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nprint(M.isdisjoint(N))\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.union(N)):\n    print(i)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.intersection(N)):\n    print(i)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.difference(N)):\n    print(i)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm, M = input(), set(map(int, input().split()))\nn, N = input(), set(map(int, input().split()))\n\nfor i in sorted(M.symmetric_difference(N)):\n    print(i)\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = int(input())\nM = set(map(int, input().split()))\nn = int(input())\nN = set(map(int, input().split()))\n\nsym_diff = M.difference(N).union(N.difference(M))\n\nfor i in sorted(sym_diff):\n    print(i)\n']
2022-04-12 23:21:56.141862 size on output set 9
2022-04-12 23:21:56.141871 num operations 2
2022-04-12 23:21:56.141876 size on input set 1
2022-04-12 23:22:01.606742 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = raw_input()\nm_list = set(raw_input().split())\nn = raw_input()\nn_list = set(raw_input().split())\nprint len(m_list.union(n_list))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5} \n# set2 = {3, 4, 5, 6, 7} \n\n# print set1.difference(set2)\n# print set2.difference(set1)\n\n# print set1.symmetric_difference(set2)\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print i\n"
    },
    {
      "index": 2,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5}\n# set2 = {3, 4, 5, 6, 7}\n\n# print(set1.difference(set2))\n# print(set2.difference(set1))\n\n# print(set1.symmetric_difference(set2))\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    }
  ],
  "created": 1649805716,
  "object": "edit"
}
2022-04-12 23:22:01.606926 fix spelling mistakes 3 ['\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = raw_input()\nm_list = set(raw_input().split())\nn = raw_input()\nn_list = set(raw_input().split())\nprint len(m_list.union(n_list))\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5} \n# set2 = {3, 4, 5, 6, 7} \n\n# print set1.difference(set2)\n# print set2.difference(set1)\n\n# print set1.symmetric_difference(set2)\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print i\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5}\n# set2 = {3, 4, 5, 6, 7}\n\n# print(set1.difference(set2))\n# print(set2.difference(set1))\n\n# print(set1.symmetric_difference(set2))\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n']
2022-04-12 23:22:01.606954 size on output set 3
2022-04-12 23:22:01.606961 size on input set 3
2022-04-12 23:22:09.508999 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5} \n# set2 = {3, 4, 5, 6, 7} \n\n# print set1.difference(set2)\n# print set2.difference(set1)\n\n# print set1.symmetric_difference(set2)\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 1,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef print_formatted(number):\n    # your code goes here\n    for i in range(1,number+1):\n        print \"{0:>{width}d} {0:>{width}o} {0:>{width}X} {0:>{width}b}\".format(i, width=len(bin(number)[2:]))\n\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    print_formatted(n)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5} \n# set2 = {3, 4, 5, 6, 7} \n\n# print set1.difference(set2)\n# print set2.difference(set1)\n\n# print set1.symmetric_difference(set2)\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    }
  ],
  "created": 1649805721,
  "object": "edit"
}
2022-04-12 23:22:09.509198 fix syntax errors 3 ['\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5} \n# set2 = {3, 4, 5, 6, 7} \n\n# print set1.difference(set2)\n# print set2.difference(set1)\n\n# print set1.symmetric_difference(set2)\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef print_formatted(number):\n    # your code goes here\n    for i in range(1,number+1):\n        print "{0:>{width}d} {0:>{width}o} {0:>{width}X} {0:>{width}b}".format(i, width=len(bin(number)[2:]))\n\n\nif __name__ == \'__main__\':\n    n = int(raw_input())\n    print_formatted(n)\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5} \n# set2 = {3, 4, 5, 6, 7} \n\n# print set1.difference(set2)\n# print set2.difference(set1)\n\n# print set1.symmetric_difference(set2)\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n']
2022-04-12 23:22:13.979458 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nset1 = {1, 2, 3, 4, 5}\nset2 = {3, 4, 5, 6, 7}\n\nprint(set1.difference(set2))\nprint(set2.difference(set1))\n\nprint(set1.symmetric_difference(set2))\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5}\n# set2 = {3, 4, 5, 6, 7}\n\n# print(set1.difference(set2))\n# print(set2.difference(set1))\n\n# print(set1.symmetric_difference(set2))\n\nm = int(input())\nm_list = input().split()\nn = int(input())\nn_list = input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5}\n# set2 = {3, 4, 5, 6, 7}\n\n# print(set1.difference(set2))\n# print(set2.difference(set1))\n\n# print(set1.symmetric_difference(set2))\n\nm = input()\nm_list = input().split()\nn = input()\nn_list = input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n"
    }
  ],
  "created": 1649805729,
  "object": "edit"
}
2022-04-12 23:22:13.979651 fix syntax errors 3 ['\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nset1 = {1, 2, 3, 4, 5}\nset2 = {3, 4, 5, 6, 7}\n\nprint(set1.difference(set2))\nprint(set2.difference(set1))\n\nprint(set1.symmetric_difference(set2))\n\nm = raw_input()\nm_list = raw_input().split()\nn = raw_input()\nn_list = raw_input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5}\n# set2 = {3, 4, 5, 6, 7}\n\n# print(set1.difference(set2))\n# print(set2.difference(set1))\n\n# print(set1.symmetric_difference(set2))\n\nm = int(input())\nm_list = input().split()\nn = int(input())\nn_list = input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# set1 = {1, 2, 3, 4, 5}\n# set2 = {3, 4, 5, 6, 7}\n\n# print(set1.difference(set2))\n# print(set2.difference(set1))\n\n# print(set1.symmetric_difference(set2))\n\nm = input()\nm_list = input().split()\nn = input()\nn_list = input().split()\n\nset1 = set(m_list)\nset2 = set(n_list)\n\nsym_diff = set1.symmetric_difference(set2)\n\nfor i in sorted(sym_diff):\n    print(i)\n']
2022-04-12 23:22:17.340585 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = raw_input()\nm_list = set(raw_input().split())\nn = raw_input()\nn_list = set(raw_input().split())\nprint len(m_list.union(n_list))\n"
    },
    {
      "index": 1,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nm = raw_input()\nm_list = set(raw_input().split())\nn = raw_input()\nn_list = set(raw_input().split())\nprint len(m_list.union(n_list))\n"
    },
    {
      "index": 2,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nm = int(raw_input())\nm_list = set(map(int, raw_input().split()))\nn = int(raw_input())\nn_list = set(map(int, raw_input().split()))\nprint(len(m_list.union(n_list)))\n"
    }
  ],
  "created": 1649805734,
  "object": "edit"
}
2022-04-12 23:22:17.340765 fix syntax errors 3 ['\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nm = raw_input()\nm_list = set(raw_input().split())\nn = raw_input()\nn_list = set(raw_input().split())\nprint len(m_list.union(n_list))\n', '\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nm = raw_input()\nm_list = set(raw_input().split())\nn = raw_input()\nn_list = set(raw_input().split())\nprint len(m_list.union(n_list))\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nm = int(raw_input())\nm_list = set(map(int, raw_input().split()))\nn = int(raw_input())\nn_list = set(map(int, raw_input().split()))\nprint(len(m_list.union(n_list)))\n']
2022-04-12 23:22:17.340788 size on output set 8
