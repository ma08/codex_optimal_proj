["\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    digits = [int(digit) for digit in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\nif n % sum([int(x) for x in list(str(n))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "def main():\n    N = int(input())\n    if N % sum([int(x) for x in list(str(N))]) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "N = int(input())\nif N % sum([int(x) for x in list(str(N))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\nprint(N)\n", "\n\nn = int(input())\nprint(\"Yes\" if n % sum([int(x) for x in list(str(n))]) == 0 else \"No\")\n", "\n\ndef main():\n    n = int(input())\n    num_list = [int(i) for i in str(n)]\n    if n % sum(num_list) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n", "\ndef main():\n    n = int(input())\n    digits = [int(i) for i in str(n) if i != '0']\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n", "\ndef main():\n    n = int(input())\n    number = [int(i) for i in str(n)]\n    if n % sum(number) == 0:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__': main()\n", "\nN = int(input())\n\nif N % sum([int(x) for x in list(str(N))]) == 0:  # N % sum(map(int, list(str(N))))\u3067\u3082\u53ef\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "def main():\n    n = int(input())\n    digits = [int(i) for i in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n", "\n\ndef main():\n    n = int(input())\n    number_list = [int(i) for i in str(n)]\n    if n % sum(number_list) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"]