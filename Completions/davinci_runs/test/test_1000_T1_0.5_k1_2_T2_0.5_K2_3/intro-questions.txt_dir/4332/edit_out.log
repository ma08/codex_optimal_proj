2022-04-12 19:30:24.765533 num operations 2
2022-04-12 19:30:24.765544 size on input set 1
2022-04-12 19:30:27.307875 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    number = [int(i) for i in str(n)]\n    if n % sum(number) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    digits = [int(digit) for digit in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    digits = [int(i) for i in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649791824,
  "object": "edit"
}
2022-04-12 19:30:27.308097 fix spelling mistakes 3 ["\n\ndef main():\n    n = int(input())\n    number = [int(i) for i in str(n)]\n    if n % sum(number) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    digits = [int(digit) for digit in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    digits = [int(i) for i in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 19:30:27.308156 size on output set 3
2022-04-12 19:30:27.308163 size on input set 3
2022-04-12 19:30:29.743807 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    n = int(input())\n    digits = [int(i) for i in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    digits = [int(i) for i in str(n) if i != '0']\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649791827,
  "object": "edit"
}
2022-04-12 19:30:29.744003 fix syntax errors 3 ["\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n = int(input())\n    digits = [int(i) for i in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    digits = [int(i) for i in str(n) if i != '0']\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 19:30:32.347903 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    digits = [int(digit) for digit in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649791829,
  "object": "edit"
}
2022-04-12 19:30:32.348092 fix syntax errors 3 ["\ndef main():\n    n = int(input())\n    digits = [int(digit) for digit in str(n)]\n    if n % sum(digits) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 19:30:37.184493 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    num_list = [int(i) for i in str(n)]\n    if n % sum(num_list) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    number = [int(i) for i in str(n)]\n    if n % sum(number) == 0:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__': main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    number_list = [int(i) for i in str(n)]\n    if n % sum(number_list) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649791832,
  "object": "edit"
}
2022-04-12 19:30:37.184695 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n    num_list = [int(i) for i in str(n)]\n    if n % sum(num_list) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    number = [int(i) for i in str(n)]\n    if n % sum(number) == 0:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__': main()\n", "\n\ndef main():\n    n = int(input())\n    number_list = [int(i) for i in str(n)]\n    if n % sum(number_list) == 0:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 19:30:37.184719 size on output set 8
2022-04-12 19:30:37.184729 num operations 2
2022-04-12 19:30:37.184734 size on input set 1
2022-04-12 19:30:48.795849 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\nif N % sum([int(x) for x in list(str(N))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    },
    {
      "index": 1,
      "text": "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\nif n % sum([int(x) for x in list(str(n))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    }
  ],
  "created": 1649791837,
  "object": "edit"
}
2022-04-12 19:30:48.796035 fix spelling mistakes 3 ['\nN = int(input())\n\nif N % sum([int(x) for x in list(str(N))]) == 0:\n    print("Yes")\nelse:\n    print("No")\n', "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n", '\n\nn = int(input())\n\nif n % sum([int(x) for x in list(str(n))]) == 0:\n    print("Yes")\nelse:\n    print("No")\n']
2022-04-12 19:30:48.796168 size on output set 3
2022-04-12 19:30:48.796177 size on input set 3
2022-04-12 19:30:51.628083 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n"
    },
    {
      "index": 2,
      "text": "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n"
    }
  ],
  "created": 1649791848,
  "object": "edit"
}
2022-04-12 19:30:51.628299 fix syntax errors 3 ["\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n", "\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n", "\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('C:\\\\Users\\\\admin\\\\Desktop\\\\data\\\\winequality-red.csv', sep=';')\n\nx = df.drop('quality', axis=1)\ny = df['quality']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nlm = LinearRegression()\n\nlm.fit(x_train, y_train)\n\nprint(lm.intercept_)\nprint(lm.coef_)\n\ncoeff_df = pd.DataFrame(lm.coef_, x.columns, columns=['Coefficient'])\nprint(coeff_df)\n\npredictions = lm.predict(x_test)\n\nplt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\n\nsns.distplot((y_test - predictions), bins=50)\n\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n\nprint('R^2:', metrics.explained_variance_score(y_test, predictions))\n"]
2022-04-12 19:30:55.891454 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "N = int(input())\nif N % sum([int(x) for x in list(str(N))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\nprint(N)\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\nif N % sum([int(x) for x in list(str(N))]) == 0:  # N % sum(map(int, list(str(N))))\u3067\u3082\u53ef\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    },
    {
      "index": 2,
      "text": "def main():\n    N = int(input())\n    if N % sum([int(x) for x in list(str(N))]) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649791851,
  "object": "edit"
}
2022-04-12 19:30:55.891641 fix syntax errors 3 ['N = int(input())\nif N % sum([int(x) for x in list(str(N))]) == 0:\n    print("Yes")\nelse:\n    print("No")\n\nprint(N)\n', '\nN = int(input())\n\nif N % sum([int(x) for x in list(str(N))]) == 0:  # N % sum(map(int, list(str(N))))でも可\n    print("Yes")\nelse:\n    print("No")\n', 'def main():\n    N = int(input())\n    if N % sum([int(x) for x in list(str(N))]) == 0:\n        print("Yes")\n    else:\n        print("No")\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 19:30:58.362289 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nprint(\"Yes\" if n % sum([int(x) for x in list(str(n))]) == 0 else \"No\")\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\nif n % sum([int(x) for x in list(str(n))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\nif n % sum([int(x) for x in list(str(n))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    }
  ],
  "created": 1649791855,
  "object": "edit"
}
2022-04-12 19:30:58.362460 fix syntax errors 3 ['\n\nn = int(input())\nprint("Yes" if n % sum([int(x) for x in list(str(n))]) == 0 else "No")\n', '\nn = int(input())\n\nif n % sum([int(x) for x in list(str(n))]) == 0:\n    print("Yes")\nelse:\n    print("No")\n', '\nn = int(input())\n\nif n % sum([int(x) for x in list(str(n))]) == 0:\n    print("Yes")\nelse:\n    print("No")\n']
2022-04-12 19:30:58.362481 size on output set 8
