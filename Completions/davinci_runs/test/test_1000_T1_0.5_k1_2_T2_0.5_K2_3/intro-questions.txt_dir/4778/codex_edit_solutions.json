["\n\nfrom collections import defaultdict\n\ndef efficiency_gap(districts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in districts.values())\n    wasted_votes = defaultdict(int)\n    for district, district_votes in districts.items():  # district_votes is a list of tuples\n        votes_a = sum(p[0] for p in district_votes)\n        votes_b = sum(p[1] for p in district_votes)\n        if votes_a > votes_b:\n            wasted_votes[district] = votes_a - (votes_a // 2 + 1)\n        else:\n            wasted_votes[district] = votes_b - (votes_b // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    districts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        districts[d].append((a, b))\n\n    for district, district_votes in districts.items():\n        votes_a = sum(p[0] for p in district_votes)\n        votes_b = sum(p[1] for p in district_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(districts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA-votesB-1, votesA-votesB-1)\n        else:\n            print(\"B\", votesA, votesB-votesA-1, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/(V/2)))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])*2\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) + 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) + 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()].append(i))\n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[3]].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results and the efficiency gap\n    results = [] # [winner, lost_votes, excess_votes]\n    total_votes = 0\n    total_lost_votes = 0\n    total_excess_votes = 0\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n        total_votes += a_votes + b_votes\n        total_lost_votes += lost_votes\n        total_excess_votes += excess_votes\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    print(abs(total_lost_votes - total_excess_votes) / total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\"\"\"\nAuthor: Eric J. Ma\n\nDate: 2016-07-01\n\nThis is a solution to the efficiency gap problem.\n\"\"\"\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts, and populate them with precincts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results and the efficiency gap\n    results = []  # [winner, lost_votes, excess_votes]\n    total_votes = 0\n    total_lost_votes = 0\n    total_excess_votes = 0\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - ((len(district) // 2) + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - ((len(district) // 2) + 1)\n        results.append([winner, lost_votes, excess_votes])\n        total_votes += a_votes + b_votes\n        total_lost_votes += lost_votes\n        total_excess_votes += excess_votes\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    print(abs(total_lost_votes - total_excess_votes) / total_votes)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA - votesB - 1)\n        else:\n            print(\"B\", votesA, votesB - votesA - 1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    districts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB and votesA > floor((votesA+votesB)/2) + 1:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        elif votesB > votesA and votesB > floor((votesA+votesB)/2) + 1:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            wasted_votes[district] = votes_a - (votes_a // 2 + 1)\n        elif votes_b > votes_a:\n            wasted_votes[district] = votes_b - (votes_b // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    # for district, precinct_votes in precincts.items():\n    #     votes_a = sum(p[0] for p in precinct_votes)\n    #     votes_b = sum(p[1] for p in precinct_votes)\n    #     if votes_a > votes_b:\n    #         print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n    #     else:\n    #         print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    preceincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        preceincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[preceincts[i][0] - 1].append(preceincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= P\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "import sys\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in sys.stdin.readline().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in sys.stdin.readline().strip().split()]\n        precincts[d].append((a, b))\n\n    # for district, precinct_votes in precincts.items():\n    #     votes_a = sum(p[0] for p in precinct_votes)\n    #     votes_b = sum(p[1] for p in precinct_votes)\n    #     if votes_a > votes_b:\n    #         print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n    #     else:\n    #         print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes, flush=True)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split())))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2 + i * 3:5 + i * 3]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and add the precincts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    preceincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        preceincts.append((d, a, b))\n    districts = [[] for i in range(D)]\n    for i in range(P):\n        districts[preceincts[i][0] - 1].append(preceincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        V = sum([district[j][1] + district[j][2] for j in range(len(district))])\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5 + i * 3]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(districts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in districts.values())\n    wasted_votes = defaultdict(int)\n    for district, district_votes in districts.items():\n        if district_votes[0] > district_votes[1]:\n            wasted_votes[district] = district_votes[0] - (sum(district_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = district_votes[1] - (sum(district_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values()) / num_votes)\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    districts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        districts[d].append((a, b))\n\n    for district, district_votes in districts.items():\n        votes_a = sum(p[0] for p in district_votes)\n        votes_b = sum(p[1] for p in district_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), 'B', votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), 'A', votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(districts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split())))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the redistricting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1), votes_a + votes_b)\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1), votes_a + votes_b)\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        W_A = 0\n        W_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            W_B = B_votes\n            if A_votes > V/2 + 1:\n                W_A = A_votes - V/2 - 1\n            else:\n                W_A = 0\n            print('A', int(W_A), int(W_B))\n        else:\n            W_A = A_votes\n            if B_votes > V/2 + 1:\n                W_B = B_votes - V/2 - 1\n            else:\n                W_B = 0\n            print('B', int(W_A), int(W_B))\n        efficiency_gap += abs(W_A - W_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes.\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party.\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district.\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district.\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party.\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results.\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input.\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap.\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the input\n    p, d = [int(x) for x in input().strip().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().strip().split()])\n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the redistricting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) / 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) / 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a / 2 + 1), votes_b - (votes_b / 2 + 1))\n        else:\n            print('B', votes_a - (votes_a / 2 + 1), votes_b - (votes_b / 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]] # number of precincts, number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]]) # district, a, b\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district] # [[a, b], [a, b], ...]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b]) # winner, wasted votes, opponent votes\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))]) # sum of all votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))]) # sum of wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))]) # sum of wasted votes for B\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)]) / sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        W_A = 0\n        W_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            W_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\ndef efficiencyGap(precincts, districts, method):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n    # Find the wasted votes\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]]) - (V/2)\n    wB = sum([p[1] for p in precincts if p[1] < p[2]]) - (V/2)\n    if method == \"Gap\":\n        return \"{0:.10f}\".format(abs(wA-wB)/V)\n    elif method == \"A\":\n        return \"{0:.10f}\".format(wA/V)\n    elif method == \"B\":\n        return \"{0:.10f}\".format(wB/V)\n    else:\n        return \"Error\"\n\nprint(efficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3, \"Gap\")) #0.15\nprint(efficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4, \"Gap\")) #0.00\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split())))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(input_string):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98') # doctest: +NORMALIZE_WHITESPACE\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693' # doctest: +NORMALIZE_WHITESPACE\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99') # doctest: +NORMALIZE_WHITESPACE\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372' # doctest: +NORMALIZE_WHITESPACE\n    \"\"\"\n    P, D = [int(x) for x in input_string.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input_string.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output += str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in raw_input().split()]\n    data = [[int(x) for x in raw_input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(str(winners[district]) + \" \" + str(wasted_votes[district][0]) + \" \" + str(wasted_votes[district][1]))\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(str(abs(efficiency_gap)))\n\n# Execute the main() function.\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef efficiencyGap(precincts, districts, method):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n    # Find the wasted votes\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]]) - (V/2)\n    wB = sum([p[1] for p in precincts if p[1] < p[2]]) - (V/2)\n    if method == \"Gap\":\n        return \"{0:.10f}\".format(abs(wA - wB) / V)\n    elif method == \"A\":\n        return \"{0:.10f}\".format(wA / V)\n    elif method == \"B\":\n        return \"{0:.10f}\".format(wB / V)\n    else:\n        return \"Error\"\n\nprint(efficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3, \"Gap\"))\nprint(efficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4, \"Gap\"))\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and waste votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98') # doctest: +NORMALIZE_WHITESPACE\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693' # doctest: +NORMALIZE_WHITESPACE\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99') # doctest: +NORMALIZE_WHITESPACE\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372' # doctest: +NORMALIZE_WHITESPACE\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5 + i * 3]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n' # doctest: +NORMALIZE_WHITESPACE\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))]) / 2\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))]) / 2\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))]) / 2\n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98\\\\n')\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693\\\\n'\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n')\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372\\\\n'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]  # P and D are the number of precincts and districts respectively\n    # Read the votes for each precinct into a list of lists\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5 + i * 3]])\n    # Sort the precincts by district\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    # Calculate the wasted votes for each district and store in a list\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    # Calculate the total votes and wasted votes for each candidate\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    # Output the results for each district and the efficiency gap\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)]) \n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes, file=sys.stderr)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split())))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Get the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values() for district in precincts.keys())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    # for district, precinct_votes in precincts.items():\n    #     votes_a = sum(p[0] for p in precinct_votes)\n    #     votes_b = sum(p[1] for p in precinct_votes)\n    #     if votes_a > votes_b:\n    #         print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n    #     else:\n    #         print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(districts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in districts.values())\n    wasted_votes = defaultdict(int)\n    for district, district_votes in districts.items():\n        if district_votes[0] > district_votes[1]:\n            wasted_votes[district] = district_votes[0] - (sum(district_votes) / 2 + 1)\n        else:\n            wasted_votes[district] = district_votes[1] - (sum(district_votes) / 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    districts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        districts[d].append((a, b))\n\n    for district, district_votes in districts.items():\n        votes_a = sum(p[0] for p in district_votes)\n        votes_b = sum(p[1] for p in district_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a / 2 + 1), votes_b - (votes_b / 2 + 1))\n        else:\n            print('B', votes_a - (votes_a / 2 + 1), votes_b - (votes_b / 2 + 1))\n\n    print(efficiency_gap(districts))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) \\\n                     - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main() function.\nif __name__ == '__main__':\n    main()\n", "\n\ndef efficiencyGap(precincts, districts, method):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n    # Find the wasted votes\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]]) - (V/2.0)\n    wB = sum([p[1] for p in precincts if p[1] < p[2]]) - (V/2.0)\n    if method == \"Gap\":\n        return \"{0:.10f}\".format(abs(wA-wB)/V)\n    elif method == \"A\":\n        return \"{0:.10f}\".format(wA/V)\n    elif method == \"B\":\n        return \"{0:.10f}\".format(wB/V)\n    else:\n        return \"Error\"\n\nprint(efficiencyGap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3, \"Gap\"))\nprint(efficiencyGap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4, \"Gap\"))\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = map(int, line.split())\n    preceincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = map(int, line.split())\n        preceincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[preceincts[i][0] - 1].append(preceincts[i])\n    V = 0\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B) / V\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(votes) for votes in precinct])\n        votesA, votesB = sum([votes[0] for votes in precinct]), sum([votes[1] for votes in precinct])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict, Counter\n\ndef efficiency_gap(precincts, D):\n    \"\"\"\n    The efficiency gap is a measure of how fair the redistricting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    party_wins = Counter()\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            party_wins['A'] += 1\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            party_wins['B'] += 1\n    print(party_wins)\n    if party_wins['A'] > party_wins['B']:\n        print('A')\n    else:\n        print('B')\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts, D))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(votes) for votes in precinct])\n        votesA, votesB = sum([votes[0] for votes in precinct]), sum([votes[1] for votes in precinct])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB) / totalVotes))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA - votesB - 1)\n        else:\n            print(\"B\", votesA, votesB - votesA - 1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)  # 0.833333333\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)  # 0.500000000\n", "\nimport math\n\ndef solve(input_string):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n3 100 50\\\\n2 100 98')\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693'\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99')\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input_string.split('\\n')[0].split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input_string.split('\\n')[i + 1].split()[0:3]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(math.floor(abs(total_wasted_a - total_wasted_b) / float(total_votes) * 10000000.0) / 10000000.0)\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        W_A = 0\n        W_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            W_B = B_votes\n            if A_votes > V/2 + 1:\n                W_A = A_votes - V/2 - 1\n            else:\n                W_A = 0\n        else:\n            W_A = A_votes\n            if B_votes > V/2 + 1:\n                W_B = B_votes - V/2 - 1\n            else:\n                W_B = 0\n        efficiency_gap += abs(W_A - W_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes.\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party.\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district.\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each district.\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party.\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results.\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes, end='')\n\ndef main():\n    # Read the input.\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap.\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(input_string):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input_string.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input_string.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in raw_input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) \\\n        - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)]) \\\n        * 2\n    print(abs(efficiency_gap))\n\n# Execute the main() function.\nif __name__ == '__main__':\n    main()\n"]