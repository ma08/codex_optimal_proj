2022-04-12 23:41:17.747404 num operations 2
2022-04-12 23:41:17.747421 size on input set 1
2022-04-12 23:41:20.232817 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split() for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split() for j in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n"
    }
  ],
  "created": 1649806877,
  "object": "edit"
}
2022-04-12 23:41:20.233047 fix spelling mistakes 3 ['\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split() for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n', '\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n', '\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split() for j in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n']
2022-04-12 23:41:20.233070 size on output set 3
2022-04-12 23:41:20.233076 size on input set 3
2022-04-12 23:41:23.061939 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\nb = [int(j) for j in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a,b)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(b)\nprint(a)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nb = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n"
    }
  ],
  "created": 1649806880,
  "object": "edit"
}
2022-04-12 23:41:23.062105 fix syntax errors 3 ['\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\nb = [int(j) for j in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a,b)\n', '\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(b)\nprint(a)\n', '\n\nimport sys\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nb = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n']
2022-04-12 23:41:26.709762 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nfor i in range(m):\n    if h[a[i]-1] > h[b[i]-1]:\n        print(a[i])\n    else:\n        print(b[i])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\nprint(b)\n"
    }
  ],
  "created": 1649806883,
  "object": "edit"
}
2022-04-12 23:41:26.709952 fix syntax errors 3 ['\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nfor i in range(m):\n    if h[a[i]-1] > h[b[i]-1]:\n        print(a[i])\n    else:\n        print(b[i])\n', '\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n', '\nimport sys\nn,m = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\nprint(b)\n']
2022-04-12 23:41:36.334014 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n"
    },
    {
      "index": 1,
      "text": "\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(j) for j in input().split()]\n\na = [int(k) for k in input().split()]\n\nprint(n, m, h, a)\n"
    },
    {
      "index": 2,
      "text": "\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\n#print(n)\n#print(m)\n#print(h)\n#print(a)\n\n\n\n# returns the index of the first occurence of the value in the array\ndef find(arr, value):\n    for i in range(len(arr)):\n        if arr[i] == value:\n            return i\n    return -1\n\n\n\n\ndef solve(n,m,h,a):\n    #print(\"n,m,h,a:\",n,m,h,a)\n    if len(h) == 1 and len(a) == 1:\n        if h[0] == a[0]:\n            return 1\n        else:\n            return 0\n    elif len(h) == 1 and len(a) > 1:\n        for i in range(len(a)):\n            if h[0] == a[i]:\n                return i+1\n        return 0\n    elif len(h) > 1 and len(a) == 1:\n        for i in range(len(h)):\n            if a[0] == h[i]:\n                return i+1\n        return 0\n    else:\n        i = find(h,a[0])\n        #print(\"i:\",i)\n        if i == -1:\n            return 0\n        elif i == 0:\n            return solve(n,m,h[1:],a[1:])\n        elif i == len(h)-1:\n            return solve(n,m,h[:i],a[:i])\n        else:\n            return solve(n,m,h[:i],a[:i]) + solve(n,m,h[i+1:],a[i+1:])\n\n\n\n\nprint(solve(n,m,h,a))\n"
    }
  ],
  "created": 1649806886,
  "object": "edit"
}
2022-04-12 23:41:36.334231 fix syntax errors 3 ['\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nprint(n)\nprint(m)\nprint(h)\nprint(a)\n', '\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(j) for j in input().split()]\n\na = [int(k) for k in input().split()]\n\nprint(n, m, h, a)\n', '\n\nn,m = [int(i) for i in input().split()]\n\nh = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\n#print(n)\n#print(m)\n#print(h)\n#print(a)\n\n\n\n# returns the index of the first occurence of the value in the array\ndef find(arr, value):\n    for i in range(len(arr)):\n        if arr[i] == value:\n            return i\n    return -1\n\n\n\n\ndef solve(n,m,h,a):\n    #print("n,m,h,a:",n,m,h,a)\n    if len(h) == 1 and len(a) == 1:\n        if h[0] == a[0]:\n            return 1\n        else:\n            return 0\n    elif len(h) == 1 and len(a) > 1:\n        for i in range(len(a)):\n            if h[0] == a[i]:\n                return i+1\n        return 0\n    elif len(h) > 1 and len(a) == 1:\n        for i in range(len(h)):\n            if a[0] == h[i]:\n                return i+1\n        return 0\n    else:\n        i = find(h,a[0])\n        #print("i:",i)\n        if i == -1:\n            return 0\n        elif i == 0:\n            return solve(n,m,h[1:],a[1:])\n        elif i == len(h)-1:\n            return solve(n,m,h[:i],a[:i])\n        else:\n            return solve(n,m,h[:i],a[:i]) + solve(n,m,h[i+1:],a[i+1:])\n\n\n\n\nprint(solve(n,m,h,a))\n']
2022-04-12 23:41:36.334343 size on output set 9
2022-04-12 23:41:36.334360 num operations 2
2022-04-12 23:41:36.334365 size on input set 1
2022-04-12 23:41:48.269850 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649806896,
  "object": "edit"
}
2022-04-12 23:41:48.270037 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 標高を求めるために、観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所ごとに隣接する観測所の最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路情報を使用する\n    # 道路情報から、道路のリストを作成する\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 標高を求めるために、観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求めるために、各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求めるために、各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 23:41:48.270244 size on output set 3
2022-04-12 23:41:48.270259 size on input set 3
2022-04-12 23:42:03.748832 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport collections\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    print(n, m)\n    print(h)\n    print(ab)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649806908,
  "object": "edit"
}
2022-04-12 23:42:03.749010 fix syntax errors 3 ["\n\nimport collections\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    print(n, m)\n    print(h)\n    print(ab)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 標高を求めるために、観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求めるために、各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求めるために、各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 標高を求めるために、観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求めるために、各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求めるために、各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 23:42:32.164478 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a_i, b_i in ab:\n        roads[a_i-1].append(b_i-1)\n        roads[b_i-1].append(a_i-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u306e\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649806923,
  "object": "edit"
}
2022-04-12 23:42:32.164753 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a_i, b_i in ab:\n        roads[a_i-1].append(b_i-1)\n        roads[b_i-1].append(a_i-1)\n\n    # 各観測所ごとに最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 最高標高を求めるために、観測所ごとに最高標高を求める\n    # 各観測所ごとに最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路の情報を使用する\n    # 道路の情報から、道路のリストを作成する\n    # 各観測所ごとに最高標高を求める\n    # 各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 23:42:48.187014 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\n    # \u9053\u8def\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u9053\u8def\u60c5\u5831\u304b\u3089\u3001\u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u9053\u8def\u60c5\u5831\u3092\u4f7f\u7528\u3059\u308b\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n\n\n    # \u9053\u8def\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # \u5404\u89b3\u6e2c\u6240\u3054\u3068\u306b\u96a3\u63a5\u3059\u308b\u89b3\u6e2c\u6240\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # \u5404\u89b3\u6e2c\u6240\u304b\u3089\u306e\u6700\u9ad8\u6a19\u9ad8\u3092\u6c42\u3081\u308b\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649806952,
  "object": "edit"
}
2022-04-12 23:42:48.187323 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求める\n    # 標高を求めるために、観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所ごとに隣接する観測所の最高標高を求めるために、道路のリストを作成する\n    # 道路のリストを作成するために、道路情報を使用する\n    # 道路情報から、道路のリストを作成する\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求めるために、\n    # 各観測所ごとに隣接する観測所の最高標高を求めるために、\n    # 道路のリストを作成するために、\n    # 道路情報を使用する\n    # 道路情報から、道路のリストを作成する\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所からの最高標高を求める\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    h = list(map(int, input().split()))\n    ab = [list(map(int, input().split())) for _ in range(m)]\n\n    # 各観測所からの最高標高を求めるために、観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所ごとに隣接する観測所の最高標高を求めるために、道路のリストを作成するために、道路情報を使用する\n    # 道路情報から、道路のリストを作成するために、道路情報を使用する\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所からの最高標高を求めるために、観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所ごとに隣接する観測所の最高標高を求めるために、道路のリストを作成するために、道路情報を使用する\n    # 道路情報から、道路のリストを作成するために、道路情報を使用する\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    # 各観測所からの最高標高を求める\n\n\n    # 道路のリストを作成する\n    roads = [[] for _ in range(n)]\n    for a, b in ab:\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n\n    # 各観測所ごとに隣接する観測所の最高標高を求める\n    max_h = [0 for _ in range(n)]\n    for i in range(n):\n        for j in roads[i]:\n            if h[j] > max_h[i]:\n                max_h[i] = h[j]\n\n    # 各観測所からの最高標高を求める\n    ans = 0\n    for i in range(n):\n        if h[i] > max_h[i]:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 23:42:48.187386 size on output set 9
