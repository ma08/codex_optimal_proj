["\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n", "\n# Solution 1:\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\n\nx.sort()\ny.sort()\n\na = 0\nb = 0\n\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\n\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n# Solution 2:\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b, i))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n", "\n\n# SOLUTION\n# The problem is to find the segment with the least intersection length.\n# If we sort the segments by their left endpoints, we can consider the problem as finding the segment with the least intersection length with the segment before it.\n\n# To do this, we can keep track of the right endpoint of the previous segment.\n# For the first segment, we just set the right endpoint to -infinity.\n# For the next segment, we compute the intersection length and update the right endpoint to the right endpoint of the current segment.\n# We can then keep track of the minimum intersection length and return at the end.\n\n# We can use a heap to keep track of the right endpoint of the previous segment and then just pop the first element, which will be the minimum.\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [-float('inf')]\nmin_intersection = float('-inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "\n# Solution 1: using sorted method\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\n\nx.sort()\ny.sort()\n\na = 0\nb = 0\n\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\n\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n\n# Solution 2: using sort method\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b, i))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n", "\n# Solution 1\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\n\nx.sort()\ny.sort()\n\na = 0\nb = 0\n\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\n\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n\n# Solution 2\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n", "\n\n# Solution 1\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\n\nx.sort()\ny.sort()\n\na = 0\nb = 0\n\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\n\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n\n# Solution 2\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n\n\n# Solution 3\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b))\n\nx.sort()\n\na = 0\nb = 0\n\nfor i in range(n):\n    if x[i][0] > a:\n        a = x[i][0]\n    if x[i][1] < b:\n        b = x[i][1]\n\nif a - b > 0:\n    print(a - b)\nelse:\n    print(0)\n\n\n# Solution 4\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b))\n\nx.sort()\n\na = 0\nb = 0\n\nfor i in range(n):\n    if x[i][0] > a:\n        a = x[i][0]\n    if x[i][1] < b:\n        b = x[i][1]\n\nif a - b > 0:\n    print(a - b)\nelse:\n    print(0)\n\n# Solution 1\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\n\nx.sort()\ny.sort()\n\na = 0\nb = 0\n\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\n\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n\n# Solution 2\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n", "\n\n# SOLUTION\n# The problem is to find the segment with the least intersection length. \n# If we sort the segments by their left endpoints, we can consider the problem as finding the segment with the least intersection length with the segment before it. \n\n# To do this, we can keep track of the right endpoint of the previous segment.  For the first segment, we just set the right endpoint to -infinity.  For the next segment, we compute the intersection length and update the right endpoint to the right endpoint of the current segment.  We can then keep track of the minimum intersection length and return at the end.\n\n# We can use a heap to keep track of the right endpoint of the previous segment and then just pop the first element, which will be the minimum.\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "\n\n# SOLUTION\n# The problem is to find the segment with the least intersection length.\n# If we sort the segments by their left endpoints, we can consider the problem as finding the segment with the least intersection length with the segment before it.\n\n# To do this, we can keep track of the right endpoint of the previous segment.\n# For the first segment, we just set the right endpoint to -infinity.\n# For the next segment, we compute the intersection length and update the right endpoint to the right endpoint of the current segment.\n# We can then keep track of the minimum intersection length and return at the end.\n\n# We can use a heap to keep track of the right endpoint of the previous segment and then just pop the first element, which will be the minimum.\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "\n\n# SOLUTION\n# The problem is to find the segment with the least intersection length.  If we sort the segments by their left endpoints, we can consider the problem as finding the segment with the least intersection length with the segment before it.\n\n# To do this, we can keep track of the right endpoint of the previous segment.  For the first segment, we just set the right endpoint to -infinity.  For the next segment, we compute the intersection length and update the right endpoint to the right endpoint of the current segment.  We can then keep track of the minimum intersection length and return at the end.  We can use a heap to keep track of the right endpoint of the previous segment and then just pop the first element, which will be the minimum.\n\n\n# Time Complexity: O(n log n)\n# Space Complexity: O(n)\n\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "\n\n# SOLUTION\n# The problem is to find the segment with the least intersection\n# length with the segment before it.  If we sort the segments by\n# their left endpoints, we can consider the problem as finding the\n# segment with the least intersection length with the segment\n# before it.\n\n# To do this, we can keep track of the right endpoint of the\n# previous segment.  For the first segment, we just set the right\n# endpoint to -infinity.  For the next segment, we compute the\n# intersection length and update the right endpoint to the right\n# endpoint of the current segment.  We can then keep track of the\n# minimum intersection length and return at the end.\n\n# We can use a heap to keep track of the right endpoint of the\n# previous segment and then just pop the first element, which will\n# be the minimum.\n\nimport heapq\nimport sys\n\nn = int(sys.stdin.readline())\nsegments = []\nfor i in range(n):\n    l, r = map(int, sys.stdin.readline().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "\n\n# SOLUTION\n# The problem is to find the segment with the least intersection length. If we sort the segments by their left endpoints, we can consider the problem as finding the segment with the least intersection length with the segment before it\n\n# To do this, we can keep track of the right endpoint of the previous segment.  For the first segment, we just set the right endpoint to -infinity.  For the next segment, we compute the intersection length and update the right endpoint to the right endpoint of the current segment.  We can then keep track of the minimum intersection length and return at the end\n\n# We can use a heap to keep track of the right endpoint of the previous segment and then just pop the first element, which will be the minimum\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "\n\n# SOLUTION \n# The problem is to find the segment with the least intersection length\n# with the segment before it.  If we sort the segments by their left\n# endpoints, we can consider the problem as finding the segment with the\n# least intersection length with the segment before it.\n\n# To do this, we can keep track of the right endpoint of the previous\n# segment.  For the first segment, we just set the right endpoint to\n# -infinity.  For the next segment, we compute the intersection length\n# and update the right endpoint to the right endpoint of the current\n# segment.  We can then keep track of the minimum intersection length\n# and return at the end.\n\n# We can use a heap to keep track of the right endpoint of the previous\n# segment and then just pop the first element, which will be the\n# minimum.\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "\n", "\n\n# SOLUTION 1\n# The problem is to find the segment with the least intersection length. \n# If we sort the segments by their left endpoints, we can consider the problem \n# as finding the segment with the least intersection length with the segment before it.\n\n# To do this, we can keep track of the right endpoint of the previous segment.  \n# For the first segment, we just set the right endpoint to -infinity.  \n# For the next segment, we compute the intersection length and update the right endpoint to the right endpoint of the current segment.  \n# We can then keep track of the minimum intersection length and return at the end.\n\n# We can use a heap to keep track of the right endpoint of the previous segment \n# and then just pop the first element, which will be the minimum.\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n\n\n\n# SOLUTION 2\n# The problem is to find the segment with the least intersection length. \n# If we sort the segments by their left endpoints, we can consider the problem \n# as finding the segment with the least intersection length with the segment before it.\n\n# To do this, we can keep track of the right endpoint of the previous segment.  \n# For the first segment, we just set the right endpoint to -infinity.  \n# For the next segment, we compute the intersection length and update the right endpoint to the right endpoint of the current segment.  \n# We can then keep track of the minimum intersection length and return at the end.\n\n# We can use a heap to keep track of the right endpoint of the previous segment \n# and then just pop the first element, which will be the minimum.\n\nimport heapq\n\nn = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nheap = [float('-inf')]\nmin_intersection = float('inf')\n\nfor l, r in segments:\n    min_intersection = min(min_intersection, heap[0] - l)\n    heapq.heappush(heap, r)\n\nprint(min_intersection)\n", "# Solution 1: using sorted method\nn = int(input())\nx = []\ny = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\nx.sort()\ny.sort()\na = 0\nb = 0\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n\n# Solution 2: using sort method\nn = int(input())\nx = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\n\nx.sort()\ny.sort()\n\na = 0\nb = 0\n\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\n\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n\n# Solution 2: using sort method\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b, i))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n", "\n\"\"\"\n# Solution 1:\n\nn = int(input())\n\nx = []\ny = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\n\nx.sort()\ny.sort()\n\na = 0\nb = 0\n\nfor i in range(n - 1):\n    if x[i] == x[i + 1]:\n        a += 1\n    if y[i] == y[i + 1]:\n        b += 1\n\nif a == n - 1 or b == n - 1:\n    print(0)\nelse:\n    print(y[b] - x[a])\n\n\n# Solution 2:\n\nn = int(input())\n\nx = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append((a, b, i))\n\nx.sort()\n\nans = 0\n\nfor i in range(n):\n    a = x[i][0]\n    b = x[i][1]\n    for j in range(i + 1, n):\n        if a > x[j][0]:\n            a = x[j][0]\n        if b < x[j][1]:\n            b = x[j][1]\n        if a == b:\n            break\n    if b - a > ans:\n        ans = b - a\n\nprint(ans)\n\"\"\"\n"]