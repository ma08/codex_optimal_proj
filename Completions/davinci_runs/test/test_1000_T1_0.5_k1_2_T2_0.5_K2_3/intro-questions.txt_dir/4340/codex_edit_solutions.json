["from sys import stdin, stdout\n\nn = int(stdin.readline())\na = [int(i) for i in stdin.readline().split()]\n\nfor i in range(1, 5 * 10 ** 8 + 1):\n    for j in range(n):\n        if a[j] == 2 * i - 1:\n            a[j] = 2 * i\n        elif a[j] == 2 * i:\n            a[j] = 2 * i - 1\n\nfor i in range(n):\n    stdout.write(str(a[i]) + ' ')\n", "\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5*10**8+1):\n    for j in range(n):\n        if a[j] == 2*i-1:\n            a[j] = 2*i\n        elif a[j] == 2*i:\n            a[j] = 2*i-1\n\nfor i in range(n):\n    print(a[i], end=' ')\n", "n = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5 * 10 ** 8 + 1):\n    for j in range(n):\n        if a[j] == 2 * i - 1:\n            a[j] = 2 * i\n        elif a[j] == 2 * i:\n            a[j] = 2 * i - 1\n\nfor i in range(n):\n    print(a[i], end=' ')\n", "\n\ndef adjacent_replacements_algorithm(a):\n    n = len(a)\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6, 7]\n    print(*adjacent_replacements_algorithm(a))\n", "\n\n\ndef adjacent_replacement_algorithm(n, a, k):\n    b = []\n    for i in range(n):\n        if a[i] % k == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = int(input())\n    print(*adjacent_replacement_algorithm(n, a, k))\n", "\ndef adjacent_replacements_algorithm_java(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm_java(n, a))\n", "\ndef adjacent_replacements_algorithm(a):\n    n = len(a)\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6]\n    print(*adjacent_replacements_algorithm(a))\n", "\ndef adjacent_replacement_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacement_algorithm(n, a))\n", "\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5*10**5+1):\n    for j in range(n):\n        if a[j] == 2*i-1:\n            a[j] = 2*i\n        elif a[j] == 2*i:\n            a[j] = 2*i-1\n\nfor i in range(n):\n    print(a[i], end=' ')\n", "\n\n\ndef adjacent_replacements_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacements_algorithm(n, a))\n", "def adjacent_replacement_algorithm(n, a):\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] - 1)\n        else:\n            b.append(a[i])\n    return b\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*adjacent_replacement_algorithm(n, a))\n", "\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(1, 5*10**5 + 1):\n    for j in range(n):\n        if a[j] == 2*i - 1:\n            a[j] = 2*i\n        elif a[j] == 2*i:\n            a[j] = 2*i - 1\n\nfor i in range(n):\n    print(a[i], end=' ')\n"]