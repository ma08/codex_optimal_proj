["\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\n\n# Solved by: Raul Gonzalez (https://github.com/Raul-Gonzalez-C)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct.\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    row, col = map(int, input().split())\n    positions[row][col] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n", "\n\ndef main():\n    n = int(input())\n    queens = []\n    for i in range(n):\n        x, y = [int(x) - 1 for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(\n        q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nclass Queens(object):\n    def __init__(self, n, m):\n        self.n = n  # \u0440\u0430\u0437\u043c\u0435\u0440 \u0434\u043e\u0441\u043a\u0438\n        self.m = m  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0435\u0440\u0437\u0435\u0439\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):  # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0435\u0440\u0437\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n        self.queens[x].append(y)  # \u043a\u043b\u044e\u0447 - \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n\n    def check_queens(self):  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0444\u0435\u0440\u0437\u0435\u0439 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435\n                    break\n                if j == self.n - 1:  # \u0435\u0441\u043b\u0438 \u043d\u0438 \u043e\u0434\u0438\u043d \u0444\u0435\u0440\u0437\u044c \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c False\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0430 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n                                return False\n        return True\n\n\ndef main():\n    n, m = [int(j) for j in input().split()]\n    queens = Queens(n, m)\n    for i in range(m):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x - 1, y - 1)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[y][x] = \"Q\"\n\n# check the board (iterate through the board)\nfor i in range(n):\n    for j in range(n):\n            # if there is a queen at the current position\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals (iterate through the diagonals)\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n", "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Date: 4/19/2020\n# Time: 11:08am\n\ndef check_valid(board, N, row, col):\n    for i in range(N):\n        if (col != i):\n            if (board[row][col] == board[row][i]):\n                return False\n        if (row != i):\n            if (board[row][col] == board[i][col]):\n                return False\n        if (row - i >= 0):\n            if (col - i >= 0):\n                if (board[row][col] == board[row - i][col - i]):\n                    return False\n            if (col + i < N):\n                if (board[row][col] == board[row - i][col + i]):\n                    return False\n        if (row + i < N):\n            if (col - i >= 0):\n                if (board[row][col] == board[row + i][col - i]):\n                    return False\n            if (col + i < N):\n                if (board[row][col] == board[row + i][col + i]):\n                    return False\n    return False\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = \"Q\"\n\nif (check_valid(board, N, row, col)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "def main1():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n    print(check_queens(queens))\n\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main1()\n", "\n\ndef check(n, x, y):\n    diag1 = [x[i]+y[i] for i in range(n)]\n    diag2 = [x[i]-y[i] for i in range(n)]\n\n    if len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\ndef main():\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    y = [int(i) for i in input().split()]\n\n    check(n, x, y)\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\nboard = [[0 for i in range(n)] for i in range(n)]\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n", "N = int(input())\n\n# Initialize a 2-D array to store the positions of the queens.\npositions = [[0 for x in range(N)] for y in range(N)] \n\n# Read in the positions and store them in the 2-D array.\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other.\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other.\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row.\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column.\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal.\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result.\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\n\ndef main():\n    n = int(input())\n    queens = []\n    for i in range(n):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\n    \"\"\"\n    Class for representing n-queens problem\n    \"\"\"\nclass Queens(object):\n        \"\"\"\n        Initialize queens\n        :param n: number of queens\n        \"\"\"\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n        \"\"\"\n        Add queen to queens\n        :param x: x coordinate\n        :param y: y coordinate\n        \"\"\"\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n        \"\"\"\n        Check whether n-queens problem is correct or not\n        :return: True if correct, False if not correct\n        \"\"\"\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\n    \"\"\"\n    Main function\n    \"\"\"\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int,input().split())\n    positions[x][y] = 1 \n\n#\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for _ in range(n)]\n    # Check if the solution is correct.\n    correct = all(queens[i][0] != queens[j][0] and queens[i][1] != queens[j][1] and abs(queens[i][0] - queens[j][0]) != abs(queens[i][1] - queens[j][1]) for i in range(n) for j in range(i + 1, n))\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem. \n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    n = int(input())\n\n    board = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        x,y = [int(x) for x in input().split()]\n        board[x][y] = \"Q\"\n\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"Q\":\n                # check the row\n                for k in range(n):\n                    if board[i][k] == \"Q\" and k != j:\n                        print(\"INCORRECT\")\n                        sys.exit()\n                # check the column\n                for k in range(n):\n                    if board[k][j] == \"Q\" and k != i:\n                        print(\"INCORRECT\")\n                        sys.exit()\n                # check the diagonals\n                # check up and to the left\n                x = i\n                y = j\n                while x > 0 and y > 0:\n                    x -= 1\n                    y -= 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        sys.exit()\n                # check up and to the right\n                x = i\n                y = j\n                while x > 0 and y < n-1:\n                    x -= 1\n                    y += 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        sys.exit()\n                # check down and to the left\n                x = i\n                y = j\n                while x < n-1 and y > 0:\n                    x += 1\n                    y -= 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        sys.exit()\n                # check down and to the right\n                x = i\n                y = j\n                while x < n-1 and y < n-1:\n                    x += 1\n                    y += 1\n                    if board[x][y] == \"Q\":\n                        print(\"INCORRECT\")\n                        sys.exit()\n\n    print(\"CORRECT\")\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem. \n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\"CORRECT\")\n    else:\n        print(\"INCORRECT\")\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):  # check if there is a queen in every column\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):  # check if there is a queen in every diagonal\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queen = []\n    for i in range(n):\n        queen.append(tuple(map(int, input().split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queen[i][0] == queen[j][0] or queen[i][1] == queen[j][1] or abs(queen[i][0] - queen[j][0]) == abs(queen[i][1] - queen[j][1]): # noqa\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board (iterate through the board)\nfor i in range(n):\n    for j in range(n):\n        # if there is a queen at the current position\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print('INCORRECT')\n                    exit(0)\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print('INCORRECT')\n                    exit(0)\n            # check the diagonals (iterate through the diagonals)\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print('INCORRECT')\n                    exit(0)\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print('INCORRECT')\n                    exit(0)\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print('INCORRECT')\n                    exit(0)\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print('INCORRECT')\n                    exit(0)\n\nprint('CORRECT')\n", "\n\n# Solved by: Raul Gonzalez(RaulG)\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for _ in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for _ in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):  # check if there is a queen in every column\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):  # check if there is a queen in every row\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):  # check if there is a queen in every diagonal\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(queens))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board (iterate through the board)\nfor i in range(n):\n    for j in range(n):\n            # if there is a queen at the current position\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals (iterate through the diagonals)\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"correct\")\n", "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    # elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                    #     return False\n                    # elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                    #     return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\nN = int(input())\n", "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input(\"Enter the number of queens: \"))\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input(\"Enter the position of the queen: \").split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n", "\n# Solved by: Raul Gonzalez (https://github.com/Raul-Gonzalez-C) \n# Date: 4/12/2020 (MM/DD/YYYY) \n# Time: 12:40pm (HH:MM) \n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n    print(check_queens(queens))\n\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n    print(check_queens(queens))\n\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for x in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queens(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):  # check if there is a queen in every column\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):  # check if there is a queen in every diagonal\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    if x + y == self.n - 1:\n                        continue\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main1():\n    N = int(input())\n    for i in range(N): \n        print(check_queens())\n\ndef check_queens():\n    N = int(input())\n    for i in range(N):\n        x, y = [int(x) for x in input().split()] \n        for j in range(i+1, N):\n            x2, y2 = [int(x) for x in input().split()] \n            if check_attack(x, y, x2, y2):\n                return \"INCORRECT\" \n    return \"CORRECT\"\n\ndef check_attack(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2)\n\nif __name__ == \"__main__\":\n    main1()\n", "\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solved by: Raul Gonzalez\n# Date: 4/13/2020\n# Time: 11:09am\n\ndef is_valid(board, N):\n    for row in range(len(board)):\n        for col in range(len(board)):\n            for i in range(len(board)):\n                if (row != i and col != i and board[row][col] == board[row][i]):\n                    return False\n                elif (row != i and col != i and board[row][col] == board[i][col]):\n                    return False\n                elif (row != i and col != i and board[row][col] == board[row - i][col - i]):\n                    return False\n                elif (row != i and col != i and board[row][col] == board[row + i][col - i]):\n                    return False\n                elif (row != i and col != i and board[row][col] == board[row - i][col + i]):\n                    return False\n                elif (row != i and col != i and board[row][col] == board[row + i][col + i]):\n                    return False\n    return False\n\nn = int(input())\nboard = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (is_valid(board, n)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "#!/usr/bin/env python3\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for x in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\n\ndef main():\n    n = int(input())\n    queens = []\n    for i in range(n):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()\n", "n = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\n\n# Solved by: Raul Gonzalez (https://github.com/Raul-Gonzalez-C)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    row, col = input().split()\n    board[int(row)][int(col)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input(\"\"))\n    queen = []\n    for i in range(n):\n        queen.append(tuple(map(int, input(\"\").split())))\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queen[i][0] == queen[j][0] or queen[i][1] == queen[j][1] or abs(queen[i][0] - queen[j][0]) == abs(queen[i][1] - queen[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT') \n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for x in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n#\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n", "\nn = int(input())\n\nboard = [[0 for i in range(n)] for i in range(n)]\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n", "\ndef main():\n    \"\"\"\n    This is the solution to the problem. \n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for _ in range(n)]\n    # Check if the solution is correct\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"]