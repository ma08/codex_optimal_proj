["\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n:\n            n &= n - 1\n            res += 1\n        return bin(n).count('1')\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n", "\nclass Solution: \n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n", "\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.hammingWeight_bin(11))\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xFFFFFFFF\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xFFFFFFFF\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xFFFFFFFF).count(\"1\")\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff  # \u5bf9\u4e8e\u8d1f\u6570\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6b63\u6570\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff  # \u5bf9\u4e8e\u8d1f\u6570\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6b63\u6570\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n", "\"\"\"\nhttps://leetcode.com/problems/number-of-1-bits/\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n\n        return bin(n).count('1')\n        return bin(n).count('1')\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n:\n            n &= n - 1\n            res += 1\n        return res\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            n = n & (n - 1)\n            count += 1\n        return count\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2019-06-03 22:21\n# @Author  : minp\n# @contact : king101125s@gmail.com\n# @Site    : \n# @File    : hammingWeight.py\n# @Software: PyCharm\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bitOperation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.hammingWeight_bin(11))\n", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xFFFFFFFF\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xFFFFFFFF\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xFFFFFFFF).count(\"1\")\n", "\n\n\nclass Solution:\n        return bin(n).count('1')\n    def hammingWeight(self, n: int) -> int:\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n:\n            n &= n - 1\n            res += 1\n        return res\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xFFFFFFFF  # 32\u4f4d\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xFFFFFFFF  # 32\u4f4d\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xFFFFFFFF).count(\"1\")  # 32\u4f4d\n"]