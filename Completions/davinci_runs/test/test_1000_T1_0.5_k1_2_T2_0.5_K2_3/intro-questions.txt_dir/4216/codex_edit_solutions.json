["\ndef main():\n    N = int(input()) + 1\n    while True:\n        if len(set(str(N))) == len(str(N)):\n            print(N)\n            break\n        N += 1\n\ndef main():\n    N = int(input())\n    r = math.ceil(math.sqrt(N)) + 1\n    for i in range(r, 1, -1):\n        if N % i == 0:\n            print(N // i // 10 ** (len(str(i)) - 1))\n            break\n\nif __name__ == '__main__':\n    main()\n", "import math\n\nif __name__ == '__main__':\n    N = int(input())\n    r = math.ceil(math.sqrt(N)) + 1\n    for i in range(r, 1, -1):\n        if N % i == 0:\n            print(N // i // 10 ** (len(str(i)) - 1))\n            break\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    s = input()\n    result = timeConversion(s)\n    f.write(result + '\\n')\n\n    f.close()\n", "import math\n\ndef main():\n    N = int(input())\n    for i in range(math.ceil(math.sqrt(N)), 0, -1):\n        if N % i == 0:\n            print(N // i // 10 ** (len(str(i)) - 1))\n            break\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef main():\n    N = int(input())\n    r = int(math.ceil(math.sqrt(N)))\n    for i in range(r, 0, -1):\n        if N % i == 0:\n            print(int(N // i // 10 ** (len(str(i)) - 1)))\n            break\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #\n    return s\n\nif __name__ == '__main__':\n    # f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    # f.write(result + '\\n')\n\n    # f.close()\n", "\n\nN = int(input())\n\nd = N // 10 + 1\nprint(int(d))\n", "\nimport math\nN = int(input())\n\nd = math.floor(math.log10(N)) + 1\nprint(int(d))\n", "from math import ceil, sqrt\n\ndef main():\n    N = int(input())\n    r = ceil(sqrt(N))\n    for i in range(r, 0, -1):\n        if N % i == 0:\n            print(N // i // 10 ** (len(str(i)) - 1))\n            break\n\nif __name__ == '__main__':\n    main()\n", "import os\n\nprint('Process (%s) start...' % os.getpid())\n# Only works on Unix/Linux/Mac:\npid = os.fork()\nif pid == 0:\n    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))\nelse:\n    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))\n", "\n\nimport os\n\nimport sys\n\n#\n# Complete the timeConversion function below.\n\n\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #\n    return 1\n\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], \"w\")\n\n    s = input()\n\n    result = timeConversion(s, 0)\n\n    f.write(result + \"\\n\")\n\n    f.close()\n", "import os\nprint('Process (%s) start...' % os.getpid())\n# Only works on Unix/Linux/Mac:\npid = os.fork()\nif pid == 0:\n    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))\nelse:\n    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))\n", "import math\n\ndef main():\n    N = int(input())\n    r = math.ceil(math.sqrt(N)) + 1\n    for i in range(r, 1, -1):\n        if N % i == 0:\n            print(N // i // 10 ** (len(str(i)) - 1))\n            break\n\nif __name__ == '__main__':\n    main()\n", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\n\nprint('Process (%s) start...' % os.getpid())\n# Only works on Unix/Linux/Mac:\npid = os.fork()\nif pid == 0:\n    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))\nelse:\n    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))\n"]