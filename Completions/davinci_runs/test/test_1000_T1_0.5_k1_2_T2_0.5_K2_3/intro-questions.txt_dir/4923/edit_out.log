2022-04-13 07:22:45.163821 num operations 2
2022-04-13 07:22:45.163838 size on input set 1
2022-04-13 07:22:46.853293 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n"
    }
  ],
  "created": 1649834565,
  "object": "edit"
}
2022-04-13 07:22:46.853615 fix spelling mistakes 3 ["\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n"]
2022-04-13 07:22:46.853643 size on output set 2
2022-04-13 07:22:46.853649 size on input set 2
2022-04-13 07:22:49.576013 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# problem link: https://codeforces.com/problemset/problem/1154/A\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n\nm = max(c)\nprint(c.index(m))\n"
    }
  ],
  "created": 1649834566,
  "object": "edit"
}
2022-04-13 07:22:49.576181 fix syntax errors 3 ["# problem link: https://codeforces.com/problemset/problem/1154/A\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n", '\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n\nm = max(c)\nprint(c.index(m))\n']
2022-04-13 07:22:51.323909 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 8\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print(-1)\nelse:\n    print(c.index(m))\n"
    }
  ],
  "created": 1649834569,
  "object": "edit"
}
2022-04-13 07:22:51.324162 fix syntax errors 3 ["\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 8\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n", "n = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n", '\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print(-1)\nelse:\n    print(c.index(m))\n']
2022-04-13 07:22:51.324188 size on output set 6
2022-04-13 07:22:51.324204 num operations 2
2022-04-13 07:22:51.324210 size on input set 1
2022-04-13 07:22:54.133796 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n# comment\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_duplicate = max(counts)\n    if counts[max_duplicate] == 1:\n        print(rolls.index(max_duplicate) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834571,
  "object": "edit"
}
2022-04-13 07:22:54.133978 fix spelling mistakes 3 ['\n# comment\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_duplicate = max(counts)\n    if counts[max_duplicate] == 1:\n        print(rolls.index(max_duplicate) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:22:54.134008 size on output set 3
2022-04-13 07:22:54.134014 size on input set 3
2022-04-13 07:22:55.946596 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# comment\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts, key=counts.get)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "from collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834574,
  "object": "edit"
}
2022-04-13 07:22:55.946852 fix syntax errors 3 ['from collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n# comment\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts, key=counts.get)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', 'from collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:22:59.103330 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_duplicate = max(counts)\n    if counts[max_duplicate] == 1:\n        print(rolls.index(max_duplicate) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_count = max(counts.values())\n    if max_count == 1:\n        for roll in counts:\n            if counts[roll] == max_count:\n                print(rolls.index(roll) + 1)\n                break\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_duplicate = max(counts)\n    if counts[max_duplicate] == 1:\n        print(rolls.index(max_duplicate) + 1)\n    else:\n        print(\"none\")\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834575,
  "object": "edit"
}
2022-04-13 07:22:59.103492 fix syntax errors 3 ['\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_duplicate = max(counts)\n    if counts[max_duplicate] == 1:\n        print(rolls.index(max_duplicate) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_count = max(counts.values())\n    if max_count == 1:\n        for roll in counts:\n            if counts[roll] == max_count:\n                print(rolls.index(roll) + 1)\n                break\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_duplicate = max(counts)\n    if counts[max_duplicate] == 1:\n        print(rolls.index(max_duplicate) + 1)\n    else:\n        print("none")\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:23:04.661028 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main(a, b, c):\n    print(a + b + c)\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(rolls)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834579,
  "object": "edit"
}
2022-04-13 07:23:04.661199 fix syntax errors 3 ['from collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', 'def main(a, b, c):\n    print(a + b + c)\n', '\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(rolls)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:23:04.661225 size on output set 7
2022-04-13 07:23:04.661237 num operations 2
2022-04-13 07:23:04.661242 size on input set 1
2022-04-13 07:23:08.488445 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1) \n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))  # list of rolls\n    maxRoll = max(rolls)  # max roll\n    if rolls.count(maxRoll) == 1:  # if the max roll is unique\n        print(rolls.index(maxRoll) + 1)  # print the index of the max roll\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834584,
  "object": "edit"
}
2022-04-13 07:23:08.488650 fix spelling mistakes 3 ['\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1) \n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))  # list of rolls\n    maxRoll = max(rolls)  # max roll\n    if rolls.count(maxRoll) == 1:  # if the max roll is unique\n        print(rolls.index(maxRoll) + 1)  # print the index of the max roll\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:23:08.488676 size on output set 3
2022-04-13 07:23:08.488682 size on input set 3
2022-04-13 07:23:11.661786 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_roll = max(rolls)\n    if rolls.count(max_roll) == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834588,
  "object": "edit"
}
2022-04-13 07:23:11.662035 fix syntax errors 3 ['\ndef main():\n    n = int(input())\n    \nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_roll = max(rolls)\n    if rolls.count(max_roll) == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    print("Hello World")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:23:13.680150 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1) \n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834591,
  "object": "edit"
}
2022-04-13 07:23:13.680320 fix syntax errors 3 ['\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1) \n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:23:17.872840 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))  # list of rolls\n    max_roll = max(rolls)  # max roll\n    if rolls.count(max_roll) == 1:  # if the max roll is unique\n        print(rolls.index(max_roll) + 1)  # print the index of the max roll\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834593,
  "object": "edit"
}
2022-04-13 07:23:17.873005 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))  # list of rolls\n    max_roll = max(rolls)  # max roll\n    if rolls.count(max_roll) == 1:  # if the max roll is unique\n        print(rolls.index(max_roll) + 1)  # print the index of the max roll\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:23:17.873032 size on output set 6
2022-04-13 07:23:17.873050 num operations 2
2022-04-13 07:23:17.873055 size on input set 1
2022-04-13 07:23:20.062315 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# If there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 2,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique numbers \nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    }
  ],
  "created": 1649834597,
  "object": "edit"
}
2022-04-13 07:23:20.062481 fix spelling mistakes 3 ['\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# If there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique numbers \nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n']
2022-04-13 07:23:20.062578 size on output set 3
2022-04-13 07:23:20.062586 size on input set 3
2022-04-13 07:23:21.829122 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n# Check if there are any unique numbers \nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 2,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    }
  ],
  "created": 1649834600,
  "object": "edit"
}
2022-04-13 07:23:21.829300 fix syntax errors 3 ['\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n# Check if there are any unique numbers \nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n']
2022-04-13 07:24:00.458014 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\n# # Read input\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# # Check if there are unique numbers\n# unique_numbers = set(a)\n# if len(unique_numbers) == 1:\n#     print(\"none\")\n\n# # Check if there are unique numbers\n# else:\n#     # Find the highest unique number\n#     for i in range(6, 0, -1):\n#         if i in unique_numbers:\n#             highest_unique = i\n#             break\n\n#     # Find the index of the highest unique number\n#     for i in range(n):\n#         if a[i] == highest_unique:\n#             print(i + 1)\n#             break\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 2,
      "text": "\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    }
  ],
  "created": 1649834601,
  "object": "edit"
}
2022-04-13 07:24:00.458228 fix syntax errors 3 ['\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# # Read input\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# # Check if there are unique numbers\n# unique_numbers = set(a)\n# if len(unique_numbers) == 1:\n#     print("none")\n\n# # Check if there are unique numbers\n# else:\n#     # Find the highest unique number\n#     for i in range(6, 0, -1):\n#         if i in unique_numbers:\n#             highest_unique = i\n#             break\n\n#     # Find the index of the highest unique number\n#     for i in range(n):\n#         if a[i] == highest_unique:\n#             print(i + 1)\n#             break\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n']
2022-04-13 07:24:10.771278 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# # Read input\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# # Check if there are any unique numbers\n# unique_numbers = set(a)\n# if len(unique_numbers) == 1:\n#     print(\"none\")\n\n# # If there are any unique numbers\n# else:\n#     # Find the highest unique number\n#     for i in range(6, 0, -1):\n#         if i in unique_numbers:\n#             highest_unique = i\n#             break\n\n#     # Find the index of the highest unique number\n#     for i in range(n):\n#         if a[i] == highest_unique:\n#             print(i + 1)\n#             break\n\nimport math\n\ndef prime_factors(n):\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n /= d\n        d = d + 1\n        if d*d > n:\n            if n > 1: factors.append(n)\n            break\n    return factors\n\nprint(prime_factors(100))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    exit()\n    print(\"none\")\n\n# If there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read input\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Check if there are any unique numbers\n    unique_numbers = set(a)\n    if len(unique_numbers) == 1:\n        print(\"none\")\n\n    # If there are any unique numbers\n    else:\n        # Find the highest unique number\n        for i in range(6, 0, -1):\n            if i in unique_numbers:\n                highest_unique = i\n                break\n\n        # Find the index of the highest unique number\n        for i in range(n):\n            if a[i] == highest_unique:\n                print(i + 1)\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649834640,
  "object": "edit"
}
2022-04-13 07:24:10.771460 fix syntax errors 3 ['\n\n# # Read input\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# # Check if there are any unique numbers\n# unique_numbers = set(a)\n# if len(unique_numbers) == 1:\n#     print("none")\n\n# # If there are any unique numbers\n# else:\n#     # Find the highest unique number\n#     for i in range(6, 0, -1):\n#         if i in unique_numbers:\n#             highest_unique = i\n#             break\n\n#     # Find the index of the highest unique number\n#     for i in range(n):\n#         if a[i] == highest_unique:\n#             print(i + 1)\n#             break\n\nimport math\n\ndef prime_factors(n):\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n /= d\n        d = d + 1\n        if d*d > n:\n            if n > 1: factors.append(n)\n            break\n    return factors\n\nprint(prime_factors(100))\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    exit()\n    print("none")\n\n# If there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\ndef main():\n    # Read input\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Check if there are any unique numbers\n    unique_numbers = set(a)\n    if len(unique_numbers) == 1:\n        print("none")\n\n    # If there are any unique numbers\n    else:\n        # Find the highest unique number\n        for i in range(6, 0, -1):\n            if i in unique_numbers:\n                highest_unique = i\n                break\n\n        # Find the index of the highest unique number\n        for i in range(n):\n            if a[i] == highest_unique:\n                print(i + 1)\n                break\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:24:10.771501 size on output set 7
2022-04-13 07:24:10.771511 num operations 2
2022-04-13 07:24:10.771516 size on input set 1
2022-04-13 07:24:14.665949 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Find the index of the unique max element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n"
    }
  ],
  "created": 1649834650,
  "object": "edit"
}
2022-04-13 07:24:14.666134 fix spelling mistakes 3 ['\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Find the index of the unique max element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n']
2022-04-13 07:24:14.666180 size on output set 3
2022-04-13 07:24:14.666187 size on input set 3
2022-04-13 07:24:17.461155 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n"
    },
    {
      "index": 2,
      "text": "\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"None\")\n"
    }
  ],
  "created": 1649834654,
  "object": "edit"
}
2022-04-13 07:24:17.461419 fix syntax errors 3 ['\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n', '\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("None")\n']
2022-04-13 07:24:20.257981 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get input from user\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list in ascending order\na.sort()\n\n# Find the index of the unique max element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n"
    },
    {
      "index": 1,
      "text": "\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Find the index of the unique max element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n"
    },
    {
      "index": 2,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Print the index of the unique max element\nprint(a.index(a[-1]) + 1)\n"
    }
  ],
  "created": 1649834657,
  "object": "edit"
}
2022-04-13 07:24:20.258151 fix syntax errors 3 ['\n\n# Get input from user\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list in ascending order\na.sort()\n\n# Find the index of the unique max element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n', '\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Find the index of the unique max element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n', '\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Print the index of the unique max element\nprint(a.index(a[-1]) + 1)\n']
2022-04-13 07:24:24.099114 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649834660,
  "object": "edit"
}
2022-04-13 07:24:24.099343 fix syntax errors 3 ['\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique max element\nif a[-1] != a[-2]:\n    # Find the index of the unique max element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n']
2022-04-13 07:24:24.099375 size on output set 7
2022-04-13 07:24:24.099385 num operations 2
2022-04-13 07:24:24.099390 size on input set 1
2022-04-13 07:24:26.045020 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:  # count how many times the roll is repeated\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    }
  ],
  "created": 1649834664,
  "object": "edit"
}
2022-04-13 07:24:26.045183 fix spelling mistakes 3 ['\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n', '\n\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:  # count how many times the roll is repeated\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n', '\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n']
2022-04-13 07:24:26.045212 size on output set 2
2022-04-13 07:24:26.045218 size on input set 2
2022-04-13 07:24:30.724940 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:  # count how many times the roll is repeated\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:  # count how many times the roll is repeated\n            highest = roll\n            winner = index\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import Counter\n\nn = int(input()) # number of entries\nrolls = [int(x) for x in input().split()] # list of rolls\n\nresult = Counter(rolls) # count how many times each roll is repeated\n\nprint(result)\n"
    }
  ],
  "created": 1649834666,
  "object": "edit"
}
2022-04-13 07:24:30.725281 fix syntax errors 3 ['\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:  # count how many times the roll is repeated\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n', '\nn = int(input())\nrolls = [int(x) for x in input().split()]\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:  # count how many times the roll is repeated\n            highest = roll\n            winner = index\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n', '\n\nfrom collections import Counter\n\nn = int(input()) # number of entries\nrolls = [int(x) for x in input().split()] # list of rolls\n\nresult = Counter(rolls) # count how many times each roll is repeated\n\nprint(result)\n']
2022-04-13 07:24:36.724792 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input(\"Enter the number of rolls: \"))\nrolls = [int(x) for x in input(\"Enter the results of the rolls: \").split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner + 1)\n"
    },
    {
      "index": 2,
      "text": "\ntest = int(input())\nfor i in range(0, test):\n    n = int(input())\n    rolls = [int(x) for x in input().split()]\n\n    highest = 0\n    winner = None\n    for index, roll in enumerate(rolls):\n        if roll > highest:\n            if rolls.count(roll) == 1:\n                highest = roll\n                winner = index\n\n    if winner is None:\n        print(\"none\")\n    else:\n        print(winner+1)\n"
    }
  ],
  "created": 1649834670,
  "object": "edit"
}
2022-04-13 07:24:36.724978 fix syntax errors 3 ['\nn = int(input("Enter the number of rolls: "))\nrolls = [int(x) for x in input("Enter the results of the rolls: ").split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n', 'n = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner + 1)\n', '\ntest = int(input())\nfor i in range(0, test):\n    n = int(input())\n    rolls = [int(x) for x in input().split()]\n\n    highest = 0\n    winner = None\n    for index, roll in enumerate(rolls):\n        if roll > highest:\n            if rolls.count(roll) == 1:\n                highest = roll\n                winner = index\n\n    if winner is None:\n        print("none")\n    else:\n        print(winner+1)\n']
2022-04-13 07:24:36.725009 size on output set 6
2022-04-13 07:24:36.725021 num operations 2
2022-04-13 07:24:36.725026 size on input set 1
2022-04-13 07:24:38.716610 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649834676,
  "object": "edit"
}
2022-04-13 07:24:38.716894 fix spelling mistakes 3 ['\n\n#1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n\n#1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n']
2022-04-13 07:24:38.716928 size on output set 2
2022-04-13 07:24:38.716934 size on input set 2
2022-04-13 07:24:46.852171 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k = map(int, input().split())\ns = input()\nd = {'a':0, 'b':0, 'c':0}\nfor i in range(n):\n    d[s[i]] += 1\nfor i in range(k):\n    x = max(d.values())\n    for j in d.keys():\n        if d[j] == x:\n            d[j] -= 1\n            print(j, end='')\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\na = int(input())\nb = int(input())\nc = int(input())\nx = int(input())\ncnt = 0\nfor i in range(a+1):\n    for j in range(b+1):\n        for k in range(c+1):\n            if 500*i + 100*j + 50*k == x:\n                cnt += 1\nprint(cnt)\n"
    },
    {
      "index": 2,
      "text": "\n\n# 1st attempt (fixed)\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649834678,
  "object": "edit"
}
2022-04-13 07:24:46.852467 fix syntax errors 3 ["\nn, k = map(int, input().split())\ns = input()\nd = {'a':0, 'b':0, 'c':0}\nfor i in range(n):\n    d[s[i]] += 1\nfor i in range(k):\n    x = max(d.values())\n    for j in d.keys():\n        if d[j] == x:\n            d[j] -= 1\n            print(j, end='')\n            break\n", '\n\na = int(input())\nb = int(input())\nc = int(input())\nx = int(input())\ncnt = 0\nfor i in range(a+1):\n    for j in range(b+1):\n        for k in range(c+1):\n            if 500*i + 100*j + 50*k == x:\n                cnt += 1\nprint(cnt)\n', '\n\n# 1st attempt (fixed)\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n']
2022-04-13 07:24:49.907875 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#1st attempt\n\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n#2nd attempt\n\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 2,
      "text": "\n#1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda x: len(d[x]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda x: len(d[x]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649834686,
  "object": "edit"
}
2022-04-13 07:24:49.908071 fix syntax errors 3 ['\n\n#1st attempt\n\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n#2nd attempt\n\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n\n#1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n#1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda x: len(d[x]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda x: len(d[x]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n']
2022-04-13 07:24:49.908104 size on output set 6
