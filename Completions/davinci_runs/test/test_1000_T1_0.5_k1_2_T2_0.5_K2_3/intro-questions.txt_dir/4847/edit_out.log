2022-04-13 04:46:50.922743 num operations 2
2022-04-13 04:46:50.922755 size on input set 1
2022-04-13 04:47:01.142460 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\ndef area_triangle(a, b, c):\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2\ndef contains(a, b, c, p):\n    return area_triangle(a, b, c) == area_triangle(a, b, p) + area_triangle(a, p, c) + area_triangle(p, b, c)\na, b, c = tuple(map(int, input().split()))\nn = int(input())\ncount = 0.0\nfor i in range(n):\n    p = tuple(map(int, input().split()))\n    if contains(a, b, c, p):\n        count += 1\nprint(\"%.1f\" % area_triangle(a, b, c))\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n"
    }
  ],
  "created": 1649825211,
  "object": "edit"
}
2022-04-13 04:47:01.142673 fix spelling mistakes 3 ['\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint("%.1f" % area(A, B, C))\nprint(count)\n', '\ndef area_triangle(a, b, c):\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2\ndef contains(a, b, c, p):\n    return area_triangle(a, b, c) == area_triangle(a, b, p) + area_triangle(a, p, c) + area_triangle(p, b, c)\na, b, c = tuple(map(int, input().split()))\nn = int(input())\ncount = 0.0\nfor i in range(n):\n    p = tuple(map(int, input().split()))\n    if contains(a, b, c, p):\n        count += 1\nprint("%.1f" % area_triangle(a, b, c))\nprint(count)\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint("%.1f" % area(A, B, C))\nprint(count)\n']
2022-04-13 04:47:01.142708 size on output set 3
2022-04-13 04:47:01.142715 size on input set 3
2022-04-13 04:47:04.585297 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n"
    }
  ],
  "created": 1649825221,
  "object": "edit"
}
2022-04-13 04:47:04.585490 fix syntax errors 3 ['import sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint("%.1f" % area(A, B, C))\nprint(count)\n', '\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint("%.1f" % area(A, B, C))\nprint(count)\n', '\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint("%.1f" % area(A, B, C))\nprint(count)\n']
2022-04-13 04:47:18.470197 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef area_triangle(a, b, c):  # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u043f\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c \u0432\u0435\u0440\u0448\u0438\u043d\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0\n\n\ndef contains(a, b, c, p):  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u0447\u043a\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    return area_triangle(a, b, c) == area_triangle(a, b, p) + area_triangle(a, p, c) + area_triangle(p, b, c) + 1e-6\n\n\nif __name__ == \"__main__\":\n    a, b, c = tuple(map(int, input().split()))\n    n = int(input())\n    count = 0.0\n    for i in range(n):\n        p = tuple(map(int, input().split()))\n        if contains(a, b, c, p):\n            count += 1\n    print(\"%.1f\" % area_triangle(a, b, c))\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\ndef area_triangle(a, b, c):\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2\n\n\ndef contains(a, b, c, p):\n    return area_triangle(a, b, c) == area_triangle(a, b, p) + area_triangle(a, p, c) + area_triangle(p, b, c)\n\n\na, b, c = tuple(map(int, input().split()))\nn = int(input())\ncount = 0.0\nfor i in range(n):\n    p = tuple(map(int, input().split()))\n    if contains(a, b, c, p):\n        count += 1\nprint(\"%.1f\" % area_triangle(a, b, c))\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input('n = '))\nm = int(input('m = '))\na = [[0] * n for i in range(m)]\nfor i in range(m):\n    for j in range(n):\n        a[i][j] = int(input())\nfor i in range(m):\n    for j in range(n):\n        print(a[i][j], end=' ')\n    print()\n"
    }
  ],
  "created": 1649825224,
  "object": "edit"
}
2022-04-13 04:47:18.470457 fix syntax errors 3 ['\ndef area_triangle(a, b, c):  # вычисление площади треугольника по координатам вершин\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0\n\n\ndef contains(a, b, c, p):  # проверка принадлежности точки площади треугольника\n    return area_triangle(a, b, c) == area_triangle(a, b, p) + area_triangle(a, p, c) + area_triangle(p, b, c) + 1e-6\n\n\nif __name__ == "__main__":\n    a, b, c = tuple(map(int, input().split()))\n    n = int(input())\n    count = 0.0\n    for i in range(n):\n        p = tuple(map(int, input().split()))\n        if contains(a, b, c, p):\n            count += 1\n    print("%.1f" % area_triangle(a, b, c))\n    print(count)\n', '\ndef area_triangle(a, b, c):\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2\n\n\ndef contains(a, b, c, p):\n    return area_triangle(a, b, c) == area_triangle(a, b, p) + area_triangle(a, p, c) + area_triangle(p, b, c)\n\n\na, b, c = tuple(map(int, input().split()))\nn = int(input())\ncount = 0.0\nfor i in range(n):\n    p = tuple(map(int, input().split()))\n    if contains(a, b, c, p):\n        count += 1\nprint("%.1f" % area_triangle(a, b, c))\nprint(count)\n', "\nn = int(input('n = '))\nm = int(input('m = '))\na = [[0] * n for i in range(m)]\nfor i in range(m):\n    for j in range(n):\n        a[i][j] = int(input())\nfor i in range(m):\n    for j in range(n):\n        print(a[i][j], end=' ')\n    print()\n"]
2022-04-13 04:47:27.209310 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C), count, sep=\"\\n\")\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1])) / 2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    }
  ],
  "created": 1649825238,
  "object": "edit"
}
2022-04-13 04:47:27.209526 NO RESULT
2022-04-13 04:47:27.209536 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-13 04:47:27.209573 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint("%.1f" % area(A, B, C), count, sep="\\n")\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1])) / 2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint("%.1f" % area(A, B, C))\nprint(count)\n']
2022-04-13 04:47:27.209598 size on output set 7
2022-04-13 04:47:27.209616 num operations 2
2022-04-13 04:47:27.209621 size on input set 1
2022-04-13 04:47:44.176714 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef area(x1, y1, x2, y2, x3, y3): # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2 # \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u0413\u0435\u0440\u043e\u043d\u0430\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y): # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if is_inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)  # %.1f is a format specifier\nprint(count)\n"
    }
  ],
  "created": 1649825247,
  "object": "edit"
}
2022-04-13 04:47:44.176909 fix spelling mistakes 3 ['\n\ndef area(x1, y1, x2, y2, x3, y3): # вычисляем площадь треугольника\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2 # по формуле Герона\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y): # проверяем, находится ли точка внутри треугольника\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)\nprint(count)\n', '\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if is_inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)\nprint(count)\n', '\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)  # %.1f is a format specifier\nprint(count)\n']
2022-04-13 04:47:44.177035 size on output set 3
2022-04-13 04:47:44.177043 size on input set 3
2022-04-13 04:47:53.219464 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef area(x1, y1, x2, y2, x3, y3):\n\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if is_inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\nimport os\nimport sys\nprint(os.path.getsize(sys.argv[1]))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if is_inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n"
    }
  ],
  "created": 1649825264,
  "object": "edit"
}
2022-04-13 04:47:53.219637 fix syntax errors 3 ['\n\ndef area(x1, y1, x2, y2, x3, y3):\n\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if is_inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)\nprint(count)\n', '\nimport os\nimport sys\nprint(os.path.getsize(sys.argv[1]))\n', '\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n\ndef is_inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if is_inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)\nprint(count)\n']
2022-04-13 04:48:09.793955 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)  # %.1f is a format specifier\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)  # %.1f is a format specifier\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)  # %.1f is a format specifier\nprint(count)\n"
    }
  ],
  "created": 1649825273,
  "object": "edit"
}
2022-04-13 04:48:09.794135 fix syntax errors 3 ['\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)  # %.1f is a format specifier\nprint(count)\n', '\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)  # %.1f is a format specifier\nprint(count)\n', '\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)  # %.1f is a format specifier\nprint(count)\n']
2022-04-13 04:48:20.197045 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef area(x1, y1, x2, y2, x3, y3): # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2 # \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u0413\u0435\u0440\u043e\u043d\u0430\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y): # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef area(x1, y1, x2, y2, x3, y3):  # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2  # \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u0413\u0435\u0440\u043e\u043d\u0430\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef area(x1, y1, x2, y2, x3, y3):  # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2  # \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u0413\u0435\u0440\u043e\u043d\u0430\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n"
    }
  ],
  "created": 1649825289,
  "object": "edit"
}
2022-04-13 04:48:20.197343 fix syntax errors 3 ['\ndef area(x1, y1, x2, y2, x3, y3): # вычисляем площадь треугольника\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2 # по формуле Герона\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y): # проверяем, находится ли точка внутри треугольника\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)\nprint(count)\n', '\n\ndef area(x1, y1, x2, y2, x3, y3):  # вычисляем площадь треугольника\n    return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2  # по формуле Герона\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):  # проверяем, находится ли точка внутри треугольника\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)\nprint(count)\n', '\n\ndef area(x1, y1, x2, y2, x3, y3):  # вычисляем площадь треугольника\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2  # по формуле Герона\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):  # проверяем, находится ли точка внутри треугольника\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint("%.1f" % A)\nprint(count)\n']
2022-04-13 04:48:20.197442 size on output set 8
2022-04-13 04:48:20.197457 num operations 2
2022-04-13 04:48:20.197462 size on input set 1
2022-04-13 04:48:24.289089 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x3, y3)\n        a2 = area(x1, y1, x3, y3, x1, y1)\n        a3 = area(x2, y2, x3, y3, x2, y2)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a) \n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825300,
  "object": "edit"
}
2022-04-13 04:48:24.289283 fix spelling mistakes 3 ['\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x3, y3)\n        a2 = area(x1, y1, x3, y3, x1, y1)\n        a3 = area(x2, y2, x3, y3, x2, y2)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n', '\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n', '\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a) \n    print(count)\n\nmain()\n']
2022-04-13 04:48:24.289322 size on output set 3
2022-04-13 04:48:24.289329 size on input set 3
2022-04-13 04:48:35.849805 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x3, y3)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nfrom math import fabs\n\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]  # Point 1\n    x2, y2 = [int(x) for x in stdin.readline().split()]  # Point 2\n    x3, y3 = [int(x) for x in stdin.readline().split()]  # Point 3\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]  # Point 4\n        a1 = area(x1, y1, x2, y2, x3, y3)  # Area of triangle ABC\n        a2 = area(x1, y1, x3, y3, x, y)  # Area of triangle ABD\n        a3 = area(x2, y2, x3, y3, x, y)  # Area of triangle ACD\n        a = area(x1, y1, x2, y2, x, y)  # Area of triangle ABD\n        if a1 == a2 + a3 + a:\n            count += 1\n    print(\"%.1f\" % a1)\n    print(count)\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x3, y3)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825304,
  "object": "edit"
}
2022-04-13 04:48:35.850044 fix syntax errors 3 ['from sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x3, y3)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n', '\nfrom sys import stdin\nfrom math import fabs\n\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]  # Point 1\n    x2, y2 = [int(x) for x in stdin.readline().split()]  # Point 2\n    x3, y3 = [int(x) for x in stdin.readline().split()]  # Point 3\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]  # Point 4\n        a1 = area(x1, y1, x2, y2, x3, y3)  # Area of triangle ABC\n        a2 = area(x1, y1, x3, y3, x, y)  # Area of triangle ABD\n        a3 = area(x2, y2, x3, y3, x, y)  # Area of triangle ACD\n        a = area(x1, y1, x2, y2, x, y)  # Area of triangle ABD\n        if a1 == a2 + a3 + a:\n            count += 1\n    print("%.1f" % a1)\n    print(count)\n\n\nmain()\n', '\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x3, y3)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n']
2022-04-13 04:48:42.248091 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [float(x) for x in stdin.readline().split()]\n    x2, y2 = [float(x) for x in stdin.readline().split()]\n    x3, y3 = [float(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [float(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().strip().split()]\n    x2, y2 = [int(x) for x in stdin.readline().strip().split()]\n    x3, y3 = [int(x) for x in stdin.readline().strip().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().strip().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [float(x) for x in stdin.readline().split()]\n    x2, y2 = [float(x) for x in stdin.readline().split()]\n    x3, y3 = [float(x) for x in stdin.readline().split()]\n    n = float(stdin.readline())\n    count = 0\n    for i in range(int(n)):\n        x, y = [float(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825315,
  "object": "edit"
}
2022-04-13 04:48:42.248285 fix syntax errors 3 ['\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [float(x) for x in stdin.readline().split()]\n    x2, y2 = [float(x) for x in stdin.readline().split()]\n    x3, y3 = [float(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [float(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n', '\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().strip().split()]\n    x2, y2 = [int(x) for x in stdin.readline().strip().split()]\n    x3, y3 = [int(x) for x in stdin.readline().strip().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().strip().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n', '\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n\ndef main():\n    x1, y1 = [float(x) for x in stdin.readline().split()]\n    x2, y2 = [float(x) for x in stdin.readline().split()]\n    x3, y3 = [float(x) for x in stdin.readline().split()]\n    n = float(stdin.readline())\n    count = 0\n    for i in range(int(n)):\n        x, y = [float(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n']
2022-04-13 04:48:44.842379 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\nfrom math import fabs\n\n\ndef area(x1, y1, x2, y2, x3, y3): \n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a) \n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825322,
  "object": "edit"
}
2022-04-13 04:48:44.842657 fix syntax errors 3 ['\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n', '\n\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a)\n    print(count)\n\nmain()\n', '\nfrom sys import stdin\nfrom math import fabs\n\n\ndef area(x1, y1, x2, y2, x3, y3): \n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print("%.1f" % a) \n    print(count)\n\nmain()\n']
2022-04-13 04:48:44.842697 size on output set 8
2022-04-13 04:48:44.842714 num operations 2
2022-04-13 04:48:44.842719 size on input set 1
2022-04-13 04:48:55.538366 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825324,
  "object": "edit"
}
2022-04-13 04:48:55.538552 fix spelling mistakes 3 ["\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:48:55.538596 size on output set 3
2022-04-13 04:48:55.538604 size on input set 3
2022-04-13 04:48:58.072759 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825335,
  "object": "edit"
}
2022-04-13 04:48:58.073026 fix syntax errors 3 ["\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:49:00.422492 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825338,
  "object": "edit"
}
2022-04-13 04:49:00.422661 fix syntax errors 3 ["\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return abs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p4):\n    return is_on_line(p1, p2, p4) or is_on_line(p2, p3, p4) or is_on_line(p3, p1, p4)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:49:05.883314 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n    stdout.write(str(int(s)) + '\\n' + str(count) + '\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(str(s) + '\\n' + str(count) + '\\n')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825340,
  "object": "edit"
}
2022-04-13 04:49:05.883563 fix syntax errors 3 ["\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(f'{s:.1f}\\n{count}\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n    stdout.write(str(int(s)) + '\\n' + str(count) + '\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(a, b, c):\n    return math.fabs((b[1] - a[1]) * (c[0] - b[0]) - (c[1] - b[1]) * (b[0] - a[0])) < 1e-5\n\ndef is_in_triangle(a, b, c, p):\n    return is_on_line(a, b, p) or is_on_line(b, c, p) or is_on_line(c, a, p)\n\ndef main():\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    c = list(map(float, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(float, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write(str(s) + '\\n' + str(count) + '\\n')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:49:05.883604 size on output set 5
2022-04-13 04:49:05.883615 num operations 2
2022-04-13 04:49:05.883621 size on input set 1
2022-04-13 04:49:18.341164 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    A1 = area(a, b, p)\n    A2 = area(a, c, p)\n    A3 = area(b, c, p)\n    return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"
    }
  ],
  "created": 1649825345,
  "object": "edit"
}
2022-04-13 04:49:18.341359 fix spelling mistakes 3 ['\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint("{:.1f}".format(area(a, b, c)))\nprint(trees)\n', '\n\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\n\nprint("{:.1f}".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n', '\n\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    A1 = area(a, b, p)\n    A2 = area(a, c, p)\n    A3 = area(b, c, p)\n    return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint("{:.1f}".format(area(a, b, c)))\nprint(trees)\n']
2022-04-13 04:49:18.341443 size on output set 3
2022-04-13 04:49:18.341453 size on input set 3
2022-04-13 04:49:31.160267 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    A1 = area(a, b, p)\n    A2 = area(a, c, p)\n    A3 = area(b, c, p)\n    return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"
    },
    {
      "index": 1,
      "text": "\n#\n# from sys import stdin\n#\n# def area(a, b, c):\n#     return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n#\n# def point_in_triangle(a, b, c, p):\n#     A1 = area(a, b, p)\n#     A2 = area(a, c, p)\n#     A3 = area(b, c, p)\n#     return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n#\n# a = tuple(map(int, stdin.readline().split()))\n# b = tuple(map(int, stdin.readline().split()))\n# c = tuple(map(int, stdin.readline().split()))\n#\n# n = int(stdin.readline())\n#\n# trees = 0\n# for _ in range(n):\n#     p = tuple(map(int, stdin.readline().split()))\n#     if point_in_triangle(a, b, c, p):\n#         trees += 1\n#\n# print(\"{:.1f}\".format(area(a, b, c)))\n# print(trees)\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    A1 = area(a, b, p)\n    A2 = area(a, c, p)\n    A3 = area(b, c, p)\n    return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"
    }
  ],
  "created": 1649825358,
  "object": "edit"
}
2022-04-13 04:49:31.160528 fix syntax errors 3 ['\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    A1 = area(a, b, p)\n    A2 = area(a, c, p)\n    A3 = area(b, c, p)\n    return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint("{:.1f}".format(area(a, b, c)))\nprint(trees)\n', '\n#\n# from sys import stdin\n#\n# def area(a, b, c):\n#     return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n#\n# def point_in_triangle(a, b, c, p):\n#     A1 = area(a, b, p)\n#     A2 = area(a, c, p)\n#     A3 = area(b, c, p)\n#     return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n#\n# a = tuple(map(int, stdin.readline().split()))\n# b = tuple(map(int, stdin.readline().split()))\n# c = tuple(map(int, stdin.readline().split()))\n#\n# n = int(stdin.readline())\n#\n# trees = 0\n# for _ in range(n):\n#     p = tuple(map(int, stdin.readline().split()))\n#     if point_in_triangle(a, b, c, p):\n#         trees += 1\n#\n# print("{:.1f}".format(area(a, b, c)))\n# print(trees)\n', '\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    A1 = area(a, b, p)\n    A2 = area(a, c, p)\n    A3 = area(b, c, p)\n    return abs(A1 + A2 + A3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint("{:.1f}".format(area(a, b, c)))\nprint(trees)\n']
2022-04-13 04:49:34.715060 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs(1.0 * (a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"
    }
  ],
  "created": 1649825371,
  "object": "edit"
}
2022-04-13 04:49:34.715240 fix syntax errors 3 ['\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint("{:.1f}".format(area(a, b, c)))\nprint(trees)\n', '\nfrom sys import stdin\n\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint("{:.1f}".format(area(a, b, c)))\nprint(trees)\n', '\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs(1.0 * (a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint("{:.1f}".format(area(a, b, c)))\nprint(trees)\n']
2022-04-13 04:49:36.234306 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\nprint(\"{:.1f}\".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n"
    }
  ],
  "created": 1649825374,
  "object": "edit"
}
2022-04-13 04:49:36.234527 fix syntax errors 3 ['\n\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\n\nprint("{:.1f}".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n', '\n\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\nprint("{:.1f}".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n', '\nfrom sys import stdin\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\ndef point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n    a1 = area(x1, y1, x2, y2, px, py)\n    a2 = area(x1, y1, x3, y3, px, py)\n    a3 = area(x2, y2, x3, y3, px, py)\n    return abs(a1 + a2 + a3 - area(x1, y1, x2, y2, x3, y3)) < 0.000001\n\nx1, y1, x2, y2, x3, y3 = map(int, stdin.readline().split())\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    px, py = map(int, stdin.readline().split())\n    if point_in_triangle(x1, y1, x2, y2, x3, y3, px, py):\n        trees += 1\n\nprint("{:.1f}".format(area(x1, y1, x2, y2, x3, y3)))\nprint(trees)\n']
2022-04-13 04:49:36.234562 size on output set 9
2022-04-13 04:49:36.234571 num operations 2
2022-04-13 04:49:36.234576 size on input set 1
2022-04-13 04:49:39.262680 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825376,
  "object": "edit"
}
2022-04-13 04:49:39.262848 fix spelling mistakes 3 ["\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:49:39.262884 size on output set 3
2022-04-13 04:49:39.262890 size on input set 3
2022-04-13 04:49:45.266318 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and \\\n            (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and \\\n            (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    return (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825379,
  "object": "edit"
}
2022-04-13 04:49:45.266718 fix syntax errors 3 ["\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and \\\n            (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and \\\n            (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    return (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:49:51.071993 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and \\\n    (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and \\\n    (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2, count, sep='\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 \\\n            and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 \\\n            and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825385,
  "object": "edit"
}
2022-04-13 04:49:51.072173 fix syntax errors 3 ["\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and \\\n    (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and \\\n    (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2, count, sep='\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 \\\n            and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 \\\n            and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:49:55.106143 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2, end='')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825391,
  "object": "edit"
}
2022-04-13 04:49:55.106388 fix syntax errors 3 ["\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2, end='')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    #print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(count / n * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:49:55.106427 size on output set 8
2022-04-13 04:49:55.106438 num operations 2
2022-04-13 04:49:55.106443 size on input set 1
2022-04-13 04:50:01.814558 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(tree, b, c)\n    area_b = compute_area(tree, a, c)\n    area_c = compute_area(tree, a, b)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, point):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, point)\n    area_b = compute_area(a, c, point)\n    area_c = compute_area(b, c, point)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n    count = 0\n    for point in points:\n        if is_inside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    if area == area_ab + area_ac + area_bc:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825395,
  "object": "edit"
}
2022-04-13 04:50:01.814779 fix spelling mistakes 3 ['\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(tree, b, c)\n    area_b = compute_area(tree, a, c)\n    area_c = compute_area(tree, a, b)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, point):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, point)\n    area_b = compute_area(a, c, point)\n    area_c = compute_area(b, c, point)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n    count = 0\n    for point in points:\n        if is_inside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    if area == area_ab + area_ac + area_bc:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:50:01.814838 size on output set 3
2022-04-13 04:50:01.814848 size on input set 3
2022-04-13 04:50:06.368948 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    if area == area_ab + area_ac + area_bc:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    return area == area_ab + area_ac + area_bc\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    if area == area_ab + area_ac + area_bc:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825401,
  "object": "edit"
}
2022-04-13 04:50:06.369240 fix syntax errors 3 ['\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    if area == area_ab + area_ac + area_bc:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    return area == area_ab + area_ac + area_bc\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_ab = compute_area(a, b, tree)\n    area_ac = compute_area(a, c, tree)\n    area_bc = compute_area(b, c, tree)\n    if area == area_ab + area_ac + area_bc:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:50:10.559778 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, tree, c)\n    area_b = compute_area(a, b, tree)\n    area_c = compute_area(a, b, c)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(tree, b, c)\n    area_b = compute_area(tree, a, c)\n    area_c = compute_area(tree, a, b)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area), end=\" \")\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area_a = compute_area(tree, b, c)\n    area_b = compute_area(tree, a, c)\n    area_c = compute_area(tree, a, b)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825406,
  "object": "edit"
}
2022-04-13 04:50:10.559951 fix syntax errors 3 ['\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, tree, c)\n    area_b = compute_area(a, b, tree)\n    area_c = compute_area(a, b, c)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area(a, b, c)\n    area_a = compute_area(tree, b, c)\n    area_b = compute_area(tree, a, c)\n    area_c = compute_area(tree, a, b)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area), end=" ")\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):\n    area_a = compute_area(tree, b, c)\n    area_b = compute_area(tree, a, c)\n    area_c = compute_area(tree, a, b)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:50:18.583973 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef isInside(a, b, c, point):\n    area = compute_area(a, b, c)\n    areaA = compute_area(a, b, point)\n    areaB = compute_area(a, c, point)\n    areaC = compute_area(b, c, point)\n    if area == areaA + areaB + areaC:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in raw_input().split()]\n    b = [int(x) for x in raw_input().split()]\n    c = [int(x) for x in raw_input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in raw_input().split()])\n    count = 0\n    for point in points:\n        if isInside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, point):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, point)\n    area_b = compute_area(a, c, point)\n    area_c = compute_area(b, c, point)\n    return area == area_a + area_b + area_c\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n    count = 0\n    for point in points:\n        if is_inside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, point):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, point)\n    area_b = compute_area(a, c, point)\n    area_c = compute_area(b, c, point)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n    count = 0\n    for point in points:\n        if is_inside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649825410,
  "object": "edit"
}
2022-04-13 04:50:18.584211 fix syntax errors 3 ['\n\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef isInside(a, b, c, point):\n    area = compute_area(a, b, c)\n    areaA = compute_area(a, b, point)\n    areaB = compute_area(a, c, point)\n    areaC = compute_area(b, c, point)\n    if area == areaA + areaB + areaC:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in raw_input().split()]\n    b = [int(x) for x in raw_input().split()]\n    c = [int(x) for x in raw_input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in raw_input().split()])\n    count = 0\n    for point in points:\n        if isInside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, point):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, point)\n    area_b = compute_area(a, c, point)\n    area_c = compute_area(b, c, point)\n    return area == area_a + area_b + area_c\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n    count = 0\n    for point in points:\n        if is_inside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef compute_area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, point):\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, point)\n    area_b = compute_area(a, c, point)\n    area_c = compute_area(b, c, point)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n    count = 0\n    for point in points:\n        if is_inside(a, b, c, point):\n            count += 1\n    area = compute_area(a, b, c)\n    print("{:.1f}".format(area))\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 04:50:18.584263 size on output set 9
2022-04-13 04:50:18.584276 num operations 2
2022-04-13 04:50:18.584282 size on input set 1
2022-04-13 04:50:24.016253 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))/2)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # \uba74\uc801 \uacc4\uc0b0\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825418,
  "object": "edit"
}
2022-04-13 04:50:24.016528 fix spelling mistakes 3 ['\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))/2)\n    print(count)\n\nmain()\n', '\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n', '\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # 면적 계산\n    print(count)\n\nmain()\n']
2022-04-13 04:50:24.016582 size on output set 3
2022-04-13 04:50:24.016589 size on input set 3
2022-04-13 04:50:27.315345 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825424,
  "object": "edit"
}
2022-04-13 04:50:27.315529 fix syntax errors 3 ['\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n', '\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n', '\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n    print(count)\n\nmain()\n']
2022-04-13 04:50:43.522607 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x * (y2 - y3) + x2 * (y3 - y) + x3 * (y - y2)) / 2\n    area2 = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n    area3 = abs(x1 * (y - y3) + x * (y3 - y1) + x3 * (y1 - y)) / 2\n    area4 = abs(x1 * (y2 - y) + x2 * (y - y1) + x * (y1 - y2)) / 2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # \uba74\uc801 \uacc4\uc0b0\n    print(count)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # \uba74\uc801 \uacc4\uc0b0\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # \uba74\uc801 \uacc4\uc0b0\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825427,
  "object": "edit"
}
2022-04-13 04:50:43.522805 fix syntax errors 3 ['import sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x * (y2 - y3) + x2 * (y3 - y) + x3 * (y - y2)) / 2\n    area2 = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n    area3 = abs(x1 * (y - y3) + x * (y3 - y1) + x3 * (y1 - y)) / 2\n    area4 = abs(x1 * (y2 - y) + x2 * (y - y1) + x * (y1 - y2)) / 2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # 면적 계산\n    print(count)\n\nmain()\n', '\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # 면적 계산\n    print(count)\n\nmain()\n', '\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # 면적 계산\n    print(count)\n\nmain()\n']
2022-04-13 04:50:47.001976 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))/2.0)\n    print(count)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n# -*- coding: utf-8 -*-\nimport sys\n\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))/2)\n    print(count)\n\nmain()\n"
    }
  ],
  "created": 1649825443,
  "object": "edit"
}
2022-04-13 04:50:47.002256 fix syntax errors 3 ['\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\n\nmain()\n', '\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))/2.0)\n    print(count)\n\nmain()\n', '\n# -*- coding: utf-8 -*-\nimport sys\n\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)):\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))/2)\n    print(count)\n\nmain()\n']
2022-04-13 04:50:47.002306 size on output set 7
