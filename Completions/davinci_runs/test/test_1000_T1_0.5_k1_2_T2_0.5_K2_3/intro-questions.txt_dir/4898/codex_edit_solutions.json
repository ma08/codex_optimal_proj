["\n\ndef main():\n    N = int(input())\n    minions = []\n    for i in range(N):\n        minions.append([int(x) for x in input().split()])\n    minions.sort(key=lambda x: x[1])\n    ans = 0\n    cur = 0\n    for m in minions:\n        if m[0] > cur:\n            ans += 1\n            cur = m[1]\n    print(ans)\n\nmain()\n", "\n\n#!/bin/python3\n\nimport sys\n\nn,k = input().strip().split(' ')\nn,k = [int(n),int(k)]\nheight = list(map(int, input().strip().split(' ')))\n\ntallest = max(height)\nif tallest > k:\n    print(tallest - k)\nelse:\n    print(0)\n", "\n\nfrom itertools import combinations\n\ndef minion_preferences(s):\n    n = int(s.readline())\n    preferences = [sorted(map(int, s.readline().split())) for _ in range(n)]\n    preferences.sort()\n    return len(min(combinations(preferences, r) for r in range(len(preferences) + 1), key=lambda c: max(b - a for a, b in zip(c, c[1:]))))\n\nif __name__ == \"__main__\":\n    import sys\n    print(minion_preferences(sys.stdin))\n", "\n\ndef main():\n    print(\"hello world\")\n\nmain()\n", "\n# This is a test file\n", "\n\n\n# test\n# Test file\n", "\ndef main():N=int(input());minions=[];for i in range(N):minions.append([int(x) for x in input().split()]);minions.sort(key=lambda x:x[1]);ans=0;cur=0;for m in minions:if m[0]>cur:ans+=1;cur=m[1];print(ans)\nmain() \n", "\n\ndef get_min_rooms(preference):\n    \"\"\"\n    :param preference: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preference.sort(key=lambda preference: preference[1])\n    # set the first room to the first preference's upper bound\n    rooms = [preference[0][1]]\n    # for each preference\n    for preference in preference[1:]:\n        # if the preference's lower bound is greater than the current room's temperature,\n        # then place this minion in a new room\n        if preference[0] > rooms[-1]:\n            rooms.append(preference[1])\n    # return the number of rooms\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preference = []\n    for _ in range(n):\n        preference.append(list(map(int, input().split())))\n    print(get_min_rooms(preference))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Use a greedy algorithm\n# For each minion, find the lowest temperature that is available.\n# If none is available, create a new room with that temperature.\n#\nn = int(input())\nminions = []\nrooms = []\n\nfor i in range(n):\n    l, u = map(int, input().split())\n    minions.append((l, u))\n\nfor i in range(n):\n    m = minions[i]\n    available = False\n    for r in rooms:\n        if m[0] <= r <= m[1]:\n            available = True\n            break\n    if not available:\n        rooms.append(m[0])\n\nprint(len(rooms))\n", "\n\ndef main(argv):\n    print(argv)\n\nmain(sys.argv)\n", "\n\nfrom itertools import combinations\n\ndef minion_preferences(s):\n    n = int(s.readline())\n    preferences = [sorted(map(int, s.readline().split())) for _ in range(n)]\n    preferences.sort()\n    return min(len(c) for c in combinations(preferences, r) for r in range(len(preferences) + 1), key=lambda c: max(b - a for a, b in c))\n\nif __name__ == \"__main__\":\n    import sys\n    print(minion_preferences(sys.stdin))\n", "\nfrom itertools import combinations\n\ndef minion_preferences(s):\n    n = int(s.readline())\n    preferences = [sorted(map(int, s.readline().split())) for _ in range(n)]\n    preferences.sort()\n    return len(min(combinations(preferences, r) for r in range(len(preferences) + 1), key=lambda c: max(b - a for a, b in c)))\n\nif __name__ == \"__main__\":\n    import sys\n    print(minion_preferences(sys.stdin))\n", "\nimport heapq\n\ndef solve(input):\n    intervals = [list(map(int, line.split())) for line in input[1:]]\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] < interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)  # remove the smallest element\n            heapq.heappush(q, interval[1])\n    return len(q)\n\n\nif __name__ == '__main__':\n    input = [\n        '3',\n        '1 2',\n        '2 4',\n        '5 6'\n    ]\n    print(solve(input))  # 2\n", "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        l, u = [int(j) for j in input().split()]\n        intervals.append((l, u))\n    intervals.sort()\n    room_count = 0\n    curr_room = intervals[0][0]\n    for i in range(n):\n        if intervals[i][0] <= curr_room:\n            curr_room = max(curr_room, intervals[i][1])\n        else:\n            room_count += 1\n            curr_room = intervals[i][1]\n    print(room_count + 1)\n\nif __name__ == \"__main__\":\n    main('airconditioning')\n", "\nimport sys\n\ndef read_ints():\n    return [int(i) for i in sys.stdin.readline().strip().split(' ')]\n\ndef solve(n, preferences):\n    # sort by upper bound\n    preferences.sort(key=lambda pref: pref[0])\n\n    # greedy\n    rooms = 0\n    for pref in preferences:\n        if rooms == 0 or pref[0] > rooms:\n            rooms = pref[1]\n\n    return rooms\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    preferences = [read_ints() for _ in range(n)]\n    print(solve(n, preferences))\n", "\n\nfrom itertools import combinations\n\ndef minion_preference(s):\n    n = int(s.readline())\n    preferences = [sorted(map(int, s.readline().split())) for _ in range(n)]\n    preferences.sort()\n    return len(min(combinations(preferences, r) for r in range(len(preferences) + 1), key=lambda c: max(b - a for a, b in c)))\n\nif __name__ == \"__main__\":\n    import sys\n    print(minion_preference(sys.stdin))\n", "\n\ndef main():\n    print(\"Hello world\")\n\nmain()\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.txt', 'r')\n    sys.stdout = open(pname + '.out', 'w+')\n\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        l, u = [int(j) for j in input().split()]\n        intervals.append((l, u))\n    intervals.sort()\n    room_count = 0\n    curr_room = intervals[0][0]\n    for i in range(n):\n        if intervals[i][0] <= curr_room:\n            curr_room = max(curr_room, intervals[i][1])\n        else:\n            room_count += 1\n            curr_room = intervals[i][1]\n    print(room_count + 1)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n\n\ndef get_min_rooms(preferences):\n    \"\"\"\n    :param preferences: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preferences.sort(key=lambda x: x[1])\n    # set the first room's temperature to the first preference's upper bound\n    rooms = [preferences[0][1]]\n    # for each preference\n    for preference in preferences[1:]:\n        # if the preference's lower bound is greater than the last room's temperature,\n        # then place this minion in a new room\n        if preference[0] > rooms[-1]:\n            rooms.append(preference[1])\n    # return the number of rooms\n    return len(rooms)\n\n\ndef main():\n    n = int(input())\n    preferences = []\n    for _ in range(n):\n        preferences.append(list(map(int, input().split())))\n    print(get_min_rooms(preferences))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef get_min_rooms(preferences):\n    \"\"\"\n    :param preferences: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minnions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preferences.sort(key=lambda x: x[1])\n    # set the first room to the first preference's upper bound\n    rooms = [preferences[0][1]]\n    # for each preference\n    for preference in preferences[1:]:\n        # if the preference's lower bound is greater than the current room's temperature,\n        # then place this minnion in a new room\n        if preference[0] > rooms[-1]:\n            rooms.append(preference[1])\n    # return the length of the room list\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preferences = []\n    for _ in range(n):\n        preferences.append(list(map(int, input().split())))\n    print(get_min_rooms(preferences))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Test file\n", "\nimport heapq\n\ndef solve(input):\n    intervals = []\n    for line in input[1:]:\n        if len(line) > 0:\n            intervals.append(list(map(int, line.split())))\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] > interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)\n            heapq.heappush(q, interval[1])\n    return len(q)\n\n\nif __name__ == '__main__':\n    input = [\n        '',\n        '3',\n        '1 2',\n        '2 4',\n        '5 6'\n    ]\n    print(solve(input))\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        l, u = [int(j) for j in input().split()]\n        intervals.append((l, u))\n    intervals.sort()\n    room_count = 0\n    curr_room = intervals[0][1]\n    for i in range(n):\n        if intervals[i][0] < curr_room:\n            curr_room = max(curr_room, intervals[i][1])\n        else:\n            room_count += 1\n            curr_room = intervals[i][1]\n    print(room_count + 1)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n\ndef main():\n    pass\n\nmain()\n", "\nimport sys\n\ndef main(pname):\n    # sys.stdin = open(pname + '.in', 'r')\n    # sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        l, u = [int(j) for j in input().split()]\n        intervals.append((l, u))\n    intervals.sort()\n    room_count = 0\n    curr_room = intervals[0][0]\n    for i in range(n):\n        if intervals[i][0] <= curr_room:\n            curr_room = max(curr_room, intervals[i][1])\n        else:\n            room_count += 1\n            curr_room = intervals[i][1]\n    print(room_count + 1)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    intervals = [(0, 0) for i in range(n)]\n    for i in range(n):\n        l, u = [int(j) for j in input().split()]\n        intervals.append((l, u))\n    intervals.sort()\n    room_count = 0\n    curr_room = intervals[0][0]\n    for i in range(n):\n        if intervals[i][0] <= curr_room:\n            curr_room = max(curr_room, intervals[i][1])\n        else:\n            room_count += 1\n            curr_room = intervals[i][1]\n    print(room_count + 1)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n", "\n# Test file.\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        l, u = [int(j) for j in input().split()]\n        intervals.append((l, u))\n    intervals.sort()\n    room_count = 1\n    curr_room = intervals[0][0]\n    for i in range(n):\n        if intervals[i][0] <= curr_room:\n            curr_room = max(curr_room, intervals[i][1])\n        else:\n            room_count += 1\n            curr_room = intervals[i][1]\n    print(room_count)\n\nif __name__ == \"__main__\":\n    main('airconditioning')\n", "\n\ndef get_min_rooms(preferences):\n    \"\"\"\n    :param preferences: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preferences.sort(key=lambda x: x[1])\n    # set the first room to the first preference's upper bound\n    rooms = [preferences[0][1]]\n    # for each preference\n    for preference in preferences[1:]:\n        # if the preference's lower bound is greater than the current room's temperature,\n        # then place this minion in a new room\n        if preference[0] > rooms[-1]:\n            rooms.append(preference[1])\n    # return the number of rooms\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preferences = []\n    for _ in range(n):\n        preferences.append(list(map(int, input().split())))\n    print(get_min_rooms(preferences))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport heapq\n\ndef solve(input_):\n    n = int(input_[0])\n    intervals = [list(map(int, line.split())) for line in input_[1:]]\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] < interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)\n            heapq.heappush(q, interval[1])\n    return len(q)\n\n\nif __name__ == '__main__':\n    input = [\n        '3',\n        '1 2',\n        '2 4',\n        '5 6'\n    ]\n    print(solve(input))\n", "\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 1\ncurr_rooms = 1\nfor i in range(1, N):\n    if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n        curr_rooms += 1\n    else:\n        curr_rooms = 1\n    if curr_rooms > max_rooms:\n        max_rooms = curr_rooms\n\nprint(max_rooms)\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 1\ncurr_rooms = 1\nfor i in range(1, N):\n    if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n        curr_rooms += 1\n    else:\n        curr_rooms = 1\n    if curr_rooms > max_rooms:\n        max_rooms = curr_rooms\n\nprint(max_rooms)\n", "\n\ndef get_min_rooms(preferences):\n    \"\"\"\n    :param preferences: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preferences.sort(key=lambda x: x[1])\n    # set the first room's temperature to the first preference's upper bound\n    rooms = [preferences[0][1]]\n    # for each preference\n    for preference in preferences[1]:\n        # if the preference's lower bound is greater than the last room's temperature,\n        # then place this minion in a new room\n        if preference[0] > rooms[-1]:\n            rooms.append(preference[1])\n    # return the number of rooms\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preferences = []\n    for _ in range(n):\n        preferences.append(list(map(int, input().split())))\n    print(get_min_rooms(preferences))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Use a greedy algorithm.\n# For each minion, find the lowest temperature that is available.\n# If none is available, create a new room with that temperature.\n\nn = int(input())\nminions = []\nrooms = []\n\nfor i in range(n):\n    l, u = map(int, input().split())\n    minions.append((l, u))\n\nfor i in range(n):\n    m = minions[i]\n    available = False\n    for r in rooms:\n        if m[0] <= r <= m[1]:\n            available = True\n            break\n    if not available:\n        rooms.append(m[0])\n\nprint(len(rooms))\n", "\n\ndef get_min_rooms(preference):\n    \"\"\"\n    :param preference: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preference.sort(key=lambda x: x[1])\n    # set the first room to the first preference's upper bound\n    rooms = [preference[0][1]]\n    # for each preference\n    for preference in preference[1:]:\n        # if the preference's lower bound is greater than the current room's temperature,\n        # then place this minion in a new room\n        if preference[0] > rooms[-1]:\n            rooms.append(preference[1])\n    # return the number of rooms\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preferences = []\n    for _ in range(n):\n        preferences.append(list(map(int, input().split())))\n    print(get_min_rooms(preferences))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef read_ints():\n    return [int(i) for i in sys.stdin.readline().strip().split()]\n\ndef solve(n, preferences):\n    # sort by upper bound\n    preferences.sort(key=lambda pref: pref[0])\n\n    # greedy\n    rooms = 0\n    for pref in preferences:\n        if rooms == 0 or pref[0] > rooms:\n            rooms = pref[1]\n\n    return rooms\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    preferences = [read_ints() for _ in range(n)]\n    print(solve(n, preferences))\n", "\n\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 0\nfor i in range(N):\n    temp_rooms = 1\n    for j in range(i+1, N):\n        if sorted_dict[j][0] <= sorted_dict[i][1]:\n            temp_rooms += 1\n        else:\n            break\n    if temp_rooms > max_rooms:\n        max_rooms = temp_rooms\n\nprint(max_rooms)\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 1\ncurr_rooms = 1\nfor i in range(1, N):\n    if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n        curr_rooms += 1\n    else:\n        curr_rooms = 1\n    if curr_rooms > max_rooms:\n        max_rooms = curr_rooms\n\nprint(max_rooms)\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 1\ncurr_rooms = 1\nfor i in range(1, N):\n    if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n        curr_rooms += 1\n    else:\n        curr_rooms = 1\n    if curr_rooms > max_rooms:\n        max_rooms = curr_rooms\n\nprint(max_rooms)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n# Use a greedy algorithm.\n# For each minion, find the lowest temperature that is available.\n# If none is available, create a new room with that temperature.\n#\nn = int(input())\nminions = []\nrooms = []\n\nfor i in range(n):\n    l, u = map(int, input().split())\n    minions.append((l, u))\n\nfor i in range(n):\n    m = minions[i]\n    available = False\n    for r in rooms:\n        if m[0] <= r <= m[1]:\n            available = True\n            break\n    if not available:\n        rooms.append(m[0])\n\nprint(len(rooms))\n", "\nimport heapq\n\ndef solve(input):\n    intervals = [list(map(int, line.split())) for line in input[1:]]\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] > interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)\n            heapq.heappush(q, interval[1])\n    return len(q)\n\n\nif __name__ == '__main__':\n    input = ['3', '1 2', '2 4', '5 6']\n    print(solve(input))\n", "\n\ndef get_min_rooms(preferences):\n    \"\"\"\n    :param preferences: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minnions happy\n    \"\"\"\n    # sort the preferences by the lower bound\n    preferences.sort(key=lambda x: x[1])\n    # set the first room to the first preference's lower bound\n    rooms = [preferences[0][0]]\n    # for each preference\n    for preference in preferences[1:]:\n        # if the preference's upper bound is greater than the current room's temperature,\n        # then place this minnion in a new room\n        if preference[1] > rooms[-1]:\n            rooms.append(preference[0])\n    # return the number of rooms\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preferences = []\n    for _ in range(n):\n        preferences.append(list(map(int, input().split())))\n    print(get_min_rooms(preferences))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# \nimport heapq\n\ndef solve(input):\n    n = int(input[0])\n    intervals = [list(map(int, line.split())) for line in input[1:]]\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] > interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)\n            heapq.heappush(q, interval[1])\n    return len(q)\n\n\nif __name__ == '__main__':\n    input = [\n        '3',\n        '1 2',\n        '2 4',\n        '5 6'\n    ]\n    print(solve(input))\n", "\n\nimport heapq\n\ndef solve(input_):\n    n = int(input_[0])\n    intervals = [list(map(int, line.split())) for line in input_[1:n+1]]\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] > interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)\n            heapq.heappush(q, interval[1])\n    return len(q)\n\n\nif __name__ == '__main__':\n    input = [\n        '3',\n        '1 2',\n        '2 4',\n        '5 6'\n    ]\n    print(solve(input))\n", "\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 0\nfor i in range(N):\n    temp_rooms = 1\n    for j in range(i+1, N):\n        if sorted_dict[j][0] <= sorted_dict[i][1]:\n            temp_rooms += 1\n        else:\n            break\n    if temp_rooms > max_rooms:\n        max_rooms = temp_rooms\n\nprint(max_rooms)\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 1\ncurr_rooms = 1\nfor i in range(1, N):\n    if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n        curr_rooms += 1\n    else:\n        curr_rooms = 1\n    if curr_rooms > max_rooms:\n        max_rooms = curr_rooms\n\nprint(max_rooms)\n\n# from collections import defaultdict\n#\n# N = int(input())\n#\n# # Create a list of the possible temperatures\n# temp_list = []\n# for i in range(N):\n#     temp_list.append(list(map(int, input().split())))\n#\n# # Create a dictionary of the possible temperatures\n# temp_dict = defaultdict(list)\n# for i in range(N):\n#     temp_dict[temp_list[i][0]].append(temp_list[i][1])\n#\n# # Sort the dictionary\n# sorted_dict = sorted(temp_dict.items())\n#\n# # Find the maximum number of rooms required\n# max_rooms = 1\n# curr_rooms = 1\n# for i in range(1, N):\n#     if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n#         curr_rooms += 1\n#     else:\n#         curr_rooms = 1\n#     if curr_rooms > max_rooms:\n#         max_rooms = curr_rooms\n#\n# print(max_rooms)\n\n\nfrom collections import defaultdict\n\nN = int(input())\n\n# Create a list of the possible temperatures\ntemp_list = []\nfor i in range(N):\n    temp_list.append(list(map(int, input().split())))\n\n# Create a dictionary of the possible temperatures\ntemp_dict = defaultdict(list)\nfor i in range(N):\n    temp_dict[temp_list[i][0]].append(temp_list[i][1])\n\n# Sort the dictionary\nsorted_dict = sorted(temp_dict.items())\n\n# Find the maximum number of rooms required\nmax_rooms = 1\ncurr_rooms = 1\nfor i in range(1, N):\n    if sorted_dict[i][0] <= sorted_dict[i-1][1]:\n        curr_rooms += 1\n    else:\n        curr_rooms = 1\n    if curr_rooms > max_rooms:\n        max_rooms = curr_rooms\n\nprint(max_rooms)\n", "\n\n# This is a test file.\n", "\n\nimport heapq\n\ndef solve(input_):\n    n = int(input_[0])\n    intervals = [list(map(int, line.split())) for line in input_[1:]]\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] > interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)\n            heapq.heappush(q, interval[1])\n    return len(q)\n\n\nif __name__ == '__main__':\n    input_ = [\n        '3',\n        '1 2',\n        '2 4',\n        '5 6'\n    ]\n    print(solve(input_))\n", "\n\ndef get_min_rooms(preferences):\n    \"\"\"\n    :param preferences: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preferences.sort(key=lambda x: x[1])\n    # set the first room's temperature to the first preference's upper bound\n    rooms = [preferences[0][1]]\n    # for each preference\n    for preference in preferences[1:]:\n        # if the preference's lower bound is greater than the last room's temperature,\n        # then place this minion in a new room\n        if preference[0] > rooms[-1]:\n            rooms.append(preference[1])\n    # return the number of rooms\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preferences = [0]*n\n    for _ in range(n):\n        preferences.append(list(map(int, input().split())))\n    print(get_min_rooms(preferences))\n\nif __name__ == \"__main__\":\n    main()\n", "import heapq\n\ndef solve(input):\n    n = int(input[0])\n    intervals = [list(map(int, line.split())) for line in input[1:]]\n    intervals.sort(key=lambda x: x[1])\n    q = []\n    for interval in intervals:\n        if len(q) == 0 or q[0] > interval[0]:\n            heapq.heappush(q, interval[1])\n        else:\n            heapq.heappop(q)\n            heapq.heappush(q, interval[1])\n    print(len(q))\n\n\nif __name__ == '__main__':\n    input = [\n        '3',\n        '1 2',\n        '2 4',\n        '5 6'\n    ]\n    solve(input)\n", "\n\ndef get_min_rooms(preference):\n    \"\"\"\n    :param preference: list of tuples, each tuple containing a lower and upper bound of temperature preference\n    :return: minimum number of rooms required to make all the minions happy\n    \"\"\"\n    # sort the preferences by the upper bound\n    preference.sort(key=lambda x: x[1]) # sort by the upper bound\n    # set the first room to the first preference's upper bound\n    rooms = [preference[0][1]]\n    # for each preference\n    for pref in preference[1:]:\n        # if the preference's lower bound is greater than the current room's temperature,\n        # then place this minion in a new room\n        if pref[0] > rooms[-1]:\n            rooms.append(pref[1])\n    # return the number of rooms\n    return len(rooms)\n\ndef main():\n    n = int(input())\n    preference = []\n    for _ in range(n):\n        preference.append(list(map(int, input().split())))\n    print(get_min_rooms(preference))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\n# This is a test file\n# This is a test file\n"]