["\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d: \n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d)) \n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d)) \n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    while True:\n        if all(i % 2 == 0 for i in a):\n            a = [i // 2 for i in a]\n            ans += 1\n        else:\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X - K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n", "# https://atcoder.jp/contests/abc117/tasks/abc117_a\n# The point is to find the smallest possible absolute value of the coordinate of the destination. \n\n\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)  # // is the floor division operator\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D). Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2. If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\nimport sys\n\ndef main():\n    #x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    #if abs(x) < k * d:\n    #    print(abs(x - (x // d) * d))\n    #else:\n    #    print(abs(x) - (k * d))\n\n    n = int(sys.stdin.readline().rstrip())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) >= k * d:\n        print(abs(x) - k * d)\n        exit()\n    x = abs(x)\n    k -= x // d\n    x %= d\n    if k % 2 == 0:\n        print(x)\n        exit()\n    print(min(x, d - x))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))  # \u305d\u3046\u3067\u306a\u3044\u306a\u3089\u3070\u3001\u79fb\u52d5\u8ddd\u96e2\u304b\u3089k*d\u3092\u5f15\u304f\n\nif __name__ == '__main__':\n    main()\n"]