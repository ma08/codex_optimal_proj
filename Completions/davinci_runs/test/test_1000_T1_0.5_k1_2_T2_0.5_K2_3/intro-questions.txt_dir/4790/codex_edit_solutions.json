["\n\ndef main():\n    # stones = input()  # take input\n    # balance = 0\n    # for stone in stones:\n    #     if stone == 'B':\n    #         balance += 1\n    #     else:\n    #         balance -= 1\n    # if balance == 0:\n    #     print(1)\n    # else:\n    #     print(0)\n    print(\"hello\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a_count = 0\n    b_count = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_count += a[i] - b[i]\n        elif a[i] < b[i]:\n            b_count += b[i] - a[i]\n    if a_count == b_count:\n        print('Yes')\n    else:\n        print('No')\n", "\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n\n    \n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0\n        return 0\n    else\n        return 1\n\ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count != white_count:\n        print(1)\n        return\n    if black_count < white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones (or vice versa)\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones (or vice versa)\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules, 0 otherwise.\n    \"\"\"\n    stones = input()\n    return 1\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\nimport sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "\nimport sys\nimport math\n\n#number of test case\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    print(0)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones,\nthen it is impossible to balance the stones.\n2) If there are an even number of both black and white stones,\nthen it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones\n(or vice versa), then it is possible to balance the stones if and only if there\nis a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones (or vice versa)\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones (or vice versa)\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0.0\n    w_count = 0.0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1.0:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1.0:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    stones = input()  # take input\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in s:\n        if i == 'B':\n            count +=1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a_count = 0\n    b_count = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_count += a[i] - b[i]\n        elif a[i] < b[i]:\n            b_count += b[i] - a[i]\n    if a_count == b_count:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python\n\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stones.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0\\n')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1\\n')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1\\n')\n    else:\n        stdout.write('0\\n')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1\\n')\n    else:\n        stdout.write('0\\n')\n", "\n\ndef main():\n    stones = input().strip()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    print(1 if balance == 0 else 0)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\n#number of test case\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check\n    s = input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:n]\n    a_count = 0\n    b_count = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_count += a[i] - b[i]\n        elif a[i] < b[i]:\n            b_count += b[i] - a[i]\n    if a_count == b_count:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n", "\n\n\n\ndef Main():\n    n = int(input())\n    for i in range(n):\n        s = input()\n        if len(s) == 1:\n            print(\"NO\")\n        else:\n            arr = list(s)\n            arr.sort()\n            for i in range(1, len(arr)):\n                if arr[i] == arr[i-1]:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    Main()\n", "\n\nimport sys\nimport math\n\n# number of test case\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "import sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stone.\n2) If there are an even number of both black and white stones, then it is always possible to balance the stone.\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stone if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb.\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stone\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stone\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stone and an odd number of white stone\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stone and an even number of white stone\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "import sys\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if abs(b_count - w_count) == 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "def main():\n    string = input().strip()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count < white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\nimport sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check \n    s = input()\n    # count the number of white stones \n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n\ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\n\n\"\"\"\nWe will use the following observations to solve this problem:\n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stone\n2) If there are an even number of both black and white stones, then it is always possible to balance the stone\n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stone if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb\n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stone\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stone\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stone and an odd number of white stone\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stone and an even number of white stone\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\ndef main():\n    print(\"hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    s = input()\n    if s.count('b') == s.count('w'):\n        print(1)\n        return\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    string = input().strip()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count != white_count:\n        print(1)\n        return\n    if black_count <= white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "import sys\n\ndef main():\n    for s in sys.stdin:\n        s = s.strip()\n        if s.count('B') == s.count('W'):\n            print(1)\n            continue\n        if s[0] == s[-1]:\n            if s.count(s[0]) == len(s) - 1:\n                print(1)\n                continue\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules, 0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1] or len(stones) == 2:\n        return 0\n    return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\n\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in s:\n        if i == 'B':\n            count +=1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    s = raw_input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rule,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) % 2 == 0:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    print(data)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules, 0 otherwise.\n    \"\"\"\n    stones = input('Enter the stones: ')\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0].split()\n    if len(s[0]) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s[0])):\n        if s[0][i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if abs(b_count - w_count) == 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[i-1] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in s:\n        if i == 'B':\n            count +=1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\nprint(1)\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    stones = input()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef  main():\n    string  =  input().strip()\n    black_count  =  0\n    white_count  =  0\n    for  i  in  range(len(string)):\n        if  string[i]  ==  'B':\n            black_count  +=  1\n        else :\n            white_count  +=  1\n    if  abs(black_count  -  white_count)  >  1:\n        print(0)\n        return \n    if  black_count  !=  white_count:\n        print(1)\n        return \n    if  black_count  <  white_count:\n        target  =  'B'\n    else :\n        target  =  'W'\n    for  i  in  range(len(string)):\n        if  string[i]  ==  target:\n            if  i  ==  0:\n                if  string[-1]  !=  target  and  string[1]  !=  target:\n                    print(0)\n                    return \n            elif  i  ==  len(string)  -  1:\n                if  string[-2]  !=  target  and  string[0]  !=  target:\n                    print(0)\n                    return \n            else :\n                if  string[i-1]  !=  target  and  string[i+1]  !=  target:\n                    print(0)\n                    return \n    print(1)\nmain() \n", "#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n\ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rule,\n        0 otherwise.\n    \"\"\"\n    stones = input(\"\")\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "#!/bin/python3\n\nimport sys\n\ndef solve(n):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n\ns = input().strip()\nresult = solve(s)\nprint(result)\n", "\n#!/bin/python3\n\nimport sys\n\ndef solve(n):\n    count = 0\n    for i in range(len(n)):\n        if n[i] == 'B':\n            count += 1\n    if count == len(n) or count == 0:\n        return 0\n    else:\n        return 1\n\nn = input().strip()\nresult = solve(n)\nprint(result)\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible to balance the stones with the rules, 0\n        otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    stones = input().strip()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print('1')\n    else:\n        print('0')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print('hello world')\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = a[i] + dp[i - 1]\n    ans = 0\n    for i in range(n):\n        ans += dp[i]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rule,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1 or stones[0] == stones[-1]:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible to balance the stones with the rules,\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n    if stones[0] == stones[-1]:\n        return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible to balance the stones with the rules,\n        0 otherwise.\n    \"\"\"\n    stones = raw_input()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[-1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\ndef main():\n    print(\"Hello\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    for line in data:\n        if len(line) == 1:\n            print(1)\n            continue\n        b_count = 0\n        w_count = 0\n        for i in range(len(line)):\n            if line[i] == 'B':\n                b_count += 1\n            else:\n                w_count += 1\n        if b_count == w_count:\n            print(1)\n            continue\n        if b_count > w_count:\n            if b_count - w_count == 1:\n                print(1)\n                continue\n        if w_count > b_count:\n            if w_count - b_count == 1:\n                print(1)\n                continue\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1]:\n        if s.count(s[0]) == len(s) - 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/bin/python3\nimport sys\n\ndef solve(n):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n"]