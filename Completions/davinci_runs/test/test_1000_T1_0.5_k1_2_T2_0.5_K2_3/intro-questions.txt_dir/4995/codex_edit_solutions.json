["import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += S/M\n    print(wait_time/N)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Number of observations \nN = int(input()) \n  \n# List of tuples (minutes, seconds) \ndata = [] \n  \n# Get data from user \nfor i in range(N): \n    data.append(tuple(int(x) for x in input().split())) \n  \n# Calculate average length of a S.L. minute \ntotal = 0 \nfor i in data: \n    total += i[1] \n  \n# If average length is shorter than or equal to a normal minute, print \"measurement error\" and end \nif total/N <= 60: \n    print(\"measurement error\") \nelse: \n    print(total/N/60) \n", "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an SL minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\" \nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n", "N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(int(total_time/total_minutes))\n", "\n\nimport sys\n\n# define function to calculate the average length of a minute\ndef avg_min(n, M, S): \n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(round(avg_min(n, M, S), 9))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += S/M\n    print(wait_time/N)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(float, input().split())\n\t\ts += int(m * 60 + s1)\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n", "#!/usr/bin/env python3\n\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"Measurement error\")\nelse:\n    print(total_time / total_minutes)\n", "\n\n    \n", "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor _ in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds / minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds / minutes)\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n# define function to calculate the average length of a minute\ndef avg_min(n, M, S): \n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i] / 60\n        # calculate the average\n        avg = sum_min / M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\n# define function to calculate the average length of a minute\ndef avg_min(n, M, S): \n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += (m * 60 - s1)\n\tif s <= 0:\n\t\tprint(\"measurement error!\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n", "\nn = int(input())\n\nminutes = 0\nseconds = 0\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\") \nelse:\n    print(seconds/minutes)\n", "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_second(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_second = calculate_average_length_of_second(i[0], i[1])\n        if average_length_of_second <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_second)\n\nif __name__ == \"__main__\":\n    main()\n", "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"Measurement error\")\nelse:\n    print(total_time / total_minutes)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_seconds/total_minutes * 60\n    if avg_min < 60:\n        print(\"measurement error\") \n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes\n    if avg_sec <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_sec)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Number of test cases\nT = int(input())\n\nfor i in range(T):\n    # Number of observations\n    N = int(input())\n\n    # List of tuples (minutes, seconds)\n    data = []\n\n    # Get data from user\n    for j in range(N):\n        data.append(tuple(int(x) for x in input().split()))\n\n    # Calculate average length of a S.L. minute\n    total = 0\n    for j in data:\n        total += j[1]\n\n    # If average length is shorter than or equal to a normal minute, print \"measurement error\"\n    if total/N <= 60:\n        print(\"measurement error\")\n    else:\n        print(total/N/60)\n", "\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"Measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n", "N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"Measurement error\")\nelse:\n    print(total_time/total_minutes)\n", "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an SL second\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal second, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n", "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"Measurement Error\")\nelse:\n    print(total_time / total_minutes)\n", "\n\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 59:\n    print(\"measurement error\") \nelse:\n    print(seconds/minutes)\n", "N = int(input())\n\ntotal_seconds = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n", "\n\n# Workaround to input() in CodeForces.\ndef read_ints():\n    temp = input().split()\n    return [int(t) for t in temp]\n\ndef calculate_average_length_of_minute(number_of_minutes, number_of_seconds):\n    return number_of_seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / (number_of_minutes * 60)\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(float, input().split())\n        s += int(m * 60 - s1)\n    if s <= 0:\n        print(\"measurement error\")\n    else:\n        print(s / (n * 60))\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input()) # Number of observations\n\ndata = [] # List of tuples (minutes, seconds)\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of a S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\" and end\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(int(total/N/60))\n", "\n#\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of a S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\" and end\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n", "'''\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Workaround for input() in Codeforces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\nminutes = 0.0\nseconds = 0.0\n\nfor _ in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(round(seconds/minutes, 1))\n", "n = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n", "import sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef read_input():\n\tn = int(input())\n\tm = []\n\ts = []\n\tfor i in range(n):\n\t\ta, b = map(float, input().split())\n\t\tm.append(a)\n\t\ts.append(b)\n\treturn n, m, s\n\ndef get_avg(n, m, s):\n\tsumm = 0\n\tfor i in range(n):\n\t\tsumm += int(m[i] * 60 - s[i])\n\tif summ <= 0:\n\t\treturn \"measurement error\"\n\telse:\n\t\treturn summ / (n * 60)\n\ndef main():\n\tn, m, s = read_input()\n\tprint(get_avg(n, m, s))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n'''\n    main()\n", "\nn = int(input()) \n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\") \nelse:\n    print(seconds/minutes)\n", "\nimport sys\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for _ in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of a minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to 60 seconds, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds / total_minutes\n    if avg_sec <= 59:\n        print(\"measurement error\") \n    else:\n        print(avg_sec)\n\nif __name__ == \"__main__\":\n    main() \n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes if total_minutes != 0 else 0\n    if avg_sec <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_sec)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = input().split()\n\t\ts += int(m) * 60 - int(s1)\n\tif s <= 0:\n\t\tprint(\"measurement error!\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_min = total_minutes/total_seconds\n    if avg_min >= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_min)\n\nif __name__ == \"__main__\":\n    main()\n", "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"Measurement Error\")\nelse:\n    print(total_time/total_minutes)\n", "\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\th, m = map(int, input().split())\n\t\ts += h * 60 + m\n\tif s <= 0:\n\t\tprint('measurement error')\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\th, m = map(int, input().split())\n\t\ts += h * 60 + m\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(int(s / (n * 60)))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n# Workaround for input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds_in_an_hour):\n    return seconds_in_an_hour / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations[0]):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Workaround for input() in CodeForces\ndef read_ints():\n    temp = raw_input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = int(raw_input())\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\th, m = map(int, input().split())\n\t\ts += h * 60 + m\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(round(s / (n * 60), 2))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"Measurement Error\")\nelse:\n    print(total_time / total_minutes)\n", "import sys\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S / M)\n    print(sum(wait_time) / N)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, number_of_seconds):\n    return number_of_seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    s = 0\n    for i in range(n):\n        m, s1 = map(int, input().split())\n        s += m * 60 - s1\n    if s <= 0:\n        print(\"measurement error!\")\n    else:\n        print(s / (n * 60))\n\nif __name__ == '__main__':\n    main()\n", "N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time / total_minutes)\n", "\n#\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of a S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n", "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds / minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds / minutes)\n", "\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n", "\n"]