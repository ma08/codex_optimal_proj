2022-04-13 03:10:26.178813 num operations 2
2022-04-13 03:10:26.178830 size on input set 1
2022-04-13 03:10:28.488161 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split() #get input from user\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819426,
  "object": "edit"
}
2022-04-13 03:10:28.488373 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split() #get input from user\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 03:10:28.488401 size on output set 2
2022-04-13 03:10:28.488408 size on input set 2
2022-04-13 03:10:31.705538 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nif __name__ == '__main__':\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split(' ')\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819428,
  "object": "edit"
}
2022-04-13 03:10:31.705722 fix syntax errors 3 ["import sys\n\nif __name__ == '__main__':\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split(' ')\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            return\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 03:10:40.422347 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# import sys\n\n# def main():\n#     words = sys.stdin.readline().strip().split() #get input from user\n#     phrase = set()\n#     for word in words:\n#         if word in phrase:\n#             print('no')\n#             return\n#         phrase.add(word)\n#     print('yes')\n\n# if __name__ == '__main__':\n#     main()\n\ndef main(input):\n    words = input.strip().split() #get input from user\n    phrase = set() #create set to store unique words\n    for word in words: #iterate through words\n        if word in phrase: #if word is already in set\n            return False #return false\n        phrase.add(word) #add word to set\n    return True #return true\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split() #get input from user, split into list\n    phrase = set()\n    for word in words: #for each word in the list\n        if word in phrase:\n            print('no') #if word is already in the list, print no\n            return #stop the function\n        phrase.add(word) #if word is not in the list, add it to the list\n    print('yes') #if the function makes it this far without printing no, print yes\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            sys.exit()\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819431,
  "object": "edit"
}
2022-04-13 03:10:40.422522 fix syntax errors 3 ["\n\n# import sys\n\n# def main():\n#     words = sys.stdin.readline().strip().split() #get input from user\n#     phrase = set()\n#     for word in words:\n#         if word in phrase:\n#             print('no')\n#             return\n#         phrase.add(word)\n#     print('yes')\n\n# if __name__ == '__main__':\n#     main()\n\ndef main(input):\n    words = input.strip().split() #get input from user\n    phrase = set() #create set to store unique words\n    for word in words: #iterate through words\n        if word in phrase: #if word is already in set\n            return False #return false\n        phrase.add(word) #add word to set\n    return True #return true\n", "\n\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split() #get input from user, split into list\n    phrase = set()\n    for word in words: #for each word in the list\n        if word in phrase:\n            print('no') #if word is already in the list, print no\n            return #stop the function\n        phrase.add(word) #if word is not in the list, add it to the list\n    print('yes') #if the function makes it this far without printing no, print yes\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    words = sys.stdin.readline().strip().split()\n    phrase = set()\n    for word in words:\n        if word in phrase:\n            print('no')\n            sys.exit()\n        phrase.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 03:10:40.422555 size on output set 6
2022-04-13 03:10:40.422565 num operations 2
2022-04-13 03:10:40.422570 size on input set 1
2022-04-13 03:10:42.795890 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split())):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    }
  ],
  "created": 1649819440,
  "object": "edit"
}
2022-04-13 03:10:42.796182 fix spelling mistakes 3 ['\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split())):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n', '\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\n\nmain()\n', '\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n']
2022-04-13 03:10:42.796211 size on output set 3
2022-04-13 03:10:42.796217 size on input set 3
2022-04-13 03:10:47.325770 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    while True:\n        try:\n            words = set(input().split())\n            if len(words) == len(input().split()):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except EOFError:\n            break\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    for i in range(n):\n        words = list(set(input().split()))\n        if len(words) == len(input().split()):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nmain()\n"
    }
  ],
  "created": 1649819442,
  "object": "edit"
}
2022-04-13 03:10:47.325935 fix syntax errors 3 ['\ndef main():\n    while True:\n        try:\n            words = set(input().split())\n            if len(words) == len(input().split()):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n', '\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print("yes")\n            else:\n                print("no")\n        except EOFError:\n            break\n\n\nmain()\n', '\ndef main():\n    n = int(input())\n    for i in range(n):\n        words = list(set(input().split()))\n        if len(words) == len(input().split()):\n            print("yes")\n        else:\n            print("no")\n\nmain()\n']
2022-04-13 03:10:50.151738 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except EOFError:\n            break\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    while True:\n        try:\n            words = set(input().split())\n            if len(words) == len(set(input().split())):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split(\" \")))\n            if len(words) == len(input().split(\" \")):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\n\nmain()\n"
    }
  ],
  "created": 1649819447,
  "object": "edit"
}
2022-04-13 03:10:50.151913 fix syntax errors 3 ['\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(input().split()):\n                print("yes")\n            else:\n                print("no")\n        except EOFError:\n            break\n\n\nmain()\n', '\n\ndef main():\n    while True:\n        try:\n            words = set(input().split())\n            if len(words) == len(set(input().split())):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\n\nmain()\n', '\n\ndef main():\n    while True:\n        try:\n            words = list(set(input().split(" ")))\n            if len(words) == len(input().split(" ")):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\n\nmain()\n']
2022-04-13 03:10:55.427869 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split()):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    for line in sys.stdin:\n        words = line.split()\n        if len(words) == len(set(words)):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    while True:\n        try:\n            words1 = list(set(input().split()))\n            words2 = list(set(input().split()))\n            if len(words1) == len(words2):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        except:\n            break\n\nmain()\n"
    }
  ],
  "created": 1649819450,
  "object": "edit"
}
2022-04-13 03:10:55.428052 fix syntax errors 3 ['\ndef main():\n    while True:\n        try:\n            words = list(set(input().split()))\n            if len(words) == len(set(input().split()):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n', 'def main():\n    for line in sys.stdin:\n        words = line.split()\n        if len(words) == len(set(words)):\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    while True:\n        try:\n            words1 = list(set(input().split()))\n            words2 = list(set(input().split()))\n            if len(words1) == len(words2):\n                print("yes")\n            else:\n                print("no")\n        except:\n            break\n\nmain()\n']
2022-04-13 03:10:55.428078 size on output set 9
2022-04-13 03:10:55.428089 num operations 2
2022-04-13 03:10:55.428094 size on input set 1
2022-04-13 03:11:01.457402 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input() \n    words = phrase.split() \n    seen = set()\n    for word in words: \n        if word in seen: \n            print(\"no\") \n            return \n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819455,
  "object": "edit"
}
2022-04-13 03:11:01.457631 fix spelling mistakes 3 ['\n\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input() \n    words = phrase.split() \n    seen = set()\n    for word in words: \n        if word in seen: \n            print("no") \n            return \n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n#\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:01.457728 size on output set 3
2022-04-13 03:11:01.457741 size on input set 3
2022-04-13 03:11:03.666227 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python\n\ndef main():\n    words = input()\n    words = words.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819461,
  "object": "edit"
}
2022-04-13 03:11:03.666401 fix syntax errors 3 ['#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n#!/usr/bin/env python\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n\n#!/usr/bin/env python\n\ndef main():\n    words = input()\n    words = words.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:07.423618 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\ndef main():\n    phrase = input() \n    words = phrase.split() \n    seen = set()\n    for word in words: \n        if word in seen: \n            print(\"no\") \n            return \n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819463,
  "object": "edit"
}
2022-04-13 03:11:07.423827 fix syntax errors 3 ['\n\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\ndef main():\n    phrase = input() \n    words = phrase.split() \n    seen = set()\n    for word in words: \n        if word in seen: \n            print("no") \n            return \n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:09.892347 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input(\"enter a phrase: \")\n    words = phrase.split(\" \")\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python3\n\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print(\"no\")\n            return\n        seen.add(word)\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819467,
  "object": "edit"
}
2022-04-13 03:11:09.892542 fix syntax errors 3 ['\n#\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n#!/usr/bin/env python3\n\ndef main():\n    phrase = input("enter a phrase: ")\n    words = phrase.split(" ")\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n#!/usr/bin/env python3\n\n\ndef main():\n    phrase = input()\n    words = phrase.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print("no")\n            return\n        seen.add(word)\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:09.892571 size on output set 8
2022-04-13 03:11:09.892583 num operations 2
2022-04-13 03:11:09.892602 size on input set 1
2022-04-13 03:11:11.555818 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n# I have changed this file\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819469,
  "object": "edit"
}
2022-04-13 03:11:11.556013 fix spelling mistakes 3 ['\n# I have changed this file\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', '\n# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:11.556118 size on output set 3
2022-04-13 03:11:11.556127 size on input set 3
2022-04-13 03:11:13.861439 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(\" \")]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819471,
  "object": "edit"
}
2022-04-13 03:11:13.861598 fix syntax errors 3 ['# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', '# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', '\n# check if all the words in a sentence are unique\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(" ")]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:16.349142 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    words = [word for word in sys.stdin.read().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(\" \")]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(\" \")]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819473,
  "object": "edit"
}
2022-04-13 03:11:16.349334 fix syntax errors 3 ['import sys\n\ndef main():\n    words = [word for word in sys.stdin.read().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(" ")]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split(" ")]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:18.181210 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# I have changed this file again\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819476,
  "object": "edit"
}
2022-04-13 03:11:18.181401 fix syntax errors 3 ['\n# I have changed this file again\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    words = [word for word in sys.stdin.readline().strip().split()]\n    if len(words) == len(set(words)):\n        print("yes")\n    else:\n        print("no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:18.181429 size on output set 7
2022-04-13 03:11:18.181440 num operations 2
2022-04-13 03:11:18.181446 size on input set 1
2022-04-13 03:11:24.162511 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a Boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn't, add it to the set\n            word_set.add(word)\n    # Print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    # read input\n    words = input().split()\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn't, add it to the set\n            word_set.add(word)\n    # print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialise a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn't, add it to the set\n            word_set.add(word)\n    # Print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819478,
  "object": "edit"
}
2022-04-13 03:11:24.162680 fix spelling mistakes 3 ['\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a Boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn\'t, add it to the set\n            word_set.add(word)\n    # Print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    # read input\n    words = input().split()\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn\'t, add it to the set\n            word_set.add(word)\n    # print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialise a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn\'t, add it to the set\n            word_set.add(word)\n    # Print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:24.162835 size on output set 3
2022-04-13 03:11:24.162843 size on input set 3
2022-04-13 03:11:28.935098 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialise a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn't, add it to the set\n            word_set.add(word)\n    # Print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialise a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn't, add it to the set\n            word_set.add(word)\n    # Print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    print(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819484,
  "object": "edit"
}
2022-04-13 03:11:28.935270 fix syntax errors 3 ['\n\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialise a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn\'t, add it to the set\n            word_set.add(word)\n    # Print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialise a boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn\'t, add it to the set\n            word_set.add(word)\n    # Print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    print("Hello world")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:34.006244 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a Boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn't, add it to the set\n            word_set.add(word)\n    # Print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    print(\"Hello\")\n    print(\"World\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    name = input()\n    print(name)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819488,
  "object": "edit"
}
2022-04-13 03:11:34.006425 fix syntax errors 3 ['\ndef main():\n    # Read input\n    words = input().split()\n    # Create a set to store the words\n    word_set = set()\n    # Initialize a Boolean flag\n    no_repetition = True\n    # Loop over the words\n    for word in words:\n        # Check if the word is already in the set\n        if word in word_set:\n            # If it is, change the flag to False and break the loop\n            no_repetition = False\n            break\n        else:\n            # If it isn\'t, add it to the set\n            word_set.add(word)\n    # Print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    print("Hello")\n    print("World")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    name = input()\n    print(name)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:35.750866 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # read input\n    words = input().split(' ')\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn't, add it to the set\n            word_set.add(word)\n    # print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    # read input\n    words = raw_input().split()\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn't, add it to the set\n            word_set.add(word)\n    # print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    # read input\n    words = input().split(\" \")\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn't, add it to the set\n            word_set.add(word)\n    # print the result\n    print(\"yes\" if no_repetition else \"no\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819494,
  "object": "edit"
}
2022-04-13 03:11:35.751033 fix syntax errors 3 ['\ndef main():\n    # read input\n    words = input().split(\' \')\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn\'t, add it to the set\n            word_set.add(word)\n    # print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    # read input\n    words = raw_input().split()\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn\'t, add it to the set\n            word_set.add(word)\n    # print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    # read input\n    words = input().split(" ")\n    # create a set to store the words\n    word_set = set()\n    # initialize a boolean flag\n    no_repetition = True\n    # loop over the words\n    for word in words:\n        # check if the word is already in the set\n        if word in word_set:\n            # if it is, change the flag to false and break the loop\n            no_repetition = False\n            break\n        else:\n            # if it isn\'t, add it to the set\n            word_set.add(word)\n    # print the result\n    print("yes" if no_repetition else "no")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:11:35.751138 size on output set 9
2022-04-13 03:11:35.751151 num operations 2
2022-04-13 03:11:35.751156 size on input set 1
2022-04-13 03:11:41.084799 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print yes\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print no\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # Read each test case.\n    for line in sys.stdin:\n        # Create a list of the words in the line.\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set.\n        for word in words:\n            if word in seen:\n                # If it is, print no.\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue.\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes.\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819495,
  "object": "edit"
}
2022-04-13 03:11:41.084982 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print yes\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print no\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read each test case.\n    for line in sys.stdin:\n        # Create a list of the words in the line.\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set.\n        for word in words:\n            if word in seen:\n                # If it is, print no.\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue.\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes.\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 03:11:41.085035 size on output set 3
2022-04-13 03:11:41.085041 size on input set 3
2022-04-13 03:11:49.720690 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line,\n        # stripping off the trailing newline\n        words = line.split()\n        # Create a set to store the words\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print yes\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print no\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read each line\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print yes\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n\n        # Create a list of the words in the line,\n        # create a set to store the words,\n        # check to see if each word is in the set\n        # if it is, print yes, break\n        # if it isn't, add it to the set and continue\n        # if the for loop completes without breaking, then print no\n\n        words = line.split() # create a list of the words in the line\n        seen = set() # create a set to store the words\n        for word in words: # check to see if each word is in the set\n            if word in seen: # if it is, print yes, break\n                print(\"no\") # if it is, print yes\n                break # if it is, print yes, break\n            else: # if it isn't, add it to the set and continue\n                seen.add(word) # if it isn't, add it to the set and continue\n        else: # if the for loop completes without breaking, then print no\n            print(\"yes\") # if the for loop completes without breaking, then print no\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819501,
  "object": "edit"
}
2022-04-13 03:11:49.720866 fix syntax errors 3 ['import sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line,\n        # stripping off the trailing newline\n        words = line.split()\n        # Create a set to store the words\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print yes\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print no\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    # Read each line\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print yes\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n\n        # Create a list of the words in the line,\n        # create a set to store the words,\n        # check to see if each word is in the set\n        # if it is, print yes, break\n        # if it isn\'t, add it to the set and continue\n        # if the for loop completes without breaking, then print no\n\n        words = line.split() # create a list of the words in the line\n        seen = set() # create a set to store the words\n        for word in words: # check to see if each word is in the set\n            if word in seen: # if it is, print yes, break\n                print("no") # if it is, print yes\n                break # if it is, print yes, break\n            else: # if it isn\'t, add it to the set and continue\n                seen.add(word) # if it isn\'t, add it to the set and continue\n        else: # if the for loop completes without breaking, then print no\n            print("yes") # if the for loop completes without breaking, then print no\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 03:11:57.664743 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read each test case.\n    for line in sys.stdin:\n        # Create a list of the words in the line.\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set.\n        for word in words:\n            if word in seen:\n                # If it is, print no.\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue.\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes.\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n\t# Read each test case.\n\tfor line in sys.stdin:\n\t\t# Create a list of the words in the line.\n\t\twords = line.split()\n\t\t# Create a set to store the words.\n\t\tseen = set()\n\t\t# Check to see if each word is in the set.\n\t\tfor word in words:\n\t\t\tif word in seen:\n\t\t\t\t# If it is, print no.\n\t\t\t\tprint(\"no\")\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\t# If it isn't, add it to the set and continue.\n\t\t\t\tseen.add(word)\n\t\telse:\n\t\t\t# If the for loop completes without breaking, then print yes.\n\t\t\tprint(\"yes\")\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    # Read each test case.\n    for line in sys.stdin:\n        # Create a list of the words in the line.\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set.\n        for word in words:\n            if word in seen:\n                # If it is, print no.\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue.\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes.\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819509,
  "object": "edit"
}
2022-04-13 03:11:57.664920 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    # Read each test case.\n    for line in sys.stdin:\n        # Create a list of the words in the line.\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set.\n        for word in words:\n            if word in seen:\n                # If it is, print no.\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue.\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes.\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n\t# Read each test case.\n\tfor line in sys.stdin:\n\t\t# Create a list of the words in the line.\n\t\twords = line.split()\n\t\t# Create a set to store the words.\n\t\tseen = set()\n\t\t# Check to see if each word is in the set.\n\t\tfor word in words:\n\t\t\tif word in seen:\n\t\t\t\t# If it is, print no.\n\t\t\t\tprint("no")\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\t# If it isn\'t, add it to the set and continue.\n\t\t\t\tseen.add(word)\n\t\telse:\n\t\t\t# If the for loop completes without breaking, then print yes.\n\t\t\tprint("yes")\n\nif __name__ == \'__main__\':\n\tmain()\n', 'import sys\n\ndef main():\n    # Read each test case.\n    for line in sys.stdin:\n        # Create a list of the words in the line.\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set.\n        for word in words:\n            if word in seen:\n                # If it is, print no.\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue.\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes.\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 03:11:59.089630 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print(\"no\")\n                break\n            else:\n                # If it isn't, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819517,
  "object": "edit"
}
2022-04-13 03:11:59.089928 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    # Read each test case\n    for line in sys.stdin:\n        # Create a list of the words in the line\n        words = line.split()\n        # Create a set to store the words.\n        seen = set()\n        # Check to see if each word is in the set\n        for word in words:\n            if word in seen:\n                # If it is, print no\n                print("no")\n                break\n            else:\n                # If it isn\'t, add it to the set and continue\n                seen.add(word)\n        else:\n            # If the for loop completes without breaking, then print yes\n            print("yes")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 03:11:59.090038 size on output set 7
2022-04-13 03:11:59.090051 num operations 2
2022-04-13 03:11:59.090057 size on input set 1
2022-04-13 03:12:04.403777 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print(\"no\")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print(\"no\")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print(\"no\")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819519,
  "object": "edit"
}
2022-04-13 03:12:04.403981 fix spelling mistakes 3 ['\ndef main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print("no")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print("no")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print("no")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:12:04.404019 size on output set 2
2022-04-13 03:12:04.404025 size on input set 2
2022-04-13 03:12:06.902678 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # read input phrase\n    phrase = input()\n    # split phrase into words\n    words = phrase.split()\n    # initialize a set of unique words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print(\"no\")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print(\"no\")\n            return\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no\n            print(\"no\")\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819524,
  "object": "edit"
}
2022-04-13 03:12:06.902859 fix syntax errors 3 ['\n\ndef main():\n    # read input phrase\n    phrase = input()\n    # split phrase into words\n    words = phrase.split()\n    # initialize a set of unique words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print("no")\n            exit()\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no and exit\n            print("no")\n            return\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    phrase = input()\n    # split input into words\n    words = phrase.split()\n    # initialize a set of words\n    unique_words = set()\n    # iterate over words\n    for word in words:\n        # check if word has already been added to set\n        if word in unique_words:\n            # if yes, print no\n            print("no")\n        # if not, add word to set\n        else:\n            unique_words.add(word)\n    # if no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:12:11.276560 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # Read input\n    phrase = raw_input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print(\"no\")\n            break\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print(\"no\")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print(\"yes\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print(\"no\")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print(\"no\")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print(\"yes\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649819526,
  "object": "edit"
}
2022-04-13 03:12:11.276817 fix syntax errors 3 ['\ndef main():\n    # Read input\n    phrase = raw_input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print("no")\n            break\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', 'def main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print("no")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print("yes")\n\n\nif __name__ == "__main__":\n    main()\n\n\ndef main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print("no")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n', 'def main():\n    # Read input\n    phrase = input()\n    # Split input into words\n    words = phrase.split()\n    # Initialize a set of words\n    unique_words = set()\n    # Iterate over words\n    for word in words:\n        # Check if word has already been added to set\n        if word in unique_words:\n            # If yes, print no and exit\n            print("no")\n            exit()\n        # If not, add word to set\n        else:\n            unique_words.add(word)\n    # If no word has been repeated, print yes\n    print("yes")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 03:12:11.276861 size on output set 6
2022-04-13 03:12:11.276871 num operations 2
2022-04-13 03:12:11.276888 size on input set 1
2022-04-13 03:12:13.366929 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    words = input().split() # \u0441\u043f\u043b\u0438\u0442\u0443\u0435\u043c \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0443\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819531,
  "object": "edit"
}
2022-04-13 03:12:13.367098 fix spelling mistakes 3 ["\n\ndef main():\n    words = input().split() # сплитуем по пробелу\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 03:12:13.367130 size on output set 3
2022-04-13 03:12:13.367137 size on input set 3
2022-04-13 03:12:15.060406 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819533,
  "object": "edit"
}
2022-04-13 03:12:15.060585 fix syntax errors 3 ["\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 03:12:17.161573 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819535,
  "object": "edit"
}
2022-04-13 03:12:17.161743 fix syntax errors 3 ["\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('no')\n            return\n        seen.add(word)\n    print('yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 03:12:18.867582 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649819537,
  "object": "edit"
}
2022-04-13 03:12:18.867816 fix syntax errors 3 ["\ndef main():\n    words = input().split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    words = input().split(' ')\n    seen = set()\n    for word in words:\n        if word in seen:\n            print('No')\n            return\n        seen.add(word)\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 03:12:18.867841 size on output set 4
