["\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the query\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] = mex\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = [0]\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX + x\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef solve(queries):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10])\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2])\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX + 1\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n    \n    # Initialize the array\n    arr = []\n    \n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n        \ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX + 1\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n    \nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the query\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX and print it\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\nimport sys, doctest\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\\n\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\\n\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, input().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(input()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "import sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "\n\nimport sys\n\ndef solve(queries):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10])\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2])\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries))))\n", "\n\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "\n\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the query\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX\n        print(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q): \n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)): \n        # Append the new element to the array\n        arr.append(queries[i])\n\n        # Calculate the MEX and print it\n        print(calculate_mex(arr, x), end=' ')\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n\n    # Iterate through the array\n    for i in range(0, len(arr)): \n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex: \n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex: \n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else: \n            pass\n\n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read in the input and convert it to an integer\n    q, x = map(int, sys.stdin.readline().strip().split(' ')) # q = number of queries, x = number to add to elements\n    queries = [] # list of queries\n    for i in range(0, q): # loop to read queries\n        queries.append(int(sys.stdin.readline().strip())) # add query to list of queries\n\n    # Initialize the array\n    arr = [] # list to store numbers\n\n    # Iterate through the queries\n    for i in range(0, len(queries)): # loop to iterate through queries\n        # Append the new element to the array\n        arr.append(queries[i]) # add query to list\n        \n        # Calculate the MEX and print it\n        print(calculate_mex(arr, x), end=' ') # print MEX\n\ndef calculate_mex(arr, x): # calculate the MEX\n    # Sort the array\n    arr.sort() # sort the list\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)): # loop to iterate through the list\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex: # if current element is less than MEX\n            arr[i] += x # add x to current element\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex: # if current element is equal to MEX\n            mex += 1 # increase MEX\n        # If the current element is greater than the MEX, we can do nothing\n        else: # if current element is greater than MEX\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX and print it\n        print(calculate_mex(arr, x), end=' ')\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n"]