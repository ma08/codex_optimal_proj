2022-04-13 05:50:16.906585 num operations 2
2022-04-13 05:50:16.906594 size on input set 1
2022-04-13 05:50:36.781960 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    print(a[-1])\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split() # a = correct, b = incorrect\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split() # a = correct, b = incorrect\n        if len(a) != len(b): # length of correct != length of incorrect\n            print(\"no\")\n            continue\n        a = list(a) # a = correct, b = incorrect\n        b = list(b) # a = correct, b = incorrect\n        q = deque() # queue for bfs\n        visited = set() # set for visited nodes\n        q.append((0, a[0], b[0])) # append (index, correct, incorrect)\n        while q: # bfs\n            i, c1, c2 = q.popleft() # pop from queue\n            if i == len(a) - 1: # if index is last\n                if c1 == c2: # if correct == incorrect\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited: # if visited\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    }
  ],
  "created": 1649829017,
  "object": "edit"
}
2022-04-13 05:50:36.782199 fix spelling mistakes 3 ['\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    print(a[-1])\n\nmain()\n', '\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split() # a = correct, b = incorrect\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split() # a = correct, b = incorrect\n        if len(a) != len(b): # length of correct != length of incorrect\n            print("no")\n            continue\n        a = list(a) # a = correct, b = incorrect\n        b = list(b) # a = correct, b = incorrect\n        q = deque() # queue for bfs\n        visited = set() # set for visited nodes\n        q.append((0, a[0], b[0])) # append (index, correct, incorrect)\n        while q: # bfs\n            i, c1, c2 = q.popleft() # pop from queue\n            if i == len(a) - 1: # if index is last\n                if c1 == c2: # if correct == incorrect\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited: # if visited\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n']
2022-04-13 05:50:36.782247 size on output set 3
2022-04-13 05:50:36.782254 size on input set 3
2022-04-13 05:50:42.137421 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n    ans = []\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            ans.append(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    ans.append(\"yes\")\n                    break\n                else:\n                    ans.append(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\n    print(*ans, sep='\\n')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())  # read input\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()  # read input\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()  # read input\n        if len(a) != len(b):\n            print(\"no\")  # output\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")  # output\n                    break\n                else:\n                    print(\"no\")  # output\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    }
  ],
  "created": 1649829036,
  "object": "edit"
}
2022-04-13 05:50:42.137689 fix syntax errors 3 ['\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\n\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n    ans = []\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            ans.append("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    ans.append("yes")\n                    break\n                else:\n                    ans.append("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\n    print(*ans, sep=\'\\n\')\n\nmain()\n', '\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    n, m = map(int, input().split())  # read input\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()  # read input\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()  # read input\n        if len(a) != len(b):\n            print("no")  # output\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")  # output\n                    break\n                else:\n                    print("no")  # output\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n']
2022-04-13 05:50:45.274465 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    print(a[-1])\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(sys.stdin.readline()) for i in range(n)]\n    print(max(a))\n\nmain()\n"
    }
  ],
  "created": 1649829042,
  "object": "edit"
}
2022-04-13 05:50:45.274648 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(n)\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline()))\n    a.sort()\n    print(a[-1])\n\nmain()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(sys.stdin.readline()) for i in range(n)]\n    print(max(a))\n\nmain()\n']
2022-04-13 05:51:02.620944 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "from collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()  # a = correct, b = incorrect\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split() # a = correct, b = incorrect\n        if len(a) != len(b): # length of correct != length of incorrect\n            print(\"no\")\n            continue\n        a = list(a) # a = correct, b = incorrect\n        b = list(b) # a = correct, b = incorrect\n        q = deque() # queue for bfs\n        visited = set() # set for visited nodes\n        q.append((0, a[0], b[0])) # append (index, correct, incorrect)\n        while q: # bfs\n            i, c1, c2 = q.popleft() # pop from queue\n            if i == len(a) - 1: # if index is last\n                if c1 == c2: # if correct == incorrect\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited: # if visited\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited: # if visited\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n"
    }
  ],
  "created": 1649829045,
  "object": "edit"
}
2022-04-13 05:51:02.621269 fix syntax errors 3 ['from collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', 'from collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()  # a = correct, b = incorrect\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split() # a = correct, b = incorrect\n        if len(a) != len(b): # length of correct != length of incorrect\n            print("no")\n            continue\n        a = list(a) # a = correct, b = incorrect\n        b = list(b) # a = correct, b = incorrect\n        q = deque() # queue for bfs\n        visited = set() # set for visited nodes\n        q.append((0, a[0], b[0])) # append (index, correct, incorrect)\n        while q: # bfs\n            i, c1, c2 = q.popleft() # pop from queue\n            if i == len(a) - 1: # if index is last\n                if c1 == c2: # if correct == incorrect\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited: # if visited\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n', '\nfrom collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[b].add(a)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print("yes")\n                    break\n                else:\n                    print("no")\n                    break\n            if (i, c1, c2) in visited: # if visited\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\nmain()\n']
2022-04-13 05:51:02.621368 size on output set 9
2022-04-13 05:51:02.621384 num operations 2
2022-04-13 05:51:02.621392 size on input set 1
2022-04-13 05:51:10.783759 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes): # compare translated strings\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829062,
  "object": "edit"
}
2022-04-13 05:51:10.783960 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes): # compare translated strings\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("Yes")\n        else:\n            print("No")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:10.784058 size on output set 3
2022-04-13 05:51:10.784066 size on input set 3
2022-04-13 05:51:14.095165 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes): # compare translated strings\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char] # add translated char to result string\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes): # compare translated strings\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829070,
  "object": "edit"
}
2022-04-13 05:51:14.095377 fix syntax errors 3 ['#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes): # compare translated strings\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char] # add translated char to result string\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes): # compare translated strings\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:15.613206 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829074,
  "object": "edit"
}
2022-04-13 05:51:15.613428 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m is number of lines in code, n is number of lines in words\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # split line into two parts\n        codes[line[0]] = line[1] # first part is key, second is value\n    for i in range(n):\n        line = sys.stdin.readline().split() # split line into two parts\n        if translate(line[0], codes) == translate(line[1], codes): # if both words translate to the same thing\n            print("yes")\n        else:\n            print("no")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:23.383964 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # read the number of codes and the number of pairs\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # read codes\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split() # read pairs\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() \n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print \"Yes\"\n        else:\n            print \"No\"\n\ndef translate(word, codes):\n    res = \"\" \n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = dict()\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829075,
  "object": "edit"
}
2022-04-13 05:51:23.384143 fix syntax errors 3 ['import sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # read the number of codes and the number of pairs\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # read codes\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split() # read pairs\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("Yes")\n        else:\n            print("No")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() \n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print "Yes"\n        else:\n            print "No"\n\ndef translate(word, codes):\n    res = "" \n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = dict()\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print("Yes")\n        else:\n            print("No")\n\ndef translate(word, codes):\n    res = ""\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:23.384181 size on output set 7
2022-04-13 05:51:23.384201 num operations 2
2022-04-13 05:51:23.384207 size on input set 1
2022-04-13 05:51:27.957627 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print('yes' if flag else 'no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829083,
  "object": "edit"
}
2022-04-13 05:51:27.957807 fix spelling mistakes 3 ['\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print(\'yes\' if flag else \'no\')\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:27.957840 size on output set 3
2022-04-13 05:51:27.957846 size on input set 3
2022-04-13 05:51:29.353191 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print('yes' if flag else 'no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print('yes' if flag else 'no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print('yes' if flag else 'no')\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829087,
  "object": "edit"
}
2022-04-13 05:51:29.353517 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print(\'yes\' if flag else \'no\')\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print(\'yes\' if flag else \'no\')\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        print(\'yes\' if flag else \'no\')\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:35.792915 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nfrom collections import deque\nfrom itertools import permutations\n\n\ndef dfs(start, end):\n    stack = deque([start])\n    visited = []\n    while stack:\n        v = stack.pop()\n        if v not in visited:\n            visited.append(v)\n            if v == end:\n                return visited\n            stack.extend(graph[v])\n    return visited\n\n\ndef main():\n    N, M = map(int, input().split())\n    graph = dict()\n    for i in range(1, N + 1):\n        graph[i] = []\n    for _ in range(M):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    start, end = map(int, input().split())\n    visited = dfs(start, end)\n    print(len(visited) - 1)\n    if len(visited) > 1:\n        print(*visited)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline()\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline()\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829089,
  "object": "edit"
}
2022-04-13 05:51:35.793092 fix syntax errors 3 ['import sys\nfrom collections import deque\nfrom itertools import permutations\n\n\ndef dfs(start, end):\n    stack = deque([start])\n    visited = []\n    while stack:\n        v = stack.pop()\n        if v not in visited:\n            visited.append(v)\n            if v == end:\n                return visited\n            stack.extend(graph[v])\n    return visited\n\n\ndef main():\n    N, M = map(int, input().split())\n    graph = dict()\n    for i in range(1, N + 1):\n        graph[i] = []\n    for _ in range(M):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    start, end = map(int, input().split())\n    visited = dfs(start, end)\n    print(len(visited) - 1)\n    if len(visited) > 1:\n        print(*visited)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input = sys.stdin.readline()\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    input = sys.stdin.readline()\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:38.251078 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split('\\n')\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = {}\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split(' ')\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split(' ')\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649829095,
  "object": "edit"
}
2022-04-13 05:51:38.251287 fix syntax errors 3 ['import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split(\'\\n\')\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = {}\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split(\' \')\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split(\' \')\n        if len(a) != len(b):\n            print(\'no\')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print(\'yes\')\n        else:\n            print(\'no\')\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:51:38.251384 size on output set 8
2022-04-13 05:51:38.251404 num operations 2
2022-04-13 05:51:38.251409 size on input set 1
2022-04-13 05:51:43.665718 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# https://codeforces.com/problemset/problem/1271/A\n\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649829098,
  "object": "edit"
}
2022-04-13 05:51:43.665887 fix spelling mistakes 3 ["\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", '\n# https://codeforces.com/problemset/problem/1271/A\n\ndef main():\n    m, n = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print("yes")\n        else:\n            print("no")\n\nif __name__ == \'__main__\':\n    main()\n', "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:51:43.665915 size on output set 2
2022-04-13 05:51:43.665922 size on input set 2
2022-04-13 05:51:46.296788 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    print('Hello World!')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef read_file():\n    pass\n\ndef write_file():\n    pass\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Time    : 2018/2/2 15:23\n# @Author  : ZeQun\n# @File    : file.py\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649829103,
  "object": "edit"
}
2022-04-13 05:51:46.296970 fix syntax errors 3 ["\ndef main():\n    print('Hello World!')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef read_file():\n    pass\n\ndef write_file():\n    pass\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Time    : 2018/2/2 15:23\n# @Author  : ZeQun\n# @File    : file.py\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:51:58.770524 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# https://codeforces.com/problemset/problem/1271/B\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    s = input()\n    if k == 1:\n        print(s)\n        return\n    if len(s) == 1:\n        print(s)\n        return\n    if s[0] != '1':\n        print(s[0])\n        print(s[1:])\n        return\n    ans = [\"1\"]\n    for i in range(1, len(s)):\n        if s[i] != '0':\n            ans.append(s[i])\n            break\n    ans.extend([\"0\"] * (len(s) - len(ans)))\n    print(\"\".join(ans))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# https://codeforces.com/problemset/problem/1271/A\n\ndef main():\n    # m, n = [int(x) for x in input().split()]\n    # translations = {}\n    # for i in range(m):\n    #     a, b = input().split()\n    #     translations[a] = b\n    # for i in range(n):\n    #     a, b = input().split()\n    #     match = True\n    #     if len(a) != len(b):\n    #         match = False\n    #     else:\n    #         for j in range(len(a)):\n    #             if a[j] not in translations and a[j] != b[j]:\n    #                 match = False\n    #                 break\n    #             elif a[j] in translations and translations[a[j]] != b[j]:\n    #                 match = False\n    #                 break\n    #     if match:\n    #         print(\"yes\")\n    #     else:\n    #         print(\"no\")\n    a = [1, 2, 3, 4, 5]\n    b = a.copy()\n    print(b)\n    b[0] = 9\n    print(b)\n    print(a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#\n# # https://codeforces.com/problemset/problem/1271/A\n#\n# def main():\n#     m, n = [int(x) for x in input().split()]\n#     translations = {}\n#     for i in range(m):\n#         a, b = input().split()\n#         translations[a] = b\n#     for i in range(n):\n#         a, b = input().split()\n#         match = True\n#         if len(a) != len(b):\n#             match = False\n#         else:\n#             for j in range(len(a)):\n#                 if a[j] not in translations and a[j] != b[j]:\n#                     match = False\n#                     break\n#                 elif a[j] in translations and translations[a[j]] != b[j]:\n#                     match = False\n#                     break\n#         if match:\n#             print(\"yes\")\n#         else:\n#             print(\"no\")\n#\n# if __name__ == '__main__':\n#     main()\n"
    }
  ],
  "created": 1649829106,
  "object": "edit"
}
2022-04-13 05:51:58.770703 fix syntax errors 3 ['# https://codeforces.com/problemset/problem/1271/B\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    s = input()\n    if k == 1:\n        print(s)\n        return\n    if len(s) == 1:\n        print(s)\n        return\n    if s[0] != \'1\':\n        print(s[0])\n        print(s[1:])\n        return\n    ans = ["1"]\n    for i in range(1, len(s)):\n        if s[i] != \'0\':\n            ans.append(s[i])\n            break\n    ans.extend(["0"] * (len(s) - len(ans)))\n    print("".join(ans))\n\nif __name__ == \'__main__\':\n    main()\n', '\n# https://codeforces.com/problemset/problem/1271/A\n\ndef main():\n    # m, n = [int(x) for x in input().split()]\n    # translations = {}\n    # for i in range(m):\n    #     a, b = input().split()\n    #     translations[a] = b\n    # for i in range(n):\n    #     a, b = input().split()\n    #     match = True\n    #     if len(a) != len(b):\n    #         match = False\n    #     else:\n    #         for j in range(len(a)):\n    #             if a[j] not in translations and a[j] != b[j]:\n    #                 match = False\n    #                 break\n    #             elif a[j] in translations and translations[a[j]] != b[j]:\n    #                 match = False\n    #                 break\n    #     if match:\n    #         print("yes")\n    #     else:\n    #         print("no")\n    a = [1, 2, 3, 4, 5]\n    b = a.copy()\n    print(b)\n    b[0] = 9\n    print(b)\n    print(a)\n\nif __name__ == \'__main__\':\n    main()\n', '#\n# # https://codeforces.com/problemset/problem/1271/A\n#\n# def main():\n#     m, n = [int(x) for x in input().split()]\n#     translations = {}\n#     for i in range(m):\n#         a, b = input().split()\n#         translations[a] = b\n#     for i in range(n):\n#         a, b = input().split()\n#         match = True\n#         if len(a) != len(b):\n#             match = False\n#         else:\n#             for j in range(len(a)):\n#                 if a[j] not in translations and a[j] != b[j]:\n#                     match = False\n#                     break\n#                 elif a[j] in translations and translations[a[j]] != b[j]:\n#                     match = False\n#                     break\n#         if match:\n#             print("yes")\n#         else:\n#             print("no")\n#\n# if __name__ == \'__main__\':\n#     main()\n']
2022-04-13 05:51:58.770818 size on output set 6
2022-04-13 05:51:58.770830 num operations 2
2022-04-13 05:51:58.770835 size on input set 1
2022-04-13 05:52:06.801728 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.stdin = open('input.txt', 'r')\n\n\ndef is_possible(n, m):\n    if n == 1 or m == 1:\n        return True\n    if n % 2 == 0 and m % 2 == 0:\n        return True\n    return False\n\nfor _ in range(int(input())):\n    n, m = [int(x) for x in input().split()]\n    if is_possible(n, m):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
      "index": 2,
      "text": "\n\n# Spell checker\nspell_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in spell_dict:\n        spell_dict[a] = []\n    spell_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in spell_dict:\n            if b not in spell_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    }
  ],
  "created": 1649829118,
  "object": "edit"
}
2022-04-13 05:52:06.801912 fix spelling mistakes 3 ["\n\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "import sys\nsys.stdin = open('input.txt', 'r')\n\n\ndef is_possible(n, m):\n    if n == 1 or m == 1:\n        return True\n    if n % 2 == 0 and m % 2 == 0:\n        return True\n    return False\n\nfor _ in range(int(input())):\n    n, m = [int(x) for x in input().split()]\n    if is_possible(n, m):\n        print('YES')\n    else:\n        print('NO')\n", "\n\n# Spell checker\nspell_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in spell_dict:\n        spell_dict[a] = []\n    spell_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in spell_dict:\n            if b not in spell_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"]
2022-04-13 05:52:06.801948 size on output set 3
2022-04-13 05:52:06.801955 size on input set 3
2022-04-13 05:52:24.124345 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Spell checker\nspell_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in spell_dict:\n        spell_dict[a] = []\n    spell_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in spell_dict:\n            if b not in spell_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 1,
      "text": "\n# Spell checker\nspell_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in spell_dict:\n        spell_dict[a] = []\n    spell_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in spell_dict:\n            if b not in spell_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 2,
      "text": "\n\n# # Spell checker\n# spell_dict = {}\n\n# # Input\n# m, n = [int(x) for x in input().split()]\n# for _ in range(m):\n#     a, b = input().split()\n#     if a not in spell_dict:\n#         spell_dict[a] = []\n#     spell_dict[a].append(b)\n\n# for _ in range(n):\n#     w1, w2 = input().split()\n#     if len(w1) != len(w2):\n#         print('no')\n#         continue\n#     # Check if words match\n#     for a, b in zip(w1, w2):\n#         if a in spell_dict:\n#             if b not in spell_dict[a]:\n#                 print('no')\n#                 break\n#         elif a != b:\n#             print('no')\n#             break\n#     else:\n#         print('yes')\n\n\n\n# x = {'a':'b', 'c':'d'}\n# print(x['a'])\n\n# a = [1,2,3,4,5,6]\n# b = [7,8,9,10,11,12]\n\n# for i, j in zip(a,b):\n# \tprint(i,j)\n\n\n# a = {1:2, 3:4}\n# b = {5:6, 7:8}\n# c = []\n# for i,j in zip(a,b):\n# \tc.append(i+j)\n# print(c)\n\n# a = [1,2,3,4,5,6]\n# b = [7,8,9,10,11,12]\n# c = []\n# for i,j in zip(a,b):\n# \tc.append(i+j)\n# print(c)\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n"
    }
  ],
  "created": 1649829126,
  "object": "edit"
}
2022-04-13 05:52:24.124521 fix syntax errors 3 ["\n# Spell checker\nspell_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in spell_dict:\n        spell_dict[a] = []\n    spell_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in spell_dict:\n            if b not in spell_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n# Spell checker\nspell_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in spell_dict:\n        spell_dict[a] = []\n    spell_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in spell_dict:\n            if b not in spell_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n\n# # Spell checker\n# spell_dict = {}\n\n# # Input\n# m, n = [int(x) for x in input().split()]\n# for _ in range(m):\n#     a, b = input().split()\n#     if a not in spell_dict:\n#         spell_dict[a] = []\n#     spell_dict[a].append(b)\n\n# for _ in range(n):\n#     w1, w2 = input().split()\n#     if len(w1) != len(w2):\n#         print('no')\n#         continue\n#     # Check if words match\n#     for a, b in zip(w1, w2):\n#         if a in spell_dict:\n#             if b not in spell_dict[a]:\n#                 print('no')\n#                 break\n#         elif a != b:\n#             print('no')\n#             break\n#     else:\n#         print('yes')\n\n\n\n# x = {'a':'b', 'c':'d'}\n# print(x['a'])\n\n# a = [1,2,3,4,5,6]\n# b = [7,8,9,10,11,12]\n\n# for i, j in zip(a,b):\n# \tprint(i,j)\n\n\n# a = {1:2, 3:4}\n# b = {5:6, 7:8}\n# c = []\n# for i,j in zip(a,b):\n# \tc.append(i+j)\n# print(c)\n\n# a = [1,2,3,4,5,6]\n# b = [7,8,9,10,11,12]\n# c = []\n# for i,j in zip(a,b):\n# \tc.append(i+j)\n# print(c)\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n\n# x = [1,2,3,4,5,6,7,8,9,10]\n# print(x[-5:])\n"]
2022-04-13 05:52:26.063023 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    },
    {
      "index": 1,
      "text": "\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                continue\n        elif a != b:\n            print('no')\n            continue\n    else:\n        print('yes')\n"
    },
    {
      "index": 2,
      "text": "\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"
    }
  ],
  "created": 1649829144,
  "object": "edit"
}
2022-04-13 05:52:26.063206 fix syntax errors 3 ["#!/usr/bin/env python3\n\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                continue\n        elif a != b:\n            print('no')\n            continue\n    else:\n        print('yes')\n", "\n# Translations\ntranslations = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in translations:\n        translations[a] = []\n    translations[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in translations:\n            if b not in translations[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n"]
2022-04-13 05:52:46.747660 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "# import sys\n# sys.stdin = open('input.txt', 'r')\n\n\n# def is_possible(n, m):\n#     if n == 1 or m == 1:\n#         return True\n#     if n % 2 == 0 and m % 2 == 0:\n#         return True\n#     return False\n\n# for _ in range(int(input())):\n#     n, m = [int(x) for x in input().split()]\n#     if is_possible(n, m):\n#         print('YES')\n#     else:\n#         print('NO')\n\n\ndef is_possible(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n\n\ndef solve(arr, index):\n    if index == len(arr):\n        if is_possible(arr):\n            return 1\n        return 0\n\n    cnt = 0\n    for i in range(1, 4):\n        arr[index] = i\n        cnt += solve(arr, index + 1)\n    return cnt\n\n\nprint(solve([0] * int(input()), 0))\n"
    },
    {
      "index": 2,
      "text": "# import sys\n# sys.stdin = open('input.txt', 'r')\n#\n#\n# def is_possible(n, m):\n#     if n == 1 or m == 1:\n#         return True\n#     if n % 2 == 0 and m % 2 == 0:\n#         return True\n#     return False\n#\n# for _ in range(int(input())):\n#     n, m = [int(x) for x in input().split()]\n#     if is_possible(n, m):\n#         print('YES')\n#     else:\n#         print('NO')\n"
    }
  ],
  "created": 1649829146,
  "object": "edit"
}
2022-04-13 05:52:46.747862 NO RESULT
2022-04-13 05:52:46.747871 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-13 05:52:46.747927 fix syntax errors 2 ["# import sys\n# sys.stdin = open('input.txt', 'r')\n\n\n# def is_possible(n, m):\n#     if n == 1 or m == 1:\n#         return True\n#     if n % 2 == 0 and m % 2 == 0:\n#         return True\n#     return False\n\n# for _ in range(int(input())):\n#     n, m = [int(x) for x in input().split()]\n#     if is_possible(n, m):\n#         print('YES')\n#     else:\n#         print('NO')\n\n\ndef is_possible(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n\n\ndef solve(arr, index):\n    if index == len(arr):\n        if is_possible(arr):\n            return 1\n        return 0\n\n    cnt = 0\n    for i in range(1, 4):\n        arr[index] = i\n        cnt += solve(arr, index + 1)\n    return cnt\n\n\nprint(solve([0] * int(input()), 0))\n", "# import sys\n# sys.stdin = open('input.txt', 'r')\n#\n#\n# def is_possible(n, m):\n#     if n == 1 or m == 1:\n#         return True\n#     if n % 2 == 0 and m % 2 == 0:\n#         return True\n#     return False\n#\n# for _ in range(int(input())):\n#     n, m = [int(x) for x in input().split()]\n#     if is_possible(n, m):\n#         print('YES')\n#     else:\n#         print('NO')\n"]
2022-04-13 05:52:46.747957 size on output set 7
2022-04-13 05:52:46.747967 num operations 2
2022-04-13 05:52:46.747972 size on input set 1
2022-04-13 05:52:56.631414 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        a = list(a)\n        b = list(b)\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"yes\")\n        else:\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"yes\")\n            for i in range(len(b)):\n                if b[i] in d:\n                    if a[i] in d[b[i]]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"yes\")\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n            \nmain()\n"
    }
  ],
  "created": 1649829166,
  "object": "edit"
}
2022-04-13 05:52:56.631687 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        a = list(a)\n        b = list(b)\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print("no")\n                        break\n                else:\n                    print("no")\n                    break\n            else:\n                print("yes")\n        else:\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print("no")\n                        break\n                else:\n                    print("no")\n                    break\n            else:\n                print("yes")\n            for i in range(len(b)):\n                if b[i] in d:\n                    if a[i] in d[b[i]]:\n                        continue\n                    else:\n                        print("no")\n                        break\n                else:\n                    print("no")\n                    break\n            else:\n                print("yes")\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n            \nmain()\n']
2022-04-13 05:52:56.631739 size on output set 3
2022-04-13 05:52:56.631746 size on input set 3
2022-04-13 05:53:05.588976 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        a = list(a)\n        b = list(b)\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"yes\")\n        else:\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"yes\")\n            for i in range(len(b)):\n                if b[i] in d:\n                    if a[i] in d[b[i]]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        a = list(a)  # ['a', 'b']\n        b = list(b)  # ['c', 'd']\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print(\"no\")  # no\n                        break  # break\n                else:\n                    print(\"no\")  # no\n                    break  # break\n            else:\n                print(\"yes\")  # yes\n        else:\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print(\"no\")  # no\n                        break  # break\n                else:\n                    print(\"no\")  # no\n                    break  # break\n            else:\n                print(\"yes\")  # yes\n            for i in range(len(b)):\n                if b[i] in d:\n                    if a[i] in d[b[i]]:\n                        continue\n                    else:\n                        print(\"no\")  # no\n                        break  # break\n                else:\n                    print(\"no\")  # no\n                    break  # break\n            else:\n                print(\"yes\")  # yes\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")  # no\n                    break  # break\n            else:\n                print(\"no\")  # no\n                break  # break\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        flag = True\n        a, b = sys.stdin.readline().split()\n        a = list(a)\n        b = list(b)\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        flag = False\n                else:\n                    flag = False\n        if flag:\n            print(\"yes\")\n        else: print(\"no\")\n\nmain()\n"
    }
  ],
  "created": 1649829176,
  "object": "edit"
}
2022-04-13 05:53:05.589164 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        a = list(a)\n        b = list(b)\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print("no")\n                        break\n                else:\n                    print("no")\n                    break\n            else:\n                print("yes")\n        else:\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print("no")\n                        break\n                else:\n                    print("no")\n                    break\n            else:\n                print("yes")\n            for i in range(len(b)):\n                if b[i] in d:\n                    if a[i] in d[b[i]]:\n                        continue\n                    else:\n                        print("no")\n                        break\n                else:\n                    print("no")\n                    break\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        a = list(a)  # [\'a\', \'b\']\n        b = list(b)  # [\'c\', \'d\']\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print("no")  # no\n                        break  # break\n                else:\n                    print("no")  # no\n                    break  # break\n            else:\n                print("yes")  # yes\n        else:\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        print("no")  # no\n                        break  # break\n                else:\n                    print("no")  # no\n                    break  # break\n            else:\n                print("yes")  # yes\n            for i in range(len(b)):\n                if b[i] in d:\n                    if a[i] in d[b[i]]:\n                        continue\n                    else:\n                        print("no")  # no\n                        break  # break\n                else:\n                    print("no")  # no\n                    break  # break\n            else:\n                print("yes")  # yes\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")  # no\n                    break  # break\n            else:\n                print("no")  # no\n                break  # break\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        flag = True\n        a, b = sys.stdin.readline().split()\n        a = list(a)\n        b = list(b)\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if a[i] in d:\n                    if b[i] in d[a[i]]:\n                        continue\n                    else:\n                        flag = False\n                else:\n                    flag = False\n        if flag:\n            print("yes")\n        else: print("no")\n\nmain()\n']
2022-04-13 05:53:20.350837 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0018\n\"\"\"\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for j in range(len(a)):\n            if a[j] in d:\n                if b[j] in d[a[j]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n            \nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n            \nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m: number of dictionary, n: number of words\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split() # a: original word, b: modified word\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split() # a: original word, b: modified word\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n            \nmain()\n"
    }
  ],
  "created": 1649829185,
  "object": "edit"
}
2022-04-13 05:53:20.351145 fix syntax errors 3 ['"""\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0018\n"""\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for j in range(len(a)):\n            if a[j] in d:\n                if b[j] in d[a[j]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n            \nmain()\n', '\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n            \nmain()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # m: number of dictionary, n: number of words\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split() # a: original word, b: modified word\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split() # a: original word, b: modified word\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n            \nmain()\n']
2022-04-13 05:53:26.880932 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] not in d[a[i]]:\n                    print(\"no\")\n                    break\n        if a[i] not in d:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1649829200,
  "object": "edit"
}
2022-04-13 05:53:26.881113 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] not in d[a[i]]:\n                    print("no")\n                    break\n        if a[i] not in d:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for i in range(m):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        d[a] = b\n    for i in range(n):\n        a, b = sys.stdin.readline().split()[0], sys.stdin.readline().split()[0]\n        if len(a) != len(b):\n            print("no")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print("no")\n                    break\n            else:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n']
2022-04-13 05:53:26.881244 size on output set 9
2022-04-13 05:53:26.881259 num operations 2
2022-04-13 05:53:26.881265 size on input set 1
2022-04-13 05:53:31.169296 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2]\n        translations[lines[i][2]] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1649829206,
  "object": "edit"
}
2022-04-13 05:53:31.169510 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2]\n        translations[lines[i][2]] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n']
2022-04-13 05:53:31.169559 size on output set 2
2022-04-13 05:53:31.169566 size on input set 2
2022-04-13 05:53:44.901555 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    with open('file.txt') as f:\n        lines = f.readlines()\n        m = int(lines[0].split()[0])\n        n = int(lines[0].split()[1])\n        translations = {}\n        for i in range(1, m+1):\n            translations[lines[i][0]] = lines[i][2].strip()\n            translations[lines[i][2].strip()] = lines[i][0]\n        for i in range(m+1, m+1+n):\n            word1 = lines[i].split()[0].strip()\n            word2 = lines[i].split()[1].strip()\n            if len(word1) != len(word2):\n                print(\"no\")\n                continue\n            else:\n                for j in range(len(word1)):\n                    if word1[j] != word2[j]:\n                        # Try to translate\n                        if word1[j] in translations:\n                            if translations[word1[j]] == word2[j]:\n                                continue\n                            else:\n                                print(\"no\")\n                                break\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        continue\n                else:\n                    print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1649829211,
  "object": "edit"
}
2022-04-13 05:53:44.901842 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '\nimport sys\n\ndef main():\n    with open(\'file.txt\') as f:\n        lines = f.readlines()\n        m = int(lines[0].split()[0])\n        n = int(lines[0].split()[1])\n        translations = {}\n        for i in range(1, m+1):\n            translations[lines[i][0]] = lines[i][2].strip()\n            translations[lines[i][2].strip()] = lines[i][0]\n        for i in range(m+1, m+1+n):\n            word1 = lines[i].split()[0].strip()\n            word2 = lines[i].split()[1].strip()\n            if len(word1) != len(word2):\n                print("no")\n                continue\n            else:\n                for j in range(len(word1)):\n                    if word1[j] != word2[j]:\n                        # Try to translate\n                        if word1[j] in translations:\n                            if translations[word1[j]] == word2[j]:\n                                continue\n                            else:\n                                print("no")\n                                break\n                        else:\n                            print("no")\n                            break\n                    else:\n                        continue\n                else:\n                    print("yes")\n\nmain()\n']
2022-04-13 05:53:56.088828 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        try:\n            word1 = lines[i].split()[0]\n            word2 = lines[i].split()[1]\n            if len(word1) != len(word2):\n                print(\"no\")\n                continue\n            else:\n                for j in range(len(word1)):\n                    if word1[j] != word2[j]:\n                        # Try to translate\n                        if word1[j] in translations:\n                            if translations[word1[j]] == word2[j]:\n                                continue\n                            else:\n                                print(\"no\")\n                                break\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        continue\n                else:\n                    print(\"yes\")\n        except IndexError:\n            pass\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            continue\n                    else:\n                        print(\"no\")\n                        continue\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations.keys():\n                        if translations[word1[j]] == word2[j].strip():\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1649829224,
  "object": "edit"
}
2022-04-13 05:53:56.089017 fix syntax errors 3 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        try:\n            word1 = lines[i].split()[0]\n            word2 = lines[i].split()[1]\n            if len(word1) != len(word2):\n                print("no")\n                continue\n            else:\n                for j in range(len(word1)):\n                    if word1[j] != word2[j]:\n                        # Try to translate\n                        if word1[j] in translations:\n                            if translations[word1[j]] == word2[j]:\n                                continue\n                            else:\n                                print("no")\n                                break\n                        else:\n                            print("no")\n                            break\n                    else:\n                        continue\n                else:\n                    print("yes")\n        except IndexError:\n            pass\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print("no")\n                            continue\n                    else:\n                        print("no")\n                        continue\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m + 1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m + 1, m + 1 + n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print("no")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations.keys():\n                        if translations[word1[j]] == word2[j].strip():\n                            continue\n                        else:\n                            print("no")\n                            break\n                    else:\n                        print("no")\n                        break\n                else:\n                    continue\n            else:\n                print("yes")\n\nmain()\n']
2022-04-13 05:53:56.089132 size on output set 6
2022-04-13 05:53:56.089145 num operations 2
2022-04-13 05:53:56.089151 size on input set 1
2022-04-13 05:54:02.585393 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1649829236,
  "object": "edit"
}
2022-04-13 05:54:02.585596 fix spelling mistakes 3 ['\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n']
2022-04-13 05:54:02.585643 size on output set 3
2022-04-13 05:54:02.585652 size on input set 3
2022-04-13 05:54:05.381548 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split(' ')\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split(' ')\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1649829242,
  "object": "edit"
}
2022-04-13 05:54:05.381728 fix syntax errors 3 ['# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split(\' \')\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().split(\' \')\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '# Problem: https://open.kattis.com/problems/spellchecker\n# Difficulty: 2.6\n# Score: 10\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n']
2022-04-13 05:54:11.594203 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word.\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word.\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word\n    ans = []\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word\n        if len(a) != len(b):\n            ans.append(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                ans.append(\"no\")\n                break\n        else:\n            ans.append(\"yes\")\n    print('\\n'.join(ans))\n\nmain()\n"
    }
  ],
  "created": 1649829245,
  "object": "edit"
}
2022-04-13 05:54:11.594385 fix syntax errors 3 ['import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word.\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word.\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()  # a is the original word and b is the corrected word\n    ans = []\n        lookup[a] = b  # mapping the original word to the corrected word\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()  # a is the word and b is the corrected word\n        if len(a) != len(b):\n            ans.append("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                ans.append("no")\n                break\n        else:\n            ans.append("yes")\n    print(\'\\n\'.join(ans))\n\nmain()\n']
2022-04-13 05:54:14.746917 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()[:2]\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()[:2]\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main(args):\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nif __name__ == '__main__':\n    main(sys.argv)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split(' ')\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split(' ')\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"
    }
  ],
  "created": 1649829251,
  "object": "edit"
}
2022-04-13 05:54:14.747090 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()[:2]\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()[:2]\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n', 'import sys\n\ndef main(args):\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split()\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nif __name__ == \'__main__\':\n    main(sys.argv)\n', '\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = sys.stdin.readline().strip().split(\' \')\n        lookup[a] = b\n    for _ in range(m):\n        a, b = sys.stdin.readline().strip().split(\' \')\n        if len(a) != len(b):\n            print("no")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print("no")\n                break\n        else:\n            print("yes")\n\nmain()\n']
2022-04-13 05:54:14.747194 size on output set 8
