2022-04-09 20:04:18.180147 """
One important contest will take place on the most famous programming platform (Topforces) very soon!

The authors have a pool of $n$ problems and should choose at most three of them into this contest. The prettiness of the $i$-th problem is $a_i$. The authors have to compose the most pretty contest (in other words, the cumulative prettinesses of chosen problems should be maximum possible).

But there is one important thing in the contest preparation: because of some superstitions of authors, the prettinesses of problems cannot divide each other. In other words, if the prettinesses of chosen problems are $x, y, z$, then $x$ should be divisible by neither $y$, nor $z$, $y$ should be divisible by neither $x$, nor $z$ and $z$ should be divisible by neither $x$, nor $y$. If the prettinesses of chosen problems are $x$ and $y$ then neither $x$ should be divisible by $y$ nor $y$ should be divisible by $x$. Any contest composed from one problem is considered good.

Your task is to find out the maximum possible total prettiness of the contest composed of at most three problems from the given pool.

You have to answer $q$ independent queries.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 2 \cdot 10^5$) — the number of queries.

The first line of the query contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of problems.

The second line of the query contains $n$ integers $a_1, a_2, \dots, a_n$ ($2 \le a_i \le 2 \cdot 10^5$), where $a_i$ is the prettiness of the $i$-th problem.

It is guaranteed that the sum of $n$ over all queries does not exceed $2 \cdot 10^5$.


-----Output-----

For each query print one integer — the maximum possible cumulative prettiness of the contest composed of at most three problems from the given pool of problems in the query.


-----Example-----
Input
3
4
5 6 15 30
4
10 6 30 15
3
3 4 6

Output
30
31
10
"""
2022-04-09 20:04:18.180214 --------------------------
2022-04-09 20:04:32.812261 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": ""
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))"
    }
  ],
  "created": 1649549058,
  "id": "cmpl-4vFLuBUWhMa2XnGuzCWUxHJojWyCA",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:04:32.812384 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": ""
}
2022-04-09 20:04:32.812408 REASON stop
2022-04-09 20:04:32.813217 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# If you are using Python 3.x, you can use the following import instead:\n# from io import BytesIO\n\n# If you are using Python 2.x, you can use the following import instead:\n# from StringIO import StringIO\n\ndef solve(n, a):\n    # Write your code here\n    a.sort()\n    if n == 1:\n        return a[0]\n    elif n == 2:\n        return a[1]\n    else:\n        return max(a[0] * a[1] * a[2], a[0] * a[1] + a[2])\n\nq = int(input())\nfor query_number in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))"
}
2022-04-09 20:04:32.813239 REASON stop
