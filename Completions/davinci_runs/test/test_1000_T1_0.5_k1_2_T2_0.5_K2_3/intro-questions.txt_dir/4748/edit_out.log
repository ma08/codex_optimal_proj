2022-04-13 00:56:17.455767 num operations 2
2022-04-13 00:56:17.455778 size on input set 1
2022-04-13 00:56:19.740867 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811377,
  "object": "edit"
}
2022-04-13 00:56:19.741103 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:56:19.741157 size on output set 3
2022-04-13 00:56:19.741164 size on input set 3
2022-04-13 00:56:32.554388 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n        if h == 2:\n            ans[0] = 1\n            ans[1] = 2\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if h == 3:\n            ans[0] = 0\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if h == 4:\n            if n >= 2 and m >= 4:\n                ans[0] = 2\n                ans[1] = 4\n                print(\" \".join([str(x) for x in ans]))\n                return\n            if n >= 1 and m >= 6:\n                ans[0] = 1\n                ans[1] = 6\n                print(\" \".join([str(x) for x in ans]))\n                return\n            if n == 0 and m >= 8:\n                ans[0] = 0\n                ans[1] = 8\n                print(\" \".join([str(x) for x in ans]))\n                return\n        ans[1] = (h-2)*2\n        ans[0] = 2 - n\n        if ans[0] < 0:\n            ans[0] = 2\n            ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811379,
  "object": "edit"
}
2022-04-13 00:56:32.554686 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n        if h == 2:\n            ans[0] = 1\n            ans[1] = 2\n            print(" ".join([str(x) for x in ans]))\n            return\n        if h == 3:\n            ans[0] = 0\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if h == 4:\n            if n >= 2 and m >= 4:\n                ans[0] = 2\n                ans[1] = 4\n                print(" ".join([str(x) for x in ans]))\n                return\n            if n >= 1 and m >= 6:\n                ans[0] = 1\n                ans[1] = 6\n                print(" ".join([str(x) for x in ans]))\n                return\n            if n == 0 and m >= 8:\n                ans[0] = 0\n                ans[1] = 8\n                print(" ".join([str(x) for x in ans]))\n                return\n        ans[1] = (h-2)*2\n        ans[0] = 2 - n\n        if ans[0] < 0:\n            ans[0] = 2\n            ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:56:39.403890 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n    ans[1] = (h-4)*2 + 2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n + ans[1] // 2\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811392,
  "object": "edit"
}
2022-04-13 00:56:39.404085 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n    ans[1] = (h-4)*2 + 2\n    ans[0] = 2 - n\n    if ans[0] < 0:\n        ans[0] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n + ans[1] // 2\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:56:41.824993 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m*2\n    ans[0] = 2 - n*2\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811399,
  "object": "edit"
}
2022-04-13 00:56:41.825193 fix syntax errors 3 ['import sys\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m*2\n    ans[0] = 2 - n*2\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 - m\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:56:41.825255 size on output set 8
2022-04-13 00:56:41.825280 num operations 2
2022-04-13 00:56:41.825285 size on input set 1
2022-04-13 00:56:43.544061 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0 \n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = 0\n    b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811401,
  "object": "edit"
}
2022-04-13 00:56:43.544372 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0 \n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = 0\n    b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:56:43.544408 size on output set 3
2022-04-13 00:56:43.544416 size on input set 3
2022-04-13 00:56:46.804265 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h + 1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h + 1):\n        a += 2 * i\n        b += i\n    if a <= n:  # all the bricks are used\n        a = 0\n    else:\n        a -= n\n    if b <= m:  # all the mortar is used\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811403,
  "object": "edit"
}
2022-04-13 00:56:46.804462 fix syntax errors 3 ["import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h + 1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h + 1):\n        a += 2 * i\n        b += i\n    if a <= n:  # all the bricks are used\n        a = 0\n    else:\n        a -= n\n    if b <= m:  # all the mortar is used\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:56:52.594013 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = 0\n    b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().strip().split()]\n    a = 0\n    b = 0\n    for i in range(1, h+1):\n        a += 2 * i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811406,
  "object": "edit"
}
2022-04-13 00:56:52.594235 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = 0\n    b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().strip().split()]\n    a = 0\n    b = 0\n    for i in range(1, h+1):\n        a += 2 * i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:56:56.783901 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h+1):\n        a += 2 * i\n        b += i\n    print(max(a-n, 0), max(b-m, 0))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811412,
  "object": "edit"
}
2022-04-13 00:56:56.784125 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1, h+1):\n        a += 2 * i\n        b += i\n    print(max(a-n, 0), max(b-m, 0))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:56:56.784242 size on output set 7
2022-04-13 00:56:56.784256 num operations 2
2022-04-13 00:56:56.784261 size on input set 1
2022-04-13 00:57:03.457169 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height - small_bricks\n    height_big_bricks = 2 * height - big_bricks\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1649811416,
  "object": "edit"
}
2022-04-13 00:57:03.457444 fix spelling mistakes 3 ['\n\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n', '\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height - small_bricks\n    height_big_bricks = 2 * height - big_bricks\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n', '\n\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n']
2022-04-13 00:57:03.457506 size on output set 3
2022-04-13 00:57:03.457516 size on input set 3
2022-04-13 00:57:09.001747 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, small_bricks\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n"
    }
  ],
  "created": 1649811423,
  "object": "edit"
}
2022-04-13 00:57:09.001955 fix syntax errors 3 ['\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n', '\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, small_bricks\n    elif height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    height_small_bricks = 0\n    height_big_bricks = 0\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks, height_small_bricks, height_big_bricks))\n']
2022-04-13 00:57:15.859421 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_small_brick_count(w, h, small_bricks, big_bricks):\n    height_small_bricks = (2 * w - 1) * h\n    height_big_bricks = 2 * w\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    w, h, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(w, h, small_bricks, big_bricks))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height // 2\n    height_big_bricks = height\n\n    if height_small_bricks <= small_bricks:\n        return 0, big_bricks\n\n    height_small_bricks -= small_bricks \n\n    if height_small_bricks >= big_bricks * 2:\n        return height_small_bricks - big_bricks * 2, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 2)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1649811429,
  "object": "edit"
}
2022-04-13 00:57:15.859636 fix syntax errors 3 ['\n\nimport math\n\ndef get_small_brick_count(w, h, small_bricks, big_bricks):\n    height_small_bricks = (2 * w - 1) * h\n    height_big_bricks = 2 * w\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    w, h, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(w, h, small_bricks, big_bricks))\n', '\n\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height // 2\n    height_big_bricks = height\n\n    if height_small_bricks <= small_bricks:\n        return 0, big_bricks\n\n    height_small_bricks -= small_bricks \n\n    if height_small_bricks >= big_bricks * 2:\n        return height_small_bricks - big_bricks * 2, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 2)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height\n    height_big_bricks = 2 * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n']
2022-04-13 00:57:17.348900 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 1,
      "text": "import math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1649811435,
  "object": "edit"
}
2022-04-13 00:57:17.349113 fix syntax errors 3 ['\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n', 'import math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_small_brick_count(height, small_bricks, big_bricks):\n    height_small_bricks = (2 * height - 1) * height # 2 * height * (height - 1) + height\n    height_big_bricks = 2 * height # 2 * height * height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_small_brick_count(height, small_bricks, big_bricks))\n']
2022-04-13 00:57:17.349225 size on output set 7
2022-04-13 00:57:17.349240 num operations 2
2022-04-13 00:57:17.349246 size on input set 1
2022-04-13 00:57:32.830032 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649811437,
  "object": "edit"
}
2022-04-13 00:57:32.830253 fix spelling mistakes 3 ['\n\nimport sys\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 00:57:32.830388 size on output set 3
2022-04-13 00:57:32.830397 size on input set 3
2022-04-13 00:57:49.719378 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H - 1\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # # Calculate number of bricks in top layer\n    # top_layer = 2 * H\n    # # Calculate number of bricks in bottom layer\n    # bottom_layer = 2\n    # # Calculate number of layers\n    # layers = H\n    # # Calculate number of bricks in top half\n    # top_half = top_layer + bottom_layer\n    # # Calculate number of bricks in bottom half\n    # bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # # Calculate number of bricks in whole pyramid\n    # total_bricks = top_half + bottom_half\n    # # Calculate number of bricks in existing pyramid\n    # existing_bricks = 2 * N + 4 * M\n    # # Calculate number of bricks needed\n    # needed_bricks = total_bricks - existing_bricks\n    # # Calculate number of $2 \\times 2$-bricks needed\n    # A = needed_bricks // 2\n    # # Calculate number of $4 \\times 2$-bricks needed\n    # B = needed_bricks // 4\n    # # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    # if A > B:\n    #     A += 1\n    #     B -= 1\n    # # Print output\n    # print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649811452,
  "object": "edit"
}
2022-04-13 00:57:49.719613 fix syntax errors 3 ['\n\nimport sys\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H - 1\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # # Calculate number of bricks in top layer\n    # top_layer = 2 * H\n    # # Calculate number of bricks in bottom layer\n    # bottom_layer = 2\n    # # Calculate number of layers\n    # layers = H\n    # # Calculate number of bricks in top half\n    # top_half = top_layer + bottom_layer\n    # # Calculate number of bricks in bottom half\n    # bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # # Calculate number of bricks in whole pyramid\n    # total_bricks = top_half + bottom_half\n    # # Calculate number of bricks in existing pyramid\n    # existing_bricks = 2 * N + 4 * M\n    # # Calculate number of bricks needed\n    # needed_bricks = total_bricks - existing_bricks\n    # # Calculate number of $2 \\times 2$-bricks needed\n    # A = needed_bricks // 2\n    # # Calculate number of $4 \\times 2$-bricks needed\n    # B = needed_bricks // 4\n    # # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n    # if A > B:\n    #     A += 1\n    #     B -= 1\n    # # Print output\n    # print(A, B)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 00:57:55.397886 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 0\n    if H == 0:\n        A = N\n        B = M\n    # Recursive case: height > 0\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H - 1\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 1)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks\n        # needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649811469,
  "object": "edit"
}
2022-04-13 00:57:55.398177 fix syntax errors 3 ['\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 0\n    if H == 0:\n        A = N\n        B = M\n    # Recursive case: height > 0\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H - 1\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 1)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks\n        # needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2 x 2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of 4 x 2-bricks needed\n        B = needed_bricks // 4\n        # If 2 x 2-bricks needed is greater than 4 x 2-bricks needed,\n        # increase 2 x 2-bricks needed by 1 and decrease 4 x 2-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 00:58:02.665415 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2x2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in sys.stdin.readline().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    sys.stdout.write(str(A) + \" \" + str(B) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649811475,
  "object": "edit"
}
2022-04-13 00:58:02.665721 fix syntax errors 3 ['\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of 2x2-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in sys.stdin.readline().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed are greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    sys.stdout.write(str(A) + " " + str(B) + "\\n")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 00:58:02.665806 size on output set 9
2022-04-13 00:58:02.665824 num operations 2
2022-04-13 00:58:02.665832 size on input set 1
2022-04-13 00:58:10.558348 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 1,
      "text": "\n\nh, n, m = map(int, input().split()) #\uc138\ub85c, \uac00\ub85c, \uac00\ub85c\n\na = 0 #\uc138\ub85c\nb = 0 #\uac00\ub85c\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n: #\ub108\ube44\uac00 n\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n    print(0, m)\nelse: #\ub108\ube44\uac00 n\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n    a -= n\n    if a <= m*2: #\ub108\ube44\uac00 \ub450\ubc30\uc758 \uac00\ub85c \ud06c\uae30\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n        print(a//2, m - (a//2))\n    else: #\ub108\ube44\uac00 \ub450\ubc30\uc758 \uac00\ub85c \ud06c\uae30\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n        print(m, 0)\n"
    },
    {
      "index": 2,
      "text": "\n\nh, n, m = map(int, input().split()) #height, number of logs, number of pieces of wood\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1) #number of logs\n    b += (2*i) #number of pieces of wood\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    }
  ],
  "created": 1649811482,
  "object": "edit"
}
2022-04-13 00:58:10.558546 fix spelling mistakes 3 ['\n\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', '\n\nh, n, m = map(int, input().split()) #세로, 가로, 가로\n\na = 0 #세로\nb = 0 #가로\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n: #너비가 n보다 작을 경우\n    print(0, m)\nelse: #너비가 n보다 클 경우\n    a -= n\n    if a <= m*2: #너비가 두배의 가로 크기보다 작을 경우\n        print(a//2, m - (a//2))\n    else: #너비가 두배의 가로 크기보다 클 경우\n        print(m, 0)\n', '\n\nh, n, m = map(int, input().split()) #height, number of logs, number of pieces of wood\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1) #number of logs\n    b += (2*i) #number of pieces of wood\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n']
2022-04-13 00:58:10.558588 size on output set 3
2022-04-13 00:58:10.558596 size on input set 3
2022-04-13 00:58:13.734012 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 1,
      "text": "\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2 * i - 1)\n    b += (2 * i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a // 2, m - (a // 2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 2,
      "text": "h, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    }
  ],
  "created": 1649811490,
  "object": "edit"
}
2022-04-13 00:58:13.734325 fix syntax errors 3 ['\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n', '\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2 * i - 1)\n    b += (2 * i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a // 2, m - (a // 2))\n    else:\n        print(m, 0)\n', 'h, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n']
2022-04-13 00:58:19.593453 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nh, n, m = map(int, input().split())  # height, number of logs, number of pieces of wood\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)  # number of logs\n    b += (2*i)  # number of pieces of wood\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m * 2:\n        print(a // 2, m - (a // 2))\n    else:\n        print(m, 0)\n"
    },
    {
      "index": 1,
      "text": "'''\n\nh, n, m = map(int, input().split()) #height, number of logs, number of pieces of wood\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1) #number of logs\n    b += (2*i) #number of pieces of wood\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2: # if we can make the difference between the logs and the pieces of wood\n        print(a//2, m - (a//2)) # print the number of logs we can make and the number of pieces of wood left\n    else:\n'''\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n        print(m, 0)\n"
    },
    {
      "index": 2,
      "text": "\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    }
  ],
  "created": 1649811493,
  "object": "edit"
}
2022-04-13 00:58:19.593645 fix syntax errors 3 ['\n\nh, n, m = map(int, input().split())  # height, number of logs, number of pieces of wood\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)  # number of logs\n    b += (2*i)  # number of pieces of wood\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m * 2:\n        print(a // 2, m - (a // 2))\n    else:\n        print(m, 0)\n', "'''\n\nh, n, m = map(int, input().split()) #height, number of logs, number of pieces of wood\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1) #number of logs\n    b += (2*i) #number of pieces of wood\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2: # if we can make the difference between the logs and the pieces of wood\n        print(a//2, m - (a//2)) # print the number of logs we can make and the number of pieces of wood left\n    else:\n'''\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n        print(m, 0)\n", '\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n']
2022-04-13 00:58:35.600748 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nh, n, m = map(int, input().split())  # \uc138\ub85c, \uac00\ub85c, \uac00\ub85c\n\na = 0  # \uc138\ub85c\nb = 0  # \uac00\ub85c\n\nfor i in range(1, h + 1):\n    a += (2 * i - 1)\n    b += (2 * i)\n\nif a <= n: #\ub108\ube44\uac00 n\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n    print(0, m)\nelse: #\ub108\ube44\uac00 n\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n    a -= n\n    if a <= m*2: #\ub108\ube44\uac00 \ub450\ubc30\uc758 \uac00\ub85c \ud06c\uae30\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n        print(a//2, m - (a//2))\n    else: #\ub108\ube44\uac00 \ub450\ubc30\uc758 \uac00\ub85c \ud06c\uae30\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n        print(m, 0)\n"
    },
    {
      "index": 1,
      "text": "\nh, n, m = map(int, input().split()) #\uc138\ub85c, \uac00\ub85c, \uac00\ub85c\n\na = 0 #\uc138\ub85c\nb = 0 #\uac00\ub85c\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n: #\ub108\ube44\uac00 n\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n    print(0, m)\nelse: #\ub108\ube44\uac00 n\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n    a -= n\n    if a <= m*2: #\ub108\ube44\uac00 \ub450\ubc30\uc758 \uac00\ub85c \ud06c\uae30\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n        print(a//2, m - (a//2))\n    else: #\ub108\ube44\uac00 \ub450\ubc30\uc758 \uac00\ub85c \ud06c\uae30\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n        print(m, 0)\n"
    },
    {
      "index": 2,
      "text": "\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n"
    }
  ],
  "created": 1649811499,
  "object": "edit"
}
2022-04-13 00:58:35.600913 fix syntax errors 3 ['\n\nh, n, m = map(int, input().split())  # 세로, 가로, 가로\n\na = 0  # 세로\nb = 0  # 가로\n\nfor i in range(1, h + 1):\n    a += (2 * i - 1)\n    b += (2 * i)\n\nif a <= n: #너비가 n보다 작을 경우\n    print(0, m)\nelse: #너비가 n보다 클 경우\n    a -= n\n    if a <= m*2: #너비가 두배의 가로 크기보다 작을 경우\n        print(a//2, m - (a//2))\n    else: #너비가 두배의 가로 크기보다 클 경우\n        print(m, 0)\n', '\nh, n, m = map(int, input().split()) #세로, 가로, 가로\n\na = 0 #세로\nb = 0 #가로\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n: #너비가 n보다 작을 경우\n    print(0, m)\nelse: #너비가 n보다 클 경우\n    a -= n\n    if a <= m*2: #너비가 두배의 가로 크기보다 작을 경우\n        print(a//2, m - (a//2))\n    else: #너비가 두배의 가로 크기보다 클 경우\n        print(m, 0)\n', '\n\nh, n, m = map(int, input().split())\n\na = 0\nb = 0\n\nfor i in range(1, h+1):\n    a += (2*i - 1)\n    b += (2*i)\n\nif a <= n:\n    print(0, m)\nelse:\n    a -= n\n    if a <= m*2:\n        print(a//2, m - (a//2))\n    else:\n        print(m, 0)\n']
2022-04-13 00:58:35.600961 size on output set 8
2022-04-13 00:58:35.600974 num operations 2
2022-04-13 00:58:35.600979 size on input set 1
2022-04-13 00:58:39.393882 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible. (extra bricks have size\n    2x1)\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811515,
  "object": "edit"
}
2022-04-13 00:58:39.394154 fix spelling mistakes 3 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible. (extra bricks have size\n    2x1)\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:58:39.394215 size on output set 3
2022-04-13 00:58:39.394240 size on input set 3
2022-04-13 00:59:01.631240 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible. (extra bricks have size\n    2x1)\n    '''\n    h, n, m = map(int, input().split())\n    # h_n_m = input().split()\n    # h_n_m = [int(x) for x in h_n_m]\n    # h = h_n_m[0]\n    # n = h_n_m[1]\n    # m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Given height of the pyramid, number of bricks of size 2x1 and number of\n    # bricks of size 4x1, return the number of bricks needed to complete the\n    # pyramid using as few extra bricks as possible. (extra bricks have size\n    # 2x1)\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible. (extra bricks have size\n    2x1)\n    '''\n    h_n_m = input().split()  #h_n_m = [h, n, m]\n    h = int(h_n_m[0])\n    n = int(h_n_m[1])\n    m = int(h_n_m[2])\n    if h == 1:  #if h == 1, no bricks needed\n        print(0, 0) #print(0, 0)\n    elif h > 1:  #if h > 1, bricks needed\n        if h % 2 == 0:  #if h is even, we need to use 4x1 bricks\n            if h == 2:  #if h == 2, we need one 2x1 brick if n is odd\n                if n % 2 == 0:\n                    print(0, 0)  #if n is even, no bricks needed\n                else:  #if n is odd, we need one 2x1 brick\n                    print(1, 0)  #print(1, 0)\n            else:  #if h > 2, we need to use 4x1 bricks\n                if n % 2 == 0:  #if n is even, no 2x1 bricks needed\n                    extra_2 = 0  #extra_2 = 0\n                else:  #if n is odd, we need one 2x1 brick\n                    extra_2 = 1  #extra_2 = 1\n                if (h//2) - 1 <= m:  #if number of 4x1 bricks needed is <= m, we can use m 4x1 bricks\n                    extra_4 = 0  #extra_4 = 0\n                else:  #if number of 4x1 bricks needed is > m, we need extra_4 4x1 bricks\n                    extra_4 = (h//2) - 1 - m  #extra_4 = (h//2) - 1 - m\n        else:  #if h is odd, we need to use 2x1 bricks\n            if h == 3:  #if h == 3, we need one 2x1 brick if n is odd\n                if n % 2 == 0:  #if n is even, we need one 2x1 brick\n                    print(1, 0)  #print(1, 0)\n                else:  #if n is odd, no 2x1 bricks needed\n                    print(0, 0)  #print(0, 0)\n            else:  #if h > 3, we need to use 2x1 bricks\n                if n % 2 == 0:  #if n is even, we need one 2x1 brick\n                    extra_2 = 1  #extra_2 = 1\n                else:  #if n is odd, no 2x1 bricks needed\n                    extra_2 = 0  #extra_2 = 0\n                if (h//2) - 1 <= m:  #if number of 4x1 bricks needed is <= m, we can use m 4x1 bricks\n                    extra_4 = 0  #extra_4 = 0\n                else:  #if number of 4x1 bricks needed is > m, we need extra_4 4x1 bricks\n                    extra_4 = (h//2) - 1 - m  #extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)  #print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811519,
  "object": "edit"
}
2022-04-13 00:59:01.631538 fix syntax errors 3 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible. (extra bricks have size\n    2x1)\n    '''\n    h, n, m = map(int, input().split())\n    # h_n_m = input().split()\n    # h_n_m = [int(x) for x in h_n_m]\n    # h = h_n_m[0]\n    # n = h_n_m[1]\n    # m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Given height of the pyramid, number of bricks of size 2x1 and number of\n    # bricks of size 4x1, return the number of bricks needed to complete the\n    # pyramid using as few extra bricks as possible. (extra bricks have size\n    # 2x1)\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible. (extra bricks have size\n    2x1)\n    '''\n    h_n_m = input().split()  #h_n_m = [h, n, m]\n    h = int(h_n_m[0])\n    n = int(h_n_m[1])\n    m = int(h_n_m[2])\n    if h == 1:  #if h == 1, no bricks needed\n        print(0, 0) #print(0, 0)\n    elif h > 1:  #if h > 1, bricks needed\n        if h % 2 == 0:  #if h is even, we need to use 4x1 bricks\n            if h == 2:  #if h == 2, we need one 2x1 brick if n is odd\n                if n % 2 == 0:\n                    print(0, 0)  #if n is even, no bricks needed\n                else:  #if n is odd, we need one 2x1 brick\n                    print(1, 0)  #print(1, 0)\n            else:  #if h > 2, we need to use 4x1 bricks\n                if n % 2 == 0:  #if n is even, no 2x1 bricks needed\n                    extra_2 = 0  #extra_2 = 0\n                else:  #if n is odd, we need one 2x1 brick\n                    extra_2 = 1  #extra_2 = 1\n                if (h//2) - 1 <= m:  #if number of 4x1 bricks needed is <= m, we can use m 4x1 bricks\n                    extra_4 = 0  #extra_4 = 0\n                else:  #if number of 4x1 bricks needed is > m, we need extra_4 4x1 bricks\n                    extra_4 = (h//2) - 1 - m  #extra_4 = (h//2) - 1 - m\n        else:  #if h is odd, we need to use 2x1 bricks\n            if h == 3:  #if h == 3, we need one 2x1 brick if n is odd\n                if n % 2 == 0:  #if n is even, we need one 2x1 brick\n                    print(1, 0)  #print(1, 0)\n                else:  #if n is odd, no 2x1 bricks needed\n                    print(0, 0)  #print(0, 0)\n            else:  #if h > 3, we need to use 2x1 bricks\n                if n % 2 == 0:  #if n is even, we need one 2x1 brick\n                    extra_2 = 1  #extra_2 = 1\n                else:  #if n is odd, no 2x1 bricks needed\n                    extra_2 = 0  #extra_2 = 0\n                if (h//2) - 1 <= m:  #if number of 4x1 bricks needed is <= m, we can use m 4x1 bricks\n                    extra_4 = 0  #extra_4 = 0\n                else:  #if number of 4x1 bricks needed is > m, we need extra_4 4x1 bricks\n                    extra_4 = (h//2) - 1 - m  #extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)  #print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:59:13.684657 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h % 2 == 0:\n        if h == 2:\n            if n % 2 == 0:\n                print(0, 0)\n            else:\n                print(1, 0)\n        else:\n            if n % 2 == 0:\n                extra_2 = 0\n            else:\n                extra_2 = 1\n            if (h//2) - 1 <= m:\n                extra_4 = 0\n            else:\n                extra_4 = (h//2) - 1 - m\n    else:\n        if h == 3:\n            if n % 2 == 0:\n                print(1, 0)\n            else:\n                print(0, 0)\n        else:\n            if n % 2 == 0:\n                extra_2 = 1\n            else:\n                extra_2 = 0\n            if (h//2) - 1 <= m:\n                extra_4 = 0\n            else:\n                extra_4 = (h//2) - 1 - m\n    print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = sys.stdin.readline().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0, end=' ')\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0, end=' ')\n                else:\n                    print(1, 0, end=' ')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0, end=' ')\n                else:\n                    print(0, 0, end=' ')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4, end=' ')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h, n, m = h_n_m[0], h_n_m[1], h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811541,
  "object": "edit"
}
2022-04-13 00:59:13.685038 fix syntax errors 3 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h % 2 == 0:\n        if h == 2:\n            if n % 2 == 0:\n                print(0, 0)\n            else:\n                print(1, 0)\n        else:\n            if n % 2 == 0:\n                extra_2 = 0\n            else:\n                extra_2 = 1\n            if (h//2) - 1 <= m:\n                extra_4 = 0\n            else:\n                extra_4 = (h//2) - 1 - m\n    else:\n        if h == 3:\n            if n % 2 == 0:\n                print(1, 0)\n            else:\n                print(0, 0)\n        else:\n            if n % 2 == 0:\n                extra_2 = 1\n            else:\n                extra_2 = 0\n            if (h//2) - 1 <= m:\n                extra_4 = 0\n            else:\n                extra_4 = (h//2) - 1 - m\n    print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = sys.stdin.readline().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0, end=' ')\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0, end=' ')\n                else:\n                    print(1, 0, end=' ')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0, end=' ')\n                else:\n                    print(0, 0, end=' ')\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4, end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h, n, m = h_n_m[0], h_n_m[1], h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:59:30.858355 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h_, n_, m_ = h_n_m[0], h_n_m[1], h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h_ == 1:\n        print(0, 0)\n    elif h_ > 1:\n        if h_ % 2 == 0:\n            if h_ == 2:\n                if n_ % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n_ % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h_//2) - 1 <= m_:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h_//2) - 1 - m_\n        else:\n            if h_ == 3:\n                if n_ % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n_ % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h_//2) - 1 <= m_:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h_//2) - 1 - m_\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m or m == 0:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m or m == 0:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    # h_n_m = input().split()\n    # h_n_m = [int(x) for x in h_n_m]\n    # h = h_n_m[0]\n    # n = h_n_m[1]\n    # m = h_n_m[2]\n    # extra_2 = 0\n    # extra_4 = 0\n    # # print(h, n, m)\n    # if h == 1:\n    #     print(0, 0)\n    # elif h > 1:\n    #     if h % 2 == 0:\n    #         if h == 2:\n    #             if n % 2 == 0:\n    #                 print(0, 0)\n    #             else:\n    #                 print(1, 0)\n    #         else:\n    #             if n % 2 == 0:\n    #                 extra_2 = 0\n    #             else:\n    #                 extra_2 = 1\n    #             if (h//2) - 1 <= m:\n    #                 extra_4 = 0\n    #             else:\n    #                 extra_4 = (h//2) - 1 - m\n    #     else:\n    #         if h == 3:\n    #             if n % 2 == 0:\n    #                 print(1, 0)\n    #             else:\n    #                 print(0, 0)\n    #         else:\n    #             if n % 2 == 0:\n    #                 extra_2 = 1\n    #             else:\n    #                 extra_2 = 0\n    #             if (h//2) - 1 <= m:\n    #                 extra_4 = 0\n    #             else:\n    #                 extra_4 = (h//2) - 1 - m\n    #     print(extra_2, extra_4)\n    print(1)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649811553,
  "object": "edit"
}
2022-04-13 00:59:30.858611 fix syntax errors 3 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h_, n_, m_ = h_n_m[0], h_n_m[1], h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h_ == 1:\n        print(0, 0)\n    elif h_ > 1:\n        if h_ % 2 == 0:\n            if h_ == 2:\n                if n_ % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n_ % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h_//2) - 1 <= m_:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h_//2) - 1 - m_\n        else:\n            if h_ == 3:\n                if n_ % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n_ % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h_//2) - 1 <= m_:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h_//2) - 1 - m_\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m or m == 0:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m or m == 0:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    # h_n_m = input().split()\n    # h_n_m = [int(x) for x in h_n_m]\n    # h = h_n_m[0]\n    # n = h_n_m[1]\n    # m = h_n_m[2]\n    # extra_2 = 0\n    # extra_4 = 0\n    # # print(h, n, m)\n    # if h == 1:\n    #     print(0, 0)\n    # elif h > 1:\n    #     if h % 2 == 0:\n    #         if h == 2:\n    #             if n % 2 == 0:\n    #                 print(0, 0)\n    #             else:\n    #                 print(1, 0)\n    #         else:\n    #             if n % 2 == 0:\n    #                 extra_2 = 0\n    #             else:\n    #                 extra_2 = 1\n    #             if (h//2) - 1 <= m:\n    #                 extra_4 = 0\n    #             else:\n    #                 extra_4 = (h//2) - 1 - m\n    #     else:\n    #         if h == 3:\n    #             if n % 2 == 0:\n    #                 print(1, 0)\n    #             else:\n    #                 print(0, 0)\n    #         else:\n    #             if n % 2 == 0:\n    #                 extra_2 = 1\n    #             else:\n    #                 extra_2 = 0\n    #             if (h//2) - 1 <= m:\n    #                 extra_4 = 0\n    #             else:\n    #                 extra_4 = (h//2) - 1 - m\n    #     print(extra_2, extra_4)\n    print(1)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:59:30.858673 size on output set 9
