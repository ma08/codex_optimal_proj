["import sys\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Since the first line is the number of test cases,\n# we're going to iterate through the rest of the lines.\nfor i in range(1, len(lines)):\n    # Get the number of candy wrappers.\n    n = int(lines[i])\n\n    # We can use the fact that n is odd to\n    # find the smallest x.\n    if n % 2 == 1:\n        print(int(n/2) + 1)\n    else:\n        # If n is even, we need to find the\n        # smallest power of 2 that is greater than n and then subtract 1 from it.\n        # This is the smallest x.\n        print(2**(len(bin(n)) - 3) - 1)\n", "\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s = 0\n    j = 1\n    while s < n:\n        s += j\n        j *= 2\n    print(n//(j//2))\n", "\nimport sys\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Since the first line is the number of test cases,\n# we're going to iterate through the rest of the lines\nfor i in range(1, len(lines)):\n    # Get the number of candies\n    n = int(lines[i])\n\n    # We can use the fact that n is odd to\n    # find the smallest x\n    if n % 2 == 1:\n        print(int(n/2) + 1)\n    else:\n        # If n is even, we need to find the\n        # smallest power of 2 that is greater than n\n        # and then subtract 1 from it\n        # This is the smallest x\n        print(2**(len(bin(n)) - 3) - 1)\n", "\nprint(\"hello world\")\n", "#!/usr/bin/env python\n\nimport sys\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Since the first line is the number of test cases,\n# we're going to iterate through the rest of the lines\nfor i in range(1, len(lines)):\n    # Get the number of candies\n    n = int(lines[i])\n\n    # We can use the fact that n is odd to\n    # find the smallest x\n    if n % 2 == 1:\n        print(int(n/2) + 1)\n    else:\n        # If n is even, we need to find the\n        # smallest power of 2 that is greater than n\n        # and then subtract 1 from it\n        # This is the smallest x\n        print(2**(len(bin(n)) - 3) - 1)\n", "\nimport sys\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Since the first line is the number of test cases,\n# we're going to iterate through the rest of the lines\nfor i in range(1, len(lines)):\n    # Get the number of candies\n    n = int(lines[i])\n\n    # We can use the fact that n is odd to\n    # find the smallest x\n    if n % 2 == 1:\n        print(int(n / 2) + 1)\n    else:\n        # If n is even, we need to find the\n        # smallest power of 2 that is greater than n\n        # and then subtract 1 from it\n        # This is the smallest x\n        print(2 ** (len(bin(n)) - 3) - 1)\n", "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s = 0\n    j = 1\n    while s < n:\n        s += j\n        j *= 2\n    print(n//(j//2))\n", "import os\n\nprint(\"hello world\")\n", "\n#https://www.hackerrank.com/challenges/chocolate-feast/problem\nimport sys\n\n# Read lines from stdin \nlines = [line.strip() for line in sys.stdin]\n\n# Since first line is the number of test cases,\n# we're going to iterate through the rest of the lines\nfor i in range(1, len(lines)):\n    # Get the number of candy wrappers\n    n = int(lines[i])\n\n    # We can use the fact that n is odd to\n    # find the smallest x\n    if n % 2 == 1:\n        print(int(n/2) + 1)\n    else:\n        # If n is even, we need to find the\n        # smallest power of 2 that is greater than n\n        # and then subtract 1 from it\n        # This is the smallest x\n        print(2**(len(bin(n)) - 3) - 1)\n", "\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s = 0\n    j = 1\n    while s < n:\n        s += j\n        j *= 2\n    print(n // (j // 2))\n", "\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s = 0\n    j = 1\n    while s < n:\n        s += j\n        j *= 2\n    print(n//(j//2)) \n", "\nimport sys\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Since the first line is the number of test cases,\n# we're going to iterate through the rest of the lines.\nfor i in range(1, len(lines)):\n    # Get the number of elements.\n    n = int(lines[i])\n\n    # \n    print(int(n/2) + 1)\n    \n", "\n\nimport sys\n\n# Read lines from stdin.\nlines = [line.strip() for line in sys.stdin]  # noqa: E501\n\n# Since the first line is the number of test cases,\n# we're going to iterate through the rest of the lines.\nfor i in range(1, len(lines)):\n    # Get the number of candy wrappers.\n    n = int(lines[i])\n\n    # We can use the fact that n is odd to\n    # find the smallest x.\n    if n % 2 == 1:\n        print(int(n/2) + 1)  # noqa: E501\n    else:\n        # If n is even, we need to find the\n        # smallest power of 2 that is greater than n and then subtract 1 from it.\n        # This is the smallest x.\n        print(2**(len(bin(n)) - 3) - 1)  # noqa: E501\n", "\nimport sys\n\n# Read lines from stdin \nlines = [line.strip() for line in sys.stdin]\n\n# Since first line is the number of test cases,\n# we're going to iterate through the rest of the lines\nfor i in range(1, len(lines)):\n    # Get the number of candy wrappers\n    n = int(lines[i])\n\n    # We can use the fact that n is odd to\n    # find the smallest x\n    if n % 2 == 1:\n        print(int(n/2) + 1)\n    else:\n        # If n is even, we need to find the\n        # smallest power of 2 that is greater than n\n        # and then subtract 1 from it\n        # This is the smallest x\n        print(2**(len(bin(n)) - 3) - 1)\n"]