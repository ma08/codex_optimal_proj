2022-04-13 08:13:54.140372 num operations 2
2022-04-13 08:13:54.140382 size on input set 1
2022-04-13 08:14:01.708698 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "# This is the solution for Greedy > MinAbsSum\n#\n# This is marked as PAINLESS difficulty\n\n\ndef solution(A):\n    A.sort()\n    n = len(A)\n    for i in range(n):\n        A[i] = abs(A[i])\n    A.sort()\n    i = 0\n    j = n - 1\n    while i <= j:\n        if A[i] == A[j]:\n            return 2 * A[i]\n        elif A[i] + A[j] < A[j] - A[i]:\n            i += 1\n        else:\n            j -= 1\n    return A[j] - A[i]\n\nif __name__ == '__main__':\n    print(solution([1, 5, 2, -2]))\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837634,
  "object": "edit"
}
2022-04-13 08:14:01.708943 fix spelling mistakes 3 ["\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "# This is the solution for Greedy > MinAbsSum\n#\n# This is marked as PAINLESS difficulty\n\n\ndef solution(A):\n    A.sort()\n    n = len(A)\n    for i in range(n):\n        A[i] = abs(A[i])\n    A.sort()\n    i = 0\n    j = n - 1\n    while i <= j:\n        if A[i] == A[j]:\n            return 2 * A[i]\n        elif A[i] + A[j] < A[j] - A[i]:\n            i += 1\n        else:\n            j -= 1\n    return A[j] - A[i]\n\nif __name__ == '__main__':\n    print(solution([1, 5, 2, -2]))\n", "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:14:01.708993 size on output set 3
2022-04-13 08:14:01.709004 size on input set 3
2022-04-13 08:14:05.541508 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split(' ')))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        lst = d[key]\n        for i in range(len(lst)-1):\n            min_dist = min(min_dist, lst[i+1]-lst[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = list(map(str, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n + 1\n    for key in d:\n        l = d[key]\n        for i in range(len(l) - 1):\n            min_dist = min(min_dist, l[i + 1] - l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837641,
  "object": "edit"
}
2022-04-13 08:14:05.541719 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split(' ')))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        lst = d[key]\n        for i in range(len(lst)-1):\n            min_dist = min(min_dist, lst[i+1]-lst[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = list(map(str, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n + 1\n    for key in d:\n        l = d[key]\n        for i in range(len(l) - 1):\n            min_dist = min(min_dist, l[i + 1] - l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:14:14.285613 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# This is the solution for Counting Elements > PermCheck\n#\n# This is marked as RESPECTABLE difficulty\n\n\ndef solution(A):\n    n = len(A)\n    count = [False] * (n + 1)\n    for i in range(n):\n        if A[i] > n:\n            return 0\n        if count[A[i]]:\n            return 0\n        count[A[i]] = True\n    return 1\n\nif __name__ == '__main__':\n    print(solution([4, 1, 3, 2]))\n"
    },
    {
      "index": 1,
      "text": "# This is the solution for Time Complexity > PermMissingElem\n# This is marked as RESPECTABLE difficulty\n\n\ndef solution(A):\n    n = len(A) + 1\n    return n * (n + 1) / 2 - sum(A)\n\nif __name__ == '__main__':\n    print(solution([2, 3, 1, 5]))\n"
    },
    {
      "index": 2,
      "text": "# This is the solution for Stacks and Queues > Fish\n#\n# This is marked as RESPECTABLE difficulty\n\n\ndef solution(A, B):\n    count = 0\n    stack = []\n    for i in range(len(A)):\n        if B[i] == 1:\n            stack.append(A[i])\n        else:\n            while len(stack) > 0:\n                if stack[-1] > A[i]:\n                    break\n                else:\n                    stack.pop()\n            else:\n                count += 1\n    return count + len(stack)\n\nif __name__ == '__main__':\n    print(solution([4, 3, 2, 1, 5], [0, 1, 0, 0, 0]))\n"
    }
  ],
  "created": 1649837645,
  "object": "edit"
}
2022-04-13 08:14:14.285797 fix syntax errors 3 ["# This is the solution for Counting Elements > PermCheck\n#\n# This is marked as RESPECTABLE difficulty\n\n\ndef solution(A):\n    n = len(A)\n    count = [False] * (n + 1)\n    for i in range(n):\n        if A[i] > n:\n            return 0\n        if count[A[i]]:\n            return 0\n        count[A[i]] = True\n    return 1\n\nif __name__ == '__main__':\n    print(solution([4, 1, 3, 2]))\n", "# This is the solution for Time Complexity > PermMissingElem\n# This is marked as RESPECTABLE difficulty\n\n\ndef solution(A):\n    n = len(A) + 1\n    return n * (n + 1) / 2 - sum(A)\n\nif __name__ == '__main__':\n    print(solution([2, 3, 1, 5]))\n", "# This is the solution for Stacks and Queues > Fish\n#\n# This is marked as RESPECTABLE difficulty\n\n\ndef solution(A, B):\n    count = 0\n    stack = []\n    for i in range(len(A)):\n        if B[i] == 1:\n            stack.append(A[i])\n        else:\n            while len(stack) > 0:\n                if stack[-1] > A[i]:\n                    break\n                else:\n                    stack.pop()\n            else:\n                count += 1\n    return count + len(stack)\n\nif __name__ == '__main__':\n    print(solution([4, 3, 2, 1, 5], [0, 1, 0, 0, 0]))\n"]
2022-04-13 08:14:16.511786 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    # langs = list(map(int, input().split()))\n    langs = list(map(int, input().split()))\n    print(langs)\n    print(n)\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = 10**9\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837654,
  "object": "edit"
}
2022-04-13 08:14:16.511952 fix syntax errors 3 ["\ndef main():\n    n = int(input())\n    # langs = list(map(int, input().split()))\n    langs = list(map(int, input().split()))\n    print(langs)\n    print(n)\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = 10**9\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:14:16.511983 size on output set 9
2022-04-13 08:14:16.511992 num operations 2
2022-04-13 08:14:16.511997 size on input set 1
2022-04-13 08:14:18.834889 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649837656,
  "object": "edit"
}
2022-04-13 08:14:18.835070 fix spelling mistakes 3 ['\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:14:18.835097 size on output set 3
2022-04-13 08:14:18.835103 size on input set 3
2022-04-13 08:14:21.831812 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = len(languages)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649837658,
  "object": "edit"
}
2022-04-13 08:14:21.831983 fix syntax errors 3 ['\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = len(languages)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:14:23.519038 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1 \n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649837661,
  "object": "edit"
}
2022-04-13 08:14:23.519278 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1 \n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:14:26.727201 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = len(languages)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n - 1):\n            if languages[i] == languages[j + 1]:\n                awkwardness = min(awkwardness, j + 1 - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649837663,
  "object": "edit"
}
2022-04-13 08:14:26.727415 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = len(languages)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n - 1):\n            if languages[i] == languages[j + 1]:\n                awkwardness = min(awkwardness, j + 1 - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = float(\'inf\')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness if awkwardness > 0 else -1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:14:26.727443 size on output set 9
2022-04-13 08:14:26.727453 num operations 2
2022-04-13 08:14:26.727458 size on input set 1
2022-04-13 08:14:28.407230 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: solve this problem!\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicates\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 2,
      "text": "\n\n# TODO: solve this problem:\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    }
  ],
  "created": 1649837666,
  "object": "edit"
}
2022-04-13 08:14:28.407399 fix spelling mistakes 3 ['\n\n# TODO: solve this problem!\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n', '\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicates\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n', '\n\n# TODO: solve this problem:\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n']
2022-04-13 08:14:28.407426 size on output set 3
2022-04-13 08:14:28.407433 size on input set 3
2022-04-13 08:14:34.393788 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: solve this problem! \n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: solve this problem!\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance, end=\" \")\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef solution(n, languages):\n    # check for duplicate languages\n    for i in range(len(languages)):\n        for j in range(i + 1, len(languages)):\n            if languages[i] == languages[j]:\n                # find the distance between i and j\n                distance = abs(i - j)\n                return distance\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    languages = [int(x) for x in input().split()]\n    result = solution(n, languages)\n    print(result)\n"
    }
  ],
  "created": 1649837668,
  "object": "edit"
}
2022-04-13 08:14:34.393951 fix syntax errors 3 ['\n\n# TODO: solve this problem! \n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n', '\n\n# TODO: solve this problem!\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance, end=" ")\n', '\n\n\ndef solution(n, languages):\n    # check for duplicate languages\n    for i in range(len(languages)):\n        for j in range(i + 1, len(languages)):\n            if languages[i] == languages[j]:\n                # find the distance between i and j\n                distance = abs(i - j)\n                return distance\n\n\nif __name__ == "__main__":\n    n = int(input())\n    languages = [int(x) for x in input().split()]\n    result = solution(n, languages)\n    print(result)\n']
2022-04-13 08:14:39.091483 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [x for x in input().split()]\n\n# check for duplicates\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\nprint(languages)\n# check for duplicates\n\n# for i in range(len(languages)):\n#     for j in range(i + 1, len(languages)):\n#         if languages[i] == languages[j]:\n#             # find the distance between i and j\n#             distance = abs(i - j)\n#             print(distance)\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import Counter\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n\n# for i in range(len(languages)):\n#     for j in range(i + 1, len(languages)):\n#         if languages[i] == languages[j]:\n#             # find the distance between i and j\n#             distance = abs(i - j)\n#             print(distance)\n\nprint(Counter(languages))\n"
    }
  ],
  "created": 1649837674,
  "object": "edit"
}
2022-04-13 08:14:39.091685 fix syntax errors 3 ['\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [x for x in input().split()]\n\n# check for duplicates\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n', '\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\nprint(languages)\n# check for duplicates\n\n# for i in range(len(languages)):\n#     for j in range(i + 1, len(languages)):\n#         if languages[i] == languages[j]:\n#             # find the distance between i and j\n#             distance = abs(i - j)\n#             print(distance)\n', '\nfrom collections import Counter\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n\n# for i in range(len(languages)):\n#     for j in range(i + 1, len(languages)):\n#         if languages[i] == languages[j]:\n#             # find the distance between i and j\n#             distance = abs(i - j)\n#             print(distance)\n\nprint(Counter(languages))\n']
2022-04-13 08:14:40.903014 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    },
    {
      "index": 2,
      "text": "\n\n# TODO: solve this problem: (not working)\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n"
    }
  ],
  "created": 1649837679,
  "object": "edit"
}
2022-04-13 08:14:40.903262 fix syntax errors 3 ['\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n', '\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n', '\n\n# TODO: solve this problem: (not working)\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n']
2022-04-13 08:14:40.903306 size on output set 8
2022-04-13 08:14:40.903328 num operations 2
2022-04-13 08:14:40.903338 size on input set 1
2022-04-13 08:14:43.259388 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language. \n\nThe minimum distance is the minimum of these distances.\n\"\"\"\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    },
    {
      "index": 2,
      "text": "\n\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    }
  ],
  "created": 1649837680,
  "object": "edit"
}
2022-04-13 08:14:43.259559 fix spelling mistakes 3 ['\n\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n"""\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n', '\n\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language. \n\nThe minimum distance is the minimum of these distances.\n"""\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n', '\n\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n"""\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n']
2022-04-13 08:14:43.259664 size on output set 3
2022-04-13 08:14:43.259671 size on input set 3
2022-04-13 08:14:53.519577 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language. \n\nThe minimum distance is the minimum of these distances.\n\"\"\"\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef find_min_distance(languages, n):\n    \"\"\"\n    We need to find the minimum distance between two people who speak the same language.\n\n    This can be done by keeping track of the last positions of each language.\n\n    We keep track of the last position of each language, and the distance between the current position and the last position of each language. \n\n    The minimum distance is the minimum of these distances.\n    \"\"\"\n\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    return min_distance\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    languages = list(map(int, input().split()))\n    print(find_min_distance(languages, n))\n"
    },
    {
      "index": 2,
      "text": "\n\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    }
  ],
  "created": 1649837683,
  "object": "edit"
}
2022-04-13 08:14:53.519759 fix syntax errors 3 ['\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language. \n\nThe minimum distance is the minimum of these distances.\n"""\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n', '\n\ndef find_min_distance(languages, n):\n    """\n    We need to find the minimum distance between two people who speak the same language.\n\n    This can be done by keeping track of the last positions of each language.\n\n    We keep track of the last position of each language, and the distance between the current position and the last position of each language. \n\n    The minimum distance is the minimum of these distances.\n    """\n\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    return min_distance\n\n\nif __name__ == "__main__":\n    n = int(input())\n    languages = list(map(int, input().split()))\n    print(find_min_distance(languages, n))\n', '\n\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n"""\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n']
2022-04-13 08:15:01.416231 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\nprint(min_distance)\n"
    },
    {
      "index": 1,
      "text": "\n# coding=utf-8\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef find_min_distance(n, languages):\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    return min_distance\n\nif __name__ == '__main__':\n    n = int(input())\n    languages = list(map(int, input().split()))\n    print(find_min_distance(n, languages))\n"
    }
  ],
  "created": 1649837693,
  "object": "edit"
}
2022-04-13 08:15:01.416421 fix syntax errors 3 ['n = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\nprint(min_distance)\n', '\n# coding=utf-8\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n"""\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n', "\n\ndef find_min_distance(n, languages):\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    return min_distance\n\nif __name__ == '__main__':\n    n = int(input())\n    languages = list(map(int, input().split()))\n    print(find_min_distance(n, languages))\n"]
2022-04-13 08:15:09.264998 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n\n    languages = list(map(int, input().split()))\n\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\nn = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    },
    {
      "index": 2,
      "text": "\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n"
    }
  ],
  "created": 1649837701,
  "object": "edit"
}
2022-04-13 08:15:09.265301 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n\n    languages = list(map(int, input().split()))\n\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", '\n\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n"""\nn = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n', '\n"""\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n"""\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlast_position = {}\n\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\n\nprint(min_distance)\n']
2022-04-13 08:15:09.265339 size on output set 9
2022-04-13 08:15:09.265396 num operations 2
2022-04-13 08:15:09.265407 size on input set 1
2022-04-13 08:15:13.218845 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num in seen:\n            min_dist = min(min_dist, i - seen[num])\n        seen[num] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang]) \n        seen[lang] = i \n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n"
    }
  ],
  "created": 1649837709,
  "object": "edit"
}
2022-04-13 08:15:13.219018 fix spelling mistakes 3 ['\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num in seen:\n            min_dist = min(min_dist, i - seen[num])\n        seen[num] = i\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n', '\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang]) \n        seen[lang] = i \n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n', "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n"]
2022-04-13 08:15:13.219046 size on output set 3
2022-04-13 08:15:13.219052 size on input set 3
2022-04-13 08:15:16.568662 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang] - 1)\n        seen[lang] = i\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang] - 1)\n        seen[lang] = i\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]  # list of languages\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])  # we found a duplicate\n        seen.add(lang)\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n"
    }
  ],
  "created": 1649837713,
  "object": "edit"
}
2022-04-13 08:15:16.568891 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang] - 1)\n        seen[lang] = i\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang] - 1)\n        seen[lang] = i\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]  # list of languages\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])  # we found a duplicate\n        seen.add(lang)\n    return min_dist\n\nif __name__ == '__main__':\n    print(main())\n"]
2022-04-13 08:15:20.131890 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num not in seen:\n            seen[num] = i\n        else:\n            min_dist = min(min_dist, i - seen[num] + 1)\n    return min_dist if min_dist < n else -1\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num in seen.keys():\n            min_dist = min(min_dist, i - seen[num])\n        seen[num] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = dict()\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num in seen:\n            min_dist = min(min_dist, i - seen[num])\n        seen[num] = i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649837716,
  "object": "edit"
}
2022-04-13 08:15:20.132068 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num not in seen:\n            seen[num] = i\n        else:\n            min_dist = min(min_dist, i - seen[num] + 1)\n    return min_dist if min_dist < n else -1\n\nif __name__ == "__main__":\n    print(main())\n', '\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num in seen.keys():\n            min_dist = min(min_dist, i - seen[num])\n        seen[num] = i\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n', '\n\ndef main():\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    seen = dict()\n    min_dist = n\n    for i, num in enumerate(nums):\n        if num in seen:\n            min_dist = min(min_dist, i - seen[num])\n        seen[num] = i\n    print(min_dist)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 08:15:22.929067 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen: \n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == \"__main__\":\n    print(main())\n"
    }
  ],
  "created": 1649837720,
  "object": "edit"
}
2022-04-13 08:15:22.929273 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n', '\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = set()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen: \n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n', '\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    return min_dist\n\nif __name__ == "__main__":\n    print(main())\n']
2022-04-13 08:15:22.929302 size on output set 7
2022-04-13 08:15:22.929314 num operations 2
2022-04-13 08:15:22.929319 size on input set 1
2022-04-13 08:15:24.738740 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837722,
  "object": "edit"
}
2022-04-13 08:15:24.738913 fix spelling mistakes 3 ["import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:24.738947 size on output set 2
2022-04-13 08:15:24.738954 size on input set 2
2022-04-13 08:15:26.917119 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i, language in enumerate(languages):\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837724,
  "object": "edit"
}
2022-04-13 08:15:26.917449 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i, language in enumerate(languages):\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:29.080666 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = list(map(int, sys.stdin.readline().split()))\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in xrange(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = list(map(int, sys.stdin.readline().split()))\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837726,
  "object": "edit"
}
2022-04-13 08:15:29.080955 fix syntax errors 3 ["import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = list(map(int, sys.stdin.readline().split()))\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = map(int, sys.stdin.readline().split())\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in xrange(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = list(map(int, sys.stdin.readline().split()))\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:29.080989 size on output set 4
2022-04-13 08:15:29.080999 num operations 2
2022-04-13 08:15:29.081004 size on input set 1
2022-04-13 08:15:40.121126 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(language) for language in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837729,
  "object": "edit"
}
2022-04-13 08:15:40.122379 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(language) for language in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:40.122432 size on output set 3
2022-04-13 08:15:40.122440 size on input set 3
2022-04-13 08:15:41.646745 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837740,
  "object": "edit"
}
2022-04-13 08:15:41.646933 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(lang_pos) for lang_pos in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:45.699764 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min(len(language) for language in seen.values())\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(language) for language in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(language) for language in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837741,
  "object": "edit"
}
2022-04-13 08:15:45.700015 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min(len(language) for language in seen.values())\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(language) for language in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(language) for language in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for language_pos in seen.values():\n            if len(language_pos) == 1:\n                continue\n            language_pos.sort()\n            for i in range(1, len(language_pos)):\n                distance = language_pos[i] - language_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:49.070544 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for j in range(1, len(lang_pos)):\n                distance = lang_pos[j] - lang_pos[j-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837745,
  "object": "edit"
}
2022-04-13 08:15:49.070744 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for j in range(1, len(lang_pos)):\n                distance = lang_pos[j] - lang_pos[j-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    languages = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, language in enumerate(languages):\n        if language not in seen:\n            seen[language] = [i]\n        else:\n            seen[language].append(i)\n    min_lang_len = min([len(lang) for lang in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for lang_pos in seen.values():\n            if len(lang_pos) == 1:\n                continue\n            lang_pos.sort()\n            for i in range(1, len(lang_pos)):\n                distance = lang_pos[i] - lang_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:49.070787 size on output set 6
2022-04-13 08:15:49.070799 num operations 2
2022-04-13 08:15:49.070804 size on input set 1
2022-04-13 08:15:51.947930 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837749,
  "object": "edit"
}
2022-04-13 08:15:51.948207 fix spelling mistakes 3 ["\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:15:51.948303 size on output set 1
2022-04-13 08:15:51.948311 size on input set 1
2022-04-13 08:16:02.327305 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position,\n                                second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\n\nif __name__ == '__main__':\n    main()\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrences of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrences of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649837751,
  "object": "edit"
}
2022-04-13 08:16:02.327540 fix syntax errors 3 ["\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position,\n                                second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\n\nif __name__ == '__main__':\n    main()\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrences of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrences of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 08:16:02.327725 size on output set 3
