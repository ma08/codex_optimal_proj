["\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    P, N = map(int, input().split())\n    parts = []\n    for i in range(N):\n        part = input().strip()\n        if part in parts:\n            print(i + 1)\n            return\n\n        parts.append(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())  # P: number of parts, N: number of days\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:  # if the part is not in the set, add the part\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = []\n    for i in range(m):\n        parts.append(input())\n        if len(set(parts)) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P + 1:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())  # P: number of parts, N: number of days\n    parts = set()\n    day = 0\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:  # if the part is not in the set, add the part\n            parts.add(part)\n            if len(parts) == P:\n                day = i + 1\n                print(day)\n            return\n\n    if day == 0:\n        print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main(msg):\n    print(msg)\n\nif __name__ == \"__main__\":\n    main(\"Hello People\")\n", "\n\n\n\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\") \n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport math\nprint(math.pi)\n", "\nimport sys\n\ndef main():\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split(' '))\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())  # P: number of parts, N: number of days \n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:  # if the part is not in the set, add the part \n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\ndef main(args):\n    return 0\n", "#\n\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nclass File:\n    def __init__(self, name):\n        self.name = name\n\n    def show(self):\n        print(self.name)\n\n    def rename(self, newName):\n        self.name = newName\n", "\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    N, P = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(min(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\n\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_pairs, num_days = map(int, sys.stdin.readline().strip().split())\n    pairs = {}\n    for _ in range(num_pairs):\n        pair = sys.stdin.readline().strip()\n        if pair in pairs:\n            pairs[pair] += 1\n        else:\n            pairs[pair] = 1\n    if len(pairs) == num_pairs:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days - 1)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    # P, N = [int(i) for i in input().split()]\n    # parts = {}\n    # i = 1\n    # for line in sys.stdin.readlines():\n    #     line = line.strip()\n    #     if line in parts:\n    #         parts[line] = min(parts[line], i)\n    #     else:\n    #         parts[line] = i\n    #     i += 1\n    # if len(parts) == P:\n    #     print(max(parts.values()))\n    # else:\n    #     print(\"paradox avoided\")\n    print(\"Hello World\")\n\nmain()\n", "\n\ndef main():\n    print(\"Hello world\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport sys\nimport os\nimport time\nimport shutil\nimport hashlib\nimport argparse\nimport logging\nimport subprocess\nimport json\nimport re\nimport string\nimport random\nimport getpass\nimport platform\nimport requests\nimport zipfile\nimport tarfile\nimport tempfile\nimport ctypes\nimport threading\nimport multiprocessing\nimport traceback\nimport signal\nimport queue\nimport urllib.request\nimport urllib.parse\nimport urllib.error\nimport http.cookiejar\nimport socket\nimport ssl\nimport glob\nimport fnmatch\nimport shutil\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\nimport platform\nimport fcntl\nimport uuid\nimport errno\nimport ipaddress\nimport getpass\nimport datetime\nimport shlex\nimport logging\nimport tempfile\nimport textwrap\nimport argparse\nimport base64\nimport binascii\nimport collections\nimport functools\nimport json\nimport math\nimport operator\nimport os\nimport random\nimport re\nimport socket\nimport ssl\nimport sys\nimport threading\nimport time\nimport traceback\nimport urllib.parse\nimport zlib\nimport urllib.request\nimport urllib.error\nimport http.cookiejar\nimport shutil\nimport zipfile\nimport tarfile\nimport ctypes\nimport functools\nimport queue\nimport getpass\nimport platform\nimport subprocess\nimport multiprocessing\nimport argparse\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\nimport platform\nimport fcntl\nimport uuid\nimport errno\nimport ipaddress\nimport getpass\nimport datetime\nimport shlex\nimport logging\nimport tempfile\nimport textwrap\nimport argparse\nimport base64\nimport binascii\nimport collections\nimport functools\nimport json\nimport math\nimport operator\nimport os\nimport random\nimport re\nimport socket\nimport ssl\nimport sys\nimport threading\nimport time\nimport traceback\nimport urllib.parse\nimport zlib\nimport urllib.request\nimport urllib.error\nimport http.cookiejar\nimport shutil\nimport zipfile\nimport tarfile\nimport ctypes\nimport functools\nimport queue\nimport getpass\nimport platform\nimport subprocess\nimport multiprocessing\nimport argparse\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\nimport platform\nimport fcntl\nimport uuid\nimport errno\nimport ipaddress\nimport getpass\nimport datetime\nimport shlex\nimport logging\nimport tempfile\nimport textwrap\nimport argparse\nimport base64\nimport binascii\nimport collections\nimport functools\nimport json\nimport math\nimport operator\nimport os\nimport random\nimport re\nimport socket\nimport ssl\nimport sys\nimport threading\nimport time\nimport traceback\nimport urllib.parse\nimport zlib\nimport urllib.request\nimport urllib.error\nimport http.cookiejar\nimport shutil\nimport zipfile\nimport tarfile\nimport ctypes\nimport functools\nimport queue\nimport getpass\nimport platform\nimport subprocess\nimport multiprocessing\nimport argparse\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\nimport platform\nimport fcntl\nimport uuid\nimport errno\nimport ipaddress\nimport getpass\nimport datetime\nimport shlex\nimport logging\nimport tempfile\nimport textwrap\nimport argparse\nimport base64\nimport binascii\nimport collections\nimport functools\nimport json\nimport math\nimport operator\nimport os\nimport random\nimport re\nimport socket\nimport ssl\nimport sys\nimport threading\nimport time\nimport traceback\nimport urllib.parse\nimport zlib\nimport urllib.request\nimport urllib.error\nimport http.cookiejar\nimport shutil\nimport zipfile\nimport tarfile\nimport ctypes\nimport functools\nimport queue\nimport getpass\nimport platform\nimport subprocess\nimport multiprocessing\nimport argparse\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\nimport platform\nimport fcntl\nimport uuid\nimport errno\nimport ipaddress\nimport getpass\nimport datetime\nimport shlex\nimport logging\nimport tempfile\nimport textwrap\nimport argparse\nimport base64\nimport binascii\nimport collections\nimport functools\nimport json\nimport math\nimport operator\nimport os\nimport random\nimport re\nimport socket\nimport ssl\nimport sys\nimport threading\nimport time\nimport traceback\nimport urllib.parse\nimport zlib\nimport urllib.request\nimport urllib.error\nimport http.cookiejar\nimport shutil\nimport zipfile\nimport tarfile\nimport ctypes\nimport functools\nimport queue\nimport getpass\nimport platform\nimport subprocess\nimport multiprocessing\nimport argparse\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\nimport platform\nimport fcntl\nimport uuid\nimport errno\nimport ipaddress\nimport getpass\nimport datetime\nimport shlex\nimport logging\nimport tempfile\nimport textwrap\nimport argparse\nimport base64\nimport binascii\nimport collections\nimport functools\nimport json\nimport math\nimport operator\nimport os\nimport random\nimport re\nimport socket\nimport ssl\nimport sys\nimport threading\nimport time\nimport traceback\nimport urllib.parse\nimport zlib\nimport urllib.request\nimport urllib.error\nimport http.cookiejar\nimport shutil\nimport zipfile\nimport tarfile\nimport ctypes\nimport functools\nimport queue\nimport getpass\nimport platform\nimport subprocess\nimport multiprocessing\nimport argparse\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\nimport platform\nimport fcntl\nimport uuid\nimport errno\nimport ipaddress\nimport getpass\nimport datetime\nimport shlex\nimport logging\nimport tempfile\nimport textwrap\nimport argparse\nimport base64\nimport binascii\nimport collections\nimport functools\nimport json\nimport math\nimport operator\nimport os\nimport random\nimport re\nimport socket\nimport ssl\nimport sys\nimport threading\nimport time\nimport traceback\nimport urllib.parse\nimport zlib\nimport urllib.request\nimport urllib.error\nimport http.cookiejar\nimport shutil\nimport zipfile\nimport tarfile\nimport ctypes\nimport functools\nimport queue\nimport getpass\nimport platform\nimport subprocess\nimport multiprocessing\nimport argparse\nimport hashlib\nimport time\nimport os\nimport re\nimport sys\nimport subprocess\nimport socket\nimport struct\n", "\ndef main():\n    parts, days = map(int, input().split())  # type: int, int\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')  # type: str\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)  # type: int\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, K = map(int, sys.stdin.readline().split())\n    A = list(map(int, sys.stdin.readline().split()))\n    ans = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if A[i] + A[j] == K:\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, P = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(min(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    people, days = map(int, input().split())\n    people_names = []\n    for _ in range(people):\n        people_names.append(input())\n    people_names_set = set(people_names)\n    if len(people_names_set) < people:\n        print('paradox avoided')\n        return\n    for i, name in enumerate(people_names):\n        if name in people_names_set:\n            people_names_set.remove(name)\n            if not people_names_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport file\nimport sys\n\ndef main():\n    num_pairs, num_days = map(int, sys.stdin.readline().strip().split())\n    pairs = {}\n    for _ in range(num_pairs):\n        pair = sys.stdin.readline().strip()\n        if pair in pairs:\n            pairs[pair] += 1\n        else:\n            pairs[pair] = 1\n    if len(pairs) == num_pairs:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n", "#\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    parts, days = map(int, input().split(' '))\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P: # this is a great way to check for duplicates\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")    \n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    people, days = map(int, input().split())\n    people_names = []\n    for _ in range(people):\n        people_names.append(input())\n    people_names_set = set(people_names)\n    if len(people_names_set) < people:\n        print('Paradox avoided')\n        return\n    for i, name in enumerate(people_names):\n        if name in people_names_set:\n            people_names_set.remove(name)\n            if not people_names_set:\n                print(i + 1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/python\nimport sys, os, time\nfilename = sys.argv[1]\nwhile True:\n    if os.path.exists(filename):\n        print \"File exists: %s\" % filename\n        break\n    else:\n        print \"File not found\"\n        time.sleep(5)\n", "\n\n\ndef main():\n    people, days = map(int, input().split())\n    people_names = []\n    for _ in range(people):\n        people_names.append(input())\n    people_names_set = set(people_names)\n    if len(people_names_set) < people:\n        print('paradox avoided')\n        return\n    for i in range(days):\n        if people_names_set:\n            if people_names[i] in people_names_set:\n                people_names_set.remove(people_names[i])\n                if not people_names_set:\n                    print(i+1)\n                    return\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    pass\n\nmain()\n"]