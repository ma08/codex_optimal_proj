["\n\n# Accepted after 2nd attempt (wrong answer on the first attempt).\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for c in row:\n            if c == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += c\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            c = grid[row][col]\n            if c == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += c\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "R, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\n# \nimport sys\n\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n    words = [input() for _ in range(N)]\n\n    for word in words:\n        if len(word) > 10:\n            print(word[0] + str(len(word) - 2) + word[-1])\n        else:\n            print(word)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'zz'\n    for row in range(R):\n        for col in range(C):\n            if crossword[row][col] != '#':\n                if row + 1 < R:\n                    if crossword[row + 1][col] != '#':\n                        word = crossword[row][col] + crossword[row + 1][col]\n                        smallest_word = min(smallest_word, word)\n                if col + 1 < C:\n                    if crossword[row][col + 1] != '#':\n                        word = crossword[row][col] + crossword[row][col + 1]\n                        smallest_word = min(smallest_word, word)\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "\nR, C = map(int, input().split())\n\ncrossword = [input() for _ in range(R)]\n\nlex_max = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_max = max(lex_max, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_max = max(lex_max, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_max)\n", "\n#\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~' \n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input().strip() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N = int(input())\n    words = [input() for _ in range(N)]\n\n    for word in words:\n        if len(word) > 10:\n            print(word[0] + str(len(word) - 2) + word[-1])\n        else:\n            print(word)\n\n\nif __name__ == '__main__':\n    main()\n", "# comment\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    rows, cols = map(int, input().split())\n    matrix = []\n    for i in range(rows):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != '#':\n                if j < cols - 1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < cols and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < rows - 1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i + 1\n                    while k < rows and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\ndef main():\n    r, c = sys.stdin.readline().split()\n    r = int(r)\n    c = int(c)\n    crossword = []\n    for i in range(r):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for row in range(r):\n        for col in range(c):\n            if crossword[row][col] != '#':\n                if row + 1 < r:\n                    if crossword[row + 1][col] != '#':\n                        word = crossword[row][col] + crossword[row + 1][col]\n                        if word < smallest_word:\n                            smallest_word = word\n                if col + 1 < c:\n                    if crossword[row][col + 1] != '#':\n                        word = crossword[row][col] + crossword[row][col + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef main():\n    r, c = sys.stdin.readline().split()\n    r = int(r)\n    c = int(c)\n    crossword = []\n    for i in range(r):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(r):\n        for c in range(c):\n            if crossword[r][c] != '#':\n                if r + 1 < r:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < c:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    rows, cols = map(int, input().split())\n    matrix = []\n    for i in range(rows):\n        matrix.append(input())\n    # print(matrix)\n    words = []\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != '#':\n                if j < cols - 1 and matrix[i][j + 1] != '#':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < cols and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < rows - 1 and matrix[i + 1][j] != '#':\n                    word = matrix[i][j]\n                    k = i + 1\n                    while k < rows and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\n\nif __name__ == \"__main__\":\n    main()\n", "#Python 3.7.3\n\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n", "# spelling mistakes\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\nimport sys\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for _ in range(n)]\n    words = set()\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.add(word)\n                word = ''\n        if len(word) > 1:\n            words.add(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.add(word)\n                word = ''\n        if len(word) > 1:\n            words.add(word)\n    print(min(words))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col - 1 and matrix[i][j + 1] != '#':\n                    word = matrix[i][j]\n                    k = j + 1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row - 1 and matrix[i + 1][j] != '#':\n                    word = matrix[i][j]\n                    k = i + 1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\n\nif __name__ == \"__main__\":\n    main()\n", "R, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\n\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C) :\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n", "\nimport sys\n\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip().split()\n        crossword.append(row)\n\n    smallest_word = 'zz'\n    for row in range(R):\n        for col in range(C):\n            if crossword[row][col] != '#':\n                if row + 1 < R:\n                    if crossword[row + 1][col] != '#':\n                        word = crossword[row][col] + crossword[row + 1][col]\n                        smallest_word = min(smallest_word, word)\n                if col + 1 < C:\n                    if crossword[row][col + 1] != '#':\n                        word = crossword[row][col] + crossword[row][col + 1]\n                        smallest_word = min(smallest_word, word)\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N = int(input())\n    words = [input() for _ in range(N)]\n\n    for word in words:\n        if len(word) > 10:\n            print(word[0] + str(len(word) - 2) + word[-1], end=\"\")\n        else:\n            print(word, end=\"\")\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())  # pylint: disable=invalid-name\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1  # pylint: disable=invalid-name\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, raw_input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(raw_input())\n    # print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n", "R, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C) :\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C) :\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n", "\n\ndef main():\n    n, m = [int(i) for i in raw_input().split()]\n    puzzle = [input() for _ in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crossword = list()\n    for i in range(R):\n        crossword.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crossword[i][j] != '#':\n                word += crossword[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0], end='')\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_max = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_max = max(lex_max, crossword[i][j:j + 2], key=lambda x: (x[0], x[1]))\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_max = max(lex_max, crossword[i][j] + crossword[i + 1][j], key=lambda x: (x[0], x[1]))\n\nprint(lex_max)\n", "\n# Accepted after 2nd attempt (wrong answer on the first attempt)\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "def f(x):\n    if x == 0:\n        return 'INSOMNIA'\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # noqa\n    n = 1\n    while digits:\n        for c in str(x * n):\n            digits.remove(int(c))\n        n += 1\n    return str(x * (n - 1))\n", "\ndef f(x):\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 0\n    while digits:\n        for c in str(x * n):\n            if int(c) in digits:\n                digits.remove(int(c))\n        n += 1\n        if n > 100:\n            return 'INSOMNIA'\n    return str(x * n)\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n\n    if len(word) > 1:\n        words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "R, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\n\ndef check_horizontal(crossword, R, C) :\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C) :\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C) :\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C) :\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n", "#!/usr/bin/env python3\n\n\nimport sys\n\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crosswords = list()\n    for i in range(R):\n        crosswords.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crosswords[i][j] != '#':\n                word += crosswords[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crosswords[i][j] != '#':\n                word += crosswords[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for _ in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words = sorted(words)\n    print(words[0] if words else '-')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    puzzle = [input() for _ in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    print(min(words))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef get_smallest_word(r, c, crossword):\n    smallest_word = 'z'\n\n    if r - 1 >= 0:\n        if crossword[r - 1][c] != '#':\n            word = crossword[r - 1][c] + crossword[r][c]\n            if word < smallest_word:\n                smallest_word = word\n    if r + 1 < len(crossword):\n        if crossword[r + 1][c] != '#':\n            word = crossword[r][c] + crossword[r + 1][c]\n            if word < smallest_word:\n                smallest_word = word\n    if c - 1 >= 0:\n        if crossword[r][c - 1] != '#':\n            word = crossword[r][c - 1] + crossword[r][c]\n            if word < smallest_word:\n                smallest_word = word\n    if c + 1 < len(crossword[0]):\n        if crossword[r][c + 1] != '#':\n            word = crossword[r][c] + crossword[r][c + 1]\n            if word < smallest_word:\n                smallest_word = word\n\n    return smallest_word\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'zz'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                word = get_smallest_word(r, c, crossword)\n                if word < smallest_word:\n                    smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    print(sys.stdin.readline().strip().split(' ')[1])\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    line = sys.stdin.readline().strip().split(' ')\n    R = int(line[0])\n    C = int(line[1])\n    crosswords = list()\n    for i in range(R):\n        crosswords.append(sys.stdin.readline().strip())\n    words = list()\n    for i in range(R):\n        word = ''\n        for j in range(C):\n            if crosswords[i][j] != '#':\n                word += crosswords[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    for j in range(C):\n        word = ''\n        for i in range(R):\n            if crosswords[i][j] != '#':\n                word += crosswords[i][j]\n            else:\n                if len(word) >= 2:\n                    words.append(word)\n                word = ''\n        if len(word) >= 2:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Accepted after 2nd attempt (wrong answer on the first attempt)\n\n\n# Read input\nR, C = [int(i) for i in input().split()]\ngrid = []\nfor i in range(R):\n    grid.append(list(input()))\n\n# Find all words\nwords = []\nfor r in range(R):\n    for c in range(C):\n        # Check horizontal\n        if c < C-1 and grid[r][c] != '#' and grid[r][c+1] != '#':\n            word = grid[r][c]\n            while c < C-1 and grid[r][c+1] != '#':\n                c += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n        # Check vertical\n        if r < R-1 and grid[r][c] != '#' and grid[r+1][c] != '#':\n            word = grid[r][c]\n            while r < R-1 and grid[r+1][c] != '#':\n                r += 1\n                word += grid[r][c]\n            if len(word) > 1:\n                words.append(word)\n\n# Print lexicographically smallest word\nprint(min(words))\n", "import sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0]) # first lexicographically\n\nif __name__ == '__main__':\n    main()\n", "\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_min = '~' \n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_min = min(lex_min, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_min = min(lex_min, crossword[i][j] + crossword[i + 1][j])\n\nprint(lex_min)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    print(matrix)\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(\"hello\")\n", "\n#spelling mistakes\nimport sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(a)]\n    word = []\n\n    # horizontal words\n    for row in grid:\n        word = \"\"\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = \"\"\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = \"\"\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = \"\"\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "\n# https://www.hackerrank.com/challenges/crossword-puzzle/problem\nimport sys\n\n\n\ndef main():\n    R, C = sys.stdin.readline().split()\n    R = int(R)\n    C = int(C)\n    crossword = []\n    for i in range(R):\n        row = sys.stdin.readline().strip()\n        crossword.append(row)\n\n    smallest_word = 'z'\n    for r in range(R):\n        for c in range(C):\n            if crossword[r][c] != '#':\n                if r + 1 < R:\n                    if crossword[r + 1][c] != '#':\n                        word = crossword[r][c] + crossword[r + 1][c]\n                        if word < smallest_word:\n                            smallest_word = word\n                if c + 1 < C:\n                    if crossword[r][c + 1] != '#':\n                        word = crossword[r][c] + crossword[r][c + 1]\n                        if word < smallest_word:\n                            smallest_word = word\n\n    print(smallest_word)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\n\ncrossword = []\nfor _ in range(R):\n    crossword.append(input())\n\nlex_max = '~'\n\nfor i in range(R):\n    for j in range(C):\n        if crossword[i][j] == '#':\n            continue\n        if j < C - 1 and crossword[i][j + 1] != '#':\n            lex_max = max(lex_max, crossword[i][j:j + 2])\n        if i < R - 1 and crossword[i + 1][j] != '#':\n            lex_max = max(lex_max, crossword[i][j] + crossword[i + 1][j])\n\n\n\n\nprint(lex_max)\n", "def f(x):\n    if x == 0:\n        return 'INSOMNIA'\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 1\n    while digits:\n        for c in str(x * n):\n            digits.remove(int(c))\n        n += 1\n    return str(x * (n - 1))\n", "#spelling mistakes\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline().strip() for _ in range(R)]\n    words = []\n\n    # horizontal words\n    for row in grid:\n        word = ''\n        for char in row:\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    # vertical words\n    for col in range(C):\n        word = ''\n        for row in range(R):\n            char = grid[row][col]\n            if char == '#':\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n            else:\n                word += char\n        if len(word) > 1:\n            words.append(word)\n\n    print(sorted(words)[0])\n\nif __name__ == '__main__':\n    main()\n", "# Python 3.7.2\n\nR, C = map(int, input().split())\ncrossword = []\nfor i in range(R):\n    crossword.append(list(input()))\n\ndef check_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return True\n    return False\n\ndef check_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return True\n    return False\n\ndef get_horizontal(crossword, R, C):\n    for r in range(R):\n        for c in range(C - 1):\n            if crossword[r][c].isalpha() and crossword[r][c + 1].isalpha():\n                return crossword[r][c] + crossword[r][c + 1]\n\ndef get_vertical(crossword, R, C):\n    for c in range(C):\n        for r in range(R - 1):\n            if crossword[r][c].isalpha() and crossword[r + 1][c].isalpha():\n                return crossword[r][c] + crossword[r + 1][c]\n\nif check_horizontal(crossword, R, C):\n    print(get_horizontal(crossword, R, C))\nelse:\n    print(get_vertical(crossword, R, C))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    row, col = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(input())\n    words = []\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j] != '#':\n                if j < col-1 and matrix[i][j+1] != '#':\n                    word = matrix[i][j]\n                    k = j+1\n                    while k < col and matrix[i][k] != '#':\n                        word += matrix[i][k]\n                        k += 1\n                    words.append(word)\n                if i < row-1 and matrix[i+1][j] != '#':\n                    word = matrix[i][j]\n                    k = i+1\n                    while k < row and matrix[k][j] != '#':\n                        word += matrix[k][j]\n                        k += 1\n                    words.append(word)\n    print(min(words))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    puzzle = [input() for i in range(n)]\n    words = []\n    for i in range(n):\n        word = ''\n        for j in range(m):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    for j in range(m):\n        word = ''\n        for i in range(n):\n            if puzzle[i][j].isalpha():\n                word += puzzle[i][j]\n            else:\n                if len(word) > 1:\n                    words.append(word)\n                word = ''\n        if len(word) > 1:\n            words.append(word)\n    words.sort()\n    print(words[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print('Hello World')\n"]