["\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    digits = []\n    while X > 0:\n        digits.append(X % 10)\n        X = math.floor(X / 10)\n    digits.reverse()\n    for j in range(len(digits) - 1):\n        if digits[j] > digits[j + 1]:\n            digits[j], digits[j + 1] = digits[j + 1], digits[j]\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(digits)):\n        for k in range(j + 1, len(digits)):\n            if digits[j] > digits[k]:\n                digits[j], digits[k] = digits[k], digits[j]\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] * 10 ** i\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# This is a comment\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = int(input())\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Get the input\nx = int(input())\n# Start with the largest number that can be formed using the digits of x\nn = 10 ** (len(str(x)) - 1)\n# Find the largest number that can be formed using the digits of x\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n# Find the next largest number using the same digits\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\n\nprint(0)\n", "\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\ns = input()\nif next_permutation(list(s)):\n    print(''.join(s))\nelse:\n    print(0)\n", "\nimport sys\nimport math\n\ndef main():\n    x = int(sys.stdin.readline())\n    digits = []\n    while x > 0:\n        digits.append(x % 10)\n        x = math.floor(x / 10)\n    digits.reverse()\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i + 1]:\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            break\n    else:\n        print(0)\n        return\n    for j in range(i):\n        for k in range(j + 1, len(digits)):\n            if digits[j] > digits[k]:\n                digits[j], digits[k] = digits[k], digits[j]\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] * 10 ** i\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    num = input()\n    num = [int(i) for i in num]\n    print(num)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# This is a comment\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = int(input())\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)] # list comprehension\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef nextPermutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = input()\n\n    # Convert to int array and sort\n    x_arr = [int(c) for c in str(x)]\n    x_arr.sort()\n\n    # Find next permutation\n\n    # Find next permutation\n    if nextPermutation(x_arr):\n        print(int(''.join(map(str, x_arr)))) # Convert back to int\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# This is a comment\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = raw_input()\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n    \"\"\"\n    Returns the next permutation of the input array.\n    \"\"\"\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    x = input()\n    if next_permutation(list(x)):\n        print(''.join(x))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#from __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line)\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n        digit_counts[digit] += 1\n\n    # find the first digit that is smaller than the digit to its right\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its right \n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(arr):\n    # Find non-decreasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = list(map(int, num))\n    if next_permutation(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef next_permutation(arr):\n    # Find non-decreasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = raw_input()\n    num = [int(i) for i in num]\n    if next_permutation(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef next_permutation(a): # \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n    n = len(a)\n    i = n - 1 # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043f\u0430\u0434\u0430\u043d\u0438\u044f\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1 # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e a[i-1]\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i:] = reversed(a[i:])\n\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef next_permutaion(a):\n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i:] = reversed(a[i:])\n\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutaion(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    X = int(sys.stdin.readline())\n    digits = []\n    while X > 0:\n        digits.append(X % 10)\n        X = math.floor(X / 10)\n    digits.reverse()\n    for index in range(len(digits) - 1):\n        if digits[index] > digits[index + 1]:\n            digits[index], digits[index + 1] = digits[index + 1], digits[index]\n            break\n    else:\n        print(0)\n        return\n    for j in range(index):\n        for k in range(j + 1, len(digits)): # noqa\n            if digits[j] > digits[k]: # noqa\n                digits[j], digits[k] = digits[k], digits[j] # noqa\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] * 10 ** i\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "def nextPermutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = input()\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if nextPermutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\n\nif __name__ == '__main__':\n    main()\n", "\ndef next_permutation(arr): \n    # Find non-increasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False \n    \n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = [int(i) for i in num]\n    if next_permutation(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Oct 13 12:53:53 2018\n\n\n@author: sasha\n\"\"\"\n\nimport sys\n\n\ndef input(): return sys.stdin.readline().strip()\n\n\nx = input()\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i:] = a[len(a) - 1: i - 1: -1]\n    return True\n\nif next_permutation(list(x)):\n    print(''.join(list(x)))\nelse:\n    print(0)\n", "\ndef nextPermutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]: # Find longest non-increasing suffix\n        i -= 1\n    if i <= 0: # No more permutations\n        return False\n\n    j = len(a) - 1\n    a[i - 1], a[j] = a[j], a[i - 1] # Swap pivot with a[j]\n\n    a[i:] = reversed(a[i:]) # Reverse suffix\n    return True\n\ndef prevPermutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] <= a[i]: # Find longest non-decreasing suffix\n        i -= 1\n    if i <= 0: # No more permutations\n        return False\n\n    j = len(a) - 1\n    while a[j] >= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i - 1], a[j] = a[j], a[i - 1] # Swap pivot with a[j]\n\n    a[i:] = reversed(a[i:]) # Reverse suffix\n    return True\n\ndef main():\n    # Read input\n    x = input()\n\n    # Convert to int array\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if prevPermutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline() \n    x = int(line)\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n        digit_counts[digit] += 1\n\n    # find the first digit that is smaller than the digit to its right\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its right \n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\nx = input()\nif next_permutation(list(x)):\n    print(''.join(list(x)))\nelse:\n    print(0)\n", "\n\nx = input().strip()\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i:] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\nif next_permutation(list(x)):\n    print(''.join(list(x)))\nelse:\n    print(0)\n", "\n\ndef next_permutation_number(arr):\n    # Find non-decreasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot element\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input().strip()\n    num = [int(i) for i in num]\n    if next_permutation_number(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line.strip())\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n        digit_counts[digit] += 1\n\n    # if the number is unchanged, then there is no next smallest number.\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        # find the first digit that is smaller than the digit to its right.\n        for i, digit in enumerate(digits[:-1]):\n            if digit < digits[i+1]:\n                # find the smallest digit that is larger than the digit to its right.\n                smallest_digit = digits[i+1]\n                smallest_digit_index = i+1\n                for j in range(i+2, len(digits)):\n                    if digits[j] < smallest_digit and digits[j] > digit:\n                        smallest_digit = digits[j]\n                        smallest_digit_index = j\n\n                # swap the two digits.\n                digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n                break\n\n    # sort the digits to the right of the swapped digit in ascending order.\n    digits[i+1:] = sorted(digits[i+1:])\n\n\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(a):  # \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n    n = len(a)\n    i = n - 1  # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043f\u0430\u0434\u0430\u043d\u0438\u044f\n    while i > 0 and a[i-1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1  # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e a[i-1]\n    while a[j] <= a[i-1]:\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef next_permutation(a): \n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i-1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1\n    while a[j] <= a[i-1]:\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # x = sys.stdin.readline().strip()\n    # x = list(x)\n    # for i in range(len(x) - 1, 0, -1):\n    #     if x[i] > x[i - 1]:\n    #         break\n    # else:\n    #     print(0)\n    #     return\n    # for j in range(len(x) - 1, i - 1, -1):\n    #     if x[j] > x[i - 1]:\n    #         break\n    # x[i - 1], x[j] = x[j], x[i - 1]\n    # x[i:] = sorted(x[i:])\n    # print(''.join(x))\n    print(1)\nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(a): # \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n    n = len(a)\n    i = n - 1 # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043f\u0430\u0434\u0430\u043d\u0438\u044f\n    while i > 0 and a[i-1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1 # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e a[i-1]\n    while a[j] <= a[i-1]:\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = a[-1:i-1:-1]\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s] # \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#file\n# Get the input\nx = int(input())\n\n# Start with the largest number that can be formed using the digits of x\nn = 10 ** (len(str(x)) - 1)\n\n# Find the largest number that can be formed using the digits of x\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next largest number using the same digits\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "import sys\nimport math\n\n\ndef main():\n    X = int(sys.stdin.readline())\n    digits = []\n    while X > 0:\n        digits.append(X % 10)\n        X = math.floor(X / 10)\n    digits.reverse()\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i + 1]:\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            break\n    else:\n        print(0)\n        return\n    for j in range(i):\n        for k in range(j + 1, len(digits)):\n            if digits[j] > digits[k]:\n                digits[j], digits[k] = digits[k], digits[j]\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] * 10 ** i\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get the input\nx = int(input()) \n\n# Start with the smallest number that can be formed using the digits of x\nn = 10 ** (len(str(x)) - 1)\n\n# Find the smallest number that can be formed using the digits of x\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next smallest number using the same digits\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\n\ndef main():\n    print('Hello World')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom __future__ import print_function\n\nimport sys\n\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line)\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n        digit_counts[digit] += 1\n\n    # find the first digit that is smaller than the digit to its right\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its left\n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "from __future__ import print_function\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\n# this is a comment\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\nif __name__ == '__main__':\n    main()\n", "\nx = input()\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\nif next_permutation(list(x)):\n    print(''.join(x))\nelse:\n    print(0)\n", "\n", "\n# Get the input\nx = int(input())\n\n# Start with the largest number that can be formed using the digits of x\nn = 10 ** (len(str(x)) - 1)\n\n# Find the largest number that can be formed using the digits of x\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next largest number using the same digits\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = input(\"Enter a number: \")\n\n    # Convert to int array.\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line.strip())\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n        digit_counts[digit] += 1\n\n    # find the first digit that is smaller than the digit to its right\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its right \n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(a):\n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i-1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1\n    while a[j] <= a[i-1]:\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nx = input()\na = input()\nb = input()\nc = input()\nprint(x)\nprint(a)\nprint(b)\nprint(c)\n", "\n\nimport sys\n\ndef main():\n    x = sys.stdin.readline().strip()  # str\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])  # list\n    print(''.join(x))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line)\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n        digit_counts[digit] += 1\n\n    # find the first digit that is smaller than the digit to its right\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its left\n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    # Read input\n    x = input(\"Enter a number: \")\n\n    # Convert to int array.\n    x_arr = [int(c) for c in str(x)]\n\n    # Find next permutation\n    if next_permutation(x_arr):\n        print(\"Next permutation:\", int(''.join(map(str, x_arr))))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom __future__ import print_function\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    x = int(line)\n    digits = list(line.strip())\n    digit_counts = defaultdict(int)\n    for digit in digits:\n        digit_counts[digit] += 1\n\n    # find the first digit that is smaller than the digit to its right.\n    for i, digit in enumerate(digits[:-1]):\n        if digit < digits[i+1]:\n            # find the smallest digit that is larger than the digit to its left\n            smallest_digit = digits[i+1]\n            smallest_digit_index = i+1\n            for j in range(i+2, len(digits)):\n                if digits[j] < smallest_digit and digits[j] > digit:\n                    smallest_digit = digits[j]\n                    smallest_digit_index = j\n\n            # swap the two digits\n            digits[i], digits[smallest_digit_index] = digits[smallest_digit_index], digits[i]\n            break\n\n    # sort the digits to the right of the swapped digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # if the number is unchanged, then there is no next smallest number\n    if x == int(''.join(digits)):\n        print(0)\n    else:\n        print(''.join(digits))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Get the input.\nx = int(input())\n\n# Start with the smallest number that can be formed using the digits of x.\nn = 10 ** (len(str(x)) - 1)\n\n# Find the smallest number that can be formed using the digits of x.\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next smallest number using the same digits, if possible.\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "import sys\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    s = input()\n    if s == \"\":\n        print(\"\")\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get the input.\nx = int(input())\n\n# Start with the largest number that can be formed using the digits of x.\nn = 10 ** (len(str(x)) - 1)\n\n# Find the largest number that can be formed using the digits of x.\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next smallest number using the same digits.\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\n\ndef next_permutation_number(arr):\n    # Find non-decreasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot element\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = [int(i) for i in num]\n    if next_permutation_number(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n    a = list(a)\ndef next_permutaion(a):\n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutaion(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    a, b, c = map(int, input().split())\n    ans = b // a\n    if ans > c:\n        ans = c\n    print(ans)\n\ndef main2():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Get the input\nx = int(input())\n\n# Start with the smallest number that can be formed using the digits of x.\nn = 10 ** (len(str(x)) - 1)\n\n# Find the smallest number that can be formed using the digits of x.\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next smallest number using the same digits.\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\ndef next_permutation(arr): \n    # Find non-increasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = [int(i) for i in num]\n    if next_permutation(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef next_permutation(a):\n    n = len(a)\n    i = n - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = n - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i-1], a[j] = a[j], a[i-1]\n    a[i:] = reversed(a[i:])\n    return True\n\ndef main():\n    s = input()\n    a = [int(x) for x in s]\n    if next_permutation(a):\n        print(''.join([str(x) for x in a]))\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# def main():\n#     a, b, c = map(int, input().split())\n#     ans = b // a\n#     if ans > c:\n#         ans = c\n#     print(ans)\n\ndef main():\n    x = sys.stdin.readline().strip()\n    x = list(x)\n    for i in range(len(x) - 1, 0, -1):\n        if x[i] > x[i - 1]:\n            break\n    else:\n        print(0)\n        return\n    for j in range(len(x) - 1, i - 1, -1):\n        if x[j] > x[i - 1]:\n            break\n    x[i - 1], x[j] = x[j], x[i - 1]\n    x[i:] = sorted(x[i:])\n    print(''.join(x))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef next_permutation(arr):\n    # Find non-decreasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot element\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = input()\n    num = [int(i) for i in num]\n    if next_permutation_number(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef next_permutation(arr):\n    # Find non-decreasing suffix\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    \n    # Find successor to pivot\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[i - 1], arr[j] = arr[j], arr[i - 1]\n    \n    # Reverse suffix\n    arr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n    return True\n\ndef main():\n    num = [int(i) for i in input()]\n    if next_permutation(num):\n        print(\"\".join([str(i) for i in num]))\n    else:\n        print(\"0\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Get the input\nx = int(input())\n\n# Start with the largest number that can be formed using the digits of x\nn = 10 ** (len(str(x)) - 1) - 1\n\n# Find the largest number that can be formed using the digits of x\nfor i in range(9, 0, -1):\n    if str(i) in str(x):\n        n += i * 10 ** (len(str(x)) - str(x).index(str(i)) - 1)\n        break\n\n# Find the next smallest number using the same digits\nfor i in range(9, 0, -1):\n    if str(i) in str(n):\n        n += i * 10 ** (len(str(x)) - str(n).index(str(i)) - 1)\n        break\n\n# If the number is larger than x, print it. Otherwise, print 0.\nif n > x:\n    print(n)\nelse:\n    print(0)\n", "\n\ndef next_permutation(a):\n    i = len(a) - 1\n    while i > 0 and a[i - 1] >= a[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = len(a) - 1\n    while a[j] <= a[i - 1]:\n        j -= 1\n    a[i - 1], a[j] = a[j], a[i - 1]\n    a[i : ] = a[len(a) - 1 : i - 1 : -1]\n    return True\n\nx = input()\nif next_permutation(list(x)):\n    print(''.join(list(x)))\nelse:\n    print(0)\n"]