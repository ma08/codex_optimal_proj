["import sys\n\nn,m = map(int,sys.stdin.readline().split())\nkeyword = sys.stdin.readline().strip()\ncipher = sys.stdin.readline().strip()\n\nplain = []\n\nfor i in range(m):\n    plain.append(chr((ord(cipher[i]) - ord(keyword[i]) + 26)%26 + ord('A')))\n    if i >= n:\n        keyword += plain[i]\n\nprint(\"\".join(plain))\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the first line.\n    line = sys.stdin.readline()\n    # Read the second line.\n    line = sys.stdin.readline()\n    # Read the third line.\n    line = sys.stdin.readline()\n    # Print the result.\n    print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    plain = []\n    for i in range(0, m):\n        plain.append(chr((ord(ciphertext[i]) - ord(keyword[i])) % 26 + 97))\n    print(\"\".join(plain))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef decipher(n, m, last, cipher):\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tprint(decipher(n, m, last, cipher))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lastn = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    prefix = lastn[-n:]\n    plaintext = \"\"\n    for i in range(m):\n        c = ciphertext[i]\n        if i < n:\n            p = prefix[i]\n        else:\n            p = plaintext[i-n]\n        plaintext += chr((ord(c) - ord(p) + 26) % 26 + ord('a'))\n    print(plaintext)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lastn = sys.stdin.readline().strip()  # lastn means last n characters\n    ciphertext = sys.stdin.readline().strip()\n    prefix = lastn[-n:]  # prefix means the first n characters\n    plaintext = \"\"\n    for i in range(m):\n        c = ciphertext[i]\n        if i < n:\n            p = prefix[i]\n        else:\n            p = plaintext[i-n]\n        plaintext += chr((ord(c) - ord(p) + 26) % 26 + ord('a'))\n    print(plaintext)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plain = []\n    for i in range(1, m):\n        plain.append(chr((ord(cipher[i]) - ord(keyword[i])) % 26 + 97))\n    print(\"\".join(plain)) # \u5b57\u7b26\u4e32\u8fde\u63a5\u51fd\u6570 \n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nn,m = map(int,sys.stdin.readline().split())\nkeyword = sys.stdin.readline().strip()\ncipher = sys.stdin.readline().strip()\n\nplain = []\n\nfor i in range(m):\n    plain.append(chr((ord(cipher[i]) - ord(keyword[i]) + 26) % 26 + ord('a')))\n    if i >= n:\n        keyword += plain[i]\n\nprint(\"\".join(plain))\n", "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plain = []\n    for i in range(0, m):\n        plain.append(chr((ord(cipher[i]) - ord(keyword[i % m])) % 26 + 97))\n    print(\"\".join(plain))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\nn, m = map(int, input().split())\nkey = input()\ncipher = input()\n\nplain = \"\"\n\n# first n letters of plaintext are the same as the key\nplain += key\n\n# next m-n letters of plaintext are the ciphertext minus the corresponding letters of the key\nfor i in range(m-n):\n    plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n\nprint(plain)\n", "\nn, m = map(int, input().split())\nkey = input()\ncipher = input()\n\nplain = \"\"\n\n# first n letters of plaintext are the same as the key\nplain += key\n\n# next m-n letters of plaintext are the ciphertext minus the corresponding letter of the key mod 26\nfor i in range(m-n):\n    plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n\nprint(plain)\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    plain = []\n    for i in range(1, m):\n        plain.append(chr((ord(ciphertext[i]) - ord(keyword[i])) % 26 + 97))\n    print(\"\".join(plain))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n,m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip()[-n:]\n    cipher = sys.stdin.readline().strip()\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(last_n[i % n]) + 26) % 26 + ord('a'))\n        if i >= n - 1:\n            last_n += plain[i]\n    print(plain)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    prefix = last_n[-n:]\n    plaintext = ''\n    for i in range(m):\n        c = ciphertext[i]\n        if i < n:\n            p = prefix[i]\n        else:\n            p = plaintext[i-n]\n        plaintext += chr((ord(c) - ord(p) + 26) % 26 + ord('a'))\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nn,m = map(int,sys.stdin.readline().split())\nkeyword = sys.stdin.readline().strip()\ncipher = sys.stdin.readline().strip()\n\nplain = []\n\nfor i in range(m):\n    plain.append(chr((ord(cipher[i]) - ord(keyword[i]) + 26) % 26 + ord('a')))\n    if i >= n:\n        keyword += plain[i]\n\nprint(\"\".join(plain))\n", "#input\nimport sys\nn,m = map(int,sys.stdin.readline().split())\nkeyword = sys.stdin.readline().strip()\ncipher = sys.stdin.readline().strip()\n#output\nplain = []\nfor i in range(m):\n    plain.append(chr((ord(cipher[i]) - ord(keyword[i]) + 26)%26 + ord('a')))\n    if i >= n:\n        keyword += plain[i]\nprint(\"\".join(plain))\n", "\nimport sys\n\ndef main():\n    n,m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(last_n[i]) + 26) % 26 + ord('a'))\n        if i >= n - 1:\n            last_n += plain[i]\n    print(plain)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    lastn = sys.stdin.readline().strip() # lastn means last n characters\n    ciphertext = sys.stdin.readline().strip()\n    prefix = lastn[-n:] # prefix means the first n characters\n    plaintext = \"\"\n    for i in range(m):\n        c = ciphertext[i]\n        if i < n:\n            p = prefix[i]\n        else:\n            p = plaintext[i-n]\n        plaintext += chr((ord(c) - ord(p) + 26) % 26 + ord('a'))\n    print(plaintext)\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, m = map(int, input().split())\nkey = input()\ncipher = input()\n\nplain = \"\"\n\n# first n letters of plaintext are the same as the key\nplain += key\n\n# next m-n letters of plaintext are the ciphertext minus the corresponding letters of the key\nfor i in range(m-n):\n    plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n\nprint(plain)\n", "\nimport sys\ndef decipher(n, m, last, cipher):\n\t\"\"\"\n\t\"\"\"\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, sys.stdin.readline().split())\n\tlast = sys.stdin.readline()\n\tcipher = sys.stdin.readline()\n\tprint(decipher(n, m, last, cipher))\n\nif __name__ == '__main__':\n\tmain()\n", "#input\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nkeyword = sys.stdin.readline().strip()\ncipher = sys.stdin.readline().strip()\n#output\n\nplain = []\n\nfor i in range(m):\n    plain.append(chr((ord(cipher[i]) - ord(keyword[i]) + 26) % 26 + ord('a')))\n    if i >= n:\n        keyword += plain[i]\n\nprint(\"\".join(plain))\n", "\ndef decipher(n, m, last, cipher):\n\t\"\"\"\n\t\"\"\"\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tprint(decipher(n, m, last, cipher))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n    n,m = map(int, sys.stdin.readline().split())\n    last_m = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    plaintext = \"\"\n    for i in range(m):\n        plaintext += chr(((ord(ciphertext[i]) - ord(last_m[i]) + 26) % 26) + ord('a'))\n        if i >= n - 1:\n            last_m += plaintext[i]\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plain = []\n    for i in range(1, m):\n        plain.append(chr((ord(cipher[i]) - ord(keyword[i])) % 26 + 97))\n    print(\"\".join(plain))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = map(int, input().split())  # n=length of key, m=length of ciphertext\nkey = input()\ncipher = input()\n\nplain = \"\"\n\n# first n letters of plaintext are the same as the key\nplain += key\n\n# next m-n letters of plaintext are the ciphertext minus the corresponding letter of the key mod 26 (add 26 to make sure the subtraction doesn't result in a negative number)\nfor i in range(m - n):\n    plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n\nprint(plain)\n", "\n\nimport sys\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    prefix = last_n[-n:]\n    plaintext = \"\"\n    for i in range(m):\n        c = ciphertext[i]\n        if i < n:\n            p = prefix[i]\n        else:\n            p = plaintext[i-n]\n        plaintext += chr((ord(c) - ord(p) + 26) % 26 + ord('a'))\n    print(plaintext)\n\nif __name__ == \"__main__\":\n    main()\n", "#-----------------------------------\n# File:\n# Author:\n# Date:\n#-----------------------------------\n\n#-----------------------------------\n# Code:\n\ndef decipher(n, m, last, cipher):\n\tdeciphers a ciphertext\n\n\tParameters:\n\t\tn (int): the number of characters in the last word\n\t\tm (int): the number of characters in the ciphertext\n\t\tlast (str): the last word in the plaintext\n\t\tcipher (str): the ciphertext\n\n\tReturns:\n\t\tplain (str): the plaintext\n\t\"\"\"\n\t\"\"\"\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tprint(decipher(n, m, last, cipher))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the first line\n    line = sys.stdin.readline()\n    # Read the second line\n    line = sys.stdin.readline()\n    # Read the third line\n    line = sys.stdin.readline()\n    # Print the result\n    print(line)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    last = input()  # last n-1 characters of the ciphertext\n    cipher = input()  # the whole ciphertext\n    key = last + cipher[:m-n]  # the key is the last n-1 characters of the ciphertext + the first m-n characters of the ciphertext\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    print(plain)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plain = []\n    for i in range(0, m):\n        plain.append(chr((ord(cipher[i]) - ord(keyword[i])) % 26 + 97))\n    print(\"\".join(plain))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plain = []\n    for i in range(0, m):\n        plain.append(chr((ord(cipher[i]) - ord(keyword[i])) % 26 + 97))\n    print(\"\".join(plain)) \n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\ndef main():\n    n,m = map(int, sys.stdin.readline().split())\n    last_m = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    plaintext = \"\"\n    for i in range(m):\n        plaintext += chr((ord(ciphertext[i]) - ord(last_m[i]) + 26) % 26 + ord('a'))\n        if i >= n - 1:\n            last_m += plaintext[i]\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#---------------------------------\n# Code: \n\ndef decipher(n, m, last, cipher):\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tprint(decipher(n, m, last, cipher))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    last = input()  # last n-1 characters of the ciphertext\n    cipher = input()  # the whole ciphertext\n    key = last + cipher[:m-n]  # the key is the last n-1 characters of the ciphertext + the first m-n characters of the ciphertext\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    print(plain)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#--------------------------------- \n\ndef decipher(n, m, last, cipher):\n\t\"\"\"\n\t\"\"\"\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tprint(decipher(n, m, last, cipher))\n\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef main():\n    n, m = map(int, input().split())\n    last = input()\n    cipher = input()\n    key = last + cipher[:m - n]\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n    print(plain)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Time    : 2018/2/23 \u4e0b\u534811:01\n# @Author  : simon\n# @File    : file.py\n# @Software: PyCharm Community Edition\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip()[-n:]\n    ciphertext = sys.stdin.readline().strip()\n    print(last_n)\n    plaintext = \"\"\n    for i in range(m):\n        plaintext += chr((ord(ciphertext[i]) - ord(last_n[i % n]) + 26) % 26 + ord('a'))\n        if i >= n - 1:\n            last_n += plaintext[i]\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-----------------------------------\n# Code:\n\ndef decipher(n, m, last, cipher):\n\t\"\"\"\n\t\"\"\"\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(cipher[i]) - ord(last[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(cipher[i]) - ord(plain[i-n])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tprint(decipher(n, m, last, cipher))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n#--------------------------------- \n\ndef decipher(n, m, last, cipher):\n\t\"\"\"\n\t\"\"\"\n\tplain = \"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain += chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain += chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tprint(decipher(n, m, last, cipher))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the first line\n    line = sys.stdin.readline()\n    # Read the second line\n    line = sys.stdin.readline()\n    # Read the third line\n    line = sys.stdin.readline()\n    # Print the result, removing the trailing newline\n    print(line.rstrip())\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, m = map(int, input().split()) # n is the length of the key, m is the length of the ciphertext\n    key = input() # the key\n    cipher = input() # the ciphertext\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i % n]) + 26) % 26 + ord('a'))\n    print(plain)\n\n\ndef main():\n    n, m = map(int, input().split())\n    last = input() # last n-1 characters of the ciphertext\n    cipher = input() # the whole ciphertext\n    key = last + cipher[:m-n] # the key is the last n-1 characters of the ciphertext + the first m-n characters of the ciphertext\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    print(plain)\n\nmain()\n", "\"\"\"\nThis is a sample file.\n\"\"\"\n\nimport sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the first line.\n    line = sys.stdin.readline()\n    # Read the second line.\n    line = sys.stdin.readline()\n    # Read the third line.\n    line = sys.stdin.readline()\n    # Print the results.\n    print(line)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    plain = []\n    for i in range(0, m):\n        plain.append(chr((ord(ciphertext[i]) - ord(keyword[i])) % 26 + 97))\n    print(\"\".join(plain))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef decipher(n, m, last, cipher, plain):\n\t\"\"\"\n\t\"\"\"\n\tfor i in range(m):\n\t\tif i < n:\n\t\t\tplain[i] = chr( ((ord(last[i]) - ord(cipher[i])) % 26) + 97 )\n\t\telse:\n\t\t\tplain[i] = chr( ((ord(plain[i-n]) - ord(cipher[i])) % 26) + 97 )\n\n\treturn plain\n\ndef main():\n\tn, m = map(int, input().split())\n\tlast = input()\n\tcipher = input()\n\tplain = [\"\"] * m\n\tprint(decipher(n, m, last, cipher, plain))\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the first line.\n    line = sys.stdin.readline()\n    # Read the second line.\n    line = sys.stdin.readline()\n    # Read the third line.\n    line = sys.stdin.readline()\n    # Print the results.\n    print(line)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip().split()\n    ciphertext = sys.stdin.readline().strip().split()\n    prefix = last_n[-n:]\n    plaintext = \"\"\n    for i in range(m):\n        c = ciphertext[i]\n        if i < n:\n            p = prefix[i]\n        else:\n            p = plaintext[i-n]\n        plaintext += chr((ord(c) - ord(p) + 26) % 26 + ord('a'))\n    print(plaintext)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    last = input()\n    cipher = input()\n    key = last + cipher[:m - n]\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n    print(plain)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    key = input()\n    cipher = input()\n    \n    plain = \"\"\n    \n    # first n letters of plaintext are the same as the key\n    plain += key\n    \n    # next m-n letters of plaintext are the ciphertext minus the corresponding letters of the key\n    for i in range(m-n):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    \n    print(plain)\n    \n    \nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    last = input()\n    cipher = input()\n    key = last + cipher[:m - n]\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    print(plain)\n\nmain()\n", "\ndef main():\n    n, m = map(int, input().split())\n    last = input()\n    cipher = input()\n    key = last + cipher[:m-n]\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n    print(plain)\n\nmain()\n", "\ndef main():\n    n, m = map(int, input().split())\n    last = input().strip()\n    cipher = input()\n    key = last + cipher[:m - n]\n    plain = \"\"\n    for i in range(m):\n        plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    print(plain)\n\nmain()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    keyword = sys.stdin.readline().strip()\n    cipher = sys.stdin.readline().strip()\n    plain = []\n    for i in range(0, m):\n        plain.append(chr((ord(cipher[i]) - ord(keyword[i % n])) % 26 + 97))\n    print(\"\".join(plain)) # \u5b57\u7b26\u4e32\u8fde\u63a5\u51fd\u6570\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Time    : 2018/2/23 \u4e0b\u534811:01\n# @Author  : simon\n# @File    : file.py\n# @Software: PyCharm Community Edition\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    last_n = sys.stdin.readline().strip()[-n:].lower()\n    ciphertext = sys.stdin.readline().strip()\n    print(last_n)\n    plaintext = \"\"\n    for i in range(m):\n        plaintext += chr((ord(ciphertext[i]) - ord(last_n[i % n]) + 26) % 26 + ord('a'))\n        if i >= n - 1:\n            last_n += plaintext[i]\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    last_m = sys.stdin.readline().strip()\n    ciphertext = sys.stdin.readline().strip()\n    plaintext = \"\"\n    for i in range(m):\n        plaintext += chr((ord(ciphertext[i]) - ord(last_m[i]) + 26) % 26 + ord('a'))\n        if i >= n - 1:\n            last_m += plaintext[i]\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the first line\n    line = sys.stdin.readline() \n    # Read the second line\n    line = sys.stdin.readline() \n    # Read the third line\n    line = sys.stdin.readline() \n    # Print the results\n    print(line) \n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nn,m = map(int,sys.stdin.readline().split())\nkeyword = sys.stdin.readline().strip()\ncipher = sys.stdin.readline().strip()\n\nplain = []\n\nfor i in range(m):\n    plain.append(chr((ord(cipher[i]) - ord(keyword[i]) + 26)%26 + ord('a')))\n    if i >= n-1:\n        keyword += plain[i]\n\nprint(\"\".join(plain))\n", "\nn, m = map(int, input().split())\nkey = input()\ncipher = input()\n# first n letters of plaintext are the same as the key\n\nplain = \"\"\nplain += key\n\n# next m-n letters of plaintext are the ciphertext minus the corresponding letter of the key mod 26\nfor i in range(m-n):\n    plain += chr((ord(cipher[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n\nprint(plain)\n"]