["from collections import defaultdict\nfrom heapq import *\n\ndef dijkstra_raw(edges, from_node, to_node):\n    g = defaultdict(list)\n    for l,r,c in edges:\n        g[l].append((c,r))\n\n    q, seen = [(0,from_node,())], set()\n    while q:\n        (cost,v1,path) = heappop(q)\n        if v1 not in seen:\n            seen.add(v1)\n            path = (v1, path)\n            if v1 == to_node:\n                return (cost, path)\n\n            for c, v2 in g.get(v1, ()):\n                if v2 not in seen:\n                    heappush(q, (cost+c, v2, path))\n\n    return float(\"inf\")\n\nif __name__ == \"__main__\":\n    edges = [\n        (\"A\", \"B\", 7),\n        (\"A\", \"D\", 5),\n        (\"B\", \"C\", 8),\n        (\"B\", \"D\", 9),\n        (\"B\", \"E\", 7),\n        (\"C\", \"E\", 5),\n        (\"D\", \"E\", 15),\n        (\"D\", \"F\", 6),\n        (\"E\", \"F\", 8),\n        (\"E\", \"G\", 9),\n        (\"F\", \"G\", 11)\n    ]\n\n    print \"=== Dijkstra ===\"\n    print edges\n    print \"A -> E:\"\n    print dijkstra_raw(edges, \"A\", \"E\")\n    print \"F -> G:\"\n    print dijkstra_raw(edges, \"F\", \"G\")\n", "s = input()\nt = input()\n\nif s == t:\n    print(\"Yes\")\n    exit()\n\nfor i in range(len(s)):\n    s = s[-1] + s[:-1]\n    if s == t:\n        print(\"Yes\")\n        exit()\n\nprint(\"No\")\n", "\ns = input()\nt = input()\n\nif s == t:\n    print(\"Yes\")\n    exit()\n\nfor i in range(len(s)):\n    s = s[-1] + s[:-1]\n    if s == t:\n        print(\"Yes\")\n        exit()\n\nprint(\"No\")\n", "print(\"Hello World\")\n", "\nA, B = map(int, input().split())\n\nif A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n", "s = input()\nt = input()\n\nif s == t:\n    print(\"Yes\")\nelse:\n    if len(s) == len(t):\n        for i in range(len(s)):\n            if s == t:\n                print(\"Yes\")\n                break\n            else:\n                s = s[-1] + s[:-1]\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n", "\ns = input()\nt = input()\n\nfor i in range(len(s)-1):\n    s = s[1:] + s[0]\n    if s == t:\n        print(\"Yes\")\n        exit()\n\nprint(\"No\")\n", "\ns = input()\nt = input()\n\nif s == t:\n    print(\"Yes\")\nelse:\n    if len(s) == len(t):\n        for i in range(len(s)):\n            if s == t:\n                print(\"Yes\")\n                break\n            else:\n                s = s[-1] + s[:-1]\n        print(\"No\")\n    else:\n        print(\"No\")\n"]