["\n\n# SOLUTION\n\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split())) # split the input into an array and convert to int\n\nd = [0] * n # create an array with the length of n with 0 values\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n: # if the current position + a[i] is less than the length of the array, then the next position is i + a[i] and add 1 to the value\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0: # if the current position - a[i] is greater or equal to 0, then the next position is i - a[i] and add 1 to the value\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0: # if the current position is 0, then the next position is -1\n        d[i] = -1\n\nprint(*d) # print the array with a space between each value\n", "\n\nimport queue as q\n\nn = int(input())\na = list(map(int, input().split()))\n\nque = q.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        que.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        que.put((i, 0))\n\nvisited = [False] * n\n\nwhile not que.empty():\n    curr, dist = que.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        que.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        que.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n\n\n", "\n\n# SOLUTION\n\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n: # if the current position + a[i] is less than the length of the array, \n                     # then the next position is i + a[i]\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0: # if the current position - a[i] is greater or equal to 0, \n                      # then the next position is i - a[i]\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0: # if the current position is 0, then the next position is -1\n        d[i] = -1\n\nprint(*d)\n", "\nimport sys\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))  # (index, distance)\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))  # (index, distance)\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <limits.h>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <algorithm>\n#include <string>\n#include <functional>\n#include <vector>\n#include <numeric>\n#include <deque>\n#include <utility>\n#include <bitset>\n#include <iostream>\n\nimport queue as q\n\nn = int(input())\na = list(map(int, input().split()))\n\nque = q.queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        que.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        que.put((i, 0))\n\nvisited = [False] * n\n\nwhile not que.empty():\n    curr, dist = que.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        que.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        que.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n", "\n#\n# # SOLUTION\n#\n# #!/usr/bin/env python3\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n# d = [0] * n\n#\n# for i in range(n - 1, -1, -1):\n#     if i + a[i] < n:\n#         d[i] = d[i + a[i]] + 1\n#     if i - a[i] >= 0:\n#         d[i] = min(d[i], d[i - a[i]] + 1)\n#     if d[i] == 0:\n#         d[i] = -1\n#\n# print(*d)\n", "\n# SOLUTION\n\n#!/bin/python3\n\nn = int(input())\na = list(map(int, input().split()))\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "\n# Solution\n\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "\n\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "\n\n# SOLUTION\n\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:  # if the current position + a[i] is less than the length of the array, then the next position is i + a[i]\n        d[i] = d[i + a[i]] + 1  # add 1 to the next position\n    if i - a[i] >= 0:  # if the current position - a[i] is greater or equal to 0, then the next position is i - a[i]\n        d[i] = min(d[i], d[i - a[i]] + 1)  # add 1 to the next position\n    if d[i] == 0:  # if the current position is 0, then the next position is -1\n        d[i] = -1  # assign the next position to -1\n\nprint(*d)\n", "\n#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\nd = [0] * n\n\nfor i in range(n - 1, -1, -1):\n    if i + a[i] < n:\n        d[i] = d[i + a[i]] + 1\n    if i - a[i] >= 0:\n        d[i] = min(d[i], d[i - a[i]] + 1)\n    if d[i] == 0:\n        d[i] = -1\n\nprint(*d)\n", "\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\nq = queue.Queue()\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))  # (index, distance)\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))  # (index, distance)\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    q = queue.Queue()\n\n    for i in range(n):\n        if a[i] % 2 == 1:\n            q.put((i, 0))\n\n    for i in range(n):\n        if a[i] % 2 == 0:\n            q.put((i, 0))\n\n    visited = [False] * n\n\n    while not q.empty():\n        curr, dist = q.get()\n        if visited[curr]:\n            continue\n        visited[curr] = True\n        if curr - a[curr] >= 0:\n            q.put((curr - a[curr], dist + 1))\n        if curr + a[curr] < n:\n            q.put((curr + a[curr], dist + 1))\n\n    for i in range(n):\n        if a[i] % 2 == 1:\n            if visited[i]:\n                print(dist)\n            else:\n                print(-1)\n        else:\n            if visited[i]:\n                print(dist)\n            else:\n                print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport queue as q\n\nn = int(input())\na = list(map(int, input().split()))\nque = q.Queue()\nfor i in range(n):\n    if a[i] % 2 == 0:\n        que.put((i, 0))\nfor i in range(n):\n    if a[i] % 2 == 1:\n        que.put((i, 0))\nvisited = [False] * n\nwhile not que.empty():\n    curr, dis = que.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        que.put((curr - a[curr], dis + 1))\n    if curr + a[curr] < n:\n        que.put((curr + a[curr], dis + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dis)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dis)\n        else:\n            print(-1)\n", "\n", "\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))\n\nvisited = [False] * n\n\nwhile not q.empty():\n    print(\"here\")\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if visited[i]:\n        print(dist)\n    else:\n        print(-1)\n", "\nimport queue\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = queue.Queue()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        q.put((i, 0))  # (index, distance)\n\nfor i in range(n):\n    if a[i] % 2 == 1:\n        q.put((i, 0))  # (index, distance)\n\nvisited = [False] * n\n\nwhile not q.empty():\n    curr, dist = q.get()\n    if visited[curr]:\n        continue\n    visited[curr] = True\n    if curr - a[curr] >= 0:\n        q.put((curr - a[curr], dist + 1))\n    if curr + a[curr] < n:\n        q.put((curr + a[curr], dist + 1))\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n    else:\n        if visited[i]:\n            print(dist)\n        else:\n            print(-1)\n"]