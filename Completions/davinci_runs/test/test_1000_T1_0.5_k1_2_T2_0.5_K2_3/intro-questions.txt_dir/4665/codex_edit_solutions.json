["\n\nfrom __future__ import print_function\nfrom collections import namedtuple\n\nN = int(input())\nmarks = namedtuple('marks', input())\n\ntotal = 0.0\nfor i in range(N):\n    total += int(marks(*input().split()).MARKS)\n\nprint(total / N)\n", "\ndef read_file(filename):\n    with open(filename) as f:\n        for line in f:\n            print(line)\nread_file(\"file.txt\")\n", "from collections import namedtuple\n\nN = int(input())\ncols = input().split()\n\nStudent = namedtuple('Student', cols)\nstudents = [Student(*input().split()) for _ in range(N)]\n\nprint(\"{:.2f}\".format(sum(float(s.MARKS) for s in students) / N)) \n", "\n\nfrom __future__ import print_function\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    query_scores = student_marks[query_name]\n    print(\"{0:.2f}\".format(sum(query_scores) / (len(query_scores))))\n", "from collections import namedtuple\n\nN = int(input())\ncols = input().split()\n\nStudent = namedtuple('Student', cols)\nstudents = [Student(*input().split()) for _ in range(N)]\n\nprint(\"{:.2f}\".format(sum(float(s.MARKS) for s in students)/N))\n", "\n\n\nimport sys\n\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\n\n\ndef main():\n\n    print(\"Python version: %d.%d.%d\" % sys.version_info[:3])\n\n    print(\"pandas version: %s\" % pd.__version__)\n\n    print(\"matplotlib version: %s\" % matplotlib.__version__)\n\n\n\nif __name__ == \"__main__\":\n\n    main()\nfrom __future__ import print_function\n", "from collections import namedtuple\n\nN = int(input())\ncols = input().split()\n\nStudent = namedtuple('Student', cols)\nstudents = [Student(*input().split()) for _ in range(N)]\n\nprint(\"{:.2f}\".format(sum(float(s.MARKS) for s in students) / N))\n", "\n\nfrom __future__ import print_function\nfrom collections import namedtuple\n\nN = int(input())\nmarks = namedtuple('marks',input())\n\ntotal = 0\nfor i in range(N):\n    total += int(marks(*input().split()).MARKS)\n\nprint(total/N)\n", "\n\n\ndef main():\n    print(\"hello world\")\n\nif __name__ == \"__main__\":\n    main()\nfrom __future__ import print_function\n", "from __future__ import print_function\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    query_scores = student_marks[query_name]\n    print(\"{0:.2f}\".format(sum(query_scores)/(len(query_scores))))\n", "from __future__ import print_function\nfrom collections import namedtuple, Counter\nfrom itertools import groupby\n\nN = int(input())\ncols = input().split()[1:]\n\nStudent = namedtuple('Student', cols)\nstudents = [Student(*input().split()[1:]) for _ in range(N)]\n\nprint(\"{:.2f}\".format(sum(float(s.MARKS) for s in students) / len(students)))\n", "\n\nfrom collections import namedtuple\n\nN = int(input())\ncols = input().split()\n\nStudent = namedtuple('Student', cols)\nstudents = [Student(*input().split()) for _ in range(N)]\n\n\n\nprint(\"{:.2f}\".format(sum(float(s.MARKS) for s in students) / N))\n", "\n\nfrom __future__ import print_function.\n", "#!/usr/bin/env python3\nfrom collections import namedtuple\n\nN = int(input())\ncols = input().split()\n\nStudent = namedtuple('Student', cols)\nstudents = [Student(*input().split()) for _ in range(N)]\n\nprint(\"{:.2f}\".format(sum(float(s.MARKS) for s in students) / N))\n"]