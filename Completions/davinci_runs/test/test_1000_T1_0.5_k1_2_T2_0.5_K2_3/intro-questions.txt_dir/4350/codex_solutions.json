["\n\n#------------------------------------------------------------------------------#\n\ndef main():\n    n,m = map(int,input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(input()))\n    #print(arr)\n    #print(n,m)\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == '*':\n                #print(i,j)\n                k = 1\n                while i+k < n and i-k >= 0 and j+k < m and j-k >= 0:\n                    if arr[i+k][j] == '*' and arr[i-k][j] == '*' and arr[i][j+k] == '*' and arr[i][j-k] == '*':\n                        for l in range(1,k+1):\n                            arr[i+l][j] = '.'\n                            arr[i-l][j] = '.'\n                            arr[i][j+l] = '.'\n                            arr[i][j-l] = '.'\n                        ans.append([i+1,j+1,k])\n                    k += 1\n    #print(arr)\n    if any('*' in sublist for sublist in arr):\n        print(-1)\n    else:\n        print(len(ans))\n        for i in ans:\n            print(*i)\n\nmain()", "\n\nimport numpy as np\n\ndef solve(grid):\n    n, m = grid.shape\n    grid = grid.copy()\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i,j] == '*':\n                s = 1\n                while i+s < n and j+s < m:\n                    if grid[i+s,j+s] == '*':\n                        s += 1\n                    else:\n                        break\n                if s > 1:\n                    grid[i:i+s,j:j+s] = '.'\n                    stars.append([i+1,j+1,s])\n    for i in range(n):\n        for j in range(m):\n            if grid[i,j] == '*':\n                return -1\n    return stars\n\ndef main():\n    n, m = map(int, input().split())\n    grid = np.array([list(input()) for _ in range(n)])\n    stars = solve(grid)\n    if stars == -1:\n        print(-1)\n    else:\n        print(len(stars))\n        for s in stars:\n            print(*s)\n\nif __name__ == '__main__':\n    main()"]