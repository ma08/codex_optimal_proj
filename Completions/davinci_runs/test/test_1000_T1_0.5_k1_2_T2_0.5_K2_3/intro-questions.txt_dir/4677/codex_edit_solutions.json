["\ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n# -----Answer----- \ns = input()\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n# -----Answer----- \ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n\n# -----Answer-----\ns = input()\n\ndef backspace(st): # function to delete char at the end of string\n    if len(st) == 0:\n        return st\n    else:\n        return st[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\ns = input()\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\nprint(result)\n", "\n\n# -----Answer----- \ns = input()\n\ndef backspace(str): # function to delete char at the end of string\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\ns = input()  # input string\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n", "\ns = input()  # input string\n\nstack = []\n\nfor char in s:\n    if char == \"0\":\n        stack.append(char)\n    elif char == \"1\":\n        stack.append(char)\n    else:\n        stack.pop()\nresult = \"\".join(stack)\n\nprint(result)\n", "# input\n\ns = input()\n# output\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    elif char == \"B\":\n        result = result[:-1]\n\nprint(result)\n", "\n", "# # input\n\n# s = input()\n# # output\n\n# result = \"\"\n\n# for char in s:\n#     if char == \"0\":\n#         result += \"0\"\n#     elif char == \"1\":\n#         result += \"1\"\n#     else:\n#         result = result[:-1]\n\n# print(result)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# n = int(input())\n# for i in range(1, n + 1):\n#     if is_prime(i):\n#         print(i)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# n = int(input())\n# for p in get_primes(n):\n#     print(p)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factors(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factorization(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# def get_prime_factorization_with_count(n):\n#     factors = []\n#     for p in get_primes(n):\n#         count = 0\n#         while n % p == 0:\n#             count += 1\n#             n //= p\n#         factors.append((p, count))\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factorization_with_count(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# def get_prime_factorization_with_count(n):\n#     factors = []\n#     for p in get_primes(n):\n#         count = 0\n#         while n % p == 0:\n#             count += 1\n#             n //= p\n#         factors.append((p, count))\n#     return factors\n\n\n# n = int(input())\n# for p, c in get_prime_factorization_with_count(n):\n#     print(p, c)\n", "\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\ns = input()\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n\n# -----Answer------\ns = input()\ns = list(s)\ndef backspace(str):\n    return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s.pop()\n    else:\n        s.append(i)\n\nprint(''.join(s))\n", "s = input()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n", "\ns = raw_input()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    elif char == \"B\":\n        result = result[:-1]\n\nprint result\n", "# input()\n\ns = input()\n# output()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"]