2022-04-12 23:29:29.265089 num operations 2
2022-04-12 23:29:29.265098 size on input set 1
2022-04-12 23:29:31.108848 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# input\n\ns = input()\n# output\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"
    },
    {
      "index": 1,
      "text": "\n\ns = input()  # input string\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"
    }
  ],
  "created": 1649806169,
  "object": "edit"
}
2022-04-12 23:29:31.109071 fix spelling mistakes 3 ['# input\n\ns = input()\n# output\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\n\nprint(result)\n', '\n\ns = input()  # input string\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\n\nprint(result)\n', '\ns = input()\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\n\nprint(result)\n']
2022-04-12 23:29:31.109094 size on output set 3
2022-04-12 23:29:31.109101 size on input set 3
2022-04-12 23:29:34.649806 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()  # input string\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()  # input string\n\nstack = []\n\nfor char in s:\n    if char == \"0\":\n        stack.append(char)\n    elif char == \"1\":\n        stack.append(char)\n    else:\n        stack.pop()\nresult = \"\".join(stack)\n\nprint(result)\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\nprint(result)\n"
    }
  ],
  "created": 1649806171,
  "object": "edit"
}
2022-04-12 23:29:34.649986 fix syntax errors 3 ['\ns = input()  # input string\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\n\nprint(result)\n', '\ns = input()  # input string\n\nstack = []\n\nfor char in s:\n    if char == "0":\n        stack.append(char)\n    elif char == "1":\n        stack.append(char)\n    else:\n        stack.pop()\nresult = "".join(stack)\n\nprint(result)\n', '\ns = input()\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\nprint(result)\n']
2022-04-12 23:29:37.096542 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = raw_input()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    elif char == \"B\":\n        result = result[:-1]\n\nprint result\n"
    },
    {
      "index": 1,
      "text": "s = input()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"
    },
    {
      "index": 2,
      "text": "s = input()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"
    }
  ],
  "created": 1649806174,
  "object": "edit"
}
2022-04-12 23:29:37.096720 fix syntax errors 3 ['\ns = raw_input()\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    elif char == "B":\n        result = result[:-1]\n\nprint result\n', 's = input()\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\n\nprint(result)\n', 's = input()\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\n\nprint(result)\n']
2022-04-12 23:30:13.723005 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# input()\n\ns = input()\n# output()\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    else:\n        result = result[:-1]\n\nprint(result)\n"
    },
    {
      "index": 1,
      "text": "# # input\n\n# s = input()\n# # output\n\n# result = \"\"\n\n# for char in s:\n#     if char == \"0\":\n#         result += \"0\"\n#     elif char == \"1\":\n#         result += \"1\"\n#     else:\n#         result = result[:-1]\n\n# print(result)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# n = int(input())\n# for i in range(1, n + 1):\n#     if is_prime(i):\n#         print(i)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# n = int(input())\n# for p in get_primes(n):\n#     print(p)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factors(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factorization(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# def get_prime_factorization_with_count(n):\n#     factors = []\n#     for p in get_primes(n):\n#         count = 0\n#         while n % p == 0:\n#             count += 1\n#             n //= p\n#         factors.append((p, count))\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factorization_with_count(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# def get_prime_factorization_with_count(n):\n#     factors = []\n#     for p in get_primes(n):\n#         count = 0\n#         while n % p == 0:\n#             count += 1\n#             n //= p\n#         factors.append((p, count))\n#     return factors\n\n\n# n = int(input())\n# for p, c in get_prime_factorization_with_count(n):\n#     print(p, c)\n"
    },
    {
      "index": 2,
      "text": "# input\n\ns = input()\n# output\n\nresult = \"\"\n\nfor char in s:\n    if char == \"0\":\n        result += \"0\"\n    elif char == \"1\":\n        result += \"1\"\n    elif char == \"B\":\n        result = result[:-1]\n\nprint(result)\n"
    }
  ],
  "created": 1649806177,
  "object": "edit"
}
2022-04-12 23:30:13.723288 fix syntax errors 3 ['# input()\n\ns = input()\n# output()\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    else:\n        result = result[:-1]\n\nprint(result)\n', '# # input\n\n# s = input()\n# # output\n\n# result = ""\n\n# for char in s:\n#     if char == "0":\n#         result += "0"\n#     elif char == "1":\n#         result += "1"\n#     else:\n#         result = result[:-1]\n\n# print(result)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# n = int(input())\n# for i in range(1, n + 1):\n#     if is_prime(i):\n#         print(i)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# n = int(input())\n# for p in get_primes(n):\n#     print(p)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factors(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factorization(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# def get_prime_factorization_with_count(n):\n#     factors = []\n#     for p in get_primes(n):\n#         count = 0\n#         while n % p == 0:\n#             count += 1\n#             n //= p\n#         factors.append((p, count))\n#     return factors\n\n\n# n = int(input())\n# for f in get_prime_factorization_with_count(n):\n#     print(f)\n\n\n# def is_prime(x):\n#     if x < 2:\n#         return False\n#     for i in range(2, x):\n#         if x % i == 0:\n#             return False\n#     return True\n\n\n# def get_primes(n):\n#     primes = []\n#     for i in range(1, n + 1):\n#         if is_prime(i):\n#             primes.append(i)\n#     return primes\n\n\n# def get_prime_factors(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#     return factors\n\n\n# def get_prime_factorization(n):\n#     factors = []\n#     for p in get_primes(n):\n#         if n % p == 0:\n#             factors.append(p)\n#             n //= p\n#     return factors\n\n\n# def get_prime_factorization_with_count(n):\n#     factors = []\n#     for p in get_primes(n):\n#         count = 0\n#         while n % p == 0:\n#             count += 1\n#             n //= p\n#         factors.append((p, count))\n#     return factors\n\n\n# n = int(input())\n# for p, c in get_prime_factorization_with_count(n):\n#     print(p, c)\n', '# input\n\ns = input()\n# output\n\nresult = ""\n\nfor char in s:\n    if char == "0":\n        result += "0"\n    elif char == "1":\n        result += "1"\n    elif char == "B":\n        result = result[:-1]\n\nprint(result)\n']
2022-04-12 23:30:13.723350 size on output set 8
2022-04-12 23:30:13.723359 num operations 2
2022-04-12 23:30:13.723364 size on input set 1
2022-04-12 23:30:15.641886 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -----Answer----- \ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Answer-----\ns = input()\n\ndef backspace(str): # function to delete char at the end of string\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    },
    {
      "index": 2,
      "text": "\n\n# -----Answer------\ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    }
  ],
  "created": 1649806213,
  "object": "edit"
}
2022-04-12 23:30:15.642066 fix spelling mistakes 3 ["\n\n# -----Answer----- \ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n\n# -----Answer-----\ns = input()\n\ndef backspace(str): # function to delete char at the end of string\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n\n# -----Answer------\ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"]
2022-04-12 23:30:15.642099 size on output set 3
2022-04-12 23:30:15.642106 size on input set 3
2022-04-12 23:30:18.865806 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# -----Answer----- \ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    },
    {
      "index": 1,
      "text": "\n"
    },
    {
      "index": 2,
      "text": "\n# -----Answer----- \ns = input()\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    }
  ],
  "created": 1649806215,
  "object": "edit"
}
2022-04-12 23:30:18.865969 fix syntax errors 3 ["\n# -----Answer----- \ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", '\n', "\n# -----Answer----- \ns = input()\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"]
2022-04-12 23:30:22.493909 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -----Answer-----\ns = input()\n\ndef backspace(st): # function to delete char at the end of string\n    if len(st) == 0:\n        return st\n    else:\n        return st[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Answer----- \ns = input()\n\ndef backspace(str): # function to delete char at the end of string\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    },
    {
      "index": 2,
      "text": "\n"
    }
  ],
  "created": 1649806218,
  "object": "edit"
}
2022-04-12 23:30:22.494146 fix syntax errors 3 ["\n\n# -----Answer-----\ns = input()\n\ndef backspace(st): # function to delete char at the end of string\n    if len(st) == 0:\n        return st\n    else:\n        return st[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n\n# -----Answer----- \ns = input()\n\ndef backspace(str): # function to delete char at the end of string\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", '\n']
2022-04-12 23:30:26.735213 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\ns = input()\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    },
    {
      "index": 1,
      "text": "\n\n# -----Answer------\ns = input()\ns = list(s)\ndef backspace(str):\n    return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s.pop()\n    else:\n        s.append(i)\n\nprint(''.join(s))\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"
    }
  ],
  "created": 1649806222,
  "object": "edit"
}
2022-04-12 23:30:26.735407 fix syntax errors 3 ["\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\ns = input()\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n", "\n\n# -----Answer------\ns = input()\ns = list(s)\ndef backspace(str):\n    return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s.pop()\n    else:\n        s.append(i)\n\nprint(''.join(s))\n", "\ns = input()\n\ndef backspace(str):\n    if len(str) == 0:\n        return str\n    else:\n        return str[:-1]\n\nfor i in s:\n    if i == 'B':\n        s = backspace(s)\n    else:\n        s += i\n\nprint(s)\n"]
2022-04-12 23:30:26.735433 size on output set 8
