2022-04-12 23:27:52.251158 num operations 2
2022-04-12 23:27:52.251168 size on input set 1
2022-04-12 23:27:57.694227 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n') \n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no): \n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    }
  ],
  "created": 1649806072,
  "object": "edit"
}
2022-04-12 23:27:57.694447 fix spelling mistakes 3 ['\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\') \n', '\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no): \n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n']
2022-04-12 23:27:57.694573 size on output set 3
2022-04-12 23:27:57.694580 size on input set 3
2022-04-12 23:28:01.663126 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))        \n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n') \n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n') \n"
    }
  ],
  "created": 1649806077,
  "object": "edit"
}
2022-04-12 23:28:01.663325 fix syntax errors 3 ['\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))        \n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\') \n', '\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\') \n']
2022-04-12 23:28:04.248560 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "\nimport math\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 2,
      "text": "\n#syntax errors\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    }
  ],
  "created": 1649806081,
  "object": "edit"
}
2022-04-12 23:28:04.248751 fix syntax errors 3 ['\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\nimport math\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\n#syntax errors\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2),\n                       (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n']
2022-04-12 23:28:11.325962 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return self.__mul__(Complex(no.real, -1*no.imaginary)).__mul__(Complex(1.0/(no.mod().real)**2, 0))\n\n    def __abs__(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, abs(x), abs(y)]), sep='\\n')\n"
    }
  ],
  "created": 1649806084,
  "object": "edit"
}
2022-04-12 23:28:11.326163 fix syntax errors 3 ['\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real * no.real + self.imaginary * no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary * no.real - self.real * no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n        return Complex(self.real * no.real - self.imaginary * no.imaginary, self.real * no.imaginary + self.imaginary * no.real)\n\n    def __truediv__(self, no):\n        return self.__mul__(Complex(no.real, -1*no.imaginary)).__mul__(Complex(1.0/(no.mod().real)**2, 0))\n\n    def __abs__(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, abs(x), abs(y)]), sep=\'\\n\')\n']
2022-04-12 23:28:11.326283 size on output set 8
2022-04-12 23:28:11.326296 num operations 2
2022-04-12 23:28:11.326301 size on input set 1
2022-04-12 23:28:14.200879 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no): \n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep = '\\n')\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):  #division\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    }
  ],
  "created": 1649806091,
  "object": "edit"
}
2022-04-12 23:28:14.201069 fix spelling mistakes 3 ['\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no): \n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep = \'\\n\')\n', '\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):  #division\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n']
2022-04-12 23:28:14.201194 size on output set 3
2022-04-12 23:28:14.201202 size on input set 3
2022-04-12 23:28:16.230246 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):  #division\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    }
  ],
  "created": 1649806094,
  "object": "edit"
}
2022-04-12 23:28:16.230430 fix syntax errors 3 ['\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):  #division\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n\n', '\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n']
2022-04-12 23:28:28.985992 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(raw_input())\nfor i in range(n):\n    print(i**2)\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 2,
      "text": "import math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep = '\\n')\n"
    }
  ],
  "created": 1649806096,
  "object": "edit"
}
2022-04-12 23:28:28.986181 fix syntax errors 3 ['# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(raw_input())\nfor i in range(n):\n    print(i**2)\n', 'import math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', 'import math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep = \'\\n\')\n']
2022-04-12 23:29:09.884289 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no): \n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == '__main__':\n    c = list(map(float, input().split()))\n    d = list(map(float, input().split()))\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n"
    }
  ],
  "created": 1649806109,
  "object": "edit"
}
2022-04-12 23:29:09.884571 fix syntax errors 3 ['\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no): \n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n\n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n\n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n', '\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary)\n        \n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary)\n        \n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary, self.real*no.imaginary + self.imaginary*no.real)\n        \n    def __truediv__(self, no):\n        return Complex((self.real*no.real + self.imaginary*no.imaginary)/(no.real**2 + no.imaginary**2), (self.imaginary*no.real - self.real*no.imaginary)/(no.real**2 + no.imaginary**2))\n\n    def mod(self):\n        return Complex(math.sqrt(self.real**2 + self.imaginary**2), 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = "%.2f+0.00i" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = "0.00+%.2fi" % (self.imaginary)\n            else:\n                result = "0.00-%.2fi" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = "%.2f+%.2fi" % (self.real, self.imaginary)\n        else:\n            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))\n        return result\n\nif __name__ == \'__main__\':\n    c = list(map(float, input().split()))\n    d = list(map(float, input().split()))\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep=\'\\n\')\n']
2022-04-12 23:29:09.884635 size on output set 8
