["\n\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))", "\n\n#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))", "\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))", "\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n/2)\n    else:\n        return n + h((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()", "\n\n#The answer is:\n\"\"\"\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n\"\"\"", "\n\n# Recursive function for summing up hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))"]