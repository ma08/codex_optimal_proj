["\n\ndef hailstone(n): # this is a recursive function that returns the value of n + n/2 + n/4 + n/8 ....\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input()) # takes in an integer as input\nprint(hailstone(n))\n", "\n# Recursive function for summing up the hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\ndef hailstone(n): \n    if n != 1:\n        if n % 2 == 0:\n            return n + hailstone(n/2)\n        else:\n            return n + hailstone(3*n + 1)\n    else:\n        return 1\n\nn = int(input())\nprint(hailstone(n))\n", "\n\ndef hailstone(n): \n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "\n\ndef hailstone(n): \n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\n#!/usr/bin/env python\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n\n\n#!/usr/bin/env python\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone(n):\n    if n == 0:\n\n        return 0\n    if n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "#!/usr/bin/python3\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(int(n/2))\n    else:\n        return n + h(int((3*n) + 1))\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\ndef hailstone(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n# Recursive function for summing up the hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user's input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return n + hailstone(n/2)\n        else:\n            return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n)) \n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n# Recursive function for summing up hailstorm sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "#!/usr/bin/env python\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n# Define recursively hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "#!/usr/bin/env python3\n\n# Recursive function for summing up the hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\nif __name__ == \"__main__\":\n    # Retrieve user input\n    n = int(input())\n\nprint(hailstone_sum(n))\n", "\n\n# Define recursively hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "\n\n# Retrieve user's input\nn = int(input())\n\n# Recursive function for summing up the hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\nprint(hailstone_sum(n))\n", "\n\ndef hailstone(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3 * n + 1\n\nn = int(input())\nprint(hailstone(n))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef f(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + f(int(n/2))\n    else:\n        return n + f((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(f(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Define recursively hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "\n\n# # Recursive function for summing up the hailstone sequence\n# def hailstone_sum(n):\n#     # Base case\n#     if n == 1:\n#         return 1\n#     # Recursive case\n#     elif n % 2 == 0:\n#         return n + hailstone_sum(n // 2)\n#     else:\n#         return n + hailstone_sum(3*n + 1)\n\n# # Retrieve user's input\n# n = int(input())\n\n# print(hailstone_sum(n))\n\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3*n + 1)\n\nprint(hailstone(5))\n", "\n\ndef hailstone(n): #this is a recursive function that returns the value of n + n/2 + n/4 + n/8 ....\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input()) #takes in an integer as input\nprint(hailstone(n))\n", "\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n / 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\n\nn = int(input())\nprint(hailstone(n))\n", "\n\ndef hailstone(n):\n    if n > 1:\n        if n % 2 == 0:\n            return n + hailstone(n // 2)\n        else:\n            return n + hailstone(3 * n + 1)\n    return 1\n\n\nn = int(input())\nprint(hailstone(n))\n", "import sys\n\ndef f(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + f(n/2)\n    else:\n        return n + f((3*n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(f(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Recursive function for summing up the hailstone sequence\ndef hailstone_sum(n):\n    # Base case:\n    if n == 1: return 1\n    # Recursive case:\n    elif n % 2 == 0: return n + hailstone_sum(n // 2)\n    else: return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return n\n    else:\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n\n\n\ndef main():\n    n = int(input())\n    print(hailstone(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n / 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\ndef hailstone(n):   \n    if n == 1:   \n        return 1   \n    elif n % 2 == 0:   \n        return n + hailstone(n // 2)   \n    else:   \n        return n + hailstone(3 * n + 1)   \n   \nn = int(input())   \nprint(hailstone(n))   \n", "#!/usr/bin/env python3\n\n# Recursive function for summing up hailstorm sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3*n + 1)\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\n# Recursive function for summing up hailstorm sequence \ndef hailstone_sum(n): \n    # Base case \n    if n == 1: \n        return 1 \n    # Recursive case \n    elif n % 2 == 0: \n        return n + hailstone_sum(n // 2) \n    else: \n        return n + hailstone_sum(3*n + 1) \n\n# Retrieve user input \nn = int(input()) \n\nprint(hailstone_sum(n)) \n", "\ndef hailstone(n): \n    if n == 0: \n        return 0 \n    if n % 2 == 0: \n        return n + hailstone(n//2) \n    else: \n        return n + hailstone(3*n + 1) \nn = int(input()) \nprint(hailstone(n)) \n", "\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "import sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n)) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone(n): #this is a recursive function that returns the value of n + n/2 + n/4 + n/8 ...\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input()) #takes in an integer as input\nprint(hailstone(n))\n", "\n# Define recursively defined hailstone sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n# Print sum of hailstone sequence\nprint(sum(hailstone(n)))\n", "#!/usr/bin/python3\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(int(n/2))\n    else:\n        return n + h((3*n) + 1) \n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n\n#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3 * n + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The answer is:\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n/2)\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(int(n/2))\n    else:\n        return n + h(int((3 * n) + 1))\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1: return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input()) \n    print(hailstone_sum(n)) \n\nif __name__ == '__main__': \n    main()\n", "\ndef hailstone(n):\n    \"\"\"\n    >>> hailstone(10)\n    7\n    >>> hailstone(1)\n    4\n    \"\"\"\n    if n == 1:\n        return 4\n    if n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n\nimport sys\n\ndef f(n):\n    while n != 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3*n + 1\n        print(n)\n    return int(n)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    f(num)\n\nif __name__ == '__main__':\n    main()\n"]