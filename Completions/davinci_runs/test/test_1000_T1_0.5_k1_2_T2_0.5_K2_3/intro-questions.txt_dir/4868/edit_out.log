2022-04-13 05:30:51.269921 num operations 2
2022-04-13 05:30:51.269932 size on input set 1
2022-04-13 05:30:53.934393 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n# input the board\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "\n\nboard = [['.'] * 8 for _ in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 2,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1649827851,
  "object": "edit"
}
2022-04-13 05:30:53.934634 fix spelling mistakes 3 ["\n# input the board\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for _ in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-13 05:30:53.934789 size on output set 3
2022-04-13 05:30:53.934798 size on input set 3
2022-04-13 05:31:23.236232 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# input the board\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "# input the board\nboard = [[\".\"] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord(\"a\")] = \"K\"\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord(\"a\")] = \"Q\"\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord(\"a\")] = \"R\"\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord(\"a\")] = \"B\"\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord(\"a\")] = \"N\"\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord(\"a\")] = \"P\"\n        elif piece[0] == \"a\":\n            board[int(piece[1]) - 1][0] = \"P\"\n        elif piece[0] == \"b\":\n            board[int(piece[1]) - 1][1] = \"P\"\n        elif piece[0] == \"c\":\n            board[int(piece[1]) - 1][2] = \"P\"\n        elif piece[0] == \"d\":\n            board[int(piece[1]) - 1][3] = \"P\"\n        elif piece[0] == \"e\":\n            board[int(piece[1]) - 1][4] = \"P\"\n        elif piece[0] == \"f\":\n            board[int(piece[1]) - 1][5] = \"P\"\n        elif piece[0] == \"g\":\n            board[int(piece[1]) - 1][6] = \"P\"\n        elif piece[0] == \"h\":\n            board[int(piece[1]) - 1][7] = \"P\"\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == \"K\":\n            board[i][j] = \"k\"\n        elif board[i][j] == \"Q\":\n            board[i][j] = \"q\"\n        elif board[i][j] == \"R\":\n            board[i][j] = \"r\"\n        elif board[i][j] == \"B\":\n            board[i][j] = \"b\"\n        elif board[i][j] == \"N\":\n            board[i][j] = \"n\"\n        elif board[i][j] == \"P\":\n            board[i][j] = \"p\"\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n# input the board\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1649827853,
  "object": "edit"
}
2022-04-13 05:31:23.236443 fix syntax errors 3 ["# input the board\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", '# input the board\nboard = [["."] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(\':\')[0].strip()\n    pieces = input().split(\':\')[1].strip().split(\',\')\n    for piece in pieces:\n        if piece[0] == \'K\':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord("a")] = "K"\n        elif piece[0] == \'Q\':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord("a")] = "Q"\n        elif piece[0] == \'R\':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord("a")] = "R"\n        elif piece[0] == \'B\':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord("a")] = "B"\n        elif piece[0] == \'N\':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord("a")] = "N"\n        elif piece[0] == \'P\':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord("a")] = "P"\n        elif piece[0] == "a":\n            board[int(piece[1]) - 1][0] = "P"\n        elif piece[0] == "b":\n            board[int(piece[1]) - 1][1] = "P"\n        elif piece[0] == "c":\n            board[int(piece[1]) - 1][2] = "P"\n        elif piece[0] == "d":\n            board[int(piece[1]) - 1][3] = "P"\n        elif piece[0] == "e":\n            board[int(piece[1]) - 1][4] = "P"\n        elif piece[0] == "f":\n            board[int(piece[1]) - 1][5] = "P"\n        elif piece[0] == "g":\n            board[int(piece[1]) - 1][6] = "P"\n        elif piece[0] == "h":\n            board[int(piece[1]) - 1][7] = "P"\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == "K":\n            board[i][j] = "k"\n        elif board[i][j] == "Q":\n            board[i][j] = "q"\n        elif board[i][j] == "R":\n            board[i][j] = "r"\n        elif board[i][j] == "B":\n            board[i][j] = "b"\n        elif board[i][j] == "N":\n            board[i][j] = "n"\n        elif board[i][j] == "P":\n            board[i][j] = "p"\n\nprint(\'+---+---+---+---+---+---+---+---+\')\nfor i in range(8):\n    print(\'|\' + \':\'.join(board[i]) + \'|\')\n    print(\'+---+---+---+---+---+---+---+---+\')\n', "#!/usr/bin/python3\n# input the board\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n# change the board for the white and black pieces\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-13 05:31:45.227549 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip().lower()\n    pieces = input().split(':')[1].strip().lower().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'k'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'r'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'b'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'n'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'p'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'p'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'p'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'p'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'p'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'p'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'p'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'p'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'p'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2): \n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a' or piece[0] == 'b' or piece[0] == 'c' or piece[0] == 'd' or piece[0] == 'e' or piece[0] == 'f' or piece[0] == 'g' or piece[0] == 'h':\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 2,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor j in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1649827883,
  "object": "edit"
}
2022-04-13 05:31:45.227740 fix syntax errors 3 ["\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip().lower()\n    pieces = input().split(':')[1].strip().lower().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'k'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'r'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'b'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'n'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'p'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'p'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'p'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'p'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'p'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'p'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'p'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'p'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'p'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2): \n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a' or piece[0] == 'b' or piece[0] == 'c' or piece[0] == 'd' or piece[0] == 'e' or piece[0] == 'f' or piece[0] == 'g' or piece[0] == 'h':\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor j in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('| ' + ':'.join(board[i]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-13 05:32:06.971653 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nboard = [['.'] * 8 for _ in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "\n\nboard = [['.'] * 8 for _ in range(8)]\n\ncolor = input().split(':')[0].strip()\npieces = input().split(':')[1].strip().split(',')\nfor piece in pieces:\n    if piece[0] == 'K':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n    elif piece[0] == 'Q':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n    elif piece[0] == 'R':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n    elif piece[0] == 'B':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n    elif piece[0] == 'N':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n    elif piece[0] == 'P':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n    elif piece[0] == 'a':\n        board[int(piece[1]) - 1][0] = 'P'\n    elif piece[0] == 'b':\n        board[int(piece[1]) - 1][1] = 'P'\n    elif piece[0] == 'c':\n        board[int(piece[1]) - 1][2] = 'P'\n    elif piece[0] == 'd':\n        board[int(piece[1]) - 1][3] = 'P'\n    elif piece[0] == 'e':\n        board[int(piece[1]) - 1][4] = 'P'\n    elif piece[0] == 'f':\n        board[int(piece[1]) - 1][5] = 'P'\n    elif piece[0] == 'g':\n        board[int(piece[1]) - 1][6] = 'P'\n    elif piece[0] == 'h':\n        board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 2,
      "text": "\n# TODO: can be simplified\nboard = [['.'] * 8 for _ in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1649827905,
  "object": "edit"
}
2022-04-13 05:32:06.971850 fix syntax errors 3 ["\n\nboard = [['.'] * 8 for _ in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for _ in range(8)]\n\ncolor = input().split(':')[0].strip()\npieces = input().split(':')[1].strip().split(',')\nfor piece in pieces:\n    if piece[0] == 'K':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n    elif piece[0] == 'Q':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n    elif piece[0] == 'R':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n    elif piece[0] == 'B':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n    elif piece[0] == 'N':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n    elif piece[0] == 'P':\n        board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n    elif piece[0] == 'a':\n        board[int(piece[1]) - 1][0] = 'P'\n    elif piece[0] == 'b':\n        board[int(piece[1]) - 1][1] = 'P'\n    elif piece[0] == 'c':\n        board[int(piece[1]) - 1][2] = 'P'\n    elif piece[0] == 'd':\n        board[int(piece[1]) - 1][3] = 'P'\n    elif piece[0] == 'e':\n        board[int(piece[1]) - 1][4] = 'P'\n    elif piece[0] == 'f':\n        board[int(piece[1]) - 1][5] = 'P'\n    elif piece[0] == 'g':\n        board[int(piece[1]) - 1][6] = 'P'\n    elif piece[0] == 'h':\n        board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n# TODO: can be simplified\nboard = [['.'] * 8 for _ in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-13 05:32:06.971984 size on output set 9
2022-04-13 05:32:06.971994 num operations 2
2022-04-13 05:32:06.972000 size on input set 1
2022-04-13 05:32:11.672692 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input().split(\";\")\n    black = input().split(\";\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\") \n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].upper()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].upper()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827927,
  "object": "edit"
}
2022-04-13 05:32:11.672865 fix spelling mistakes 3 ['\n\ndef main():\n    white = input().split(";")\n    black = input().split(";")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+") \n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].upper()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].upper()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:32:11.672898 size on output set 3
2022-04-13 05:32:11.672904 size on input set 3
2022-04-13 05:32:18.964028 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print(\"+---+---+---+---+---+---+---+---+\") \n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()+\"w\"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()+\"b\"\n    print(\"+---+---+---+---+---+---+---+---+\") \n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827931,
  "object": "edit"
}
2022-04-13 05:32:18.964228 fix syntax errors 3 ['\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print("+---+---+---+---+---+---+---+---+") \n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()+"w"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()+"b"\n    print("+---+---+---+---+---+---+---+---+") \n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:32:24.661911 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].upper()+\"W\"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].upper()+\"B\"\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = \" \"+white[i][0].upper()+\" \"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = \" \"+black[i][0].upper()+\" \"\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2]) - 1][ord(white[i][1]) - 97] = white[i][0].upper()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2]) - 1][ord(black[i][1]) - 97] = black[i][0].upper()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\" + \"|\".join(chessboard[i]) + \"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827939,
  "object": "edit"
}
2022-04-13 05:32:24.662088 fix syntax errors 3 ['\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].upper()+"W"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].upper()+"B"\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = " "+white[i][0].upper()+" "\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = " "+black[i][0].upper()+" "\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2]) - 1][ord(white[i][1]) - 97] = white[i][0].upper()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2]) - 1][ord(black[i][1]) - 97] = black[i][0].upper()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|" + "|".join(chessboard[i]) + "|")\n        print("+---+---+---+---+---+---+---+---+")\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:32:28.223004 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input().split(\";\")\n    black = input().split(\";\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white) + 1):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black) + 1):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\"; \")\n    black = input().split(\"; \")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(0, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(0, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white = input().split(\";\")\n    black = input().split(\";\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827944,
  "object": "edit"
}
2022-04-13 05:32:28.223186 fix syntax errors 3 ['\n\ndef main():\n    white = input().split(";")\n    black = input().split(";")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white) + 1):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black) + 1):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split("; ")\n    black = input().split("; ")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(0, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(0, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(";")\n    black = input().split(";")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:32:28.223285 size on output set 9
2022-04-13 05:32:28.223298 num operations 2
2022-04-13 05:32:28.223303 size on input set 1
2022-04-13 05:32:44.587938 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827948,
  "object": "edit"
}
2022-04-13 05:32:44.588124 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:32:44.588268 size on output set 3
2022-04-13 05:32:44.588277 size on input set 3
2022-04-13 05:32:48.635499 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|', end='')\n        print('+---+---+---+---+---+---+---+---+')\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827964,
  "object": "edit"
}
2022-04-13 05:32:48.635681 fix syntax errors 3 ["\n\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[0][0] = board[0][7] = 'r'\n    board[7][0] = board[7][7] = 'R'\n    board[0][1] = board[0][6] = 'n'\n    board[7][1] = board[7][6] = 'N'\n    board[0][2] = board[0][5] = 'b'\n    board[7][2] = board[7][5] = 'B'\n    board[0][3] = 'q'\n    board[7][3] = 'Q'\n    board[0][4] = 'k'\n    board[7][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|', end='')\n        print('+---+---+---+---+---+---+---+---+')\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:33:09.792929 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for j in range(8)] for i in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r' \n    board[0][0] = board[0][7] = 'R' \n    board[7][1] = board[7][6] = 'n' \n    board[0][1] = board[0][6] = 'N' \n    board[7][2] = board[7][5] = 'b' \n    board[0][2] = board[0][5] = 'B' \n    board[7][3] = 'q'\n    board[0][3] = 'Q' \n    board[7][4] = 'k'\n    board[0][4] = 'K' \n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P' \n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0] \n            piece = piece[1:] \n            piece_type = piece[0] \n            row = int(piece[1]) - 1 \n            column = ord(piece[2]) - ord('a') \n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k' \n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q' \n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r' \n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b' \n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n' \n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p' \n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p' \n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p' \n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|') \n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827968,
  "object": "edit"
}
2022-04-13 05:33:09.793149 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for j in range(8)] for i in range(8)]\n    board[7][0] = board[7][7] = 'r'\n    board[0][0] = board[0][7] = 'R'\n    board[7][1] = board[7][6] = 'n'\n    board[0][1] = board[0][6] = 'N'\n    board[7][2] = board[7][5] = 'b'\n    board[0][2] = board[0][5] = 'B'\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k'\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P'\n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r' \n    board[0][0] = board[0][7] = 'R' \n    board[7][1] = board[7][6] = 'n' \n    board[0][1] = board[0][6] = 'N' \n    board[7][2] = board[7][5] = 'b' \n    board[0][2] = board[0][5] = 'B' \n    board[7][3] = 'q'\n    board[0][3] = 'Q' \n    board[7][4] = 'k'\n    board[0][4] = 'K' \n    for i in range(8):\n        board[1][i] = 'p'\n        board[6][i] = 'P' \n    \n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0] \n            piece = piece[1:] \n            piece_type = piece[0] \n            row = int(piece[1]) - 1 \n            column = ord(piece[2]) - ord('a') \n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k' \n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q' \n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r' \n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b' \n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n' \n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p' \n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p' \n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p' \n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|') \n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:33:27.246098 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r' # rooks\n    board[0][0] = board[0][7] = 'R' # rooks\n    board[7][1] = board[7][6] = 'N' # knights\n    board[0][1] = board[0][6] = 'n' # knights\n    board[7][2] = board[7][5] = 'B' # bishops\n    board[0][2] = board[0][5] = 'b' # bishops\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k' # kings\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p' # pawns\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a': # left pawn\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h': # right pawn\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main(args):\n    return \"Hello World!\"\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'  # rook\n    board[0][0] = board[0][7] = 'R'  # rook\n    board[7][1] = board[7][6] = 'N'  # knight\n    board[0][1] = board[0][6] = 'n'  # knight\n    board[7][2] = board[7][5] = 'B'  # bishop\n    board[0][2] = board[0][5] = 'b'  # bishop\n    board[7][3] = 'q'  # queen\n    board[0][3] = 'Q'  # queen\n    board[7][4] = 'k'  # king\n    board[0][4] = 'K'  # king\n    for i in range(8):\n        board[1][i] = 'p'  # pawn\n        board[6][i] = 'P'  # pawn\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'  # pawn promotion\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'  # pawn promotion\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649827989,
  "object": "edit"
}
2022-04-13 05:33:27.246314 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r' # rooks\n    board[0][0] = board[0][7] = 'R' # rooks\n    board[7][1] = board[7][6] = 'N' # knights\n    board[0][1] = board[0][6] = 'n' # knights\n    board[7][2] = board[7][5] = 'B' # bishops\n    board[0][2] = board[0][5] = 'b' # bishops\n    board[7][3] = 'q'\n    board[0][3] = 'Q'\n    board[7][4] = 'k' # kings\n    board[0][4] = 'K'\n    for i in range(8):\n        board[1][i] = 'p' # pawns\n        board[6][i] = 'P'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a': # left pawn\n                board[row][0] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'h': # right pawn\n                board[row][7] = 'P' if color == 'W' else 'p'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", '\ndef main(args):\n    return "Hello World!"\n', "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'r'  # rook\n    board[0][0] = board[0][7] = 'R'  # rook\n    board[7][1] = board[7][6] = 'N'  # knight\n    board[0][1] = board[0][6] = 'n'  # knight\n    board[7][2] = board[7][5] = 'B'  # bishop\n    board[0][2] = board[0][5] = 'b'  # bishop\n    board[7][3] = 'q'  # queen\n    board[0][3] = 'Q'  # queen\n    board[7][4] = 'k'  # king\n    board[0][4] = 'K'  # king\n    for i in range(8):\n        board[1][i] = 'p'  # pawn\n        board[6][i] = 'P'  # pawn\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'K' if color == 'W' else 'k'\n            elif piece_type == 'Q':\n                board[row][column] = 'Q' if color == 'W' else 'q'\n            elif piece_type == 'R':\n                board[row][column] = 'R' if color == 'W' else 'r'\n            elif piece_type == 'B':\n                board[row][column] = 'B' if color == 'W' else 'b'\n            elif piece_type == 'N':\n                board[row][column] = 'N' if color == 'W' else 'n'\n            elif piece_type == 'P':\n                board[row][column] = 'P' if color == 'W' else 'p'\n            elif piece_type == 'a':\n                board[row][0] = 'P' if color == 'W' else 'p'  # pawn promotion\n            elif piece_type == 'h':\n                board[row][7] = 'P' if color == 'W' else 'p'  # pawn promotion\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:33:27.246435 size on output set 9
2022-04-13 05:33:27.246447 num operations 2
2022-04-13 05:33:27.246452 size on input set 1
2022-04-13 05:33:30.311571 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828007,
  "object": "edit"
}
2022-04-13 05:33:30.311757 fix spelling mistakes 3 ["\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:33:30.311800 size on output set 3
2022-04-13 05:33:30.311807 size on input set 3
2022-04-13 05:33:33.558865 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for _ in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828010,
  "object": "edit"
}
2022-04-13 05:33:33.559097 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for _ in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python3\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:33:35.338613 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828013,
  "object": "edit"
}
2022-04-13 05:33:35.338799 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:33:37.425846 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for _ in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828015,
  "object": "edit"
}
2022-04-13 05:33:37.426032 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for _ in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(1, 3):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 2 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:33:37.426073 size on output set 9
2022-04-13 05:33:37.426083 num operations 2
2022-04-13 05:33:37.426088 size on input set 1
2022-04-13 05:33:41.338845 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip().lower()\n    black = stdin.readline().strip().split(\":\")[1].strip().lower()\n    solve(white, black)\n\nmain()\n"
    }
  ],
  "created": 1649828017,
  "object": "edit"
}
2022-04-13 05:33:41.339091 fix spelling mistakes 3 ['\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n', '\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n', '\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip().lower()\n    black = stdin.readline().strip().split(":")[1].strip().lower()\n    solve(white, black)\n\nmain()\n']
2022-04-13 05:33:41.339134 size on output set 3
2022-04-13 05:33:41.339140 size on input set 3
2022-04-13 05:33:44.140922 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for _ in range(8)] for _ in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\"] * 8 for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649828021,
  "object": "edit"
}
2022-04-13 05:33:44.141122 fix syntax errors 3 ['\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for _ in range(8)] for _ in range(8)]\n    for piece in white.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n', '\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n', '\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["."] * 8 for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].lower()\n    for piece in black.split(","):\n        board[int(piece[1]) - 1][ord(piece[0]) - 97] = piece[2].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:33:50.012959 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\"] * 8 for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip().lower()\n    black = stdin.readline().strip().split(\":\")[1].strip().lower()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        print(\"+---+---+---+---+---+---+---+---+\")\n        for piece in line:\n            print(\"|\", end=\"\")\n            if piece == \".\":\n                print(\":::\", end=\"\")\n            else:\n                print(\":%s:\" % piece, end=\"\")\n        print(\"|\")\n    print(\"+---+---+---+---+---+---+---+---+\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip().lower()\n    black = stdin.readline().strip().split(\":\")[1].strip().lower()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin, stdout\n\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for i in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip().lower()\n    black = stdin.readline().strip().split(\":\")[1].strip().lower()\n    solve(white, black)\n\nmain()\n"
    }
  ],
  "created": 1649828024,
  "object": "edit"
}
2022-04-13 05:33:50.013141 fix syntax errors 3 ['from sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["."] * 8 for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip().lower()\n    black = stdin.readline().strip().split(":")[1].strip().lower()\n    solve(white, black)\n\nmain()\n', '\n\nfrom sys import stdin\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        print("+---+---+---+---+---+---+---+---+")\n        for piece in line:\n            print("|", end="")\n            if piece == ".":\n                print(":::", end="")\n            else:\n                print(":%s:" % piece, end="")\n        print("|")\n    print("+---+---+---+---+---+---+---+---+")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip().lower()\n    black = stdin.readline().strip().split(":")[1].strip().lower()\n    solve(white, black)\n\nmain()\n', '\n\nfrom sys import stdin, stdout\n\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for i in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip().lower()\n    black = stdin.readline().strip().split(":")[1].strip().lower()\n    solve(white, black)\n\nmain()\n']
2022-04-13 05:33:58.695048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "from sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":{}:\".format(piece))\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip()\n    black = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white, black)\n\nmain()\n"
    }
  ],
  "created": 1649828030,
  "object": "edit"
}
2022-04-13 05:33:58.695302 fix syntax errors 3 ['\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n', 'from sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n', '\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":{}:".format(piece))\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip()\n    black = stdin.readline().strip().split(":")[1].strip()\n    solve(white, black)\n\nmain()\n']
2022-04-13 05:33:58.695345 size on output set 9
2022-04-13 05:33:58.695357 num operations 2
2022-04-13 05:33:58.695363 size on input set 1
2022-04-13 05:34:02.241052 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece from index\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a chess piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the chess piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the chess piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a chess piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\"\"\"\nThis program prints a chessboard with the pieces in their positions\n\"\"\"\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828038,
  "object": "edit"
}
2022-04-13 05:34:02.241274 fix spelling mistakes 3 ['\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece from index\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a chess piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the chess piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the chess piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a chess piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n', '"""\nThis program prints a chessboard with the pieces in their positions\n"""\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:34:02.241437 size on output set 3
2022-04-13 05:34:02.241450 size on input set 3
2022-04-13 05:34:06.907346 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a chess piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the chess piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the chess piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a chess piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a chess piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the chess piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the chess piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a chess piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n        print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a chess piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the chess piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the chess piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a chess piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828042,
  "object": "edit"
}
2022-04-13 05:34:06.907531 fix syntax errors 3 ['\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a chess piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the chess piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the chess piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a chess piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a chess piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the chess piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the chess piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a chess piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n        print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a chess piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the chess piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the chess piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a chess piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:34:11.652766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\"\"\"\nThis program prints a chessboard with the pieces in their positions\n\"\"\"\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\nThis program prints a chessboard with the pieces in their positions\n\"\"\"\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\"\"\"\nThis program prints a chessboard with the pieces in their positions\n\"\"\"\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece\n    \"\"\"\n    return str((index / 8) + 1), chr((index % 8) + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828046,
  "object": "edit"
}
2022-04-13 05:34:11.653163 fix syntax errors 3 ['"""\nThis program prints a chessboard with the pieces in their positions\n"""\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '"""\nThis program prints a chessboard with the pieces in their positions\n"""\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '"""\nThis program prints a chessboard with the pieces in their positions\n"""\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece\n    """\n    return str((index / 8) + 1), chr((index % 8) + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:34:16.431489 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece from index\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n        print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece from index\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece from index\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|' + '|'.join(board[i*8:(i+1)*8]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828051,
  "object": "edit"
}
2022-04-13 05:34:16.431682 fix syntax errors 3 ['\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece from index\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n        print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece from index\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece from index\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print(\'+---+---+---+---+---+---+---+---+\')\n    for i in range(8):\n        print(\'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:34:16.431796 size on output set 6
2022-04-13 05:34:16.431809 num operations 2
2022-04-13 05:34:16.431813 size on input set 1
2022-04-13 05:34:36.219585 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1]\n    black_pieces = input().split(': ')[1]\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n        for row in board:\n            print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n            print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].upper() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(',')]\n    black_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(',')]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828056,
  "object": "edit"
}
2022-04-13 05:34:36.219772 fix spelling mistakes 3 ["\n\ndef main():\n    white_pieces = input().split(': ')[1]\n    black_pieces = input().split(': ')[1]\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n        for row in board:\n            print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n            print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].upper() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(',')]\n    black_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(',')]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:34:36.219819 size on output set 3
2022-04-13 05:34:36.219826 size on input set 3
2022-04-13 05:34:42.489409 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n__author__ = 'ipetrash'\n\n\n\ndef main():\n    white_pieces = input('\u0411\u0435\u043b\u044b\u0435 \u0444\u0438\u0433\u0443\u0440\u044b: ').split(',')\n    white_pieces = [piece[0].upper() + piece[1:] for piece in white_pieces]\n    black_pieces = input('\u0427\u0435\u0440\u043d\u044b\u0435 \u0444\u0438\u0433\u0443\u0440\u044b: ').split(',')\n    black_pieces = [piece[0].lower() + piece[1:] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].upper() + piece[1:] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1:] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].upper() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('| ' + '| '.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828076,
  "object": "edit"
}
2022-04-13 05:34:42.489652 fix syntax errors 3 ["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n__author__ = 'ipetrash'\n\n\n\ndef main():\n    white_pieces = input('Белые фигуры: ').split(',')\n    white_pieces = [piece[0].upper() + piece[1:] for piece in white_pieces]\n    black_pieces = input('Черные фигуры: ').split(',')\n    black_pieces = [piece[0].lower() + piece[1:] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].upper() + piece[1:] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1:] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(',')\n    white_pieces = [piece[0].upper() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(',')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0]\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('| ' + '| '.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:34:49.384949 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1]\n    black_pieces = input().split(': ')[1]\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        for row in board:\n            print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white_pieces = raw_input().split(': ')[1]\n    black_pieces = raw_input().split(': ')[1]\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n        for row in board:\n            print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n            print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].strip()\n    black_pieces = input().split(': ')[1].strip()\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1:].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1:].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        for row in board:\n            print('|' + '|'.join([piece if piece != '.' else ':::' for piece in row]) + '|')\n            print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828082,
  "object": "edit"
}
2022-04-13 05:34:49.385136 fix syntax errors 3 ["\n\ndef main():\n    white_pieces = input().split(': ')[1]\n    black_pieces = input().split(': ')[1]\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        for row in board:\n            print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = raw_input().split(': ')[1]\n    black_pieces = raw_input().split(': ')[1]\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n        for row in board:\n            print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n            print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].strip()\n    black_pieces = input().split(': ')[1].strip()\n    if white_pieces == '-':\n        white_pieces = []\n    else:\n        white_pieces = white_pieces.split(',')\n        white_pieces = [piece[0] + piece[1:].lower() for piece in white_pieces]\n    if black_pieces == '-':\n        black_pieces = []\n    else:\n        black_pieces = black_pieces.split(',')\n        black_pieces = [piece[0] + piece[1:].lower() for piece in black_pieces]\n\n    if not white_pieces and not black_pieces:\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n        print('|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|:::::::|')\n    else:\n        board = [list('........') for _ in range(8)]\n        for piece in white_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n        for piece in black_pieces:\n            board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n        for row in board:\n            print('|' + '|'.join([piece if piece != '.' else ':::' for piece in row]) + '|')\n            print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:34:59.086640 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    black_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece.upper() + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main(white_pieces, black_pieces):\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for w in white_pieces:\n        board[ord(w[1]) - ord('1')][ord(w[0]) - ord('a')] = w[0].upper()\n    for b in black_pieces:\n        board[ord(b[1]) - ord('1')][ord(b[0]) - ord('a')] = b[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    white_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    black_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828089,
  "object": "edit"
}
2022-04-13 05:34:59.086845 fix syntax errors 3 ["\n\ndef main():\n    white_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    black_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece.upper() + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main(white_pieces, black_pieces):\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for w in white_pieces:\n        board[ord(w[1]) - ord('1')][ord(w[0]) - ord('a')] = w[0].upper()\n    for b in black_pieces:\n        board[ord(b[1]) - ord('1')][ord(b[0]) - ord('a')] = b[0].lower()\n        print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n", "\ndef main():\n    white_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    black_pieces = [piece[0] + piece[1].lower() for piece in input().split(': ')[1].split(', ')]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 05:34:59.086883 size on output set 9
2022-04-13 05:34:59.086904 num operations 2
2022-04-13 05:34:59.086910 size on input set 1
2022-04-13 05:35:03.613404 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828099,
  "object": "edit"
}
2022-04-13 05:35:03.613631 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:35:03.613762 size on output set 3
2022-04-13 05:35:03.613775 size on input set 3
2022-04-13 05:35:05.665083 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main(args):\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main(sys.argv)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828103,
  "object": "edit"
}
2022-04-13 05:35:05.665275 fix syntax errors 3 ['\n\nimport sys\n\ndef main(args):\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main(sys.argv)\n', '\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:35:11.780580 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+\\n', end='')\n        for i in range(8):\n            print('| ', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='') \n            print(' |\\n', end='')\n        print('+---+---+---+---+---+---+---+---+\\n')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else ':.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\",\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for piece in pieces:\n            if piece == \"\":\n                continue\n            board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].lower()\n            if piece[0].isupper():\n                board[8 - int(piece[2])][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828105,
  "object": "edit"
}
2022-04-13 05:35:11.780855 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\\n\', end=\'\')\n        for i in range(8):\n            print(\'| \', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\') \n            print(\' |\\n\', end=\'\')\n        print(\'+---+---+---+---+---+---+---+---+\\n\')\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \':.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(",")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for piece in pieces:\n            if piece == "":\n                continue\n            board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n            if piece[0].isupper():\n                board[8 - int(piece[2])][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:35:17.177937 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\") if line.find(\":\") != -1 else [line]\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].lower() if piece[0] != 'K' else piece[0]\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].upper() if piece[0] != 'K' else piece[0]\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord('1'))][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print(\"+---+---+---+---+---+---+---+---+\")\n        for i in range(8):\n            print(\"|\", end=\"\")\n            for j in range(8):\n                print(board[i][j] + \":\" if (i + j) % 2 == 0 else \".\", end=\"\")\n            print(\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649828111,
  "object": "edit"
}
2022-04-13 05:35:17.178126 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":") if line.find(":") != -1 else [line]\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].lower() if piece[0] != \'K\' else piece[0]\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].upper() if piece[0] != \'K\' else piece[0]\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[7 - (ord(piece[2]) - ord(\'1\'))][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print("+---+---+---+---+---+---+---+---+")\n        for i in range(8):\n            print("|", end="")\n            for j in range(8):\n                print(board[i][j] + ":" if (i + j) % 2 == 0 else ".", end="")\n            print("|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 05:35:17.178268 size on output set 8
