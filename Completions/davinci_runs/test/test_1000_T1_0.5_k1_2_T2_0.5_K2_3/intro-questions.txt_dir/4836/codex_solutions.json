["\n\ndef main():\n    n, c = map(int, input().split())\n    fruits = [int(x) for x in input().split()]\n    eaten = 0\n    for i in range(n):\n        if fruits[i] <= c:\n            c -= fruits[i]\n            eaten += 1\n    print(eaten)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, c = map(int, input().split())\n    w = list(map(int, input().split()))\n    fruits = sorted(w)\n\n    i = 0\n    total = 0\n    while i < n:\n        if total + fruits[i] <= c:\n            total += fruits[i]\n            i += 1\n        else:\n            break\n\n    print(i)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, c = map(int, input().split())\nw = list(map(int, input().split()))\n\neaten = 0\ncurr = 0\nw.sort()\n\nfor x in w:\n    if curr + x <= c:\n        curr += x\n        eaten += 1\n\nprint(eaten)", "\n\n#-----main-----\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\neaten = set()\ncur_sum = 0\nfor fruit in fruits:\n    if fruit + cur_sum <= c and fruit not in eaten:\n        eaten.add(fruit)\n        cur_sum += fruit\n\nprint(len(eaten))", "\n\nfrom sys import stdin\nfrom collections import deque\n\nn, c = map(int, stdin.readline().split())\nweights = deque(map(int, stdin.readline().split()))\n\neaten = set()\nwhile weights and c >= weights[0]:\n    c -= weights.popleft()\n    eaten.add(c)\n\nprint(len(eaten))", "\n\n#N, C = map(int, input().split())\nN, C = 5, 5\n#w = list(map(int, input().split()))\nw = [3, 1, 2, 1, 1]\n\ncount = 0\n\nwhile C > 0:\n    if w[count] <= C:\n        C -= w[count]\n        count += 1\n    else:\n        break\n\nprint(count)", "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().split())\n    weights = map(int, sys.stdin.readline().split())\n    weights.sort()\n    eaten = 0\n    for i in range(N):\n        if weights[i] <= C:\n            C -= weights[i]\n            eaten += 1\n    print eaten\n\nmain()", "\n\nn, c = map(int, input().split())\nfruits = list(map(int, input().split()))\n\n# create a set of unique fruits\nunique_fruits = set()\n\n# iterate over the fruits\nfor fruit in fruits:\n    # if the fruit is not in the set and we have enough capacity\n    # add the fruit to the set\n    if fruit not in unique_fruits and c - fruit >= 0:\n        unique_fruits.add(fruit)\n        c -= fruit\n\n# print the number of unique fruits\nprint(len(unique_fruits))"]