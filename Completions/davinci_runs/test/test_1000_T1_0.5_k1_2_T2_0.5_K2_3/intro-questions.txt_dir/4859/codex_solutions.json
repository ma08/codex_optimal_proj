["\n\nb, d, c, l = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(l // b + 1):\n    for j in range(l // d + 1):\n        for k in range(l // c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))", "\n\nimport sys\n\nb, d, c, l = map(int, sys.stdin.readline().split())\n\nif l % 2 != 0:\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)", "\n\n#This solution is incredibly slow, but it works. It uses brute force to find all possible combinations.\n\nb, d, c, l = map(int, input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])", "\nimport sys\n\ndef main():\n    b, d, c, l = map(int, sys.stdin.readline().split())\n    if l % 2 == 1 or l < b or l < c or l < d or l > b + d + c * 2:\n        print(\"impossible\")\n        return\n    for i in range(0, l // b + 1):\n        for j in range(0, l // d + 1):\n            for k in range(0, l // c + 1):\n                if i * b + j * d + k * c == l:\n                    print(i, j, k)\n\nif __name__ == (\"__main__\"):\n    main()", "\n\nimport sys\n\ndef legs(b,d,c,l):\n    if l<0:\n        return\n    if b==0 and d==0 and c==0:\n        print(\"{} {} {}\".format(b,d,c))\n        return\n    legs(b-1,d,c,l-b)\n    legs(b,d-1,c,l-d)\n    legs(b,d,c-1,l-c)\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    l = int(data[3])\n    legs(b,d,c,l)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()]\n    solutions = []\n    for num_birds in range(l//b + 1):\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()", "\n\nimport sys\n\ndef possible(b, d, c, l):\n    for i in xrange(0, l/b + 1):\n        for j in xrange(0, l/d + 1):\n            for k in xrange(0, l/c + 1):\n                if i*b + j*d + k*c == l:\n                    print i, j, k\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    possible(b, d, c, l)\n\nif __name__ == '__main__':\n    main()", "\n\nfrom itertools import product\n\nb, d, c, l = map(int, input().split())\n\nfor i, j, k in product(range(l//b + 1), range(l//d + 1), range(l//c + 1)):\n    if i*b + j*d + k*c == l:\n        print(i, j, k)"]