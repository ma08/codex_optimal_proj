["\nimport sys\n\n\ndef legs(b, d, c, le):\n    if le < 0:\n        return 0\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b, d, c))\n        return 1\n    return legs(b - 1, d, c, le - b) + legs(b, d - 1, c, le - d) + legs(b, d, c - 1, le - c)\n\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    le = int(data[3])\n    print(legs(b, d, c, le))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef legs(b, d, c, le):\n    if le < 0:\n        return\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b, d, c))\n        return\n    legs(b - 1, d, c, le - b)\n    legs(b, d - 1, c, le - d)\n    legs(b, d, c - 1, le - c)\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    le = int(data[3])\n    legs(b, d, c, le)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#This solution is incredibly slow, but it works. It uses brute force to find all possible combinations.\n\nb, d, c, l = map(int, input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\n\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()]\n    solutions = []\n    for num_birds in range(l//b + 1):\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "\n\n#This solution is incredibly slow, but it works. It uses brute force to find all possible combinations.\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\n\nimport sys\n\nb, d, c, l = map(int, sys.stdin.readline().split())\n\nif l % 2 != 0:\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\n\nimport sys\n\ndef legs(b,d,c,l):\n    if l<0:\n        return\n    if b==0 and d==0 and c==0:\n        print(\"{} {} {}\".format(b,d,c))\n        return\n    if b > 0:\n        legs(b-1,d,c,l-b)\n    if d > 0:\n        legs(b,d-1,c,l-d)\n    if c > 0:\n        legs(b,d,c-1,l-c)\n\ndef main():\n    b = int(sys.argv[1])\n    d = int(sys.argv[2])\n    c = int(sys.argv[3])\n    l = int(sys.argv[4])\n    legs(b, d, c, l)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nb, d, c, length = [int(x) for x in input().split()]\nprint(length)\nsolutions = []\n\nfor i in range(length // b + 1):\n    for j in range(length // d + 1):\n        for k in range(length // c + 1):\n            if i * b + j * d + k * c == length:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))\n", "import sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()]\n    solutions = []\n    for num_birds in range(l // b + 1):\n        for num_dogs in range(l // d + 1):\n            for num_cats in range(l // c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\na, b, c, d = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(d // a + 1):\n    for j in range(d // b + 1):\n        for k in range(d // c + 1):\n            if i * a + j * b + k * c == d:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print('impossible')\nelse:\n    for solution in sorted(solutions):\n        print(' '.join([str(x) for x in solution]))\n", "\n\n# This solution is incredibly slow, but it works. It uses brute force to find all possible combinations.\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\n\nimport sys\n\ndef legs(b, d, c, l):\n    if l < 0:\n        return\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b, d, c)) \n        return\n    legs(b - 1, d, c, l - b)\n    legs(b, d - 1, c, l - d)\n    legs(b, d, c - 1, l - c)\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    l = int(data[3])\n    legs(b, d, c, l)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()]\n    solutions = []\n    for num_birds in range(l//b + 1):\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "from itertools import product\n\nb, d, c, l = map(int, input().split())\n\nfor i, j, k in product(range(l // b + 1), range(l // d + 1), range(l // c + 1)):  # noqa\n    if i * b + j * d + k * c == l:\n        print(i, j, k)\n", "\nimport sys\n\nb, d, c, n = map(int, sys.stdin.readline().split())\n\nif n % 2 != 0:\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor birds in range(n // b + 1):\n    for dogs in range(n // d + 1):\n        for cats in range(n // c + 1):\n            if birds * b + dogs * d + cats * c == n:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\na, b, c, d = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(d // a + 1):\n    for j in range(d // b + 1):\n        for k in range(d // c + 1):\n            if i * a + j * b + k * c == d:\n                solutions.append(sorted((i, j, k)))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in solutions:\n        print(\" \".join([str(x) for x in solution]))\n", "\nimport sys\n\ndef possible(b, d, c, l, lst):\n    for i in range(0, l/b + 1):\n        for j in range(0, l/d + 1):\n            for k in range(0, l/c + 1):\n                if i*b + j*d + k*c == l:\n                    lst.append((i, j, k))\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    lst = []\n    possible(b, d, c, l, lst)\n    for i, j, k in lst:\n        print i, j, k\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nb, d, c, l = map(int, input().split())\n\nif l % 2 != 0:\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\n\na, b, c, l = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(l // b + 1): # for a in range(l // a + 1):\n    for j in range(l // d + 1): # for b in range(l // b + 1):\n        for k in range(l // c + 1): # for c in range(l // c + 1):\n            if i * b + j * d + k * c == l: # if a * a + b * b + c * c == l:\n                solutions.append((i, j, k)) # solutions.append((a, b, c))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))\n", "\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()][:4]\n    solutions = []\n    for num_birds in range(l//b+1):\n        for num_dogs in range(l//d+1):\n            for num_cats in range(l//c+1):\n                if num_birds * b + num_dogs * d + num_cats * c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])            \n    if solutions:\n        solutions.sort(key=lambda x: sum(x))\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "\n\n# This solution is incredibly slow, but it works. It uses brute force to find all possible combinations. \n\nb, d, c, l = map(int, input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\nb, d, c, length = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(length // b + 1):\n    for j in range(length // d + 1):\n        for k in range(length // c + 1):\n            if i * b + j * d + k * c == length:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))\n", "from itertools import product\nb, d, c, l = map(int, input().split())  # \u0432\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\n\nfor i, j, k in product(range(l//b + 1), range(l//d + 1), range(l//c + 1)):\n    if i * b + j * d + k * c == l:\n        print(i, j, k)  # \u0432\u044b\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\n", "\n\nfrom itertools import product\n\nb, d, c, l = map(int, input().split())\n\nfor i, j, k in product(range(l//b + 1), range(l//d + 1), range(l//c + 1)):\n    if i*b + j*d + k*c == l:\n        print(i, j, k)\n", "\nimport sys\n\ndef main():\n    b, d, c, l = map(int, sys.stdin.readline().split())\n    if l % 2 == 1 or l < b or l < d or l < c or l > b + d + c * 2:\n        print(\"impossible\")\n        return\n    for i in range(0, l // b + 1):\n        for j in range(0, l // d + 1):\n            for k in range(0, l // c + 1):\n                if i * b + j * d + k * c == l:\n                    print(i, j, k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n'''\n#This solution is incredibly slow, but it works. It uses brute force to find all possible combinations\n\nb, d, c, l = map(int, input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n'''\n", "\nimport sys, re\n\ndef possible(b, d, c, l, f):\n    for i in xrange(0, l/b + 1): # big\n        for j in xrange(0, l/d + 1): # small\n            for k in xrange(0, l/c + 1): # medium\n                if i*b + j*d + k*c == l: # if the total length is l\n                    if i <= f and j <= f and k <= f: # if each of the number is less than or equal to f\n                        print i, j, k, '\\n'\n                        return\n    print 'impossible'\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l, f = map(int, lines[0].strip().split(' '))\n    possible(b, d, c, l, f)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef possible(l, b, d, c):\n    max_b = l/b + 1\n    max_d = l/d + 1\n    max_c = l/c + 1\n    for i in xrange(0, max_b):\n        for j in xrange(0, max_d):\n            for k in xrange(0, max_c):\n                if i*b + j*d + k*c == l:\n                    print(i, j, k)\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    possible(l, b, d, c)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()]\n    solutions = []\n    for num_birds in range(l//b + 1):\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    if d % 2 == 1 or d < a or d < b or d < c or d > a + b + c * 2:\n        print(\"impossible\")\n        return\n    for i in range(0, d // a + 1):\n        for j in range(0, d // b + 1):\n            for k in range(0, d // c + 1):\n                if i * a + j * b + k * c == d:\n                    print(i, j, k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()] # b is birds, d is dogs, c is cats, l is the limit\n    solutions = []\n    for num_birds in range(l//b + 1): # check all possible combinations\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\n\nmain()\n", "\nimport sys\nb, d, c, l = map(int, input().split())\n\nif l % 2 != 0:\n    print('impossible')\n    sys.exit()\nanswers = []\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\n\nimport sys\n\ndef legs(b,d,c,l):\n    if l < 0:\n        return\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b,d,c)) \n        return\n    legs(b - 1,d,c,l - b)\n    legs(b,d - 1,c,l - d)\n    legs(b,d,c - 1,l - c)\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    l = int(data[3])\n    legs(b, d, c, l)\n\nif __name__ == \"__main__\":\n    main()\n", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(input())\nprint(l)\n", "import sys\n\ndef main():\n    b, d, c, l = map(int, sys.stdin.readline().split())\n    if l % 2 == 1 or l < b or l < c or l < d or l > b + d + c * 2:\n        print(\"impossible\")\n        return\n    for i in range(0, l // b + 1):\n        for j in range(0, l // d + 1):\n            for k in range(0, l // c + 1):\n                if i * b + j * d + k * c == l:\n                    print(i, j, k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n \nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n \nf = sys.stdin\no = sys.stdout\n \ndef solve(a, b, c, k):\n    if a + b + c > k:\n        return None\n    if a + b + c == k:\n        return [a, b, c]\n    for i in range(k // a + 1):\n        for j in range(k // b + 1):\n            for l in range(k // c + 1):\n                if i * a + j * b + l * c == k:\n                    return [i, j, l]\n    return None\n \ndef main():\n    b, d, c, l = map(int, f.readline().split())\n    solutions = []\n    for i in range(l // b + 1):\n        for j in range(l // d + 1):\n            for k in range(l // c + 1):\n                if i * b + j * d + k * c == l:\n                    solutions.append([i, j, k])\n    if len(solutions) == 0:\n        print(\"impossible\", file = o)\n    else:\n        for i in sorted(solutions):\n            print(*i, file = o)\n \nif __name__ == \"__main__\":\n    main()\n", "import sys, re\n\ndef possible(b, d, c, l, f):\n    for i in xrange(0, l/b + 1): # big\n        for j in xrange(0, l/d + 1): # small\n            for k in xrange(0, l/c + 1): # medium\n                if i*b + j*d + k*c == l: # if the total length is l\n                    if i <= f and j <= f and k <= f: # if each of the number is less than or equal to f\n                        print i, j, k\n                        return\n    print 'impossible'\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l, f = map(int, lines[0].strip().split(' '))\n    possible(b, d, c, l, f)\n\nif __name__ == '__main__':\n    main()\n", "\nb, d, c, length = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(length // b + 1):\n    for j in range(length // d + 1):\n        for k in range(length // c + 1):\n            if i * b + j * d + k * c == length:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions, key=lambda x: x[0]):\n        print(\" \".join([str(x) for x in solution]))\n", "\nfrom itertools import product\nb, d, c, l = map(int, input().split())  # \u0432\u0432\u043e\u0434\n\nfor i, j, k in product(range(l//b + 1), range(l//d + 1), range(l//c + 1)):\n    if i*b + j*d + k*c == l:\n        print(i, j, k)\n", "\nimport sys\n\nb, d, c, length = map(int, sys.stdin.readline().split())  # \u0432\u0432\u043e\u0434\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n\nif length % 2 != 0:\n    print('impossible')  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c\n    sys.exit()\n\nanswers = []  # \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n\nfor birds in range(length // b + 1):\n    for dogs in range(length // d + 1):  # \u043f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u043c\n        for cats in range(length // c + 1):  # \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n            if birds * b + dogs * d + cats * c == length:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')  # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\nimport sys\n\nb, d, c, length = map(int, sys.stdin.readline().split())\n\nif length % 2 != 0:\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor birds in range(length // b + 1):\n    for dogs in range(length // d + 1):\n        for cats in range(length // c + 1):\n            if birds * b + dogs * d + cats * c == length:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\nimport sys\nb, d, c, n = map(int, sys.stdin.readline().split())\nif n % 2 != 0:\n    print('impossible')\n    sys.exit()\nanswers = []\nfor birds in range(n // b + 1):\n    for dogs in range(n // d + 1):\n        for cats in range(n // c + 1):\n            if birds * b + dogs * d + cats * c == n:\n                answers.append([birds, dogs, cats])\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\n\nb, d, c, l = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(l // b + 1):\n    for j in range(l // d + 1):\n        for k in range(l // c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))\n", "\n\n# This solution is incredibly slow, but it works. It uses brute force to find all possible combinations\n\nb, d, c, l = map(int, input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l // b + 1):\n    for j in range(l // d + 1):\n        for k in range(l // c + 1):\n            if i * b + j * d + k * c == l and i * b + j * d + k * c > 0:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions, key=lambda x: (x[0] + x[1] + x[2], x[0] * b, x[1] * d, x[2] * c)):\n        print(i[0], i[1], i[2], sep=' ')\n", "\n\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()]  # b = birds, d = dogs, c = cats\n    solutions = []\n    for num_birds in range(l//b + 1):  # how many birds\n        for num_dogs in range(l//d + 1):  # how many dogs\n            for num_cats in range(l//c + 1):  # how many cats\n                if num_birds*b + num_dogs*d + num_cats*c == l:  # if the total number of legs is correct\n                    solutions.append([num_birds, num_dogs, num_cats])  # add it to the list of solutions\n    if solutions:\n        solutions.sort()  # sort the list of solutions\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))  # print each solution\n    else:\n        print(\"impossible\")  # if no solutions were found\n\nmain()\n", "\n\"\"\"\nThis is a program that will count the number of ways\nyou can have a number of legs with a number of cows,\ndogs, and chickens\n\"\"\"\n\nimport sys\n\ndef legs(b,d,c,l):\n    if l<0:\n        return\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b,d,c))\n        return\n    legs(b-1, d, c, l-b)\n    legs(b, d-1, c, l-d)\n    legs(b, d, c-1, l-c)\n\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    l = int(data[3])\n    legs(b, d, c, l)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#This solution is incredibly slow, but it works. It uses brute force to find all possible combinations.\n\nb, d, c, l = map(int, input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\na, b, c, d = [int(x) for x in input().split()]\n\nsolutions = []\n\nfor i in range(d // a + 1):\n    for j in range(d // b + 1):\n        for k in range(d // c + 1):\n            if i * a + j * b + k * c <= d:\n                solutions.append((i, j, k))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))\n", "\n\nimport sys\n\na, b, c, d = map(int, input().split())\n\nif d % 2 != 0:\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor x in range(d // a + 1):\n    for y in range(d // b + 1):\n        for z in range(d // c + 1):\n            if x * a + y * b + z * c == d:\n                answers.append([x, y, z])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\nimport itertools\n\nb, d, c, l = map(int, input().split())\n\nfor i, j, k in itertools.product(range(l // b + 1), range(l // d + 1), range(l // c + 1)):\n    if i * b + j * d + k * c == l:\n        print(i, j, k)\n", "\n\nimport sys\n\ndef possible(l, b, d, c):\n    for i in range(0, l//b + 1):\n        for j in range(0, l//d + 1):\n            for k in range(0, l//c + 1):\n                if i*b + j*d + k*c == l:\n                    print i, j, k\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    possible(l, b, d, c)\n\nif __name__ == '__main__':\n    main()\n", "from itertools import product\nb, d, c, l = map(int, input().split())\n\nfor i, j, k in product(range(l//b + 1), range(l//d + 1), range(l//c + 1)):  # this is called a generator\n    if i * b + j * d + k * c == l:\n        print(i, j, k)\n", "\n\n\n\"\"\"\nThis is a program that will count the number of ways\nyou can have a number of legs with a number of cows,\ndogs, and chickens\n\"\"\"\n\nimport sys\n\ndef legs(b,d,c,l):\n    # if l<0:\n    #     return\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b,d,c))\n        return\n    if l - b >= 0 and b != 0:\n        legs(b - 1, d, c, l - b)\n    if l - d >= 0 and d != 0:\n        legs(b, d - 1, c, l - d)\n    if l - c >= 0 and c != 0:\n        legs(b, d, c - 1, l - c)\n\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    l = int(data[3])\n    legs(b, d, c, l)\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()] # b is birds, d is dogs, c is cats, l is the limit\n    solutions = []\n    for num_birds in range(l//b + 1): # check all possible combinations\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef possible(b, d, c, l, lst):\n    for i in xrange(0, l/b + 1):\n        for j in xrange(0, l/d + 1):\n            for k in xrange(0, l/c + 1):\n                if i*b + j*d + k*c == l:\n                    lst.append((i, j, k))\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    lst = []\n    possible(b, d, c, l, lst)\n    for i, j, k in lst:\n        print i, j, k\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef possible(b, d, c, l, lst):\n    for i in xrange(0, l/b + 1):\n        for j in xrange(0, l/d + 1):\n            for k in xrange(0, l/c + 1):\n                if i*b + j*d + k*c == l:\n                    lst.append((i, j, k))\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    lst = []\n    possible(b, d, c, l, lst)\n    for i, j, k in lst:\n        print i, j, k\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef legs(b,d,c,le):\n    if le<0:\n        return\n    if b==0 and d==0 and c==0:\n        print(\"{} {} {}\".format(b,d,c))\n        return\n    legs(b-1,d,c,le-b)\n    legs(b,d-1,c,le-d)\n    legs(b,d,c-1,le-c)\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    le = int(data[3])\n    legs(b,d,c,le)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys, re\n\ndef possible(b, d, c, l, f):\n    for i in xrange(0, l/b + 1): # big\n        for j in xrange(0, l/d + 1): # small\n            for k in xrange(0, l/c + 1): # medium\n                if i*b + j*d + k*c == l: # if the total length is l and\n                    if i <= f and j <= f and k <= f: # if each of the number is less than or equal to f, return\n                        print i, j, k\n                        return\n    print 'impossible' # if we couldn't find any answer\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l, f = map(int, lines[0].strip().split(' '))\n    possible(b, d, c, l, f)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n\"\"\"\nThis is a program that will count the number of ways\nyou can have a number of legs with a number of cows,\ndogs, and chickens\n\"\"\"\n\nimport sys\n\ndef legs(b,d,c,l):\n    if l<0:\n        return 0\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b,d,c))\n        return 1\n    legs(b - 1, d, c, l - b)\n    legs(b, d - 1, c, l - d)\n    return legs(b, d, c - 1, l - c)\n\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    l = int(data[3])\n    legs(b, d, c, l)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#This solution is incredibly slow, but it works. It uses brute force to find all possible combinations.\n\nb, d, c, l = map(int, raw_input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\n\na, b, c, l = [int(x) for x in input().split()] # a, b, c, l = [int(x) for x in input().split()]\n\nsolutions = [] # solutions = []\n\nfor i in range(l // b + 1): # for a in range(l // a + 1):\n    for j in range(l // b + 1): # for b in range(l // b + 1):\n        for k in range(l // c + 1): # for c in range(l // c + 1):\n            if i * a + j * b + k * c == l: # if a * a + b * b + c * c == l:\n                solutions.append((i, j, k)) # solutions.append((a, b, c))\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))\n"]