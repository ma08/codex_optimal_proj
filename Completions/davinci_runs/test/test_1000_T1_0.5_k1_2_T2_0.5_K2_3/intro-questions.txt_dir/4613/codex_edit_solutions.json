["\n#------Solution------\nimport sys\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n        self.rank = [0] * (n + 1)\n    \n    # find tree's root\n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    \n    # unite trees\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n        else:\n            self.par[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n    \n    # check whether x and y are in the same trees\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\nans = 0\nu = UnionFind(N)\nfor a, b in edges:\n    if not u.same(a, b):\n        u.unite(a, b)\n        ans += 1\nprint(M - ans)\n", "\n\n#------Solution from https://qiita.com/e869120/items/d07d1c9e7b2c2e8f7e91------#\n\nN, M = map(int, input().split()) # N: number of people, M: number of pairs\nedges = [list(map(int, input().split())) for _ in range(M)] # edges: pairs of people\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n        self.rank = [0] * (n + 1)\n    \n    # find tree root\n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    \n    # unite tree\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n        else:\n            self.par[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n    \n    # check whether x and y are in the same tree\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\nans = 0\nu = UnionFind(N)\nfor a, b in edges:\n    if not u.same(a, b):\n        u.unite(a, b)\n        ans += 1\nprint(M - ans)\n", "\n# \u5165\u529b\nN, M = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(M)]\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n\n\n# \u6df1\u3055\u512a\u5148\u63a2\u7d22\ndef dfs(v, p, d):\n    # v: \u73fe\u5728\u306e\u9802\u70b9\n    # p: v\u306e\u89aa\n    # d: v\u304b\u3089\u6839\u307e\u3067\u306e\u8ddd\u96e2\n\n    # \u6839\u304b\u3089v\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a18\u9332\u3059\u308b\n    dist[v] = d\n\n    # v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u3092\u5168\u3066\u8abf\u3079\u308b\n    for e in edges[v]:\n        # \u89aa\u3067\u306a\u3044\u9802\u70b9\u306b\u3064\u3044\u3066\n        if e != p:\n            # \u518d\u5e30\u7684\u306b\u63a2\u7d22\n            dfs(e, v, d + 1)\n\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\ndef solve():\n    # \u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\n    done = [False] * N\n\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(N):\n        # \u3059\u3067\u306b\u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\u306f\u30b9\u30ad\u30c3\u30d7\n        if done[i]:\n            continue\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(i, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[i] = True\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        v = 0\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        for j in range(N):\n            # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n            if dist[v] < dist[j]:\n                # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n                v = j\n\n        # \u9802\u70b9v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(v, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[v] = True\n\n    res = 0\n    # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(M):\n        # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        if dist[ab[i][0] - 1] > 1 and dist[ab[i][1] - 1] > 1:\n            # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n            res += 1\n\n    return res\n\n# \u96a3\u63a5\u30ea\u30b9\u30c8\nedges = [[] for _ in range(N)]\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\nfor a, b in ab:\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[a - 1].append(b - 1)\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[b - 1].append(a - 1)\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\ndist = [0] * N\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\nprint(solve())\n", "\n#------Solution------\nimport sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for _ in range(M)]\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n        self.rank = [0] * (n + 1)\n    \n    # find tree's root\n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    \n    # unite trees\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n        else:\n            self.par[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n    \n    # check whether x and y are in the same trees\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\nans = 0\nu = UnionFind(N)\nfor a, b in edges:\n    if not u.same(a, b):\n        u.unite(a, b)\n        ans += 1\nprint(M - ans)\n", "\n#------Solution------\nimport sys\n\ndef input():\n    return sys.stdin.readline()\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for _ in range(M)]\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n        self.rank = [0] * (n + 1)\n    \n    # find the root of the tree \n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    \n    # unite the trees\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n        else:\n            self.par[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n    \n    # check whether x and y are in the same tree\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\nans = 0\nu = UnionFind(N)\nfor a, b in edges:\n    if not u.same(a, b):\n        u.unite(a, b)\n        ans += 1\nprint(M - ans)\n", "\n\n#------Solution------\nimport sys\n\ndef input():\n    return sys.stdin.readline()\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for _ in range(M)] # [[1, 2], [2, 3], ...]\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n        self.rank = [0] * (n + 1)\n    \n    # find tree's root\n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    \n    # unite trees\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n        else:\n            self.par[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n    \n    # check whether x and y are in the same trees\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\nans = 0\nu = UnionFind(N)\nfor a, b in edges:\n    if not u.same(a, b):\n        u.unite(a, b)\n        ans += 1\nprint(M - ans)\n", "\n# \u5165\u529b\nN, M = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(M)]\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n\n# \u6df1\u3055\u512a\u5148\u63a2\u7d22\ndef dfs(v, p, d):\n    # v: \u73fe\u5728\u306e\u9802\u70b9\n    # p: v\u306e\u89aa\n    # d: v\u304b\u3089\u6839\u307e\u3067\u306e\u8ddd\u96e2\n\n    # \u6839\u304b\u3089v\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a18\u9332\u3059\u308b\n    dist[v] = d\n\n    # v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u3092\u5168\u3066\u8abf\u3079\u308b\n    for e in edges[v]:\n        # \u89aa\u3067\u306a\u3044\u9802\u70b9\u306b\u3064\u3044\u3066\n        if e != p:\n            # \u518d\u5e30\u7684\u306b\u63a2\u7d22\n            dfs(e, v, d + 1)\n\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\ndef solve():\n    # \u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\n    done = [False] * N\n\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(N):\n        # \u3059\u3067\u306b\u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\u306f\u30b9\u30ad\u30c3\u30d7\n        if done[i]:\n            continue\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(i, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[i] = True\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        v = 0\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        for j in range(N):\n            # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n            if dist[v] < dist[j]:\n\n                # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n                v = j\n\n        # \u9802\u70b9v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(v, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[v] = True\n\n    res = 0\n    # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(M):\n        # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        if dist[ab[i][0] - 1] > 1 and dist[ab[i][1] - 1] > 1:\n            # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n            res += 1\n\n    return res\n\n# \u96a3\u63a5\u30ea\u30b9\u30c8\nedges = [[] for _ in range(N)]\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\nfor a, b in ab:\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[a - 1].append(b - 1)\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[b - 1].append(a - 1)\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\ndist = [0] * N\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\nprint(solve())\n", "# \u5165\u529b\nN, M = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(M)]\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n\n# \u6df1\u3055\u512a\u5148\u63a2\u7d22\ndef dfs(v, p, d):\n    # v: \u73fe\u5728\u306e\u9802\u70b9\n    # p: v\u306e\u89aa\n    # d: v\u304b\u3089\u6839\u307e\u3067\u306e\u8ddd\u96e2\n\n    # \u6839\u304b\u3089v\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a18\u9332\u3059\u308b\n    dist[v] = d\n\n    # v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u3092\u5168\u3066\u8abf\u3079\u308b\n    for e in edges[v]:\n        # \u89aa\u3067\u306a\u3044\u9802\u70b9\u306b\u3064\u3044\u3066\n        if e != p:\n            # \u518d\u5e30\u7684\u306b\u63a2\u7d22\n            dfs(e, v, d + 1)\n\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\ndef solve():\n    # \u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\n    done = [False] * N\n\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(N):\n        # \u3059\u3067\u306b\u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\u306f\u30b9\u30ad\u30c3\u30d7\n        if done[i]:\n            continue\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(i, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[i] = True\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        v = 0\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        for j in range(N):\n            # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n            if dist[v] < dist[j]:\n                # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n                v = j\n\n        # \u9802\u70b9v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(v, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[v] = True\n\n    res = 0\n    # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(M):\n        # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        if dist[ab[i][0] - 1] > 1 and dist[ab[i][1] - 1] > 1:\n            # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n            res += 1\n\n    return res\n\n# \u96a3\u63a5\u30ea\u30b9\u30c8\nedges = [[] for _ in range(N)]\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\nfor a, b in ab:\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[a - 1].append(b - 1)\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[b - 1].append(a - 1)\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\ndist = [0] * N\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\nprint(solve())\n", "# Union Find\n\n#------Solution------#\n\nN, M = map(int, input().split()) # N: number of people, M: number of pairs\nedges = [list(map(int, input().split())) for _ in range(M)] # edges: pairs of people\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n        self.rank = [0] * (n + 1)\n    \n    # find tree root\n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    \n    # unite tree\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n        else:\n            self.par[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n    \n    # check whether x and y are in the same tree\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\nans = 0\nu = UnionFind(N)\nfor a, b in edges:\n    if not u.same(a, b):\n        u.unite(a, b)\n        ans += 1\nprint(M - ans)\n", "\n#\n# #------Solution------#\n#\n# N, M = map(int, input().split()) # N: number of people, M: number of pairs\n# edges = [list(map(int, input().split())) for _ in range(M)] # edges: pairs of people\n#\n# class UnionFind:\n#     def __init__(self, n):\n#         self.par = [i for i in range(n + 1)]\n#         self.rank = [0] * (n + 1)\n#\n#     # find tree root\n#     def find(self, x):\n#         if self.par[x] == x:\n#             return x\n#         else:\n#             self.par[x] = self.find(self.par[x])\n#             return self.par[x]\n#\n#     # unite tree\n#     def unite(self, x, y):\n#         x = self.find(x)\n#         y = self.find(y)\n#         if self.rank[x] < self.rank[y]:\n#             self.par[x] = y\n#         else:\n#             self.par[y] = x\n#             if self.rank[x] == self.rank[y]:\n#                 self.rank[x] += 1\n#\n#     # check whether x and y are in the same tree\n#     def same(self, x, y):\n#         return self.find(x) == self.find(y)\n#\n# ans = 0\n# u = UnionFind(N)\n# for a, b in edges:\n#     if not u.same(a, b):\n#         u.unite(a, b)\n#         ans += 1\n# print(M - ans)\n", "\n\n# \u5165\u529b\nN, M = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(M)]\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306f\u3001\u305d\u306e\u9802\u70b9\u304c\u542b\u307e\u308c\u308b\u9023\u7d50\u6210\u5206\u306e\u4e2d\u3067\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8fba\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\n\n# \u6df1\u3055\u512a\u5148\u63a2\u7d22\ndef dfs(v, p, d):\n    # v: \u73fe\u5728\u306e\u9802\u70b9\n    # p: v\u306e\u89aa\n    # d: v\u304b\u3089\u6839\u307e\u3067\u306e\u8ddd\u96e2\n\n    # \u6839\u304b\u3089v\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a18\u9332\u3059\u308b\n    dist[v] = d\n\n    # v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u3092\u5168\u3066\u8abf\u3079\u308b\n    for e in edges[v]:\n        # \u89aa\u3067\u306a\u3044\u9802\u70b9\u306b\u3064\u3044\u3066\n        if e != p:\n            # \u518d\u5e30\u7684\u306b\u63a2\u7d22\n            dfs(e, v, d + 1)\n\n\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\ndef solve():\n    # \u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\n    done = [False] * N\n\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(N):\n        # \u3059\u3067\u306b\u63a2\u7d22\u6e08\u307f\u306e\u9802\u70b9\u306f\u30b9\u30ad\u30c3\u30d7\n        if done[i]:\n            continue\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(i, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[i] = True\n\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        v = 0\n        # \u9802\u70b9i\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n        for j in range(N):\n            # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n            if dist[v] < dist[j]:\n\n                # \u9802\u70b9j\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306e\u3046\u3061\u3001\u6700\u3082\u9060\u3044\u9802\u70b9v\u3092\u63a2\u3059\n                v = j\n\n        # \u9802\u70b9v\u304b\u3089\u8fbf\u308c\u308b\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        dfs(v, -1, 0)\n\n        # \u63a2\u7d22\u6e08\u307f\u306b\u3059\u308b\n        done[v] = True\n\n    res = 0\n    # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    for i in range(M):\n        # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n        if dist[ab[i][0] - 1] > 1 and dist[ab[i][1] - 1] > 1:\n            # \u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n            res += 1\n\n    return res\n\n# \u96a3\u63a5\u30ea\u30b9\u30c8\nedges = [[] for _ in range(N)]\n# \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\nfor a, b in ab:\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[a - 1].append(b - 1)\n    # \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\n    edges[b - 1].append(a - 1)\n\n# \u5404\u9802\u70b9\u3092\u59cb\u70b9\u3068\u3057\u305f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3044\u3001\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u308b\ndist = [0] * N\n# \u305d\u306e\u9802\u70b9\u3092\u542b\u3080\u8fba\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u8fba\u306e\u9577\u3055\u306f\u3001\u305d\u306e\u9802\u70b9\u81ea\u8eab\u3068\u6700\u3082\u9060\u3044\u9802\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3068\u306a\u308b\nprint(solve())\n", "\n#------Solution------\nimport sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\nN, M = map(int, input().split())\nedges = [list(map(int, input().split())) for _ in range(M)]\n\nclass UnionFind:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n        self.rank = [0] * (n + 1)\n    \n    # find the root of the tree\n    def find(self, x):\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    \n    # unite the trees\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.par[x] = y\n        else:\n            self.par[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n    \n    # check whether x and y are in the same tree\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\nans = 0\nu = UnionFind(N)\nfor a, b in edges:\n    if not u.same(a, b):\n        u.unite(a, b)\n        ans += 1\nprint(M - ans)\n"]