["#!/usr/bin/env python3\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])  # [:K] is a list slice\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "from operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "from operator import itemgetter\n\nn = int(input())\na = list(map(int, input().split()))\na.sort(reverse=True)\nmax_a = a[0]\nsecond_a = a[1]\n\nb = list(map(int, input().split()))\nb.sort(reverse=True)\nmax_b = b[0]\nsecond_b = b[1]\n\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nmax_c = c[0]\nsecond_c = c[1]\n\nmax_a_b = max_a * max_b\nsecond_a_b = max_a * second_b\nmax_a_c = max_a * max_c\nsecond_a_c = max_a * second_c\n\nmax_b_c = max_b * max_c\nsecond_b_c = max_b * second_c\n\nsecond_a_b_c = second_a * max_b * max_c\n\nmax_abc = max(max_a_b, second_a_b, max_a_c, second_a_c, max_b_c, second_b_c, second_a_b_c)\nprint(max_abc)\n", "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 4\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 1\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n\nA, B, C, K = map(int, input().split())  # A, B, C, K = 2, 1, 1, 3\n# A, B, C, K = 2, 1, 1, 4\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(1))\n    return sum(card[1] for card in cards[:K]) if K <= len(cards) else sum(card[1] for card in cards)\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards, K))\n", "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 2, 2, 100\n\nfor i in range(A+1):\n    for j in range(B+1):\n        for k in range(C+1):\n            if i + j + k == K:\n                print(i, j, k)\n                exit()\n\nprint(-1, -1, -1)\n", "from operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    K = min(K, len(cards))\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split()) # 2 1 3 2\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "from operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True) \n    return sum(card[1] for card in cards)\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n"]