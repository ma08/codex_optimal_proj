["n = int(input())\nat_bats_list = list(map(int, input().split()))\n\nofficial = 0\nbases = 0\nfor i in at_bats_list:\n    if i != -1:\n        bases += i \n        official += 1 \n\nprint(bases / official)\n", "\n\nimport sys\nimport math\n\nn = int(input())\natbats = list(map(int, input().split()))\n\nbases = 0\nofficial_atbats = 0\n\nfor atbat in atbats:\n    if atbat == -1:\n        continue\n    official_atbats += 1\n    bases += atbat\n\nslugging_percentage = bases / official_atbats\n\nprint(slugging_percentage)\n", "\n\nn = int(input())\nbases = [int(x) for x in input().split()]\n\n# Calculate the number of valid at-bats\nvalid_at_bats = 0  # number of valid at-bats\nfor base in bases:\n    if base != -1:        #if the value is not -1 then it is a valid at-bat\n        valid_at_bats += 1\n\n# Calculate the total bases.\ntotal_bases = 0  # total bases\nfor base in bases:\n    if base != -1:        #if the value is not -1 then it is a valid at-bat\n        total_bases += base\n\n# Calculate and print the slugging percentage\nprint(total_bases / valid_at_bats)\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n\n# The number of official at bats is the number of bases that are not walks (walks are represented by -1)\nofficial_at_bats = len([base for base in bases if base != -1])\n\n# The total number of bases is the sum of all bases\ntotal_bases = sum(bases)\n\n# The slugging percentage is total bases divided by official at bats\nslugging_percentage = total_bases / official_at_bats\n\nprint(slugging_percentage)\n", "\n\n#n = int(input())\n#at_bat = list(map(int, input().split()))\nn = 3\nat_bat = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bat = 0\n\nfor at_bat in at_bat:\n    if at_bat != 0: # If at_bat is not -1, add at_bat to total_bases and add 1 to total_at_bat\n        total_bases += at_bat # Add at_bat to total_bases\n        total_at_bat += 1 # Add 1 to total_at_bat\n\nprint(total_bases / total_at_bat)\n", "\nimport sys\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n\n# The number of official at-bats is the number of bases that are not walks.\nofficial_at_bats = len([base for base in bases if base != -1]) \n\n# The total number of bases is the sum of all bases.\ntotal_bases = sum(bases)\n\n# The slugging percentage is total bases divided by official at-bats.\nslugging_percentage = total_bases / official_at_bats\n\nprint(slugging_percentage)\n", "\nn = int(input())\nbases = [int(x) for x in input().split()]\n\n# Calculate the number of valid at bats.\nvalid_at_bats = 0 \nfor base in bases:\n    if base != -1:\n        valid_at_bats += 1\n\n# Calculate the total bases.\ntotal_bases = 0\nfor base in bases:\n    if base != -1:\n        total_bases += base\n\n# Calculate and print the slugging percentage\nprint(total_bases / valid_at_bats)\n", "\n\nn = int(input()) #number of elements\nl = list(map(int, input().split())) #list of elements\n\nc = 0 #number of positive elements\ns = 0 #sum of positive elements\n\nfor i in range(n):\n\tif l[i] != -1:\n\t\ts += l[i]\n\t\tc += 1\n\nprint(s/c) #average\n", "\nn = int(input())\nat_bats = list(map(int, input().split()))\n\nofficial = 0\nbases = 0\nfor i in at_bats:\n    if i != -1: \n        bases += i\n        official += 1\n\nprint(bases / official)\n", "\n\nn = int(input())\nat_bats = list(map(int, input().split())) # list of int\n# n = 3\n# at_bats = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bats = 0\n\nfor at_bat in at_bats:\n    if at_bat != -1:\n        total_bases += at_bat\n        total_at_bats += 1\n\nprint(total_bases / total_at_bats)\n", "\nimport sys\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n\n# The number of official at-bats is the number of bases that are not walks\nofficial_at_bats = len([base for base in bases if base != -1]) \n\n# The total number of bases is the sum of all bases\ntotal_bases = sum(bases)\n\n# The slugging percentage is total bases divided by official at-bats\nslugging_percentage = total_bases / official_at_bats\n\nprint(slugging_percentage)\n", "def f(x):\n    return x*x\nr = map(f,[1,2,3,4,5,6])\nprint(list(r))\n", "\nimport sys\n\ndef slugging_percentage(at_bats):\n    total_bases = 0\n    total_at_bats = 0\n    for ab in at_bats:\n        if ab > 0:\n            total_bases += ab\n            total_at_bats += 1\n    return total_bases / total_at_bats\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    at_bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(at_bats))\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())  # number of elements\nl = list(map(int, input().split()))  # list of elements\n\nc = 0  # number of positive elements\ns = 0  # sum of positive elements\n\nfor i in range(n):\n    if l[i] != -1:\n        s += l[i]\n        c += 1\n\nprint(s/c)\n", "n = int(input())\na = [int(i) for i in input().split()]\nb = [i for i in a if i != -1]\nprint(sum(b) / len(b))\n", "\ndef main():\n    n = int(input())\n    bases = [int(x) for x in input().split()]\n    \n    # Calculate the number of valid at bats.\n    valid_at_bats = 0 \n    for base in bases:\n        if base != -1:\n            valid_at_bats += 1\n    \n    # Calculate the total bases.\n    total_bases = 0\n    for base in bases:\n        if base != -1:\n            total_bases += base\n    \n    # Calculate and print the slugging percentage\n    print(total_bases / valid_at_bats)\n    \nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\nbases = [int(x) for x in input().split()]\n\n# Calculate the number of valid at-bats\nvalid_at_bats = 0  # number of valid at-bats\nfor base in bases: \n    if base != -1:\n        valid_at_bats += 1\n\n# Calculate the total bases.\ntotal_bases = 0  # total bases\nfor base in bases:\n    if base != -1: \n        total_bases += base\n\n# Calculate and print the slugging percentage\nprint(total_bases / valid_at_bats)\n", "\n\nn = int(input()) # number of elements\nl = list(map(int, input().split())) # list of elements\n\nc = 0 # number of positive elements\ns = 0 # sum of positive elements\n\nfor i in range(n):\n\tif l[i] != -1:\n\t\ts += l[i]\n\t\tc += 1\n\nprint(s/c)\n", "\nn = int(input())\nbases = [int(x) for x in input().split()]\n\n# Calculate the number of valid at bats.\nvalid_at_bats = 0.0\nfor base in bases:\n    if base != -1:\n        valid_at_bats += 1\n\n# Calculate the total bases.\ntotal_bases = 0\nfor base in bases:\n    if base != -1:\n        total_bases += base\n\n# Calculate and print the slugging percentage\nprint(total_bases / valid_at_bats)\n", "n=int(input())\na=[int(i) for i in input().split()]\nb=[i for i in a if i!=-1]\nprint(sum(b)/len(b))\n", "\n\nn = int(input())\nl = list(map(int, input().split()))\n\nc = 0\ns = 0\n\nfor i in range(n):\n\tif l[i] != -1:\n\t\ts += l[i]\n\t\tc += 1\n\n\n# new line added here\nprint(s/c)\n", "\nimport sys\n\ndef slugging_percentage(bats):\n    total_bases = 0\n    total_at_bats = 0\n    for ab in bats:\n        if ab >= 0:\n            total_bases += ab\n            total_at_bats += 1\n    return total_bases / total_at_bats\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(bats))\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\nat_bat = list(map(int, input().split()))\n# n = 3\n# at_bat = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bat = 0\n\nfor at_bat in at_bat:\n    if at_bat != -1: # If at_bat is not -1, add at_bat to total_bases and add 1 to total_at_bat\n        total_bases += at_bat # Add at_bat to total_bases\n        total_at_bat += 1 # Add 1 to total_at_bat\n\nprint(total_bases / total_at_bat)\n", "\n\nfrom math import floor\n\ndef main():\n    n = int(input())\n    at_bats = input().split()\n\n    bases = 0\n    official_at_bats = 0\n\n    for at_bat in at_bats[:n]:\n        bases += int(at_bat)\n        official_at_bats += 1\n\n    slugging_percentage = bases / official_at_bats\n\n    print(slugging_percentage)\n\nmain()\n", "\n\nimport sys\n\ndef slugging_percentage(at_bats): \n    total_bases = 0\n    total_at_bats = 0\n    for ab in at_bats:\n        if ab >= 0:\n            total_bases += ab\n            total_at_bats += 1\n    return float(total_bases) / float(total_at_bats)\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    at_bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(at_bats))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Apr 26 17:28:09 2019\n@author: yanying\n\"\"\"\nn = int(input())\na = [int(i) for i in input().split()]\nb = [i for i in a if i != -1]\nprint(sum(b)/len(b))\n", "\n\nimport sys\n\ndef slugging_percentage(at_bats):\n    total_bases = 0\n    total_at_bats = 0\n    for ab in at_bats:\n        if ab > 0:\n            total_bases += ab\n            total_at_bats += 1\n    return total_bases / float(total_at_bats)\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    at_bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(at_bats))\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\na = [int(i) for i in input().split()]\nb = [i for i in a if i != -1]  # list comprehension\nprint(sum(b)/len(b))\n", "import sys\n\ndef slugging_percentage(at_bats):\n    total_bases = 0\n    total_at_bats = 0\n    for ab in at_bats:\n        if ab > 0:\n            total_bases += ab\n            total_at_bats += 1\n    return total_bases / total_at_bats\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    at_bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(at_bats))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef slugging_percentage(at_bats):\n    total_bases = 0\n    total_at_bats = 0\n    for ab in at_bats:\n        if ab >= 0:\n            total_bases += ab\n    if total_at_bats == 0:\n        return 0.0\n            total_at_bats += 1\n    return total_bases / total_at_bats\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    at_bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(at_bats))\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\nat_bats = list(map(int, input().split())) \n#n = 3\n#at_bats = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bats = 0\n\nfor at_bat in at_bats:\n    if at_bat != -1:\n        total_bases += at_bat\n        total_at_bats += 1\n\nprint(total_bases / total_at_bats) \n", "\n\nn = int(input())\nat_bats = list(map(int, input().split())) # list of int\n#n = 3\n#at_bats = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bats = 0\n\nfor at_bat in at_bats:\n    if at_bat != -1:\n        total_bases += at_bat\n        total_at_bats += 1\n\nprint(total_bases / total_at_bats)\n", "\n\nn = int(input())\nl = list(map(int, input().split()))\n\nc = 0\ns = 0\n\nfor i in range(n):\n\tif l[i] != -1:\n\t\ts += l[i]\n\t\tc += 1\n\n\n# new line added again\nprint(s/c)\n", "n = int(input())\nat_bats = list(map(int, input().split()))\n\nofficial = 0\nbases = 0\nfor i in at_bats:\n    if i != -1:\n        bases += i\n        official += 1\n\nprint(bases / official)\n", "#!/usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n\n# The number of official at-bats is the number of bases that are not walk\nofficial_at_bats = len([base for base in bases if base != -1])\n\n# The total number of bases is the sum of all bases\ntotal_bases = sum(bases)\n\n# The slugging percentage is total bases divided by official at-bats\nslugging_percentage = total_bases / official_at_bats\n\nprint(slugging_percentage)\n", "\nimport sys\nimport math\nimport os\nn = int(input())\nat_bats = list(map(int, input().split()))\n\nbases = 0\nofficial_at_bats = 0\n\nfor at_bat in at_bats:\n    if at_bat == -1:\n        continue\n    else:\n        official_at_bats += 1\n        bases += at_bat\n\nslugging_percentage = bases / official_at_bats\n\nprint(slugging_percentage)\n", "n = int(input())\nat_bats_list = list(map(int, input().split()))\n\nofficial = 0\nbases = 0\nfor i in at_bats_list:\n    if i != -1:\n        bases += i\n        official += 1\n\nprint(bases / official)\n", "\n#\nimport sys\nimport math\n\nn = int(input())\nat_bats = input().split()\n\nbases = 0\nofficial_at_bats = 0\n\nfor at_bat in at_bats[:n]:\n    bases += int(at_bat)\n    official_at_bats += 1\n\nslugging_percentage = float(bases) / float(official_at_bats)\n\nprint(slugging_percentage)\n", "\n\nn = int(input())\nbases = [int(x) for x in input().split()]\n\n# Calculate the number of valid at-bats\nvalid_at_bats = 0  # number of valid at-bats\nfor base in bases:\n    if base != -1:\n        valid_at_bats += 1\n\n# Calculate the total bases.\ntotal_bases = 0  # total bases\nfor base in bases:\n    if base != -1:\n        total_bases += base\n\n# Calculate and print the slugging percentage.\nprint(total_bases / valid_at_bats)\n", "\nn = int(input())\na = [int(i) for i in input().split()]\nb = [i for i in a if i != -1]\nprint(sum(b)/len(b)) \n", "\n\n# import sys\n# import math\n\n# n = int(input())\n# at_bats = input().split()\n\n# bases = 0\n# official_at_bats = 0\n\n# for at_bat in at_bats[:n]:\n#     bases += int(at_bat)\n#     official_at_bats += 1\n\nslugging_percentage = bases / official_at_bats\n\nprint(slugging_percentage)\n", "# Average of non negative numbers\n\nn = int(input())\nl = list(map(int, input().split()))\n\nc = 0\ns = 0\n\nfor i in range(n):\n    if l[i] != -1:\n        s += l[i]\n        c += 1\n\nprint(s/c)\n", "\nimport sys\nimport math\n\nn = int(input())\nat_bats = list(map(int, input().split()))\n\nbases = 0\nofficial_at_bats = 0\n\nfor at_bat in at_bats:\n    if at_bat == -1:\n        continue\n    else:\n        official_at_bats += 1\n        bases += at_bat\n\nslugging_percentage = bases / official_at_bats\n\nprint(slugging_percentage)\n", "\nimport sys\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n# The number of official at-bats is the number of bases that are not walk\nofficial_at_bats = len([base for base in bases if base != -1]) \n# The total number of bases is the sum of all bases\ntotal_bases = sum(bases)\n# The slugging percentage is total bases divided by official at-bats\nslugging_percentage = total_bases / official_at_bats\nprint(slugging_percentage)\n", "\nn = int(input())\na = [int(i) for i in input().split()]\nb = [i for i in a if i != -1]\nprint(sum(b)/len(b))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "n = int(input(\"Enter number of elements : \"))\na = []\nfor i in range(0, n):\n    elem = int(input(\"Enter element: \"))\n    a.append(elem)\navg = sum(a)/n\nprint(\"Average of elements in the list\", round(avg, 2))\n", "# Average of non negative numbers\n\nn = int(input())\nl = list(map(int, input().split()))\n\nc = 0\ns = 0\n\nfor i in range(n):\n    if l[i] != -1:\n        s += l[i]\n        c += 1\n\nprint(s / c)\n", "\n\nn = int(input())\nbases = [int(x) for x in input().split()]\n\n# Calculate the number of valid at bats.\nvalid_at_bats = 0.0\nfor base in bases:\n    if base != -1:\n        valid_at_bats += 1\n\n# Calculate the total bases.\ntotal_bases = 0\nfor base in bases:\n    if base != -1:\n        total_bases += base\n\n# Calculate and print the slugging percentage\nprint(float(total_bases) / float(valid_at_bats))\n", "\n\nn = int(input())\nl = list(map(int, input().split()))\n\nc = 0\ns = 0\n\nfor i in range(n):\n\tif l[i] != -1:\n\t\ts += l[i]\n\t\tc += 1\n\n\n# new line added to the file\nprint(s/c)\n", "\nimport sys\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n\n# The number of official at-bats is the number of bases that are not walks.\nofficial_at_bats = len([base for base in bases if base != -1])\n\n# The total number of bases is the sum of all bases.\ntotal_bases = sum(bases)\n\n# The slugging percentage is total bases divided by official at-bats.\nslugging_percentage = total_bases / official_at_bats\n\nprint(slugging_percentage)\n", "\n\nn = int(input())\nbases = [int(x) for x in input().split()]\nfor i in range(n):\n    # Calculate the number of valid at bats.\n    valid_at_bats = 0 \n    for base in bases:\n        if base != -1:\n            valid_at_bats += 1\n    \n    # Calculate the total bases.\n    total_bases = 0\n    for base in bases:\n        if base != -1:\n            total_bases += base\n    \n    # Calculate and print the slugging percentage\n    print(total_bases / valid_at_bats)\n", "\n\n#n = int(input())\n#at_bat = list(map(int, input().split()))\nn = 3\nat_bat = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bat = 0\n\nfor at_bat in at_bat:\n    if at_bat != -1:\n        total_bases += at_bat\n        total_at_bat += 1\n\nprint(total_bases / total_at_bat)\n", "\n#\nimport sys\nimport math\n\nn = int(input())\nat_bats = list(map(int, input().split()))  # list of the values of the at bats\n\nbases = 0  # sum of the bases\nofficial_at_bats = 0  # number of official at bats\n\nfor at_bat in at_bats:  # for each at bat\n    if at_bat == -1:  # if it was a strikeout\n        continue\n    else:\n        official_at_bats += 1  # add 1 to the number of official at bats\n        bases += at_bat  # add the number of bases to the sum of the bases\n\nslugging_percentage = bases / official_at_bats  # calculate the slugging percentage\n\nprint(slugging_percentage)\n", "def is_prime(n):\n    if n == 1:\n        return False\n    for k in range(2, int(n ** 0.5) + 1):\n        if n % k == 0:\n            return False\n    return True\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n        a[i] = (a[i], i)\n    a.sort(reverse=True)\n\n    for i in range(n):\n        a[i] = a[i][1]\n\n    ans = [0] * n\n    for i in range(n):\n        if is_prime(i + 1):\n            ans[a[i]] = i\n        else:\n            ans[a[i]] = i - 1\n\n    for i in range(n):\n        print(ans[i])\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nat_bats = list(map(int, input().split())) \n#n = 3\n#at_bats = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bats = 0\n\nfor at_bat in at_bats:\n    if at_bat != -1:\n        total_bases += at_bat\n        total_at_bats += 1\n\nprint(total_bases / total_at_bats)\n", "import sys\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n\n# The number of official at bats is the number of bases that are not walks\nofficial_at_bats = len([base for base in bases if base != -1])\n\n# The total number of bases is the sum of all bases\ntotal_bases = sum(bases)\n\n# The slugging percentage is total bases divided by official at bats\nslugging_percentage = total_bases / official_at_bats\n\nprint(slugging_percentage)\n", "\nimport sys\nimport math\n\nn = int(input())\natbats = list(map(int, input().split()))\n\nbases = 0\nofficial_atbats = 0\n\nfor atbat in atbats:\n    if atbat == -1:\n        continue\n    else:\n        official_atbats += 1\n        bases += atbat\n\nslugging_percentage = bases / official_atbats\n\nprint(slugging_percentage)\n", "import sys\n\ndef slugging_percentage(bats):\n    total_bases = 0\n    total_at_bats = 0\n    for ab in bats:\n        if ab >= 0 and ab <= 4:\n            total_bases += ab\n            total_at_bats += 1\n    return total_bases / total_at_bats if total_at_bats else 0\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(bats))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Apr 26 17:28:09 2019\n@author: yanying\n\"\"\"\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(a)\nb = a[:]\nfor i in range(n):\n    b[(i+1) % n] = a[i]\nprint(b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\n\ndef slugging_percentage(bats):\n    total_bases = 0\n    total_at_bats = 0\n    for ab in bats:\n        if ab >= 0:\n            total_bases += ab\n            total_at_bats += 1\n    return total_bases / total_at_bats\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(bats))\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\nn = int(sys.stdin.readline())\nbases = list(map(int, sys.stdin.readline().split()))\n# The number of official at bats is the number of bases that are not walks\nofficial_at_bats = len([base for base in bases if base != -1]) \n\n# The total number of bases is the sum of all bases\ntotal_bases = sum(bases)\n# The slugging percentage is total bases divided by official at bats\nslugging_percentage = total_bases / official_at_bats\nprint(slugging_percentage)\n", "\n\nn = int(input())\nat_bats = list(map(int, input().split())) \n#n = 3\n#at_bats = [3, 0, 2]\n\ntotal_bases = 0\ntotal_at_bats = 0\n\nfor at_bat in at_bats:\n    if at_bat != -1:\n        total_bases += at_bat\n        total_at_bats += 1\n\nprint(\"%.3f\" % (total_bases / total_at_bats))\n", "# calculate slugging percentage\n\nn = int(input())\nbases = [int(x) for x in input().split()]\n\n# Calculate the number of valid at bats.\nvalid_at_bats = 0.0\nfor base in bases:\n    if base != -1:\n        valid_at_bats += 1\n\n# Calculate the total bases.\ntotal_bases = 0\nfor base in bases:\n    if base != -1:\n        total_bases += base\n\n# Calculate and print the slugging percentage\nprint(total_bases / valid_at_bats)\n", "\n\n\nimport sys\n\ndef slugging_percentage(at_bats): \n    total_bases = 0\n    total_at_bats = 0\n    for ab in at_bats:\n        if ab >= 0:\n            total_bases += ab\n            total_at_bats += 1\n    return total_bases / total_at_bats\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    at_bats = list(map(int, sys.stdin.readline().strip().split()))\n    print(slugging_percentage(at_bats))\n\nif __name__ == '__main__':\n    main()\n"]