["\n\n# Solution by Andrew Xing\n\ndef main():\n  input = raw_input()\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print output\n\nmain()\n", "\n# This is the most efficient way to solve this problem\n# I could have done it with a list and a while loop, but\n# I think this is more efficient.\ninput = input()\n\nprint(input.replace(\"<\", \"\"))\n", "\n# Solution\n\nline = input().strip()\n\noutput = \"\"\n\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\n\nprint(output)\n", "\n\n# Solution 1\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char != \"<\":\n        output += char\n    else:\n        output = output[:-1]\n\nprint(output)\n\n# Solution 2\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char != \"<\":\n        output += char\n    else:\n        output = output[:-1]\n\nprint(output)\n", "inputString = input()\noutputString = \"\"\n\nfor i in range(len(inputString)):\n    if inputString[i] == \"<\":\n        outputString = outputString[:-1]\n    else:\n        outputString += inputString[i]\n\nprint(outputString)\n", "\n\n# Solved by Andrew Xing\n\ndef main():\n  input = input()\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print output\n\nmain()\n", "\n# solution\n\ns = input()\nn = len(s)\ni = 0\nwhile i < n:\n    if s[i] == '<':\n        i -= 1\n        if i < 0:\n            i = 0\n        s = s[:i] + s[i+1:]\n        n -= 1\n        i -= 1\n    else:\n        i += 1\nprint(s)\n", "\n# Solution by Andrew Xing, edited by Alyssa Huang\n\ndef main():\n  input = raw_input(\"\")\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print(output)\n\nmain()\n", "\n\n# Solution by Andrew Xing, edited by Gerald\n\ndef main():\n  input = input()\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print(output)\n\nif __name__ == \"__main__\":\n  main()\n", "import sys\n\ndef main():\n    s = sys.stdin.read().rstrip()\n    print(s.replace(\"<\", \"\").replace(\">\", \"\"))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# */AIPND-revision/intropyproject-classify-pet-images/get_pet_labels.py\n#                                                                             \n# PROGRAMMER: \n# DATE CREATED:                                  \n# REVISED DATE: \n# PURPOSE: Create the function get_pet_labels that creates the pet labels from \n#          the image's filename. This function inputs: \n#           - The Image Folder as image_dir within get_pet_labels function and \n#             as in_arg.dir for the function call within the main function. \n#          This function creates and returns the results dictionary as results_dic\n#          within get_pet_labels function and as results within main. \n#          The results_dic dictionary has a 'key' that's the image filename and\n#          a 'value' that's a list. This list will contain the following item\n#          at index 0 : pet image label (string).\n#\n##\n# Imports python modules\nfrom os import listdir\n\n# TODO 2: Define get_pet_labels function below please be certain to replace None\n#       in the return statement with results_dic dictionary that you create \n#       with this function\n# \ndef get_pet_labels(image_dir):\n    \"\"\"\n    Creates a dictionary of pet labels (results_dic) based upon the filenames \n    of the image files. These pet image labels are used to check the accuracy \n    of the labels that are returned by the classifier function, since the \n    filenames of the images contain the true identity of the pet in the image.\n    Be sure to format the pet labels so that they are in all lower case letters\n    and with leading and trailing whitespace characters stripped from them.\n    (ex. filename = 'Boston_terrier_02259.jpg' Pet label = 'boston terrier')\n    Parameters:\n     image_dir - The (full) path to the folder of images that are to be\n                 classified by the classifier function (string)\n    Returns:\n      results_dic - Dictionary with 'key' as image filename and 'value' as a \n      List. The list contains for following item:\n         index 0 = pet image label (string)\n    \"\"\"\n    # Creates list of files in directory\n    in_files = listdir(image_dir)\n    \n    # Processes each of the files to create a dictionary where the key\n    # is the filename and the value is the picture label (below).\n \n    # Creates empty dictionary for the results (pet labels, etc.)\n    results_dic = dict()\n   \n    # Processes through each file in the directory, extracting only the words\n    # of the file that contain the pet image label\n    for idx in range(0, len(in_files), 1):\n       \n       # Skips file if starts with . (like .DS_Store of Mac OSX) because it \n       # isn't an pet image file\n       if in_files[idx][0] != \".\":\n           \n           # Creates temporary label variable to hold pet label name extracted \n           pet_label = \"\"\n\n           # TODO: 2a. BELOW REPLACE pass with CODE that will process each \n           #          filename in the in_files list to extract the dog breed \n           #          name from the filename. Recall that each filename can be\n           #          accessed by in_files[idx]. Be certain to place the \n           #          extracted dog breed name in the variable pet_label \n           #          that's created as an empty string ABOVE\n           #\n           # Processes through each file in the directory, extracting only the words\n           # of the file that contain the pet image label\n           for word in in_files[idx].lower().split(\"_\"):\n               if word.isalpha():\n                   pet_label += word + \" \"\n\n           # If filename doesn't already exist in dictionary add it and it's\n           # pet label - otherwise print an error message because indicates \n           # duplicate files (filenames)\n           if in_files[idx] not in results_dic:\n              results_dic[in_files[idx]] = [pet_label.strip()]\n              \n           else:\n               print(\"** Warning: Duplicate files exist in directory:\", \n                     in_files[idx])\n \n    # TODO 2b. Replace None with the results_dic dictionary that you created\n    # with this function\n    return results_dic\n\n# Replace None with the results_dic dictionary that you created with this\n# function\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\n\nprint(output)\n", "\n\n# This is the most efficient way to solve this problem\n# I could have done it with a list and a while loop, but\n# I think this is more efficient.\n\ninput = input()\n\nprint(input.replace(\"<\", \"\").replace(\">\", \"\"))\n", "\n\n# solution\n\ns = input()\nn = len(s)\ni = 0\nwhile i < n:\n    if s[i] == '<':\n        i -= 1\n        if i < 0:\n            i = 0\n        s = s[:i] + s[i + 1:]\n        n -= 1\n        i -= 1\n    else:\n        i += 1\nprint(s)\n", "\n\n# I think this is the most efficient way to solve this problem\n# I think I could have done it with a list and a while loop, but\n# I think this is more efficient\n\ninput = raw_input()\n\nprint(input.replace(\"<\", \"\").replace(\">\", \"\"))\n", "\n# Solution 1\nline = input()\noutput = \"\"\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\nprint(output)\n", "\ninput_string = input()\noutput_string = \"\"\n\nfor i in range(len(input_string)):\n    if input_string[i] == \"<\":\n        output_string = output_string[:-1]\n    else:\n        output_string += input_string[i]\n\nprint(output_string)\n", "\n\n# Solution by Andrew Xing, edited by Gerald\n\ndef main():\n  input = input()\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print(output)\n\nmain()\n", "\n\n# Solution by Alyssa Huang\n\ndef main():\n  input = raw_input()\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print output\n\nmain()\n", "def main():\n    print(input().replace(\"<\", \"\"))\n\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# I think this is the most efficient way to solve this problem.\n# I think I could have done it with a list and a while loop, but I think this is more efficient.\n\ninput = input()\n\nprint(input.replace(\"<\", \"\").replace(\">\", \"\"))\n", "import sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(s.replace(\"<\", \"\"))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    s = raw_input()\n    str_list = []\n    for char in s:\n        if char == '<':\n            str_list.pop()\n        else:\n            str_list.append(char)\n    print(\"\".join(str_list))\n\nif __name__ == '__main__':\n    main()\n", "\n\n#Solution\n\nimport re\nimport sys\n\n\ndef main(argv):\n    s = argv[0]\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i] == '<':\n            i -= 1\n            if i < 0:\n                i = 0\n            s = s[:i] + s[i+1:]\n            n -= 1\n            i -= 1\n        else:\n            i += 1\n    print(s)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n", "# This is the most efficient way to solve this problem\n# I could have done it with a list and a while loop, but\n# I think this is more efficient.\n\ninput_ = input()\n\nprint(input_.replace(\"<\", \"\"))\n", "\ninput_string = input()\noutput_string = \"\"\n\nfor i in range(len(input_string)):\n    if input_string[i] == \"<\":\n        output_string = output_string[:-1]\n    else:\n        output_string += input_string[i]\nprint(output_string)\n", "\n\ndef main():\n    s = input()\n    s_list = []\n    for i in s:\n        if i == '<':\n            s_list.pop()\n        else:\n            s_list.append(i)\n    print(\"\".join(s_list))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    string = input()\n    stack = []\n    for c in string:\n        if c == '<':\n            stack.pop()\n        else:\n            stack.append(c)\n    print(''.join(stack))\n\nmain()\n", "\ndef main():\n    string = input() #input\n    stack = []\n    for c in string: #iterate through string\n        if c == '<': #if it is a backspace\n            stack.pop() #pop last element\n        else:\n            stack.append(c) #append to end of list\n    print(''.join(stack))\n\nmain()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ninput_string = input()\noutput_string = \"\"\n\nfor i in range(len(input_string)):\n    if input_string[i] == \"<\":\n        output_string = output_string[:-1]\n    else:\n        output_string += input_string[i]\n\nprint(output_string)\n", "\n# Solution 1\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\n\n\n\n# Solution 2\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char != \"<\":\n        output += char\n    else:\n        output = output[:-1]\n\nprint(output)\nprint(output)\n", "\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\n\nprint(output)\n", "inputString = input()\noutputString = \"\"\n\nfor i in inputString:\n    if i == \"<\":\n        outputString = outputString[:-1]\n    else:\n        outputString += i\n\nprint(outputString)\n", "\n#\n# Solution by Andrew Xing, edited by Gerald\n\ndef main():\n  input = raw_input()\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print output\n\nmain()\n", "# Solution\n\nline = input(\"\")\n\noutput = \"\"\n\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\n\nprint(output, end=\"\")\n", "def main():\n    string = input()\n    stack = []\n    for c in string:\n        if c == '<':\n            stack.pop()\n        else:\n            stack.append(c)\n    print(''.join(stack))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution \n\ns = input()\nn = len(s)\ni = 0\nwhile i < n:\n    if s[i] == '<':\n        i -= 1\n        if i < 0:\n            i = 0\n        s = s[:i] + s[i+1:]\n        n -= 1\n        i -= 1\n    else:\n        i += 1\nprint(s)\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(s.replace(\"<\", \"\").replace(\">\", \"\"))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(s.replace(\"<\", \"\").replace(\">\", \"\"))\n\nif __name__ == \"__main__\":\n\n\n\n    main()\n", "import sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(s.replace('<', '').replace('>', ''))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# I think this is the most efficient way to solve this problem\n# I think I could have done it with a list and a while loop, but I think this is more efficient\n\ninput = input()\n\nprint(input.replace(\"<\", \"\"))\n", "#! /usr/bin/env python\ndef main():\n    string = input()\n    stack = []\n    for c in string:\n        if c == '<':\n            stack.pop()\n        else:\n            stack.append(c)\n    print(''.join(stack), end='')\n\nmain()\n", "\n\n#Solution\n\ns = input()\nn = len(s)\ni = 0\nwhile i < n:\n    if s[i] == '<':\n        i -= 1\n        if i < 0:\n            i = 0\n        s = s[:i] + s[i+1:]\n        n -= 1\n        i -= 1\n    else:\n        i += 1\nprint(s)\n", "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def isEmpty(self):\n        return self.items == []\n\n    def peek(self):\n        return self.items[len(self.items) - 1]\n\n    def size(self):\n        return len(self.items)\n\n    def __str__(self):\n        return ''.join(self.items)\n\n\ndef main():\n    string = input()\n    stack = Stack()\n    for c in string:\n        if c == '<':\n            stack.pop()\n        else:\n            stack.push(c)\n    print(stack)\n\n\nmain()\n", "\n\n# I think this is the most efficient way to solve this problem\n# I think I could have done it with a list and a while loop, but\n# I think this is more efficient\n\ninput = input()\n\nprint(input.replace(\"<\", \"\").replace(\">\", \"\")\n", "\n# Solution 1\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\n\n\n# Solution 2\n\nline = input()\n\noutput = \"\"\n\nfor char in line:\n    if char == \"<\":\n        output = output[:-1]\n    else:\n        output += char\n\nprint(output)\nprint(output)\n", "\n\ndef main():\n    string = input().strip()\n    stack = []\n    for i in string:\n        if i == '<':\n            if stack:\n                stack.pop()\n        else:\n            stack.append(i)\n    print(''.join(stack))\n\nmain()\n", "\n# in python3\n# solution\n\ns = input()\nn = len(s)\ni = 0\nwhile i < n:\n    if s[i] == '<':\n        i -= 1\n        if i < 0:\n            i = 0\n        s = s[:i] + s[i+1:]\n        n -= 1\n        i -= 1\n    else:\n        i += 1\nprint(s)\n", "\n\n# Solved by Andrew Xing\n\ndef main():\n  input = input()\n  output = \"\"\n  for i in range(0, len(input)):\n    if input[i] == \"<\":\n      output = output[:len(output)-1]\n    else:\n      output += input[i]\n  print(output)\n\nmain()\n", "n = input()\nstack = []\nfor c in n:\n    if c == '<':\n        stack.pop()\n    else:\n        stack.append(c)\nprint(''.join(stack))\n", "\n\ndef main():\n    string = input()\n    stack = []\n    for i in string:\n        if i == '<':\n            stack.pop()\n        else:\n            stack.append(i)\n    print(''.join(stack))\n", "def main():\n    s = input()\n    s_list = []  # \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0431\u0443\u043a\u0432\n    for i in s:\n        if i == '<':  # \u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 \u0437\u043d\u0430\u043a \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f\n            s_list.pop()  # \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430\n        else:\n            s_list.append(i)\n    print(\"\".join(s_list))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(s.replace(\"<\", \"\").replace(\">\", \"\"))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\ndef main():\n    string = input()\n    stack = []\n    for i in string:\n        if i == '<':\n            stack.pop()\n        else:\n            stack.append(i)\n    print(''.join(stack))\n\nmain()\n", "\ndef main():\n    s = input()\n    s_list = []\n    for i in s:\n        if i == '<':\n            s_list.pop()\n        else:\n            s_list.append(i)\n    print(\"\".join(s_list))\n\nif __name__ == '__main__':\n    main()\n"]