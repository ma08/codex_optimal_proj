2022-04-09 20:35:02.122310 """
You are given a correct solution of the sudoku puzzle. If you don't know what is the sudoku, you can read about it here.

The picture showing the correct sudoku solution:

[Image]

Blocks are bordered with bold black color.

Your task is to change at most $9$ elements of this field (i.e. choose some $1 \le i, j \le 9$ and change the number at the position $(i, j)$ to any other number in range $[1; 9]$) to make it anti-sudoku. The anti-sudoku is the $9 \times 9$ field, in which:  Any number in this field is in range $[1; 9]$;  each row contains at least two equal elements;  each column contains at least two equal elements;  each $3 \times 3$ block (you can read what is the block in the link above) contains at least two equal elements. 

It is guaranteed that the answer exists.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases. Then $t$ test cases follow.

Each test case consists of $9$ lines, each line consists of $9$ characters from $1$ to $9$ without any whitespaces — the correct solution of the sudoku puzzle.


-----Output-----

For each test case, print the answer — the initial field with at most $9$ changed elements so that the obtained field is anti-sudoku. If there are several solutions, you can print any. It is guaranteed that the answer exists.


-----Example-----
Input
1
154873296
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563

Output
154873396
336592714
729645835
863725145
979314628
412958357
631457992
998236471
247789563
"""
2022-04-09 20:35:02.122336 --------------------------
2022-04-09 20:35:20.251418 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end = '')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649550902,
  "id": "cmpl-4vFpeer4s8S4i7kZodBIrctJ4YhmG",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:35:20.251679 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:35:20.251759 REASON stop
2022-04-09 20:35:20.263475 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end = '')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:35:20.263597 REASON stop
