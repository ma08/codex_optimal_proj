["import sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef is_antisudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_antisudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef is_antisudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_antisudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline().strip())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end='')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end='')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end='')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef is_antisudoku(sudoku):\n    for i in range(9):\n        for j in range(9):\n            if sudoku[i].count(sudoku[i][j]) < 2:\n                return False\n    for i in range(9):\n        for j in range(9):\n            if [row[i] for row in sudoku].count(sudoku[j][i]) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = [sudoku[3*i+k][3*j+l] for k in range(3) for l in range(3)]\n            for k in range(3):\n                for l in range(3):\n                    if block.count(sudoku[3*i+k][3*j+l]) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_antisudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(input())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end = '')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) != 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) != 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) != 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef is_anti_sudoku(sudoku):\n    for row in sudoku:\n        for number in row:\n            if row.count(number) < 2:\n                return False\n    for i in range(9):\n        column = [row[i] for row in sudoku]\n        for number in column:\n            if column.count(number) < 2:\n                return False\n    for i in range(3):\n        for j in range(3):\n            block = []\n            for k in range(3):\n                for l in range(3):\n                    block.append(sudoku[3*i+k][3*j+l])\n            for number in block:\n                if block.count(number) < 2:\n                    return False\n    return True\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        sudoku = []\n        for j in range(9):\n            sudoku.append(list(map(int, list(sys.stdin.readline().strip()))))\n        if is_anti_sudoku(sudoku):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        board = [[int(x) for x in sys.stdin.readline().strip()] for _ in range(9)]\n        solve(board, 0)\n\ndef solve(board, pos):\n    if pos == 81:\n        for row in board:\n            print(''.join(map(str, row)))\n                return\n    i = pos // 9\n    j = pos % 9\n    if board[i][j] == 0:\n        for k in range(1, 10):\n            if check(i, j, k, board):\n                board[i][j] = k\n                solve(board, pos+1)\n                board[i][j] = 0\n    else:\n        solve(board, pos+1)\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        board = [[0 for j in range(9)] for k in range(9)]\n        for j in range(9):\n            board[j] = list(map(int, list(sys.stdin.readline().strip())))\n        print(\"Case #\" + str(i+1) + \":\")\n        solve(board)\n\ndef solve(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for k in range(1, 10):\n                    if check(i, j, k, board):\n                        board[i][j] = k\n                        solve(board)\n                        board[i][j] = 0\n                return\n    for i in range(9):\n        for j in range(9):\n            print(board[i][j], end = '')\n        print()\n    exit()\n\ndef check(i, j, val, board):\n    for k in range(9):\n        if board[i][k] == val:\n            return False\n    for k in range(9):\n        if board[k][j] == val:\n            return False\n    x = i // 3\n    y = j // 3\n    for k in range(3):\n        for l in range(3):\n            if board[(x*3) + k][(y*3) + l] == val:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"]