["n, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ncount = 0\ntime = 0\nfor i in range(n):\n    if time + tasks[i] <= T:\n        count += 1\n        time += tasks[i]\n    else:\n        break\n\nprint(count)\n", "# Read input\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve problem\ncompleted = 0\ntime = 0\nfor t in tasks:\n    if time + t <= T:\n        time += t\n        completed += 1\n    else:\n        break\n\n# Print output\nprint(completed)\n", "import sys\n\n\ndef main():\n    # Get input.\n    n, t = [int(x) for x in sys.stdin.readline().split()]\n    times = [int(x) for x in sys.stdin.readline().split()]\n    # Iterate through tasks and see if they can be completed.\n    total = 0\n    for time in times:\n        total += time\n        if total > t:\n            sys.stdout.write(str(times.index(time)))\n            break\n    else:\n        sys.stdout.write(str(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Get input.\n    n, t = [int(x) for x in input().split()]\n    times = [int(x) for x in input().split()]\n    # Iterate through tasks and see if they can be completed.\n    total = 0\n    for time in times:\n        total += time\n        if total > t:\n            print(times.index(time) + 1)\n            break\n    else:\n        print(n)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main(): \n    # Get input \n    n, t = [int(x) for x in input().split()] \n    times = [int(x) for x in input().split()] \n    # Iterate through tasks and see if they can be completed \n    total = 0 \n    for time in times: \n        total += time \n        if total > t: \n            print(times.index(time)+1) \n            break \n    else: \n        print(n) \n\nif __name__ == '__main__': \n    main() \n", "n, t = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ntasks_done = 0\ntime_used = 0\nfor task in tasks:\n    if time_used + task <= t:\n        time_used += task\n        tasks_done += 1\n    else:\n        break\n\nprint(tasks_done)\n", "n, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ncount = 0\ntime = 0\nfor i in range(n):\n    if time + tasks[i] <= T:\n        count += 1\n        time += tasks[i]\n    else:\n        break\nprint(count)\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Check for correct arguments\n    if len(sys.argv) != 2:\n        print(\"Usage: ./file filename\")\n        sys.exit(1)\n\n    # Open file\n    try:\n        f = open(sys.argv[1], 'r')\n    except:\n        print(\"Could not open file\")\n        sys.exit(1)\n\n    # Read file\n    text = f.read()\n\n    # Close file\n    f.close()\n\n    # Print file\n    print(text)\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, T = map(int, input().split()) \ntasks = list(map(int, input().split()))\n\ncount = 0\ntime = 0\nfor i in range(n):\n    if time + tasks[i] <= T:\n        count += 1\n        time += tasks[i]\n    else:\n        break\n\nprint(count)\n", "print('hello')\n", "\n\ndef main():\n    # Get input\n    n, t = [int(x) for x in input().split()]\n    times = [int(x) for x in input().split()]\n    # Iterate through tasks and see if they can be completed\n    total = 0\n    for time in times:\n        total += time\n        if total > t:\n            print(times.index(time))\n            break\n    else:\n        print(n)\n\nif __name__ == '__main__':\n    main()\n", "n, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\nt = 0\ni = 0\nwhile t < T and i < n:\n    t += tasks[i]\n    i += 1\n\nprint(i)\n", "\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ntime = 0\ni = 0\nwhile time < T and i < n:\n    time += tasks[i]\n    i += 1\n\nprint(i)\n", "n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ncurr_time = 0\nnum_tasks = 0\n\nfor i in range(n):\n    if curr_time + times[i] > T:\n        break\n    curr_time += times[i]\n    num_tasks += 1\nprint(num_tasks)\n", "# Read input\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve\ncompleted = 0\ntime = 0\nfor task in tasks:\n    if time + task <= T:\n        time += task\n        completed += 1\nprint(completed)\n", "\n# Read input.\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve problem.\ncompleted = 0\ntime = 0\nfor t in tasks:\n    if time + t <= T:\n        time += t\n        completed += 1\n    else:\n        break\n\n# Print output.\nprint(completed)\n", "\na = input()\nb = input()\nprint(a)\nprint(b)\n", "#\n# n, T = map(int, input().split())\n# times = list(map(int, input().split()))\n#\n# curr_time = 0\n# num_tasks = 0\n#\n# for i in range(n):\n#     if curr_time + times[i] > T:\n#         break\n#\n# print(num_tasks)\n", "n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ncurr_time = 0\nnum_tasks = 0\n\nfor i in range(n + 1):\n    if curr_time + times[i] > T:\n        break\n    curr_time += times[i]\n    num_tasks += 1\n\nprint(num_tasks)\n", "\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\nt = 0\ni = 0\nwhile t < T and i < n:\n    t += tasks[i]\n    i += 1\n\nprint(i)\n", "\nn, t = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ntasks_done = 0\ntime_spent = 0\nfor task in tasks:\n    if time_spent + task <= t:\n        time_spent += task\n        tasks_done += 1\n    else:\n        break\n\nprint(tasks_done)\n", "n, t = map(int, input().split())\ntasks = list(map(int, input().split()))\nd = {}\n\nfor i in range(n):\n    if tasks[i] in d:\n        d[tasks[i]].append(i)\n    else:\n        d[tasks[i]] = [i]\n\nfor key in d:\n    print(key, d[key])\n", "from __future__ import print_function\n# Read input\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve\ncompleted = 0\ntime = 0\nfor task in tasks:\n    if time + task <= T:\n        time += task\n        completed += 1\nprint(completed, end='')\n", "# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\n", "n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ncurr_time = 0\nnum_tasks = 0\n\nfor i in range(n):\n    if curr_time + times[i] <= T:\n        num_tasks += 1\n        curr_time += times[i]\n    else:\n        break\n\nprint(num_tasks)\n", "\nn, t = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ntasks_done = 0\ntime_spent = 0\nfor task in tasks:\n    if time_spent + task <= t:\n        time_spent += task\n        tasks_done += 1\n    else:\n        break\nprint(tasks_done)\n", "n, t = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ncur_time = 0\nfor i in range(n):\n    cur_time += tasks[i]\n    if cur_time > t:\n        break\n    else:\n        tasks_done = i + 1\n\nprint(tasks_done)\n", "\n\ndef main(): \n    # Get input\n    n, t = [int(x) for x in input().split()] \n    times = [int(x) for x in input().split()] \n    # Iterate through tasks and see if they can be completed\n    total = 0 \n    for time in times: \n        total += time \n        if total > t:\n            print(times.index(time)) \n            break \n    else:\n        print(n) \n\nif __name__ == '__main__':\n    main() \n", "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    times = list(map(int, sys.stdin.readline().split()))\n    acc = 0\n    for i in range(n):\n        acc += times[i]\n        if acc > T:\n            print(i)\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/perl\n#\n#  Copyright Statement:\n#  --------------------\n#  This software is protected by Copyright and the information contained\n#  herein is confidential. The software may not be copied and the information\n#  contained herein may not be used or disclosed except with the written\n#  permission of MediaTek Inc. (C) 2006\n#\n#  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES\n#  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS (\"MEDIATEK SOFTWARE\")\n#  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON\n#  AN \"AS-IS\" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,\n#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF\n#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.\n#  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE\n#  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR\n#  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH\n#  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO\n#  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S\n#  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.\n#\n#  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE\n#  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,\n#  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,\n#  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO\n#  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.\n#\n#  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE\n#  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF\n#  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND\n#  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER\n#  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).\n#\n#*****************************************************************************\n#*\n#* Filename:\n#* ---------\n#*   file.pl\n#*\n#* Project:\n#* --------\n#*\n#*\n#* Description:\n#* ------------\n#*   This script is used to parse file\n#*\n#* Author:\n#* -------\n#*   Qmei Yang (mtk03726)\n#*\n#****************************************************************************/\n\n#****************************************************************************\n# Included Modules\n#****************************************************************************\nuse strict;\nBEGIN { push @INC, '.\\\\tools\\\\' }  # add additional library path\nuse sysGenUtility;                 #pm file name without case sensitivity\nuse FileInfoParser;\nuse CommonUtility;\nPrintDependModule();\n\n#****************************************************************************\n# Constants\n#****************************************************************************\nmy $FILE_PM = \"file.pm\";\nmy $FILE_TXT = \"file.txt\";\n\n#****************************************************************************\n# Input Parameters and Global Variables\n#****************************************************************************\nmy ($g_MAKEFILE, $g_BBFILE, $g_CUSTOMFILE, $g_PATH, $g_PROJECT, $g_PLATFORM, $g_FLAVOR, $g_MODE, $g_SCATTERFILE);\nmy ($g_MEMORYDUMPFILE, $g_MEMORYMAPFILE);\nmy ($g_MAKEFILE_ref, $g_BBFILE_ref, $g_CUSTOMFILE_ref);\nmy ($g_MAKEFILE_LIS_ref, $g_BBFILE_LIS_ref, $g_CUSTOMFILE_LIS_ref);\n\n#****************************************************************************\n# 1 >>> parse argments\n#****************************************************************************\n&FileInfo::ParseArgv($FILE_PM, \\$g_MAKEFILE, \\$g_BBFILE, \\$g_CUSTOMFILE, \\$g_PATH, \\$g_PROJECT, \\$g_PLATFORM, \\$g_FLAVOR, \\$g_MODE, \\$g_SCATTERFILE, \\$g_MEMORYDUMPFILE, \\$g_MEMORYMAPFILE);\n\nmy $g_FOLDER_LIST_ref;\nmy $g_FILE_LIST_ref;\nmy $g_DUMMY_LIST_ref;\nmy $g_FILE_LIST_LIS_ref;\n\n#****************************************************************************\n# 2 >>> read file\n#****************************************************************************\n&FileInfo::ReadFile($g_MAKEFILE, $g_BBFILE, $g_CUSTOMFILE, $g_SCATTERFILE, $g_MEMORYDUMPFILE, $g_MEMORYMAPFILE, \\$g_MAKEFILE_ref, \\$g_BBFILE_ref, \\$g_CUSTOMFILE_ref, \\$g_MAKEFILE_LIS_ref, \\$g_BBFILE_LIS_ref, \\$g_CUSTOMFILE_LIS_ref);\n\n#****************************************************************************\n# 3 >>> parse file content\n#****************************************************************************\n&FileInfo::ParseFileContent($g_MAKEFILE_ref, $g_BBFILE_ref, $g_CUSTOMFILE_ref, $g_MAKEFILE_LIS_ref, $g_BBFILE_LIS_ref, $g_CUSTOMFILE_LIS_ref, \\$g_FOLDER_LIST_ref, \\$g_FILE_LIST_ref, \\$g_DUMMY_LIST_ref, \\$g_FILE_LIST_LIS_ref);\n\n#****************************************************************************\n# 4 >>> output file\n#****************************************************************************\n&FileInfo::OutputFile($g_FOLDER_LIST_ref, $g_FILE_LIST_ref, $g_DUMMY_LIST_ref, $g_FILE_LIST_LIS_ref);\n\n#****************************************************************************\n# 5 >>> generate file\n#****************************************************************************\n&FileInfo::GenFile($g_PATH, $g_PROJECT, $g_PLATFORM, $g_FLAVOR, $g_MODE, $g_FOLDER_LIST_ref, $g_FILE_LIST_ref, $g_DUMMY_LIST_ref, $g_FILE_LIST_LIS_ref);\n\n#****************************************************************************\n# oo >>>  Finished\n#****************************************************************************\nexit 0;\n", "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    times = list(map(int, sys.stdin.readline().split()))\n    # acc = 0\n    # for i in range(n):\n    #     acc += times[i]\n    #     if acc > T:\n    #         print i\n    #         return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    # Get input.\n    n, t = [int(x) for x in input().split()]\n    times = [int(x) for x in input().split()]\n    # Iterate through tasks and see if they can be completed.\n    total = 0\n    for i in range(n):\n        total += times[i]\n        if total > t: break\n    print(i)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    times = list(map(int, sys.stdin.readline().split()))\n    acc = 0\n    for i in range(n):\n        acc += times[i]\n        if acc > T:\n            print i\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n# Read input\nn, T = map(int, sys.stdin.readline().split())\ntasks = list(map(int, sys.stdin.readline().split()))\n\n# Solve\ncompleted = 0\ntime = 0\nfor task in tasks:\n    if time + task <= T:\n        time += task\n        completed += 1\nprint(completed)\n", "n, t = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ntasks_done = 0 # number of tasks done\ntime_used = 0\nfor task in tasks:\n    if time_used + task <= t:\n        time_used += task\n        tasks_done += 1\n    else:\n        break\n\nprint(tasks_done)\n", "#!/usr/bin/env python3\n\n# Read input.\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve problem.\ncompleted = 0\ntime = 0\nfor t in tasks:\n    if time + t <= T:\n        time += t\n        completed += 1\n    else:\n        break\n\n# Print output.\nprint(completed)\n", "\n# n, T = map(int, input().split())\n# times = list(map(int, input().split()))\n\n# curr_time = 0\n# num_tasks = 0\n\n# for i in range(n):\n#     if curr_time + times[i] <= T:\n#         num_tasks += 1\n#         curr_time += times[i]\n#     else:\n#         break\n\n# print(num_tasks)\n\n\ndef foo(x, y):\n    return x + y\n\n\nprint(foo(1, 2))\n", "\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ncount = 0\ntime = 0\nfor i in range(n):\n    if time + tasks[i] <= T:\n        count += 1\n        time += tasks[i]\n    else:\n        break\n\nprint(count)\n", "print(\"hello world\")\n", "\n\n# Read input\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve problem\ncompleted = 0\ntime = 0\nfor t in tasks:\n    if time + t <= T:\n        time += t\n        completed += 1\n    else:\n        break\n\n# Print output\nprint(completed)\n", "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    times = list(map(int, sys.stdin.readline().split()))\n    acc = 0\n    for i in range(n):\n        acc += times[i]\n        if acc > T:\n            print i\n            return\n    print n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nn, t = map(int, sys.stdin.readline().split())\ntasks = list(map(int, sys.stdin.readline().split()))\n\ntasks_done = 0 # number of tasks done\ntime_used = 0\nfor task in tasks:\n    if time_used + task <= t:\n        time_used += task\n        tasks_done += 1\n    else:\n        break\n\nprint(tasks_done)\n"]