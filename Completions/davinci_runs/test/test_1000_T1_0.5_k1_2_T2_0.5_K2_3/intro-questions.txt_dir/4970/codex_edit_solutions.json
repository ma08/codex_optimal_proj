["\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frog[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frog = []\n    for i in range(n):\n        frog.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))\n", "\nwith open(\"file.txt\", \"r\") as f:\n    for line in f:\n        print(line)\n", "\n\nimport sys\n\ndef get_courses(n):\n    courses = []\n    for i in range(n):\n        courses.append(sys.stdin.readline().strip().split())\n    return courses\n\ndef get_popularities(courses):\n    popularities = {}\n    for course in courses:\n        course_tuple = tuple(sorted(course))\n        if course_tuple in popularities:\n            popularities[course_tuple] += 1\n        else:\n            popularities[course_tuple] = 1\n    return popularities\n\ndef get_most_popular(popularities):\n    most_popular = []\n    max_popularity = max(popularities.values())\n    for course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular.append(course_tuple)\n    return most_popular\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = get_courses(n)\n    popularities = get_popularities(courses)\n    most_popular = get_most_popular(popularities)\n    print(len(most_popular))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().split())))\n        classes[courses] += 1\n    print(max(classes.values()), file=sys.stdout)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()][1:]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef find_popular_combinations(n, frosh):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return len([combination for combination in combinations if combinations[combination] == most_popular])\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(find_popular_combinations(n, frosh))\n", "\nimport sys\n\ndef main():\n    num_students = int(sys.stdin.readline().strip())\n    courses = dict()\n    for i in range(num_students):\n        course_list = tuple(sorted([int(x) for x in sys.stdin.readline().strip().split()])[1:])\n        courses[course_list] = courses.get(course_list, 0) + 1\n    max_count = max(courses.values())  # find the most popular course\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))  # count the most popular courses\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    num_students = int(input())\n    courses = dict()\n    for i in range(num_students):\n        course_list = tuple(sorted([int(x) for x in input().strip().split()]))\n        courses[course_list] = courses.get(course_list, 0) + 1\n    max_count = max(courses.values())  # find the most popular course\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))  # count the most popular courses\n\nif __name__ == '__main__':\n    main()\n", "\n\n'''\nThis is a comment\n'''\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\n\nprint(most_popular)\n", "\n\nfrom collections import Counter\n\nn = int(input())\n\ncombinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    combinations.append(tuple(sorted(courses)))\n\nc = Counter(combinations)\nmost_common = c.most_common(1)\n\nprint(most_common[0][1])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[course_list] for course_list in courses if courses[course_list] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshmen):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().split())))\n        classes[courses] += 1\n    print(max(classes.values()), file=sys.stdout)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport os\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin.readlines():\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular, end=\"\")\n", "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the freshman and the value is the courses\nfreshman = {}\n\nfor line in sys.stdin:\n    freshman[line] = freshman.get(line.rstrip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(freshman.values())\n\n# Print the number of freshman who have the most popular combination\nprint(most_popular)\n", "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frog[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append(tuple(int(x) for x in sys.stdin.readline().strip().split()))\n    print(len(find_popular_combinations(n)))\n", "\n\nimport sys\n\ndef main():\n    count = int(sys.stdin.readline().strip())\n    for i in range(count):\n        print i\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef find_popular_combinations(n, frosh):\n    pass\n\nif __name__ == '__main__':\n    pass\n", "\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(str, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common)\n\nprint(most_common[0][1])\n", "import sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef find_popular_combinations(n, frosh):\n    combinations = {} # dictionary of combinations and their occurences\n    for i in range(n):\n        combination = frosh[i] # get the courses for student i\n        combination.sort() # sort courses\n        combination = tuple(combination) # convert to tuple\n        if combination in combinations:\n            combinations[combination] += 1 # increment occurences\n        else:\n            combinations[combination] = 1 # add to dictionary\n    most_popular = max(combinations.values()) # get the max occurences\n    return [combination for combination in combinations if combinations[combination] == most_popular] # return all combinations with max occurences\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip()) # get number of students\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()]) # get courses for each student\n    print(len(find_popular_combinations(n, frosh))) # print number of popular combinations\n", "import sys\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshmen):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    freshers = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshers):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))  # noqa\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    course_list = []\n    for i in range(n):\n        course_list = tuple(sorted([int(x) for x in sys.stdin.readline().strip().split()]))\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_fresh_courses(n):\n    fresh_courses = []\n    for i in range(n):\n        fresh_courses.append(sys.stdin.readline().strip().split())\n    return fresh_courses\n\ndef get_popularities(fresh_courses):\n    popularities = {}\n    for fresh_course in fresh_courses:\n        fresh_course_tuple = tuple(sorted(fresh_course))\n        if fresh_course_tuple in popularities:\n            popularities[fresh_course_tuple] += 1\n        else:\n            popularities[fresh_course_tuple] = 1\n    return popularities\n\ndef get_most_popular(popularities):\n    most_popular = []\n    max_popularity = max(popularities.values())\n    for fresh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular.append(fresh_course_tuple)\n    return most_popular\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    fresh_courses = get_fresh_courses(n)\n    popularities = get_popularities(fresh_courses)\n    most_popular = get_most_popular(popularities)\n    print(len(most_popular))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split(\" \"))))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n", "\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n", "\n\nimport sys\n\ndef get_fresh_courses(n):\n    fresh_courses = []\n    for i in range(n):\n        fresh_courses.append(sys.stdin.readline().strip().split(' '))\n    return fresh_courses\n\ndef get_popularities(fresh_courses):\n    popularities = {}\n    for fresh_course in fresh_courses:\n        fresh_course_tuple = tuple(sorted(fresh_course))\n        if fresh_course_tuple in popularities:\n            popularities[fresh_course_tuple] += 1\n        else:\n            popularities[fresh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for fresh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(fresh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    fresh_courses = get_fresh_courses(n)\n    popularities = get_popularities(fresh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    freshers = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshers):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(sys.stdin.readline())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, sys.stdin.readline().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))  # noqa\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    num_students = int(sys.stdin.readline().strip())\n    courses = dict()\n    for i in range(num_students):\n        course_list = tuple(sorted(sys.stdin.readline().strip().split()))\n        courses[course_list] = courses.get(course_list, 0) + 1\n    max_count = max(courses.values())  # find the most popular course\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))  # count the most popular courses\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import Counter\n\nn = int(input())  # number of course combinations\n\ncourses_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))  # list of courses\n    courses_combinations.append(tuple(sorted(courses)))  # sort the list of courses and turn into tuple\n\nc = Counter(courses_combinations)  # count the number of times a course combination appears\nmost_common = c.most_common(1)  # find the most common course combination\n\nprint(most_common[0][1])  # print the number of times the most common course combination appears\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the freshman and the value is the courses\nfreshman = {}\n\nfor line in sys.stdin:\n    freshman[line.strip()] = freshman.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(freshman.values())\n\n# Print the number of freshman who have the most popular combination\nprint(most_popular)\n", "\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split()))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common)\n\nprint(most_common[0][1])\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum(courses[x] for x in courses if courses[x] == max_count))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", "\"\"\"\n@author: xueqiang.liu\n\"\"\"\nimport sys\n\ndef main():\n    while True:\n        try:\n            freshmen = int(sys.stdin.readline().strip())\n            course_counts = {}\n            for i in range(freshmen):\n                course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n                course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n            print max(course_counts.values())\n        except:\n            break\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    froshes = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(froshes):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef get_fresh_courses(n):\n    fresh_courses = []\n    for i in range(n):\n        fresh_courses.append(sys.stdin.readline().strip().split())\n    return fresh_courses\n\ndef get_popularities(fresh_courses):\n    popularities = {}\n    for fresh_course in fresh_courses:\n        fresh_course_tuple = tuple(sorted(fresh_course))\n        if fresh_course_tuple in popularities:\n            popularities[fresh_course_tuple] += 1\n        else:\n            popularities[fresh_course_tuple] = 1\n    return popularities\n\ndef get_most_popular(popularities):\n    most_popular = []\n    max_popularity = max(popularities.values())\n    for fresh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular.append(fresh_course_tuple)\n    return most_popular[0]\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    fresh_courses = get_fresh_courses(n)\n    popularities = get_popularities(fresh_courses)\n    most_popular = get_most_popular(popularities)\n    print(most_popular)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split()))\n        classes[courses] += 1\n    print(max(classes.values())))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nfrom collections import defaultdict\n\ndef main():\n    froshes = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(froshes):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    freshers = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshers):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import Counter\n\nn = int(input())\n\ncombinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split()))\n    combinations.append(tuple(sorted(courses)))\n\n# print(combinations)\n\nc = Counter(combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])\n", "\nimport sys\n\n# MAIN \n\n# Read in the input and store it in a dictionary \n# The key is the freshman and the value is the courses \nfreshman = {}\n\nfor line in sys.stdin:\n    freshman[line] = freshman.get(line, 0) + 1\n\n# Find the most popular combination of courses \n# i.e. the highest value in the dictionary \nmost_popular = max(freshman.values())\n\n# Print the number of freshman who have the most popular combination \nprint(most_popular)\n", "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a list\n# The key is the frosh and the value is the course\nfroshs = []\n\nfor line in sys.stdin:\n    froshs.append(line)\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(froshs)\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n", "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfroshs = {}\n\nfor line in sys.stdin:\n    froshs[line] = froshs.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(froshs.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n", "\nimport sys\n\ndef find_popular_combinations(frosh):\n    combinations = {}\n    for i in range(len(frosh)):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    num_frosh = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(num_frosh):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(frosh)))\n"]