2022-04-10 00:16:33.676950 """
Frosh commencing their studies at Waterloo have diverse interests, as evidenced by their desire to take various combinations of courses from among those available.

University administrators are uncomfortable with this situation, and therefore wish to offer a conformity prize to frosh who choose one of the most popular combinations of courses. How many frosh will win the prize?

-----Input-----
The input begins with an integer $1 \leq n \leq 10000$, the number of frosh. For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh. Each course number is an integer between $100$ and $499$.

-----Output-----
The popularity of a combination is the number of frosh selecting exactly the same combination of courses. A combination of courses is considered most popular if no other combination has higher popularity. Output a single line giving the total number of students taking some combination of courses that is most popular.

-----Examples-----
Sample Input:
3
100 101 102 103 488
100 200 300 101 102
103 102 101 488 100
Sample Output:
2
"""
2022-04-10 00:16:33.676981 --------------------------
2022-04-10 00:17:08.003350 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649564194,
  "id": "cmpl-4vJI2KDzZEqJ9Tl6EHnAXhEIAagL0",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-10 00:17:08.003644 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\nimport sys\n\ndef find_popular_combinations(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(n)))"
}
2022-04-10 00:17:08.003683 REASON stop
2022-04-10 00:17:08.004408 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
2022-04-10 00:17:08.004426 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-10 00:17:08.004506 REASON stop
2022-04-10 00:17:08.004895 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
2022-04-10 00:17:08.004931 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\n# print(course_combinations)\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\n# print(most_common)\n\nprint(most_common[0][1])"
}
2022-04-10 00:17:08.005016 REASON stop
2022-04-10 00:17:08.005425 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
2022-04-10 00:17:08.005458 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()"
}
2022-04-10 00:17:08.005517 REASON stop
2022-04-10 00:17:08.005900 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
2022-04-10 00:17:08.005931 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the courses\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)"
}
2022-04-10 00:17:08.006005 REASON stop
2022-04-10 00:17:08.006419 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
2022-04-10 00:17:08.006455 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(frosh):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-10 00:17:08.006514 REASON stop
2022-04-10 00:17:08.006825 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
2022-04-10 00:17:08.006837 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\nfroshes = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(froshes):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, froshes):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)"
}
2022-04-10 00:17:08.006878 REASON stop
2022-04-10 00:17:08.007120 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
2022-04-10 00:17:08.007133 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(frosh_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-10 00:17:08.007181 REASON stop
2022-04-10 00:17:08.007562 test/intro-questions.txt_dir/4970/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4970/solutions.json'
