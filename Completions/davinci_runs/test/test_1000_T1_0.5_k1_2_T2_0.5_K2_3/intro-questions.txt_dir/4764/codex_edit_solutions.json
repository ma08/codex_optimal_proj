["\n\nn, h, v = map(int, input().split())\nprint((n-h) * (n-v) * 4)\n", "import sys\nimport math\n\nn, h, v = [int(i) for i in input().split()]\n\n# Calculate the volume of the cake.\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake.\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake.\nprint(volume_max)\n", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef square_cake(n, h, v)\n\n    # Find the dimension of the largest piece of cake\n    x = min(h, n - h, v, n - v);\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4;\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of the cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of the cake\nprint(volume_max)\n", "import sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n - h) * (n - v) * 4)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]\n    print(h * v * n * 4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "\ndef volume(n, h, v):\n    return (n - h) * (n - v) * 4\n\nn, h, v = map(int, input().split())\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\nn, h, v = map(int, input().split())\n\nprint((n-h) * (n-v) * 4)\n", "\nn, h, v = map(int, input().split())\n\nprint((h-n) * (v-n) * 4)\n", "def square_cake(n, h, v)\n\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake.\n    x = min(h, v, n - h, n - v)\n\n    # Find the volume of the largest piece of cake.\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n - h) * (n - v) * 4)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, h, v = map(int, sys.stdin.readline().split())\n    print((n-h) * (n-v) * 4)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom math import sqrt\n \nn = int(input())\n \ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n \nfor i in range(n):\n    if is_prime(i):\n        print(i)\n", "#!/usr/bin/env python3\n\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v, n1, h1, v1):\n    return 2 * (n1 - h1) * (n1 - v1) * h1 * v1\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]\n    print(max(h, n-h) * max(v, n-v) * 4)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, h, v = map(int, input().split())\n    print(4 * (n - h) * (n - v))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef square_cake(n, h, v):\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n-h, v, n-v)\n\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "def main():\n    n, h, v = map(int, input().split())\n\n    print((n-h) * (n-v) * 4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # read input\n    n, h, v = [int(x) for x in raw_input().split()]\n\n    # compute largest volume\n    volume = (n - max(h, n - h)) * (n - max(v, n - v)) * 4\n\n    # display result\n    print(volume)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Program starts here\nimport sys\n\nn, h, v = map(int, sys.stdin.readline().split())\n\n# print(max(n*h*4,n*v*4,(n-h)*(n-v)*4))\n\nprint(max(n*h*4, n*v*4, (n-h)*(n-v)*4))\n", "\n\n#Program starts here.\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4)) \n", "\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake.\n    x = min(h, n - h, v, n - v)\n\n    # Find the volume of the largest piece of cake.\n    return x * x * 4\n\n\nif __name__ == \"__main__\":\n    print(square_cake(10, 4, 7))\n    print(square_cake(5, 2, 2))\n", "\nimport sys\n\nn, h, v = map(int, sys.stdin.readline().split())\n\nprint(max(n*h*4, n*v*4, (n-h)*(n-v)*4))\n", "#!/usr/bin/python3\n\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of the cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of the cake\nprint(volume_max)\n", "\n# Program starts here\nimport sys\n\nn, h, v = map(int, sys.stdin.readline().split())\n\nprint(max(n * h * 4, n * v * 4, (n - h) * (n - v) * 4))\n", "def volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n\nn, h, v = map(int, input().split())\n\nprint(max(volume(n, h, v), volume(n, n - h, v),\n          volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\nn = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(a) - min(a))\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake.\n    x = min(n - h, h, v, n - v)\n\n    # Find the volume of the largest piece of cake.\n    return x * x * 4.0\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "n = int(input())\na = list(map(int, input().split()))\n\nprint(max(a) - min(a))\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimension of the largest piece of cake\n    x = min(h, n - h, v, n - v) * .5\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n\ndef get_lines(file_name):\n    file = open(file_name)\n    lines = []\n    for line in file:\n        lines.append(line)\n    return lines\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n", "\n\n#program starts here\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4)) \n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]\n    print(max(h, n - h) * max(v, n - v) * 4)\n\nif __name__ == '__main__':\n    main()\n", "\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * n\n\nn, h, v = map(int, input().split())\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\n\ndef main():\n    n, h, v = [int(i) for i in input().split()]  # n = nombre de cookies, h = hauteur, v = largeur\n    print(h * v * 4)  # (h * v) * 4 = surface du papier\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * 4\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\n\nimport sys\n\nn,h,v = map(int,sys.stdin.readline().split())\n\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4))\n", "import sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake\nprint(volume_max)\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the area of the largest piece of cake\n    x = min(h, n - h, v, n - v) * min(h, n - h, v, n - v)\n\n    # Find the area of the cake\n    return n * n * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake and the volume of the largest piece of the cake\nvolume = n ** 2 * 4\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of the cake in cubic meters\nprint(volume_max)\n", "\nn, h, v = map(int, input().split())\n\nprint((n-h) * (n-v) * 4) \n", "\n#program starts here\nimport sys\nn,h,v = map(int,sys.stdin.readline().split())\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4))\n", "\n\ndef square_cake(n, h, v):\n\n    # Find the dimensions of the largest piece of cake\n    x = min(h, n - h, v, n - v)\n\n\n\n    # Find the volume of the largest piece of cake\n    return x * x * 4\n\nprint(square_cake(10, 4, 7))\nprint(square_cake(5, 2, 2))\n", "\n#Program starts here.\nimport sys\nn,h,v = map(int,sys.stdin.readline().split())\nprint(max(n*h*4,n*v*4,(n-h)*(n-v)*4))\n", "\nn, h, v = map(int, input().split())\n\ndef volume(n, h, v):\n    return 2 * (n - h) * (n - v) * h * v\n\nprint(max(volume(n, h, v), volume(n, n - h, v), volume(n, h, n - v), volume(n, n - h, n - v)))\n", "\nimport sys\nimport math\n\nn, h, v = [int(i) for i in sys.stdin.readline().split()]\n\n# Calculate the volume of the cake.\nvolume = n * n * 4\n\n# Calculate the volume of the largest piece of cake.\nvolume_max = max(volume / 4, (n - h) * (n - v) * 4, h * v * 4, h * (n - v) * 4, (n - h) * v * 4)\n\n# Print the volume of the largest piece of cake.\nprint(volume_max)\n", "\n\ndef main():\n    print(\"moo\")\n\nif __name__ == \"__main__\":\n    main()\n"]