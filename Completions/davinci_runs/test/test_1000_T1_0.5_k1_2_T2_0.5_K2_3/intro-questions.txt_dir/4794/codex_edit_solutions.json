["\n\nfrom collections import Counter\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquished = []\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n    squished.append(squished.count('X'))\n\n# count the number of spaces that squish 0, 1, 2, 3, and 4 cars\nsquished_counts = Counter(squished)\nfor i in range(5): print(squished_counts[i])\n", "\n\n# CODE:\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4 => 1, 2, 3, 4, 5, 6\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    r,c = map(int,input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0:0,1:0,2:0,3:0,4:0} # initialize a dictionary\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.': # four dots\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.': # three dots\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.': # two dots\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.': # one dot\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "import sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4, 5\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main(r,c,l):\n    d = {0:0,1:0,2:0,3:0,4:0}\n    for i in range(r):\n        for j in range(c):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.': #four dots\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.': #three dots\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.': #two dots\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.': #one dot\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\n\nif __name__ == '__main__':\n    r,c = map(int,input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    main(r,c,l)\n", "\n\ndef main():\n    r,c = map(int,input().split())\n    li = []\n    for i in range(r):\n        li.append(input())\n    d = {0:0,1:0,2:0,3:0,4:0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[0] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[1] += 1\n            elif li[i][j] == '.' and li[i][j+1] == 'X' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[1] += 1\n            elif li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[1] += 1\n            elif li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == 'X':\n                d[1] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == 'X' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[2] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == '.' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[2] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == 'X':\n                d[2] += 1\n            elif li[i][j] == '.' and li[i][j+1] == 'X' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[2] += 1\n            elif li[i][j] == '.' and li[i][j+1] == 'X' and li[i+1][j] == '.' and li[i+1][j+1] == 'X':\n                d[2] += 1\n            elif li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == 'X' and li[i+1][j+1] == 'X':\n                d[2] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == 'X' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R - 1):\n        for j in range(C - 1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j + 1] == '.' and parking_map[i + 1][j] == '.' and parking_map[i + 1][j + 1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 1][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 3][j + 1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquashed = [0]*6\nfor space in possible_spaces:\n        if grid[cell[0]][cell[1]] == 'X': squashed[0] += 1\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X': squashed[1] += 1\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X': squashed[2] += 1\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X': squashed[3] += 1\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X': squashed[4] += 1\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X': squashed[5] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squashed.count(i))\n", "\n\ndef count_parking_space(matrix):\n    parking_space = [0, 0, 0, 0, 0]\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[i]) - 2):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[4] += 1\n                        else:\n                            parking_space[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[1] += 1\n                        else:\n                            parking_space[0] += 1\n\n    return parking_space\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_space = count_parking_space(matrix)\n    for i in range(len(parking_space)):\n        print(parking_space[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    r,c = map(int,input().split())\n    li = []\n    for i in range(r):\n        li.append(input())\n    d = {0:0,1:0,2:0,3:0,4:0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[0] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[1] += 1\n            elif li[i][j] == '.' and li[i][j+1] == 'X' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[1] += 1\n            elif li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[1] += 1\n            elif li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == 'X':\n                d[1] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == 'X' and li[i+1][j] == '.' and li[i+1][j+1] == '.':\n                d[2] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == '.' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[2] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == '.' and li[i+1][j] == '.' and li[i+1][j+1] == 'X':\n                d[2] += 1\n            elif li[i][j] == '.' and li[i][j+1] == 'X' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[2] += 1\n            elif li[i][j] == '.' and li[i][j+1] == 'X' and li[i+1][j] == '.' and li[i+1][j+1] == 'X':\n                d[2] += 1\n            elif li[i][j] == '.' and li[i][j+1] == '.' and li[i+1][j] == 'X' and li[i+1][j+1] == 'X':\n                d[2] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == 'X' and li[i+1][j] == 'X' and li[i+1][j+1] == '.':\n                d[3] += 1\n            elif li[i][j] == 'X' and li[i][j+1] == 'X' and li[i+1][j] == '.' and li[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquish = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[0] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[2] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[3] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[4] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squish.count(i))\n", "\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4 => 1, 2, 3, 4, 5\n    for i in range(R-1):\n        for j in range(C-1):\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "r, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars in a row\nprint(free, free - 2*cols, free - 4*cols, free - 6*cols, free - 8*cols)\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquashed = [0]*len(possible_spaces)\nfor space in possible_spaces:\n        if grid[cell[0]][cell[1]] == 'X':  # if the cell contains a car\n            squashed[possible_spaces.index(space)] += 1  # add 1 to the space's count\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squashed.count(i))\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquash = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[0] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[2] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[3] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[4] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquished = [0]*6\nfor space in possible_spaces:\n    for cell in space[0]:\n        if grid[cell[0]][cell[1]] == 'X':\n            squished[0] += 1\n    for cell in space[1]:\n        if grid[cell[0]][cell[1]] == 'X':\n            squished[1] += 1\n    for cell in space[2]:\n        if grid[cell[0]][cell[1]] == 'X':\n            squished[2] += 1\n    for cell in space[3]:\n        if grid[cell[0]][cell[1]] == 'X':\n            squished[3] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squished[4] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\n\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\n\ndef count_parking_space(matrix):\n    parking_space = [0, 0, 0, 0, 0]\n    for i in range(len(matrix) - 1):\n        for j in range(len(matrix[i]) - 1):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[4] += 1\n                        else:\n                            parking_space[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[1] += 1\n                        else:\n                            parking_space[0] += 1\n\n    return parking_space\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_space = count_parking_space(matrix)\n    for i in range(len(parking_space)):\n        print(parking_space[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars in a row.\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squashed for each space\nsquashed = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[0] += 1\n    for cell in space[::-1]:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[1] += 1\n    for cell in space[::-1]:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[2] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[3] += 1\n    for cell in space[::-1]:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[4] += 1\n\n# print the number of spaces that squash 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squashed.count(i))\n", "import sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4 => 1, 2, 3, 4, 5\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    R, C = map(int, input().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(input().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nif __name__ == '__main__':\n    r,c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0:0, 1:0, 2:0, 3:0, 4:0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "#!/usr/bin/env python3\n\ndef main():\n    r, c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r - 1):\n        for j in range(c - 1):\n            if l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquish = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[0] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[2] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[3] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[4] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squish.count(i))\n", "import sys\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n# Squeeze 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "\ndef count_parking_space(matrix):\n    parking_space = [0, 0, 0, 0, 0, 0, 0]\n    for i in range(len(matrix) - 1):\n        for j in range(len(matrix[i]) - 1):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X' and matrix[i + 1][j] == 'X' and matrix[i][j + 1] == 'X' and matrix[i + 1][j + 1] == 'X':\n                parking_space[6] += 1\n            elif matrix[i][j] == 'X' and matrix[i + 1][j] == 'X':\n                parking_space[5] += 1\n            elif matrix[i][j] == 'X' and matrix[i][j + 1] == 'X':\n                parking_space[5] += 1\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[4] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[1] += 1\n\n    return parking_space[::-1]\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_space = count_parking_space(matrix)\n    for i in range(len(parking_space)):\n        print(parking_space[i])\n\nif __name__ == '__main__':\n    main()\n", "import sys\nsys.setrecursionlimit(100000)\n\ndef main():\n    r,c = map(int, sys.stdin.readline().split())\n    l = []\n    for i in range(r):\n        l.append(sys.stdin.readline())\n    d = {0:0, 1:0, 2:0, 3:0, 4:0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n\n#CODE\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "import sys\ninput = sys.stdin.readline\n\nr, c = map(int, input().rstrip().split())\nparking = [input().rstrip() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        elif parking[i][j] == \"X\":\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\n\n# CODE\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\n\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\ndef count_free(rows, cols):\n    # Just count the number of free spaces\n    free = 0\n    for i in range(rows):\n        for j in range(cols):\n            if sys.stdin.read(1) == '.':\n                free += 1\n            sys.stdin.read(1)\n    return free\n\ndef main():\n    free = count_free(rows, cols)\n    # Squeeze 0, 1, 2, 3, or 4 cars\n    print(free)\n    print(free - 2*cols)\n    print(free - 4*cols)\n    print(free - 6*cols)\n    print(free - 8*cols)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    r,c = map(int,input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0:0,1:0,2:0,3:0,4:0} #initialize a dictionary\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.': #four dots\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.': #three dots\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.': #two dots\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.': #one dot\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\n\ndef count_parking_space(matrix):\n    parking_space = [0, 0, 0, 0, 0]\n    for i in range(len(matrix) - 1):\n        for j in range(len(matrix[i]) - 1):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[4] += 1\n                        else:\n                            parking_space[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[1] += 1\n                        else:\n                            parking_space[0] += 1\n\n    return parking_space\n\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_space = count_parking_space(matrix)\n    for i in range(len(parking_space)):\n        print(parking_space[i])\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    r, c = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(r):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(r-1):\n        for j in range(c-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquashed = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[0] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[2] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[3] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squashed[4] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "import sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars \nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars in a row\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "import sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2*cols)\nprint(free - 4*cols)\nprint(free - 6*cols)\nprint(free - 8*cols)\n", "\n\n#CODE:\nimport sys\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\n#CODE\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4, 5\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X' or parking_map[i+3][j] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X' or parking_map[i][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X' or parking_map[i+3][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X' or parking_map[i+3][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X' or parking_map[i+2][j+3] == 'X' or parking_map[i+3][j+2] == 'X' or parking_map[i+1][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nrows, cols = map(int, sys.stdin.readline().split()) \n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows): \n    for j in range(cols): \n        if sys.stdin.read(1) == '.':\n            free += 1 \n        sys.stdin.read(1)\n\n# Squeeze 0, 1, 2, 3, or 4 cars\nprint(free)\nprint(free - 2*cols) \nprint(free - 4*cols) \nprint(free - 6*cols) \nprint(free - 8*cols) \n"]