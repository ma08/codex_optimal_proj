["\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = sorted([int(sys.stdin.readline().strip()) for i in range(K)])\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes_ = 0\n    while any(desk > current_desk for desk in desks):\n        current_desk = max(desk for desk in desks if desk >= current_desk)\n        passes_ += 1\n    print(passes_)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    for i in range(K): \n        clerks = []\n        for i in range(K):\n            clerks.append(int(sys.stdin.readline().strip()))\n        #print(clerks)\n        clerks.sort()\n        #print(clerks)\n        max_val = max(clerks)\n        #print(max_val)\n        max_index = clerks.index(max_val)\n        #print(max_index)\n        passess = max_index\n        for i in range(max_index+1, K):\n            if clerks[i] - clerks[i-1] > 1:\n                passess += 1\n        print(passess)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    i = 0\n    passes = 0\n    while i < K:\n        if desks[i] == i+1:\n            i += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\nlines = fileinput.input()\n\nk = int(lines[0])  # number of desks\ndesks = list(map(int, lines[1:k+1]))  # desk numbers\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i + 1:\n            count += i + 1 - desks[i]\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))    \n    pos = 0\n    passes = 0    \n    while pos < K:\n        for i in range(pos, K):            \n            if desks[i] == i+1:\n                pos += 1\n                break\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K, N = map(int, input().split())\n    desks = list(map(int, input().split()))\n    pos = 1\n    passes = 0\n    while pos < K:\n        if desks[pos-1] == pos:\n            pos += 1\n            passes += 1\n        else:\n            pos = desks[pos-1]\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [0]\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes+1)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_moves = 0\n    for i in range(K):\n        min_moves = max(min_moves, desk_positions[clerks[i]] - i)\n    print(min_moves)\n    \nif __name__ == '__main__':\n    main()\n", "import fileinput\nlines = fileinput.input() \n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1])) \n\n# Sort the desks in ascending order\ndesks.sort() \n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k))) \n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdoors = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_door = 1\n\tsteps = 0\n\tfor door in doors:\n\t\tif door > current_door:\n\t\t\tsteps = steps + door - current_door\n\t\tcurrent_door = door\n\tprint(steps)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses += (desk - current_desk + 1)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "#\n# import sys\n#\n# def main():\n#     K = int(sys.stdin.readline().strip())\n#     desks = sorted([int(sys.stdin.readline().strip()) for _ in range(K)])\n#     count = 0\n#     for i in range(K):\n#         count += 1\n#         if desks[i] < i+1:\n#             count += i - desks[i]\n#     print(count)\n#\n# main()\n", "import sys\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    A = [int(sys.stdin.readline().strip()) for _ in range(N)]\n\n    # code\n\nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    count = 0\n    for i in range(K):\n        if desks[i] < i + 1:\n            count += i + 1 - desks[i]\n        count += 1\n    print(count)\n\nmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_moves = 0\n    for i in range(K):\n        min_moves = max(min_moves, abs(desk_positions[clerks[i]] - i))\n    print(min_moves)\n    \nif __name__ == '__main__':\n    main()\n", "import fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, k)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n# Sort the desks in ascending order\ndesks.sort()\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desks\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = sorted([int(sys.stdin.readline().strip()) for _ in xrange(K)])\n    count = 0\n    for i in xrange(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes_count = 0\n    while any(desk > current_desk for desk in desks)\n        current_desk = max(desk for desk in desks if desk <= current_desk)\n        passes_count += 1\n    print(passes_count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Feb  5 21:01:28 2019\n\n@author: sarath\n\"\"\"\n#importing fileinput\nimport fileinput\n#reading the input from the file\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n#storing the first line as k and the remaining lines as desks\n# Sort the desks in ascending order\ndesks.sort()\n#sorting the desks\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers.\nprint(max(desks[i] - desks[i-1] for i in range(1, k+1)))\n#printing the maximum distance between any two adjacent desks\n", "\n\ndef main():\n    k = int(input())\n    d = sorted(list(map(int, input().split())))\n    print(max(d[i] - d[i - 1] for i in range(0, k)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    # print(clerks)\n    clerks.sort()\n    # print(clerks)\n    max_val = max(clerks)\n    # print(max_val)\n    max_index = clerks.index(max_val)\n    # print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(sorted(clerks))}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))  # \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0447\u0438\u0441\u0435\u043b\n    pos = 0\n    passes = 0\n    while pos < K:\n        if desks[pos] == pos+1:  # \u0415\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u043e\u043b\u0430 \u0440\u0430\u0432\u0435\u043d \u043d\u043e\u043c\u0435\u0440\u0443 \u0443\u0447\u0435\u043d\u0438\u043a\u0430\n            pos += 1\n        else:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    k = int(input())\n    desks = [int(input()) for i in range(k)]\n    current_desk = 1\n    passes = 0\n    while any(desk > current_desk for desk in desks): # any([True, False, True]) == True\n        current_desk = max(desk for desk in desks if desk <= current_desk) # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0435\u0435 current_desk\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, K = [int(x) for x in sys.stdin.readline().strip().split()]\n    desks = sorted([int(x) for x in sys.stdin.readline().strip().split()])\n\n    count = 0\n    for i in range(N):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "import sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))    \n    print(desks)\n\nif __name__ == '__main__':\n    main()\n", "\"\"\"\n\"\"\"\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(sorted(clerks), 1)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdoors = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_door = 1\n\tsteps = 0\n\tfor door in doors:\n\t\tif door > current_door:\n\t\t\tsteps += (door - current_door)\n\t\tcurrent_door = door\n\tprint(steps)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))  # \u53d7\u9a13\u8005\u306e\u4f4d\u7f6e\n    pos = 0\n    passes = 0\n    while pos < K-1:\n        if desks[pos] == pos + 1:\n            pos += 1\n            passes += 1\n        elif desks[pos] > pos + 1:\n            pos += desks[pos] - pos - 1\n            passes += 1\n        else:\n            pos += 1\n            passes += 1\n\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)))) \n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    # print(clerks)\n    clerks.sort()\n    # print(clerks)\n    max_val = max(clerks)\n    # print(max_val)\n    max_index = clerks.index(max_val)\n    # print(max_index)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 1\n    passes = 0\n    while pos <= K:\n        if desks[pos-1] == pos:\n            pos += 1\n        else:\n            desks[pos-1], desks[desks[pos-1]-1] = desks[desks[pos-1]-1], desks[pos-1]\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks, 1)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\nk = int(sys.stdin.readline())\ndesks = list(map(int, sys.stdin.readlines()))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers.\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(sorted(clerks))}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = sorted([int(sys.stdin.readline().strip()) for _ in range(K)])\n\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i + 1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "\ndef main():\n    k = int(input())\n    n = int(input())\n    d = [int(input()) for _ in range(n)]\n    d.sort() # O(n log n)\n    print(max(d[i] - d[i - 1] for i in range(1, len(d)))) # O(n)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_desk = 1\n    passes_ = 0\n    while any(d > current_desk for d in desks):\n        current_desk = max(d for d in desks if d <= current_desk)\n        passes_ += 1\n    print(passes_)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, k))) \n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d))))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for _ in range(K)]\n    current_desk = 1\n    passes_count = 0\n    while any(desk > current_desk for desk in desks):\n        current_desk = max(desk for desk in desks if desk > current_desk)\n        passes_count += 1\n    print(passes_count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i + 1:\n            count += i + 1 - desks[i]\n    print(count)\n\nmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)}\n    min_moves = 0\n    for i in range(K):\n        min_moves = max(min_moves, desk_positions[clerks[i]] - i)\n\treturn\n    print(min_moves)\n    \nif __name__ == '__main__':\n    main()\n", "import fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n# Sort the desks in ascending order\ndesks.sort()\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desks\nprint(max(desks[i] - desks[i-1] for i in range(1,k)))\n", "\n\nimport sys\nimport math\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    A = []\n    for i in range(N):\n        A.append(int(sys.stdin.readline().strip()))\n    print(A)\n    # K = int(sys.stdin.readline().strip())\n    # clerks = []\n    # for i in range(K):\n    #     clerks.append(int(sys.stdin.readline().strip()))\n    # #print(clerks)\n    # clerks.sort()\n    # #print(clerks)\n    # max_val = max(clerks)\n    # #print(max_val)\n    # max_index = clerks.index(max_val)\n    # #print(max_index)\n    # passess = max_index\n    # for i in range(max_index+1, K):\n    #     if clerks[i] - clerks[i-1] > 1:\n    #         passess += 1\n    # print(passess)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desks\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline())\n    desks = [int(sys.stdin.readline()) for _ in range(k)]\n    current_desk = 0\n    passes = 0\n    for desk in desks:\n        if desk >= current_desk:\n            passes = passes + (desk - current_desk + 1)\n        current_desk = desk\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 0\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk >= current_desk:\n\t\t\tpasses += (desk - current_desk + 1)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "import fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers.\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses += (desk - current_desk + 1)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n\tk = int(sys.stdin.readline())\n\tdoors = [int(sys.stdin.readline()) for _ in range(k)]\n\tcurrent_door = 1\n\tsteps = 0 \n\tfor door in doors:\n\t\tif door > current_door:\n\t\t\tsteps = steps + (door - current_door)\n\t\tcurrent_door = door\n\tprint(steps)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 0\n    passes = 0\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(sorted(clerks))} # dict comprehension\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[clerks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 0\n    passes = 0\n    while pos < K:\n        if desks[pos] == pos+1:\n        else:\n            pos = desks[pos]-1\n            pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\nimport os\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    # print(clerks)\n    clerks.sort()\n    # print(clerks)\n    max_val = max(clerks)\n    # print(max_val)\n    max_index = clerks.index(max_val)\n    # print(max_index)\n    passess = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passess += 1\n    print(passess)\n\nif __name__ == '__main__':\n    main()\n    \n", "\n\ndef main():\n    print('Hello World!')\n\nif __name__ == '__main__':\n    main()\n"]