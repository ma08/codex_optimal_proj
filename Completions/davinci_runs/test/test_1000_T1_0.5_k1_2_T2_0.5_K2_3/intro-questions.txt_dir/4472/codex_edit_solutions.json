["import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[n//2] == b[n//2]:\n            return solve(a[:n//2] + a[n//2+1:], b[:n//2] + b[n//2+1:])\n        else:\n            return 1\n    else:\n        if a[n//2-1:n//2+1] == b[n//2-1:n//2+1]:\n            return solve(a[:n//2-1] + a[n//2+1:], b[:n//2-1] + b[n//2+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 1\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n", "import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(n/2)] == b[int(n/2)]:\n            return solve(a[:int(n/2)] + a[int(n/2)+1:], b[:int(n/2)] + b[int(n/2)+1:])\n        else:\n            return 1\n    else:\n        if a[int(n/2)-1:int(n/2)+1] == b[int(n/2)-1:int(n/2)+1]:\n            return solve(a[:int(n/2)-1] + a[int(n/2)+1:], b[:int(n/2)-1] + b[int(n/2)+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\ntest()\n", "import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(n/2)] == b[int(n/2)]:\n            return solve(a[:int(n/2)] + a[int(n/2)+1:], b[:int(n/2)] + b[int(n/2)+1:])\n        else:\n            return 1\n    else:\n        if a[int(n/2)-1:int(n/2)+1] == b[int(n/2)-1:int(n/2)+1]:\n            return solve(a[:int(n/2)-1] + a[int(n/2)+1:], b[:int(n/2)-1] + b[int(n/2)+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n    assert solve(\"abcdef\", \"fedcba\") == 1\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] != b[int(math.floor(n/2))]:\n            return 1\n        else:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:],\n                         b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] != b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return 1\n        else:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:],\n                         b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n", "\nimport math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a) + 1\n    if n % 2 == 1:\n        if a[int(n/2)] != b[int(n/2)]:\n            return 1\n        else:\n            return solve(a[:int(n/2)] + a[int(n/2)+1:],\n                         b[:int(n/2)] + b[int(n/2)+1:])\n    else:\n        if a[int(n/2)-1:int(n/2)+1] != b[int(n/2)-1:int(n/2)+1]:\n            return 1\n        else:\n            return solve(a[:int(n/2)-1] + a[int(n/2)+1:],\n                         b[:int(n/2)-1] + b[int(n/2)+1:])\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 0\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n", "import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[n//2] == b[n//2]:\n            return solve(a[:n//2] + a[n//2+1:], b[:n//2] + b[n//2+1:])\n        else:\n            return 1\n    else:\n        if a[n//2-1:n//2+1] == b[n//2-1:n//2+1] or a[n//2-1:n//2+1] == b[n//2:n//2+2]:\n            return solve(a[:n//2-1] + a[n//2+1:], b[:n//2-1] + b[n//2+1:]) + 1\n        else:\n            return 2\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n    assert solve(\"abcdef\", \"fedcba\") == 2\n", "import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] == b[int(math.floor(n/2))]:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] == b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:], b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\nif __name__ == '__main__':\n    test()\n", "import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[n//2] == b[n//2]:\n            return solve(a[:n//2] + a[n//2+1:], b[:n//2] + b[n//2+1:])\n        else:\n            return 1\n    else:\n        if a[n//2-1:n//2+1] == b[n//2-1:n//2+1]:\n            return solve(a[:n//2-1] + a[n//2+1:], b[:n//2-1] + b[n//2+1:])\n        else:\n            return 1\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\n\nif __name__ == \"__main__\":\n    test()\n", "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc main() {\n\tdata, err := ioutil.ReadFile(\"/Users/yuxianming/Desktop/go/src/go-study/file/file.go\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Println(string(data))\n}\n", "import math\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    n = len(a)\n    if n % 2 == 1:\n        if a[int(math.floor(n/2))] != b[int(math.floor(n/2))]:\n            return 1\n        else:\n            return solve(a[:int(math.floor(n/2))] + a[int(math.floor(n/2))+1:],\n                         b[:int(math.floor(n/2))] + b[int(math.floor(n/2))+1:])\n    else:\n        if a[int(math.floor(n/2))-1:int(math.floor(n/2))+1] != b[int(math.floor(n/2))-1:int(math.floor(n/2))+1]:\n            return 1\n        else:\n            return solve(a[:int(math.floor(n/2))-1] + a[int(math.floor(n/2))+1:],\n                         b[:int(math.floor(n/2))-1] + b[int(math.floor(n/2))+1:])\n\n\ndef test():\n    assert solve(\"abacaba\", \"bacabaa\") == 4\n    assert solve(\"zcabd\", \"dbacz\") == 0\n    assert solve(\"abcabc\", \"abcabc\") == 0\n    assert solve(\"abcdabcd\", \"abcdabcd\") == 0\n    assert solve(\"a\", \"a\") == 0\n    assert solve(\"a\", \"b\") == 1\n    assert solve(\"ab\", \"ba\") == 1\n    assert solve(\"ab\", \"ab\") == 0\n    assert solve(\"abcd\", \"abcd\") == 0\n    assert solve(\"abcd\", \"dcba\") == 1\n    assert solve(\"abcde\", \"abcde\") == 0\n    assert solve(\"abcde\", \"edcba\") == 1\n\n\nif __name__ == \"__main__\":\n    test()\n", "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello, playground\")\n\tdata, err := ioutil.ReadFile(\"/Users/yuxianming/Desktop/go/src/go-study/file/file.txt\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Println(string(data))\n}\n"]