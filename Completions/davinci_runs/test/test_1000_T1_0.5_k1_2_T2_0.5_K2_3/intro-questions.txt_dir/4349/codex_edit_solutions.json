["const fs = require('fs');\nconst path = require('path');\n\n// Create folder\nfs.mkdir(path.join(__dirname, '/test'), {}, (err) => {\n  if (err) throw err;\n  console.log('Folder created...');\n});\n\n// Create and write to file\nfs.writeFile(\n  path.join(__dirname, '/test', 'hello.txt'),\n  'Hello World!',\n  (err) => {\n    if (err) throw err;\n    console.log('File written to...');\n\n    // File append\n    fs.appendFile(\n      path.join(__dirname, '/test', 'hello.txt'),\n      ' I love Node.js',\n      (err) => {\n        if (err) throw err;\n        console.log('File written to...');\n      }\n    );\n  }\n);\n\n// Read file\nfs.readFile(path.join(__dirname, '/test', 'hello.txt'), 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n\n// Rename file\nfs.rename(\n  path.join(__dirname, '/test', 'hello.txt'),\n  path.join(__dirname, '/test', 'helloworld.txt'),\n  (err) => {\n    if (err) throw err;\n    console.log('File renamed...');\n  }\n);\n", "const fs = require('fs');\nconst path = require('path');\n\n// Create folder\n// fs.mkdir(path.join(__dirname, '/test'), {}, err => {\n//   if (err) throw err;\n//   console.log('Folder created...');\n// });\n\n// Create and write to file\n// fs.writeFile(\n//   path.join(__dirname, '/test', 'hello.txt'),\n//   'Hello World!',\n//   err => {\n//     if (err) throw err;\n//     console.log('File written to...');\n\n//     // File append\n//     fs.appendFile(\n//       path.join(__dirname, '/test', 'hello.txt'),\n//       ' I love Node.js',\n//       err => {\n//         if (err) throw err;\n//         console.log('File written to...');\n//       }\n//     );\n//   }\n// );\n\n// Read file\nfs.readFile(path.join(__dirname, '/test', 'hello.txt'), 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n\n// Rename file\n// fs.rename(\n//   path.join(__dirname, '/test', 'hello.txt'),\n//   path.join(__dirname, '/test', 'helloworld.txt'),\n//   err => {\n//     if (err) throw err;\n//     console.log('File renamed...');\n//   }\n// );\n", "print(\"Hello World!\")\n", "#include <iostream>\n#include <fstream>\nusing namespace std;\nint main()\n{\n\tifstream fin;\n\tfin.open(\"file.txt\");\n\tstring str;\n\twhile(!fin.eof())\n\t{\n\t\tgetline(fin,str);\n\t\tcout<<str<<endl;\n\t}\n\tfin.close();\n\treturn 0;\n}\n", "const fs = require('fs');\nconst path = require('path');\n\n// Create folder\nfs.mkdir(path.join(__dirname, '/test'), {}, (err) => {\n  if (err) throw new Error(err);\n  console.log('Folder created...');\n});\n\n// Create and write to file\nfs.writeFile(\n  path.join(__dirname, '/test', 'hello.txt'),\n  'Hello World!',\n  (err) => {\n    if (err) throw new Error(err);\n    console.log('File written to...');\n\n    // File append\n    fs.appendFile(\n      path.join(__dirname, '/test', 'hello.txt'),\n      ' I love Node.js',\n      (err) => {\n        if (err) throw new Error(err);\n        console.log('File written to...');\n      }\n    );\n  }\n);\n\n// Read file\nfs.readFile(path.join(__dirname, '/test', 'hello.txt'), 'utf8', (err, data) => {\n  if (err) throw new Error(err);\n  console.log(data);\n});\n\n// Rename file\nfs.rename(\n  path.join(__dirname, '/test', 'hello.txt'),\n  path.join(__dirname, '/test', 'helloworld.txt'),\n  (err) => {\n    if (err) throw new Error(err);\n    console.log('File renamed...');\n  }\n);\n", "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\ng = gcd(a[0], b[0])\nfor i in range(1, n):\n    g = gcd(g, a[i])\n    g = gcd(g, b[i])\n\nfor i in range(n):\n    a[i] //= g\n    b[i] //= g\n\nc = a[0]\nfor i in range(1, n):\n    c = max(c, a[i])\n\nfor i in range(n):\n    print(b[i] * c // a[i], end=' ')\n", "n, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nsales = {}\n\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = set()\n        for d, t in sales.items():\n            if t == i + 1:\n                on_sale.add(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for d in on_sale:\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/17 \u4e0b\u53489:39\n# @Author  : Hou Rong\n# @Site    : \n# @File    : file.py\n# @Software: PyCharm\nimport os\nimport io\n\n\ndef get_file_content(filename):\n    with io.open(filename, 'r', encoding='utf-8') as f:\n        return f.read().strip()\n\n\ndef save_file_content(filename, content):\n    with io.open(filename, 'w', encoding='utf-8') as f:\n        f.write(content.strip())\n\n\ndef get_file_list(path):\n    file_list = []\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            file_list.append(os.path.join(root, file))\n    return file_list\n", "n, m = map(int, input().split())  # n is the number of items, m is the number of sales\nk = list(map(int, input().split()))\n# sales is a dict with key as day, value as item\nsales = {}\n\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = set()\n        for d, t in sales.items():\n            if t == i+1:\n                on_sale.add(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for d in on_sale:\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n\n    sales = {}\n\n    for _ in range(m):\n        d, t = map(int, input().split())\n        sales[d] = t\n\n    days = 0\n    for i in range(n):\n        if k[i] > 0:\n            on_sale = set()\n            for d, t in sales.items():\n                if t == i+1:\n                    on_sale.add(d)\n            if len(on_sale) == 0:\n                days += 2 * k[i]\n            else:\n                days += 1\n                k[i] -= 1\n                for d in on_sale:\n                    if k[i] > 0:\n                        days += 1\n                        k[i] -= 1\n                    else:\n                        break\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())  # n is the number of items, m is the number of sales\n    k = list(map(int, input().split()))\n    # sales is a dict with key as day, value as item\n    sales = {}\n\nfor _ in range(m):\n    d, t = map(int, input().split())\n    sales[d] = t\n\ndays = 0\nfor i in range(n):\n    if k[i] > 0:\n        on_sale = set()\n        for d, t in sales.items():\n            if t == i+1:\n                on_sale.add(d)\n        if len(on_sale) == 0:\n            days += 2 * k[i]\n        else:\n            days += 1\n            k[i] -= 1\n            for d in on_sale:\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/17 \u4e0b\u53489:39\n# @Author  : Hou Rong\n# @Site    : \n# @File    : file.py\n# @Software: PyCharm\nimport os\nimport io\n\n\ndef get_file_content(filename):\n    with io.open(filename, 'r', encoding='utf-8') as f:\n        return f.read().strip()\n\n\ndef save_file_content(filename, content):\n    with io.open(filename, 'w', encoding='utf-8') as f:\n        f.write(content)\n\n\ndef get_file_list(path):\n    file_list = []\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            file_list.append(os.path.join(root, file))\n    return file_list\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n\n    sales = {}\n\n    for _ in range(m):\n        d, t = map(int, input().split())\n        sales[d] = t\n\n    days = 0\n    for i in range(n):\n        if k[i] > 0:\n            on_sale = set()\n            for d, t in sales.items():\n                if t == i+1:\n                    on_sale.add(d)\n            if len(on_sale) == 0:\n                days += 2 * k[i]\n            else:\n                days += 1\n                k[i] -= 1\n                for d in on_sale:\n                    if k[i] > 0:\n                        days += 1\n                        k[i] -= 1\n                    else:\n                        break\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\nprint(days)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n\n    sales = {}\n\n    for _ in range(m):\n        d, t = map(int, input().split())\n        sales[d] = t\n\n    days = 0\n    for i in range(n):\n        if k[i] > 0:\n            on_sale = set()\n            for d, t in sales.items():\n                if t == i+1:\n                    on_sale.add(d)\n            if len(on_sale) == 0:\n                days += 2 * k[i]\n            else:\n                days += 1\n                k[i] -= 1\n                for d in on_sale:\n                    if k[i] > 0:\n                        days += 1\n                        k[i] -= 1\n                    else:\n                        break\n                if k[i] > 0:\n                    days += 1\n                    k[i] -= 1\n                else:\n                    break\n            if k[i] > 0:\n                days += 2 * k[i]\n\n\nprint(days)\n", "#include<iostream>\n#include<fstream>\nusing namespace std;\nint main()\n{\n\tifstream fin; // input file stream\n\tfin.open(\"file.txt\");\n\tstring str;\n\twhile(!fin.eof())\n\t{\n\t\tgetline(fin,str);\n\t\tcout<<str<<endl;\n\t}\n\tfin.close();\n\treturn 0;\n}\n", "#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nint main() {\n\tifstream fin;\n\tfin.open(\"file.txt\");\n\tstring str;\n\twhile (!fin.eof()) {\n\t\tgetline(fin, str);\n\t\tcout << str << endl;\n\t}\n\tfin.close();\n\treturn 0;\n}\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/17 \u4e0b\u53489:39\n# @Author  : Hou Rong\n# @Site    : \n# @File    : file.py\n# @Software: PyCharm\nimport os\nimport io\n\n\ndef get_file_content(filename):\n    with io.open(filename, 'r', encoding='utf-8', errors='ignore') as f:\n        return f.read()\n\n\ndef save_file_content(filename, content):\n    with io.open(filename, 'w', encoding='utf-8') as f:\n        f.write(content)\n\n\ndef get_file_list(path):\n    file_list = []\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            file_list.append(os.path.join(root, file))\n    return file_list\n", "\ndef get_min_num_days(n, m, k, sales):\n    days = 0\n    for i in range(n):\n        if k[i] > 0:\n            on_sale = set()\n            for d, t in sales.items():\n                if t == i+1:\n                    on_sale.add(d)\n            if len(on_sale) == 0:\n                days += 2 * k[i]\n            else:\n                days += 1\n                k[i] -= 1\n                for d in on_sale:\n                    if k[i] > 0:\n                        days += 1\n                        k[i] -= 1\n                    else:\n                        break\n                if k[i] > 0:\n                    days += 2 * k[i]\n    return days\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n\n    sales = {}\n\n    for _ in range(m):\n        d, t = map(int, input().split())\n        sales[d] = t\n\n    print(get_min_num_days(n, m, k, sales))\n"]