2022-04-12 22:09:54.501407 num operations 2
2022-04-12 22:09:54.501420 size on input set 1
2022-04-12 22:09:56.704070 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n + 1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\n\n# \u5165\u529b\n\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 2,
      "text": "\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    }
  ],
  "created": 1649801394,
  "object": "edit"
}
2022-04-12 22:09:56.704281 fix spelling mistakes 3 ['\nn, m = map(int, input().split())\n\n# 入力\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n + 1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\n\n# 入力\n\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n']
2022-04-12 22:09:56.704315 size on output set 3
2022-04-12 22:09:56.704322 size on input set 3
2022-04-12 22:09:58.310129 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# \u5165\u529b\n\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\n# \u5165\u529b\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 2,
      "text": "\n\n# \u5165\u529b\n\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n\n    print(count)\n"
    }
  ],
  "created": 1649801396,
  "object": "edit"
}
2022-04-12 22:09:58.310311 fix syntax errors 3 ['\n# 入力\n\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\n# 入力\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\n\n# 入力\n\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n\n    print(count)\n']
2022-04-12 22:10:04.265085 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m = map(int, input().split())\n\n# \u5165\u529b\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n + 1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\n# \u521d\u671f\u5316\ncount = 0\nbefore = 0\n\nfor i in range(n):\n    if before > a[i]:\n        count += before - a[i]\n        a[i] = before\n    before = a[i]\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split()) # \u5165\u529b\n\nroads = [] # \u5165\u529b\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# \u51fa\u529b\nfor i in range(1, n + 1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    }
  ],
  "created": 1649801398,
  "object": "edit"
}
2022-04-12 22:10:04.265267 fix syntax errors 3 ['n, m = map(int, input().split())\n\n# 入力\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n + 1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\nn = int(input())\na = list(map(int, input().split()))\n\n# 初期化\ncount = 0\nbefore = 0\n\nfor i in range(n):\n    if before > a[i]:\n        count += before - a[i]\n        a[i] = before\n    before = a[i]\n\nprint(count)\n', '\nn, m = map(int, input().split()) # 入力\n\nroads = [] # 入力\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# 出力\nfor i in range(1, n + 1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n']
2022-04-12 22:10:07.392133 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m = map(int, input().split())\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    },
    {
      "index": 2,
      "text": "# input\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n"
    }
  ],
  "created": 1649801404,
  "object": "edit"
}
2022-04-12 22:10:07.392305 fix syntax errors 3 ['n, m = map(int, input().split())\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n', '# input\n\nn, m = map(int, input().split())\n\n# input\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append([a, b])\n\n# output\nfor i in range(1, n+1):\n    count = 0\n    for road in roads:\n        if i in road:\n            count += 1\n    print(count)\n']
2022-04-12 22:10:07.392419 size on output set 9
2022-04-12 22:10:07.392432 num operations 2
2022-04-12 22:10:07.392438 size on input set 1
2022-04-12 22:10:14.550833 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5ba3\u8a00\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5ba3\u8a00\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 2,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    }
  ],
  "created": 1649801407,
  "object": "edit"
}
2022-04-12 22:10:14.550998 fix spelling mistakes 3 ['\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を作成\nedge = []\n\n# 各頂点の次数を格納する配列を作成\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を宣言\nedge = []\n\n# 各頂点の次数を格納する配列を宣言\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を定義\nedge = []\n\n# 各頂点の次数を格納する配列を定義\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n']
2022-04-12 22:10:14.551033 size on output set 3
2022-04-12 22:10:14.551040 size on input set 3
2022-04-12 22:10:21.262697 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 1,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u4f5c\u6210\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    }
  ],
  "created": 1649801414,
  "object": "edit"
}
2022-04-12 22:10:21.262883 fix syntax errors 3 ['\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を作成\nedge = []\n\n# 各頂点の次数を格納する配列を作成\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を作成\nedge = []\n\n# 各頂点の次数を格納する配列を作成\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を作成\nedge = []\n\n# 各頂点の次数を格納する配列を作成\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n']
2022-04-12 22:10:32.185506 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5ba3\u8a00\u3059\u308b\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5ba3\u8a00\u3059\u308b\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u3001\u5404\u9802\u70b9\u306e\u6b21\u6570\u30921\u305a\u3064\u5897\u3084\u3059\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5ba3\u8a00\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5ba3\u8a00\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5ba3\u8a00\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    }
  ],
  "created": 1649801421,
  "object": "edit"
}
2022-04-12 22:10:32.185738 fix syntax errors 3 ['\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を宣言する\nedge = []\n\n# 各頂点の次数を格納する配列を宣言する\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算するため、各頂点の次数を1ずつ増やす\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\n\nN, M = map(int, input().split())\n\n# 各頂点の次数を格納する配列を宣言\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を宣言\nedge = []\n\n# 各頂点の次数を格納する配列を宣言\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n']
2022-04-12 22:10:37.411166 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b\nedge = [[] for _ in range(M)]\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\u3059\u308b\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge[i].append(a)\n    edge[i].append(b)\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 1,
      "text": "\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    },
    {
      "index": 2,
      "text": "# \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n\nN, M = map(int, input().split())\n\n# \u5165\u529b\u3055\u308c\u305f\u8fba\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\nedge = []\n\n# \u5404\u9802\u70b9\u306e\u6b21\u6570\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u5b9a\u7fa9\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # \u6b21\u6570\u3092\u8a08\u7b97\u3059\u308b\n    degree[a] += 1\n    degree[b] += 1\n\n# \u6b21\u6570\u3092\u51fa\u529b\u3059\u308b\nfor i in range(1, N + 1):\n    print(degree[i])\n"
    }
  ],
  "created": 1649801432,
  "object": "edit"
}
2022-04-12 22:10:37.411346 fix syntax errors 3 ['\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を定義する\nedge = [[] for _ in range(M)]\n\n# 各頂点の次数を格納する配列を定義する\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge[i].append(a)\n    edge[i].append(b)\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を定義\nedge = []\n\n# 各頂点の次数を格納する配列を定義\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n', '# 次数を計算する\n\nN, M = map(int, input().split())\n\n# 入力された辺を格納する配列を定義\nedge = []\n\n# 各頂点の次数を格納する配列を定義\ndegree = [0] * (N + 1)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    edge.append([a, b])\n    # 次数を計算する\n    degree[a] += 1\n    degree[b] += 1\n\n# 次数を出力する\nfor i in range(1, N + 1):\n    print(degree[i])\n']
2022-04-12 22:10:37.411403 size on output set 7
