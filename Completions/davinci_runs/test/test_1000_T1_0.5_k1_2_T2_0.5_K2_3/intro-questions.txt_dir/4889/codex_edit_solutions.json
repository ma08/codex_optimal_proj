["\n\ndef main():\n    # read in the number of steel rods \n    num_rods = int(input(\"\"))\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input(\"\")) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(str(javelin_length))\n\nif __name__ == '__main__':\n    main()\n", "\n# coding=utf-8\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # read in the number of steel rods\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin \n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# n = int(input())\n# l = [int(x) for x in input().split()]\n\n# l = [21,34,18,9]\n# n = len(l)\n\ndef max_jumping(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_jumping(l[:-1]) - 1\n\n\n# a = int(input())\n# b = int(input())\n\na = 21\nb = 34\n\ndef max_jumping(a, b):\n    if a == b:\n        return a\n    else:\n        return max(a, b) + max_jumping(min(a, b) + 1, max(a, b) - 1)\n\nprint(max_jumping(a, b))\n# print(max_jumping(l))\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop())\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(raw_input().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(raw_input().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\n\nprint(output)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    people = []\n    for i in range(n):\n        people.append(int(sys.stdin.readline()))\n    people.sort()\n    total = people[0]\n    for i in range(1, n):\n        total += people[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    people = []\n    for i in range(n):\n        people.append(int(sys.stdin.readline()))\n    people.sort()\n    total = people[0]\n    for i in range(1,n):\n        total += people[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i] - 1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nT = int(input())\n\nfor i in range(T):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(int(input()))\n    l.sort(reverse = True)\n    output = 0\n    for i in range(n - 1):\n        output += l.pop(0) - 1\n    output += l.pop(0)\n    print(output)\n", "\n\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total) \n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods \n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting javelin\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting javelin\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\n# l = [21, 34, 18, 9]\n# n = 4\n\ndef max_jumping(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_jumping(l[:-1]) - 1\n\n\nprint(max_jumping(l))\n", "import sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    y = int(sys.stdin.readline().strip())\n    x = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n-1):\n        rods.append(math.sqrt((int(sys.stdin.readline().strip())-x)**2 + (int(sys.stdin.readline().strip())-y)**2))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0)\n\noutput += l.pop(0) - 1\n\nprint(output)\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop() - 1)\n        rods.sort()\n    print(rods[0])\nif __name__ == '__main__':\n    main()\n", "print(\"Hello World\")\n", "\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\nl = [21,34,18,9]\nn = len(l)\n\ndef max_javalin(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javalin(l[:-1]) - 1\n\nprint(max_javalin(l))\n", "\nimport sys\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods \n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting javelin\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\n#l = [21,34,18,9,11,2]\n#n = 6\n\ndef max_javalin(lis):\n    if len(lis) == 1:\n        return lis[0]\n    else:\n        lis = sorted(lis)\n        return lis[-1] + max_javalin(lis[:-1]) - 1\n\nprint(max_javalin(l))\n", "\n\nimport sys\n\ndef main():\n    # Read the number of files\n    N = int(sys.stdin.readline()) \n\n    # Read the lengths of the files\n    files = []\n    for i in range(N):\n        files.append(int(sys.stdin.readline()))\n\n    # Sort the files from shortest to longest\n    files.sort()\n\n    # Iterate over the files\n    while len(files) > 1:\n        # Fuse the two shortest files\n        files[0] = files[0] + files[1] - 1\n        # Remove the second shortest file\n        del files[1]\n        # Sort the files from shortest to longest\n        files.sort()\n\n    # Print the length of the resulting file \n    print(files[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    # read in the number of steel rods.\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods.\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order.\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together.\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin.\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1]\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\nprint(output)\n", "\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\nl = [21,34,18,9]\nn = len(l)\n\ndef max_javelin(l, n):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javelin(l[:-1], n-1) - 1\n\nprint(max_javelin(l))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods = int(input())  # number of steel rods\n    rod_lengths = []  # array of steel rod lengths\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:  # while there is more than one steel rod left\n        total_length += rod_lengths[0] + rod_lengths[1] - 1  # calculate total length\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)  # add new steel rod length\n        rod_lengths.sort()\n        total_length = 0\n\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop() - 1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total) \n\nif __name__ == '__main__':\n    main()\n", "\n# Author: Hubert Kario, (c) 2015\n# Released under Gnu GPL v2.0, see LICENSE file for details\nimport sys\nfrom tlsfuzzer.runner import Runner\nfrom tlsfuzzer.messages import Connect, ClientHelloGenerator, \\\n        ClientKeyExchangeGenerator, ChangeCipherSpecGenerator, \\\n        FinishedGenerator, ApplicationDataGenerator, AlertGenerator\nfrom tlsfuzzer.expect import ExpectServerHello, ExpectCertificate, \\\n        ExpectServerHelloDone, ExpectChangeCipherSpec, ExpectFinished, \\\n        ExpectAlert, ExpectApplicationData, ExpectClose\n\n\nversion = 3\n\ndef help_msg():\n    print(\"Usage: <script-name> [-h hostname] [-p port] [[probe-name] ...]\")\n    print(\" -h hostname    name of the host to run the test against\")\n    print(\"                localhost by default\")\n    print(\" -p port        port number to use for connection, 4433 by default\")\n    print(\" probe-name     if present, will run only the probes with given\")\n    print(\"                names and not all of them, e.g \\\"sanity\\\"\")\n    print(\" -e probe-name  exclude the probe from the list of the ones run\")\n    print(\"                may be specified multiple times\")\n    print(\" -n num         only run `num` random tests instead of a full set\")\n    print(\"                (excluding \\\"sanity\\\" tests)\")\n    print(\" --help         this message\")\n\n\ndef main():\n    host = \"localhost\"\n    port = 4433\n    num_limit = None\n    run_exclude = set()\n\n    argv = sys.argv[1:]\n    opts, args = getopt.getopt(argv, \"h:p:e:n:\", [\"help\"])\n    for opt, arg in opts:\n        if opt == '-h':\n            host = arg\n        elif opt == '-p':\n            port = int(arg)\n        elif opt == '-e':\n            run_exclude.add(arg)\n        elif opt == '-n':\n            num_limit = int(arg)\n        elif opt == '--help':\n            help_msg()\n            sys.exit(0)\n        else:\n            raise ValueError(\"Unknown option: {0}\".format(opt))\n\n    if args:\n        run_only = set(args)\n    else:\n        run_only = None\n\n    conversations = {}\n\n    conversation = Connect(host, port)\n    node = conversation\n    ciphers = [CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA,\n               CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV]\n    node = node.add_child(ClientHelloGenerator(ciphers))\n    node = node.add_child(ExpectServerHello())\n    node = node.add_child(ExpectCertificate())\n    node = node.add_child(ExpectServerHelloDone())\n    node = node.add_child(ClientKeyExchangeGenerator())\n    node = node.add_child(ChangeCipherSpecGenerator())\n    node = node.add_child(FinishedGenerator())\n    node = node.add_child(ExpectChangeCipherSpec())\n    node = node.add_child(ExpectFinished())\n    node = node.add_child(ApplicationDataGenerator(\n        bytearray(b\"GET / HTTP/1.0\\n\\n\")))\n    node = node.add_child(ExpectApplicationData())\n    node = node.add_child(AlertGenerator(AlertLevel.warning,\n                                         AlertDescription.close_notify))\n    node = node.add_child(ExpectAlert())\n    node.next_sibling = ExpectClose()\n    conversations[\"sanity\"] = conversation\n\n    # run the conversation\n    good = 0\n    bad = 0\n    failed = []\n    if not num_limit:\n        num_limit = len(conversations)\n\n    # make sure that sanity test is run first and last\n    # to verify that server was running and kept running throughout\n    sanity_tests = [('sanity', conversations['sanity'])]\n    if run_only:\n        if num_limit > len(run_only):\n            num_limit = len(run_only)\n        regular_tests = [(k, v) for k, v in conversations.items() if\n                          k in run_only]\n    else:\n        regular_tests = [(k, v) for k, v in conversations.items() if\n                         (k != 'sanity') and k not in run_exclude]\n    sampled_tests = sample(regular_tests, min(num_limit, len(regular_tests)))\n    ordered_tests = chain(sanity_tests, sampled_tests, sanity_tests)\n\n    for c_name, c_test in ordered_tests:\n        if run_only and c_name not in run_only or c_name in run_exclude:\n            continue\n        print(\"{0} ...\".format(c_name))\n\n        runner = Runner(c_test)\n\n        res = True\n        try:\n            runner.run()\n        except:\n            print(\"Error while processing\")\n            print(traceback.format_exc())\n            res = False\n\n        if res:\n            good += 1\n            print(\"OK\\n\")\n        else:\n            bad += 1\n            failed.append(c_name)\n\n    print(\"Test end\")\n    print(\"successful: {0}\".format(good))\n    print(\"failed: {0}\".format(bad))\n    failed_sorted = sorted(failed, key=natural_sort_keys)\n    print(\"  {0}\".format('\\n  '.join(repr(i) for i in failed_sorted)))\n\n    if bad > 0:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport os\nimport glob\nimport re\n\n\ndef get_full_path_of_files(path, file_name):\n    files = glob.glob(os.path.join(path, file_name))\n    return files\n\n\ndef get_file_names(path, file_name):\n    files = glob.glob(os.path.join(path, file_name))\n    files = [os.path.basename(x) for x in files]\n    return files\n\n\ndef get_file_names_with_regex(path, regex):\n    files = glob.glob(os.path.join(path, regex))\n    files = [os.path.basename(x) for x in files]\n    return files\n\n\ndef get_file_names_with_regex_and_conditions(path, regex, conditions):\n    files = glob.glob(os.path.join(path, regex))\n    files = [os.path.basename(x) for x in files]\n\n    for condition in conditions:\n        files = [x for x in files if condition in x]\n\n    return files\n\n\nif __name__ == \"__main__\":\n    path = '/Users/jiajunluo/Dropbox/data'\n    file_name = '*.csv'\n    regex = '*.csv'\n    conditions = ['AAPL', 'GOOG']\n\n    print(get_full_path_of_files(path, file_name))\n    print(get_file_names(path, file_name))\n    print(get_file_names_with_regex(path, regex))\n    print(get_file_names_with_regex_and_conditions(path, regex, conditions))\n", "\n#\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting rod\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting javelin\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    # rods = [int(sys.stdin.readline().strip()) for i in range(n)]\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    while len(rods) > 1:\n        rods[0] += rods.pop(-1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\nprint(output)\n", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n = int(input())\n\n    l = []\n    for i in range(n):\n        l.append(int(input()))\n\n    l.sort(reverse = True)\n\n    output = 0\n    for i in range(n - 1):\n        output += l.pop(0) - 1\n\n    output += l.pop(0)\n\n    print(output)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods_count = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods_count):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length = rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read in the number of steel rods\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in ascending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"Main function\"\"\"\n\n    steel_rods = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))  # add rod lengths to list\n\n    rod_lengths.sort()  # sort the list\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)  # remove smallest rod length\n        rod_lengths.pop(0)  # remove second smallest rod length\n        rod_lengths.append(total_length)  # add total length to list\n        rod_lengths.sort()  # sort the list\n        total_length = 0\n\n    print(rod_lengths[0])  # print the final result\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#n = int(input())\n#l = [int(x) for x in input().split()]\n\n#l = [21,34,18,9]\n#n = len(l)\n\ndef max_javelin(l, n):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javelin(l[:-1], n-1) - 1\n\n#print(max_javelin(l, n))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline().strip()))\n    rods.sort()\n    total = 0\n    for i in range(1,n):\n        total += rods[i] - rods[i-1] - 1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\nl = [21,34,18,9]\nn = len(l)\n\ndef max_jumping(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_jumping(l[:-1]) - 1\n\nprint(max_jumping(l))\n", "\n\ndef main():\n    # read in the number of steel rods.\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods.\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order.\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together.\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin.\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin.\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\nimport os\nimport re\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        path = sys.stdin.readline().strip()\n        if isValid(path):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef isValid(path):\n    if not path.startswith('/'):\n        return False\n    if '//' in path:\n        return False\n    path = path.split('/')\n    for i in path:\n        if not isValidFileName(i):\n            return False\n    return True\n\ndef isValidFileName(filename):\n    if len(filename) > 255:\n        return False\n    if filename.startswith('.') or filename.endswith('.') or filename.endswith(' '):\n        return False\n    illegalChars = re.compile(r'[\\\\/:*?\"<>|]')\n    if illegalChars.search(filename):\n        return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # read in the number of steel rods\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together\n    javelin_length = 0\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i]\n        javelin_length -= 1\n\n    # add the last rod to the javelin\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0] - 1\n    for i in range(1,n):\n        total += rods[i] - 1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    # rods = []\n    # for i in range(N):\n    #     rods.append(int(sys.stdin.readline()))\n    # rods.sort()\n    # while len(rods) > 1:\n    #     rods.append(rods.pop() + rods.pop() - 1)\n    #     rods.sort()\n    # print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods_count = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods_count):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1]\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the number of rods\n    N = int(sys.stdin.readline())\n\n    # Read the lengths of the rods\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n\n    # Sort the rods from shortest to longest\n    rods.sort()\n\n    # Iterate over the rods\n    while len(rods) > 1:\n        # Fuse the two shortest rods\n        rods[0] = rods[0] + rods[1] - 1\n        # Remove the second shortest rod\n        del rods[1]\n        # Sort the rods from shortest to longest\n        rods.sort()\n\n    # Print the length of the resulting rod\n    print(rods[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#n = int(input())\n#l = [int(x) for x in input().split()]\n\nl = [21,34,18,9]\nn = len(l)\n\ndef max_javalin(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = sorted(l)\n        return l[-1] + max_javalin(l[:-1]) - 1\n\n#print(max_javalin(l))\n", "\n\nn = int(input())\n\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse = True)\n\noutput = 0\nfor i in range(n - 1):\n    output += l.pop(0) - 1\n\noutput += l.pop(0)\n\n\nprint(\"hello world!\")\nprint(output)\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_of_rods = int(input())\n    rod_length = []\n\n    for _ in range(num_of_rods):\n        rod_length.append(int(input()))\n\n    rod_length.sort()\n    total_length = 0.0\n\n    while len(rod_length) > 1:\n        total_length += rod_length[0] + rod_length[1] - 1\n        rod_length.pop(0)\n        rod_length.pop(0)\n        rod_length.append(total_length)\n        rod_length.sort()\n        total_length = 0\n\n    print(rod_length[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    rods = []\n    for i in range(N):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    while len(rods) > 1:\n        rods.append(rods.pop() + rods.pop() - 1)\n        rods.sort()\n    print(rods[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods_count = int(input())\n    rod_lengths = []\n\n    for _ in range(steel_rods_count):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:\n        total_length += rod_lengths[0] + rod_lengths[1] - 1\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read in the number of steel rods.\n    num_rods = int(input())\n\n    # read in the lengths of the steel rods.\n    rod_lengths = [int(input()) for _ in range(num_rods)]\n\n    # sort the rod lengths in descending order.\n    rod_lengths = sorted(rod_lengths, reverse=True)\n\n    # fuse the rods together.\n    javelin_length = rod_lengths[0]\n    for i in range(num_rods - 1):\n        javelin_length += rod_lengths[i + 1] - 1\n\n    # add the last rod to the javelin.\n    javelin_length += rod_lengths[-1]\n\n    # print the length of the javelin\n    print(javelin_length)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    steel_rods = int(input())  # number of steel rods\n    rod_lengths = []  # array of steel rod lengths\n\n    for _ in range(steel_rods):\n        rod_lengths.append(int(input()))\n\n    rod_lengths.sort()\n    total_length = 0\n\n    while len(rod_lengths) > 1:  # while there is more than one steel rod left\n        total_length += rod_lengths[0] + rod_lengths[1] - 1  # calculate total length\n        rod_lengths.pop(0)\n        rod_lengths.pop(0)\n        rod_lengths.append(total_length)  # add new steel rod length\n        rod_lengths.sort()\n        total_length = 0\n\n    print(rod_lengths[0])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rods = []\n    for i in range(n):\n        rods.append(int(sys.stdin.readline()))\n    rods.sort()\n    total = rods[0]\n    for i in range(1,n):\n        total += rods[i]-1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"]