["#!/usr/bin/env python3\n\nimport sys\n\ndef rotate(string, rotationValue):\n    newString = \"\"\n    for c in string:\n        newString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n    return newString\n\ndef merge(string1, string2):\n    newString = \"\"\n    for i in range(len(string1)):\n        newString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n    return newString\n\ndef decrypt(string):\n    if len(string) % 2 != 0:\n        print(\"String length must be even.\")\n        return\n    half1 = string[:len(string)//2]\n    half2 = string[len(string)//2:]\n    rotationValue1 = sum([ord(c) - ord('A') for c in half1])\n    rotationValue2 = sum([ord(c) - ord('A') for c in half2])\n    half1 = rotate(half1, rotationValue1)\n    half2 = rotate(half2, rotationValue2)\n    return merge(half1, half2)\n\ndef main():\n    for line in sys.stdin:\n        print(decrypt(line.strip()))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message)//2]\n    half2 = message[len(message)//2:]\n\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A') + 1\n        sum2 += ord(half2[i]) - ord('A') + 1\n    sum1 = sum1 % 26\n    sum2 = sum2 % 26\n\n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A') - 1)\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A') - 1)\n\n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A') - 1)\n\n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef divide(string):\n    return string[:len(string)//2], string[len(string)//2:] \n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total \n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n    return output\n\nmessage = input() \n\na, b = divide(message) \na = rotate(a)\nb = rotate(b)\nprint(merge(a, b))\n", "\n\ndef main():\n    message = input(\"\")\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_rotation = 0\n    half_message_2_rotation = 0\n\n    for message_char in half_message_1:\n        half_message_1_rotation += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_rotation += ord(message_char) - 65\n\n    half_message_1_rotation = half_message_1_rotation % 26\n    half_message_2_rotation = half_message_2_rotation % 26\n\n    half_message_1_rotated = \"\"  # half_message_1 rotated by half_message_1_rotation\n    half_message_2_rotated = \"\"  # half_message_2 rotated by half_message_2_rotation\n\n    for message_char in half_message_1:\n        half_message_1_rotated += chr((ord(message_char) - 65 + half_message_1_rotation) % 26 + 65)\n    for message_char in half_message_2:\n        half_message_2_rotated += chr((ord(message_char) - 65 + half_message_2_rotation) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotated[i]) - 65 + ord(half_message_2_rotated[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "def encrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\n\ndef main():\n    msg = input()\n    print(encrypt(msg))\n\n\nif __name__ == '__main__':\n    main()\n\n\n# def encrypt(msg):\n#     msg_len = len(msg)\n#     half = msg_len // 2\n#     msg1 = msg[:half]\n#     msg2 = msg[half:]\n#\n#     rotation1 = 0\n#     for c in msg1:\n#         rotation1 += ord(c) - ord('A')\n#     rotation1 %= 26\n#\n#     rotation2 = 0\n#     for c in msg2:\n#         rotation2 += ord(c) - ord('A')\n#     rotation2 %= 26\n#\n#     msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n#     msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n#\n#     return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n#\n#\n# def main():\n#     msg = input()\n#     print(encrypt(msg))\n#\n#\n# if __name__ == '__main__':\n#     main()\n\n\n# def encrypt(msg):\n#     msg_len = len(msg)\n#     half = msg_len // 2\n#     msg1 = msg[:half]\n#     msg2 = msg[half:]\n#\n#     rotation1 = 0\n#     for c in msg1:\n#         rotation1 += ord(c) - ord('A')\n#     rotation1 %= 26\n#\n#     rotation2 = 0\n#     for c in msg2:\n#         rotation2 += ord(c) - ord('A')\n#     rotation2 %= 26\n#\n#     msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n#     msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n#\n#     return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n#\n#\n# def main():\n#     msg = input()\n#     print(encrypt(msg))\n#\n#\n# if __name__ == '__main__':\n#     main()\n\n\n# def encrypt(msg):\n#     msg_len = len(msg)\n#     half = msg_len // 2\n#     msg1 = msg[:half]\n#     msg2 = msg[half:]\n#\n#     rotation1 = 0\n#     for c in msg1:\n#         rotation1 += ord(c) - ord('A')\n#     rotation1 %= 26\n#\n#     rotation2 = 0\n#     for c in msg2:\n#         rotation2 += ord(c) - ord('A')\n#     rotation2 %= 26\n#\n#     msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n#     msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n#\n#     return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n#\n#\n# def main():\n#     msg = input()\n#     print(encrypt(msg))\n#\n#\n# if __name__ == '__main__':\n#     main()\n\n\n# def encrypt(msg):\n#     msg_len = len(msg)\n#     half = msg_len // 2\n#     msg1 = msg[:half]\n#     msg2 = msg[half:]\n#\n#     rotation1 = 0\n#     for c in msg1:\n#         rotation1 += ord(c) - ord('A')\n#     rotation1 %= 26\n#\n#     rotation2 = 0\n#     for c in msg2:\n#         rotation2 += ord(c) - ord('A')\n#     rotation2 %= 26\n#\n#     msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n#     msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n#\n#     return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n#\n#\n# def main():\n#     msg = input()\n#     print(encrypt(msg))\n#\n#\n# if __name__ == '__main__':\n#     main()\n\n\ndef encrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main():\n    msg = input()\n    print(encrypt(msg))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message) / 2]\n    right = message[len(message) / 2:]\n    left_rotate = sum([(ord(char) - ord('A') + 1) for char in left])\n    right_rotate = sum([(ord(char) - ord('A') + 1) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n        decrypted += chr(((left_char + right_char + right_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef encrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n    print(msg1, msg2)\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n    print(msg1, msg2)\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main(argv):\n    if len(argv) != 2:\n        print(\"Usage: python %s <message>\" % argv[0])\n        exit(1)\n    msg = argv[1]\n    return encrypt(msg)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate1 = rotate2 = 0\n    for i in range(half):\n        rotate1 += ord(message[i]) - 65\n        rotate2 += ord(message[half+i]) - 65\n    rotate1 %= 26\n    rotate2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message) // 2]\n    right = message[len(message) // 2:]\n    left_rotate = sum([(ord(char) - ord('A') + 1) for char in left])\n    right_rotate = sum([(ord(char) - ord('A') + 1) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n        decrypted += chr(((left_char + right_char + right_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef rotate(string, rotationValue):\n\tnew_string = \"\"\n\tfor c in string:\n\t\tnew_string += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n\treturn new_string\n\ndef merge(string1, string2):\n\tnew_string = \"\"\n\tfor i in range(len(string1)):\n\t\tnew_string += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n\treturn new_string\n\ndef decrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf_1 = string[:len(string)//2]\n\thalf_2 = string[len(string)//2:]\n\trotation_value_1 = sum([ord(c) - ord('A') for c in half_1])\n\trotation_value_2 = sum([ord(c) - ord('A') for c in half_2])\n\thalf_1 = rotate(half_1, rotation_value_1)\n\thalf_2 = rotate(half_2, rotation_value_2)\n\treturn merge(half_1, half_2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(decrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    rotate1 = rotate(half1)\n    rotate2 = rotate(half2)\n    merge = merge(rotate1, rotate2)\n    print(merge)\n\n\ndef rotate(s):\n    rotate_num = 0\n    for i in range(len(s)):\n        rotate_num = rotate_num % 26\n        rotate_message = ''\n        for i in range(len(s)):\n            rotate_message += chr((ord(s[i]) - ord('A') + rotate_num) % 26 + ord('A'))\n    return rotate_message\n\n\ndef merge(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef encrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main():\n    msg = input()\n    print(encrypt(msg))\n\nif __name__ == '__main__':\n    main()\n", "\ndef decrypt(message):\n    half_message_length = int(len(message) / 2)\n    half_message_1 = message[0:half_message_length]  # first half of message\n    half_message_2 = message[half_message_length:len(message)]  # second half of message\n    half_message_1_rotation = 0\n    half_message_2_rotation = 0\n    for message_char in half_message_1:\n        half_message_1_rotation += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_rotation += ord(message_char) - 65\n    half_message_1_rotation = half_message_1_rotation % 26\n    half_message_2_rotation = half_message_2_rotation % 26\n    half_message_1_rotate = \"\"\n    half_message_2_rotate = \"\"\n    for message_char in half_message_1:\n        half_message_1_rotate += chr((ord(message_char) - 65 + half_message_1_rotation) % 26 + 65)\n    for message_char in half_message_2:\n        half_message_2_rotate += chr((ord(message_char) - 65 + half_message_2_rotation) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotate[i]) - 65 + ord(half_message_2_rotate[i]) - 65) % 26 + 65)\n    return decrypted_message\n", "\ndef divide(string):\n    return string[:len(string) // 2], string[len(string) // 2:]\n\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total\n\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26 + ord('A'))\n\n\n    return output\nprint(\"Enter a message:\")\n\nmessage = input()\n\na, b = divide(message)\na = rotate(a)\nb = rotate(b)\nprint(\"Encrypted message:\", merge(a, b))\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    rotate1 = rotate(half1)\n    rotate2 = rotate(half2)\n    merge = merge(rotate1, rotate2)\n    print(merge)\n\n\ndef rotate(s):\n    rotate_num = 0\n    for i in range(len(s)):\n        rotate_num = rotate_num % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate_num) % 26 + ord('A'))\n    return rotate_message\n\n\ndef merge(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message)//2]\n    half2 = message[len(message)//2:]\n    rotate1 = rotate_encrypt(half1)\n    rotate2 = rotate_encrypt(half2)\n    merge = merge_encrypt(rotate1, rotate2)\n    print(merge_decrypt(merge, rotate2))\n\ndef rotate_encrypt(s):\n    rotate = 0\n    for i in range(len(s)):\n        rotate += ord(s[i]) - ord('A')\n    rotate = rotate % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate) % 26 + ord('A'))\n    return rotate_message\n\ndef merge_encrypt(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\ndef merge_decrypt(s, s2):\n    merge_message = ''\n    for i in range(len(s)):\n        merge_message += chr((ord(s[i]) - ord('A') - ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A')\n        sum2 += ord(half2[i]) - ord('A')\n    sum1 = sum1 % 26\n    sum2 = sum2 % 26\n\n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A'))\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A'))\n\n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A'))\n\n\n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nmessage = input()\nhalf1 = message[:len(message)//2] # first half of message\nhalf2 = message[len(message)//2:] # second half of message\n\nsum1 = 0 # sum of values of first half\nsum2 = 0 # sum of values of second half\nfor i in range(len(half1)):\n    sum1 += ord(half1[i]) - ord('A')\n    sum2 += ord(half2[i]) - ord('A')\nsum1 = sum1 % 26 # mod 26\nsum2 = sum2 % 26 # mod 26\n\nnew1 = \"\" # new first half\nnew2 = \"\" # new second half\nfor i in range(len(half1)):\n    new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A'))\n    new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A'))\n\nfinal = \"\" # final message\nfor i in range(len(new1)):\n    final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A'))\n\nprint(final)\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message)//2]\n    right = message[len(message)//2:]\n    left_offset = sum([(ord(char) - ord('A')) for char in left]) % 26\n    right_offset = sum([(ord(char) - ord('A')) for char in right]) % 26\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n        decrypted += chr(((left_char + right_char + right_offset) % 26) + ord('A')) \n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1) - ord(\"A\")\n        sum2 += ord(half2) - ord(\"A\")\n    sum1 = sum1 % 26\n    sum2 = sum2 % 26\n    \n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord(\"A\") + sum1) % 26) + ord(\"A\"))\n        new2 += chr(((ord(half2[i]) - ord(\"A\") + sum2) % 26) + ord(\"A\"))\n    \n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord(\"A\") + ord(new2[i]) - ord(\"A\")) % 26) + ord(\"A\"))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_rotation = 0\n    half_message_2_rotation = 0\n\n    for message_char in half_message_1:\n        half_message_1_rotation += ord(message_char) - ord('A')\n    for message_char in half_message_2:\n        half_message_2_rotation += ord(message_char) - ord('A')\n\n    half_message_1_rotation = half_message_1_rotation % 26  # 26 is the number of letters in the alphabet\n    half_message_2_rotation = half_message_2_rotation % 26  # 26 is the number of letters in the alphabet\n\n    half_message_1_rotated = \"\"  # half_message_1 rotated by half_message_1_rotation\n    half_message_2_rotated = \"\"  # half_message_2 rotated by half_message_2_rotation\n\n    for message_char in half_message_1:\n        half_message_1_rotated += chr((ord(message_char) - ord('A') + half_message_1_rotation) % 26 + ord('A'))\n    for message_char in half_message_2:\n        half_message_2_rotated += chr((ord(message_char) - ord('A') + half_message_2_rotation) % 26 + ord('A'))\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotated[i]) - ord('A') + ord(half_message_2_rotated[i]) - ord('A')) % 26 + ord('A'))\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef decrypt_half(msg, rotation):\n    return ''.join(chr((ord(c) - ord('A') - rotation) % 26 + ord('A')) for c in msg)\n\ndef decrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n    print(msg1, msg2)\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = decrypt_half(msg1, rotation1)\n    msg2 = decrypt_half(msg2, rotation2)\n\n    print(msg1, msg2)\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main():\n    msg = input()\n    print(decrypt(msg))\n\nif __name__ == '__main__':\n    main()\n", "\n#rotate the string\nimport sys\n\ndef rotate(string, rotationValue):\n\tnewString = \"\"\n\tfor c in string:\n\t\tnewString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n\treturn newString\n#merge the string\ndef merge(string1, string2):\n\tnewString = \"\"\n\tfor i in range(len(string1)):\n\t\tnewString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n\treturn newString\n#encrypt the string\ndef encrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\n#main function\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(encrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nimport math\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message)//2]\n    half2 = message[len(message)//2:]\n    rotate1 = rotate_encrypt(half1)\n    rotate2 = rotate_encrypt(half2)\n    merge = merge_encrypt(rotate1, rotate2, len(message)//2)\n    print(merge)\n    print(merge_decrypt(merge, len(message)//2))\n\ndef rotate_encrypt(s):\n    rotate = 0\n    for i in range(len(s)):\n        rotate += ord(s[i]) - ord('A')\n    rotate = rotate % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate) % 26 + ord('A'))\n    return rotate_message\n\ndef merge_encrypt(s1, s2, length):\n    merge_message = ''\n    for i in range(length):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\ndef merge_decrypt(s, length):\n    merge_message = ''\n    for i in range(length):\n        merge_message += chr((ord(s[i]) - ord('A') - ord(s[i-1]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef rotate(string, rotationValue):\n    newString = \"\"\n    for c in string:\n        newString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n    return newString\n\ndef merge(string1, string2):\n    newString = \"\"\n    for i in range(len(string1)):\n        newString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n    return newString\n\ndef decrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(decrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message) // 2]\n    right = message[len(message) // 2:]\n    left_rotate = sum([(ord(char) - ord('A') + 1) for char in left])\n    right_rotate = sum([(ord(char) - ord('A') + 1) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n\n        decrypted += chr(((left_char + right_char + right_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\ndef main():\n    message = input()\n    half1 = message[:len(message)//2] # first half of message\n    half2 = message[len(message)//2:] # second half of message\n    \n    sum1 = 0 # sum of values of first half\n    sum2 = 0 # sum of values of second half\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A') + 1\n        sum2 += ord(half2[i]) - ord('A') + 1\n    sum1 = sum1 % 26 # mod 26\n    sum2 = sum2 % 26 # mod 26\n    \n    new1 = \"\" # new first half\n    new2 = \"\" # new second half\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1 - 1) % 26) + ord('A'))\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2 - 1) % 26) + ord('A'))\n    \n    final = \"\" # final message\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A') - 1) % 26) + ord('A'))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef rotate(string, rotationValue):\n    new_string = \"\"\n    for c in string:\n        new_string += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n    return new_string\n\ndef merge(string1, string2):\n    new_string = \"\"\n    for i in range(len(string1)):\n        new_string += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n    return new_string\n\ndef decrypt(string):\n    if len(string) % 2 != 0:\n        print(\"String length must be even.\")\n        return\n    half_1 = string[:len(string)//2]\n    half_2 = string[len(string)//2:]\n    rotation_value_1 = sum([ord(c) - ord('A') for c in half_1])\n    rotation_value_2 = sum([ord(c) - ord('A') for c in half_2])\n    half_1 = rotate(half_1, rotation_value_1)\n    half_2 = rotate(half_2, rotation_value_2)\n    return merge(half_1, half_2)\n\ndef main():\n    for line in sys.stdin:\n        print(decrypt(line.strip()))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half = int(len(message)/2)\n    rotate1 = rotate2 = 0\n    for i in range(half):\n        rotate1 += ord(message[i]) - ord('A')\n        rotate2 += ord(message[half+i]) - ord('A')\n    rotate1 %= 26\n    rotate2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - ord('A') + rotate1) % 26 + ord('A')) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - ord('A') + rotate2) % 26 + ord('A')) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - ord('A') + ord(message[half+i]) - ord('A')) % 26 + ord('A')) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\n\ndef decrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n    # print(msg1, msg2)\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') - rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') - rotation2) % 26 + ord('A')) for c in msg2)\n\n    # print(msg1, msg2)\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main():\n    msg = input()\n    print(decrypt(msg))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef divide(string):\n    return string[:len(string) // 2], string[len(string) // 2:]\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26 + ord('A'))\n    return output\n\n\nmessage = input()\n\na, b = divide(message)\na = str(rotate(a))\nb = str(rotate(b))\nprint(merge(a, b))\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 # rotation of the first and second half of the message\n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65 # ord('A') = 65\n        rotate_2 += ord(message[half+i]) - 65 # ord('A') = 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 \n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65\n        rotate_2 += ord(message[half+i]) - 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1]\n    print(message[:half])\n\nmain()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_shift = 0\n    half_message_2_shift = 0\n\n    for message_char in half_message_1:\n        half_message_1_shift += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_shift += ord(message_char) - 65\n\n    half_message_1_shift = half_message_1_shift % 26\n    half_message_2_shift = half_message_2_shift % 26\n\n    half_message_1_shifted = \"\"\n    half_message_2_shifted = \"\"\n\n    for message_char in half_message_1:\n        half_message_1_shifted += chr((ord(message_char) - 65 + half_message_1_shift) % 26 + 65) # add the shift to the character\n    for message_char in half_message_2:\n        half_message_2_shifted += chr((ord(message_char) - 65 + half_message_2_shift) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotated[i]) - 65 + ord(half_message_2_rotated[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_shift = 0\n    half_message_2_shift = 0\n\n    for i in range(half_message_length):\n        half_message_1_shift += ord(half_message_1[i]) - 65\n        half_message_2_shift += ord(half_message_2[i]) - 65\n\n    half_message_1_shift = half_message_1_shift % 26\n    half_message_2_shift = half_message_2_shift % 26\n\n    half_message_1_shifted = \"\"\n    half_message_2_shifted = \"\"\n\n    half_message_1_rotated = \"\"\n    half_message_2_shifted = \"\"\n    half_message_2_rotated = \"\"\n\n    for i in range(half_message_length):\n        half_message_1_shifted += chr((ord(half_message_1[i]) - 65 + half_message_1_shift) % 26 + 65)\n        half_message_2_shifted += chr((ord(half_message_2[i]) - 65 + half_message_2_shift) % 26 + 65)\n\n    for i in range(half_message_length):\n        half_message_1_rotated += chr((ord(half_message_1_shifted[i]) - 65 - half_message_1_shift) % 26 + 65)\n        half_message_2_rotated += chr((ord(half_message_2_shifted[i]) - 65 - half_message_2_shift) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotated[i]) - 65 + ord(half_message_2_rotated[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    message = input()\n    left = message[:len(message) // 2]\n    right = message[len(message) // 2:]\n    left_rotate = sum([(ord(char) - ord('A')) for char in left])\n    right_rotate = sum([(ord(char) - ord('A')) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n\n        decrypted += chr(((left_char - right_char + left_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_rotation = 0\n    half_message_2_rotation = 0\n\n    for message_char in half_message_1:\n        half_message_1_rotation += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_rotation += ord(message_char) - 65\n\n    half_message_1_rotation = half_message_1_rotation % 26\n    half_message_2_rotation = half_message_2_rotation % 26\n\n    half_message_1_rotate = \"\"\n    half_message_2_rotate = \"\"\n\n    for message_char in half_message_1:\n        half_message_1_rotate += chr((ord(message_char) - 65 + half_message_1_rotation) % 26 + 65)\n    for message_char in half_message_2:\n        half_message_2_rotate += chr((ord(message_char) - 65 + half_message_2_rotation) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotate[i]) - 65 + ord(half_message_2_rotate[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef rotate(string, rotationValue):\n\tnewString = \"\"\n\tfor c in string:\n\t\tnewString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n\treturn newString\ndef merge(string1, string2):\n\tnewString = \"\"\n\tfor i in range(len(string1)):\n\t\tnewString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n\treturn newString\ndef encrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(encrypt(line.strip()))\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A')\n        sum2 += ord(half2[i]) - ord('A')\n    sum1 = sum1 % 26\n    sum2 = sum2 % 26\n    \n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A'))\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A'))\n    \n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A'))\n    \n    print(final)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message)//2]\n    half2 = message[len(message)//2:]\n    rotate1 = rotate(half1)\n    rotate2 = rotate(half2)\n    merge = merge(rotate1, rotate2)\n    print(merge)\n\ndef rotate(s):\n    rotate = 0\n    for i in range(len(s)):\n        rotate += ord(s[i]) - ord('A')\n    rotate = rotate % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate) % 26 + ord('A'))\n    return rotate_message\n\ndef merge(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message) / 2]\n    half2 = message[len(message) / 2:]\n    rotate1 = rotate(half1)\n    rotate2 = rotate(half2)\n    merge = merge(rotate1, rotate2)\n    print(merge)\n\ndef rotate(s):\n    rotate = 0\n    for i in range(len(s)):\n        rotate += ord(s[i]) - ord('A')\n    rotate = rotate % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate) % 26 + ord('a'))\n    return rotate_message\n\ndef merge(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('a') + ord(s2[i]) - ord('a')) % 26 + ord('a'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef decrypt(enc):\n    enc_len = len(enc)\n    half = enc_len // 2\n    enc1 = enc[:half]\n    enc2 = enc[half:]\n    print(enc1, enc2)\n\n    rotation1 = 0\n    for c in enc1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in enc2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    enc1 = ''.join(chr((ord(c) - ord('A') - rotation1) % 26 + ord('A')) for c in enc1)\n    enc2 = ''.join(chr((ord(c) - ord('A') - rotation2) % 26 + ord('A')) for c in enc2)\n\n    print(enc1, enc2)\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(enc1, enc2))\n\ndef main():\n    enc = input()\n    print(decrypt(enc))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message) // 2 + 1]\n    half2 = message[len(message) // 2 + 1:]\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord(\"A\")\n        sum2 += ord(half2[i]) - ord(\"A\")\n    sum1 = sum1 % 26\n    sum2 = sum2 % 26\n    \n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord(\"A\") + sum1) % 26) + ord(\"A\"))\n        new2 += chr(((ord(half2[i]) - ord(\"A\") + sum2) % 26) + ord(\"A\"))\n    \n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord(\"A\") + ord(new2[i]) - ord(\"A\")) % 26) + ord(\"A\"))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    rotate1 = rotate(half1)\n    rotate2 = rotate(half2)\n    merge = merge(rotate1, rotate2)\n    print(merge)\n\n\ndef rotate(s):\n    rotate_num = 0\n        rotate_num += ord(s[i]) - ord('A')\n    for i in range(len(s)):\n    rotate_num = rotate_num % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate_num) % 26 + ord('A'))\n    return rotate_message\n\n\ndef merge(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef encrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main():\n    msg = input()\n    print(encrypt(msg))\n\nif __name__ == '__main__':\n    main()\n", "\ndef divide(string):\n    return string[:len(string)//2], string[len(string)//2:]\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A'))%26 + ord('A'))\n    return output\n\nmessage = input()\n\na, b = divide(message)\na = str(rotate(a))\nb = str(rotate(b))\nprint(merge(a, b))\n", "\n\ndef divide(string):\n    return string[:len(string)//2], string[len(string)//2:]\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26 + ord('A'))\n    return output\n\nmessage = input()\n\na, b = divide(message)\na = rotate(a)\nb = rotate(b)\nprint(merge(a, b))\n", "\n\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 # rotation of the first and second half of the message\n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65 # ord('A') = 65\n        rotate_2 += ord(message[half+i]) - 65 # ord('A') = 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 # rotation of the first and second half of the message\n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65 # ord('A') = 65\n        rotate_2 += ord(message[half+i]) - 65 # ord('A') = 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "import sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 \n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65\n        rotate_2 += ord(message[half+i]) - 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message) // 2]\n    right = message[len(message) // 2:]\n    left_rotate = sum([(ord(char) - ord('A')) for char in left])\n    right_rotate = sum([(ord(char) - ord('A')) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n        decrypted += chr(((left_char - right_char + left_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message)//2]\n    right = message[len(message)//2:]\n    left_offset = sum([(ord(char) - ord('A')) for char in left])\n    right_offset = sum([(ord(char) - ord('A')) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n        decrypted += chr(((left_char + right_char + right_offset) % 26) + ord('A'))\n\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_shift = 0\n    half_message_2_shift = 0\n\n    for message_char in half_message_1:\n        half_message_1_shift += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_shift += ord(message_char) - 65\n\n    half_message_1_shift = half_message_1_shift % 26\n    half_message_2_shift = half_message_2_shift % 26\n\n    half_message_1_shifted = \"\"\n    half_message_2_shifted = \"\"\n\n    for message_char in half_message_1:\n        half_message_1_shifted += chr((ord(message_char) - 65 + half_message_1_shift) % 26 + 65)\n    for message_char in half_message_2:\n        half_message_2_shifted += chr((ord(message_char) - 65 + half_message_2_shift) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_shifted[i]) - 65 + ord(half_message_2_shifted[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0\n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65\n        rotate_2 += ord(message[half+i]) - 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i + 1:]\n        message = message[:half + i] + chr((ord(message[half + i]) - 65 + rotate_2) % 26 + 65) + message[half + i + 1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half + i]) - 65) % 26 + 65) + message[i + 1:]\n    print(message[:half], end=\"\")\n\nmain()\n", "\ndef divide(string):\n    return string[:len(string)//2], string[len(string)//2:]\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26 + ord('A'))\n    return output\nprint(\"Enter a message:\")\nmessage = input()\n\na, b = divide(message)\na = rotate(a)\nb = rotate(b)\nprint(\"Encrypted message:\", merge(a, b))\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message) // 2]\n    right = message[len(message) // 2:]\n    left_offset = sum([(ord(char) - ord('A')) for char in left])\n    right_offset = sum([(ord(char) - ord('A')) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n\n        decrypted += chr(((left_char + right_char + right_offset) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\ndef encrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main():\n    msg = input()\n    print(encrypt(msg))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A')\n        sum2 += ord(half2[i]) - ord('A')\n    sum1 %= 26\n    sum2 %= 26\n\n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A'))\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A'))\n\n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A'))\n\n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[:half_message_length]\n    half_message_2 = message[half_message_length:]\n\n    half_message_1_rotation = 0\n    half_message_2_rotation = 0\n\n    for message_char in half_message_1:\n        half_message_1_rotation += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_rotation += ord(message_char) - 65\n\n    half_message_1_rotation = half_message_1_rotation % 26\n    half_message_2_rotation = half_message_2_rotation % 26\n\n    half_message_1_rotate = \"\"\n    half_message_2_rotate = \"\"\n\n    for message_char in half_message_1:\n        half_message_1_rotate += chr((ord(message_char) - 65 + half_message_1_rotation) % 26 + 65)\n    for message_char in half_message_2:\n        half_message_2_rotate += chr((ord(message_char) - 65 + half_message_2_rotation) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotate[i]) - 65 + ord(half_message_2_rotate[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 # rotation of the first and second half of the message\n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65 # ord('A') = 65\n        rotate_2 += ord(message[half+i]) - 65 # ord('A') = 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\n\ndef divide(string):\n    return string[:len(string)//2], string[len(string)//2:]\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A') + 1\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A') + 1) % 26 + ord('A'))\n    return output\n\nmessage = input()\n\na, b = divide(message)\na = rotate(a)\nb = rotate(b)\nprint(merge(a, b)) \n", "\n\ndef divide(string):\n    return string[:len(string)//2], string[len(string)//2:])\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26 + ord('A'))\n    return output\nprint(\"Enter a message:\")\n\nmessage = input()\n\na, b = divide(message)\na = rotate(a)\nb = rotate(b)\nprint(\"Encrypted message:\", merge(a, b))\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half = int(len(message)/2)\n    rotate1 = rotate2 = 0\n    for i in range(half):\n        rotate1 += ord(message[i]) - 65\n        rotate2 += ord(message[half+i]) - 65\n    rotate1 %= 26\n    rotate2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "#!/usr/bin/env python3\n\ndef main():\n    message = input()\n    half1 = message[:len(message)//2] # first half\n    half2 = message[len(message)//2:] # second half\n    \n    sum1 = 0 # sum of first half\n    sum2 = 0 # sum of second half\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A')\n        sum2 += ord(half2[i]) - ord('A')\n    sum1 = sum1 % 26 # mod 26\n    sum2 = sum2 % 26 # mod 26\n    \n    new1 = \"\" # first half\n    new2 = \"\" # second half\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A'))\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A'))\n    \n    final = \"\" # message\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A'))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef rotate(string, rotationValue):\n\tnewString = \"\"\n\tfor c in string:\n\t\tnewString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n\treturn newString\n\ndef merge(string1, string2):\n\tnewString = \"\"\n\tfor i in range(len(string1)):\n\t\tnewString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n\treturn newString\n\ndef encrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(encrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef main():\n    message = input()\n    left = message[:len(message)//2]\n    right = message[len(message)//2:]\n    left_rotate = sum([(ord(char) - ord('A')) for char in left])\n    right_rotate = sum([(ord(char) - ord('A')) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n        decrypted += chr(((left_char - right_char + left_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef rotate(string, rotationValue):\n\tnew_string = \"\"\n\tfor c in string:\n\t\tnew_string += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n\treturn new_string\n\ndef merge(string1, string2):\n\tnew_string = \"\"\n\tfor i in range(len(string1)):\n\t\tnew_string += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n\treturn new_string\n\ndef decrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf_1 = string[:len(string)//2]\n\thalf_2 = string[len(string)//2:]\n\trotation_value_1 = sum([ord(c) - ord('A') for c in half_1])\n\trotation_value_2 = sum([ord(c) - ord('A') for c in half_2])\n\thalf_1 = rotate(half_1, rotation_value_1)\n\thalf_2 = rotate(half_2, rotation_value_2)\n\treturn merge(half_1, half_2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(decrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0: half_message_length]\n    half_message_2 = message[half_message_length: message_length]\n\n    half_message_1_rotation = 0\n    half_message_2_rotation = 0\n\n    for message_char in half_message_1:\n        half_message_1_rotation += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_rotation += ord(message_char) - 65\n\n    half_message_1_rotation = half_message_1_rotation % 26\n    half_message_2_rotation = half_message_2_rotation % 26\n\n    half_message_1_rotated = \"\"  # half_message_1 rotated by half_message_1_rotation\n    half_message_2_rotated = \"\"  # half_message_2 rotated by half_message_2_rotation\n\n    for message_char in half_message_1:\n        half_message_1_rotated += chr((ord(message_char) - 65 + half_message_1_rotation) % 26 + 65)\n    for message_char in half_message_2:\n        half_message_2_rotated += chr((ord(message_char) - 65 + half_message_2_rotation) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotated[i]) - 65 + ord(half_message_2_rotated[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    rotate1 = rotate_encrypt(half1)\n    rotate2 = rotate_encrypt(half2)\n    merge = merge_encrypt(rotate1, rotate2)\n    print(merge_decrypt(merge))\n\ndef rotate_encrypt(s):\n    rotate = 0\n    for i in range(len(s)):\n        rotate += ord(s[i]) - ord('A')\n    rotate = rotate % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate) % 26 + ord('A'))\n    return rotate_message\n\ndef merge_encrypt(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26\n                             + ord('A'))\n    return merge_message\n\ndef merge_decrypt(s):\n    merge_message = ''\n    for i in range(len(s)):\n        merge_message += chr((ord(s[i]) - ord('A') - ord(s[i - 1]) - ord('A')) % 26\n                             + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "\ndef divide(string):\n    return string[:len(string) // 2], string[len(string) // 2:]\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26 + ord('A') )\n    return output\n\nmessage = input().strip()\n\na, b = divide(message)\na = str(rotate(a))\nb = str(rotate(b))\nprint(merge(a, b))\n"]