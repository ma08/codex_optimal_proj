2022-04-12 18:49:52.992012 num operations 2
2022-04-12 18:49:52.992020 size on input set 1
2022-04-12 18:49:57.692225 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "'''\n\u554f\u984c\u6587\n\u6574\u6570N\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u6574\u6570N\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001N\u500b\u306e\u6574\u6570\u3092\u6607\u9806\u306b\u4e26\u3079\u308b\u305f\u3081\u306b\u3001\u5165\u308c\u66ff\u3048\u308b\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\u5236\u7d04\n1\u2264N\u2264100\n\u5165\u529b\u306f\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n\u5165\u529b\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\nN\na1,a2,\u2026,aN\n'''\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "def swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649789393,
  "object": "edit"
}
2022-04-12 18:49:57.692466 fix spelling mistakes 3 ["'''\n問題文\n整数Nが与えられます。\n整数Nが与えられたとき、N個の整数を昇順に並べるために、入れ替える回数の最小値を求めてください。\n制約\n1≤N≤100\n入力は全て整数である。\n入力\n入力は以下の形式で標準入力から与えられる。\nN\na1,a2,…,aN\n'''\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "def swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 18:49:57.692510 size on output set 3
2022-04-12 18:49:57.692516 size on input set 3
2022-04-12 18:50:03.601240 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    N = int(input())\n    S = input()\n    print(S)\n\n\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = Q[j], Q[i]\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    N, M = map(int, input().split())\n    print(N*(N-1)//2+M*(M-1)//2)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649789397,
  "object": "edit"
}
2022-04-12 18:50:03.601465 fix syntax errors 3 ["def main():\n    N = int(input())\n    S = input()\n    print(S)\n\n\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = Q[j], Q[i]\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N, M = map(int, input().split())\n    print(N*(N-1)//2+M*(M-1)//2)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 18:50:13.117242 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "'''\n\u554f\u984c\u6587\n\u6574\u6570N\u304c\u4e0e\u3048\u3089\u308c\u308b\n\u6574\u6570N\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001N\u500b\u306e\u6574\u6570\u3092\u6607\u9806\u306b\u4e26\u3079\u308b\u305f\u3081\u306b\u3001\u5165\u308c\u66ff\u3048\u308b\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\n\u5236\u7d04\n1\u2264N\u2264100\n\u5165\u529b\u306f\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n\u5165\u529b\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\nN\na1,a2,\u2026,aN\n'''\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "'''\n\u554f\u984c\u6587\n\u6574\u6570 N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u6574\u6570 N \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001N \u500b\u306e\u6574\u6570\u3092\u6607\u9806\u306b\u4e26\u3079\u308b\u305f\u3081\u306b\u3001\u5165\u308c\u66ff\u3048\u308b\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\u5236\u7d04\n1\u2264 N \u2264 100\n\u5165\u529b\u306f\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n\u5165\u529b\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\nN a1,a2,\u2026,aN\n'''\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] > A[j]:\n                A[i], A[j] = swap(A[i], A[j])\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "'''\n\u554f\u984c\u6587\n\u6574\u6570N\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u6574\u6570N\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001N\u500b\u306e\u6574\u6570\u3092\u6607\u9806\u306b\u4e26\u3079\u308b\u305f\u3081\u306b\u3001\u5165\u308c\u66ff\u3048\u308b\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\u5236\u7d04\n1\u2264N\u2264100\n\u5165\u529b\u306f\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n\u5165\u529b\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\nN\na1,a2,\u2026,aN\n'''\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = Q[j], Q[i]\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649789403,
  "object": "edit"
}
2022-04-12 18:50:13.117557 fix syntax errors 3 ["'''\n問題文\n整数Nが与えられる\n整数Nが与えられたとき、N個の整数を昇順に並べるために、入れ替える回数の最小値を求める\n制約\n1≤N≤100\n入力は全て整数である。\n入力\n入力は以下の形式で標準入力から与えられる\nN\na1,a2,…,aN\n'''\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "'''\n問題文\n整数 N が与えられます。\n整数 N が与えられたとき、N 個の整数を昇順に並べるために、入れ替える回数の最小値を求めてください。\n制約\n1≤ N ≤ 100\n入力は全て整数である。\n入力\n入力は以下の形式で標準入力から与えられる。\nN a1,a2,…,aN\n'''\n\n\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] > A[j]:\n                A[i], A[j] = swap(A[i], A[j])\n                count += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "'''\n問題文\n整数Nが与えられます。\n整数Nが与えられたとき、N個の整数を昇順に並べるために、入れ替える回数の最小値を求めてください。\n制約\n1≤N≤100\n入力は全て整数である。\n入力\n入力は以下の形式で標準入力から与えられる。\nN\na1,a2,…,aN\n'''\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = Q[j], Q[i]\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 18:50:19.835191 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n    return a, b\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    print(input().replace(\"2017\", \"2018\"))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = Q[j], Q[i]\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649789413,
  "object": "edit"
}
2022-04-12 18:50:19.835366 fix syntax errors 3 ["\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n    return a, b\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", '\ndef main():\n    print(input().replace("2017", "2018"))\n\n\nif __name__ == \'__main__\':\n    main()\n', "def main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = Q[j], Q[i]\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 18:50:19.835395 size on output set 8
2022-04-12 18:50:19.835414 num operations 2
2022-04-12 18:50:19.835419 size on input set 1
2022-04-12 18:50:21.891997 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 2,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    }
  ],
  "created": 1649789419,
  "object": "edit"
}
2022-04-12 18:50:21.892171 fix spelling mistakes 3 ['\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n']
2022-04-12 18:50:21.892286 size on output set 3
2022-04-12 18:50:21.892294 size on input set 3
2022-04-12 18:50:29.896940 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i] \n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order, Q_order = 0, 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 2,
      "text": "N = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\nprint(abs(factorial(N) - P - Q))\n"
    }
  ],
  "created": 1649789421,
  "object": "edit"
}
2022-04-12 18:50:29.897114 fix syntax errors 3 ['\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i] \n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutations\nP_order, Q_order = 0, 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', 'N = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\nprint(abs(factorial(N) - P - Q))\n']
2022-04-12 18:50:40.355008 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer \n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N\npermutations = []\nfor i in range(N):\n    permutations.append(i + 1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutation(n - 1, r - 1)\n        permutations[i], permutations[n - 1] = permutations[n - 1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i + 1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\nimport itertools\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N and storing them in a list\npermutations = list(itertools.permutations(range(1, N+1)))\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 2,
      "text": "\n\n# My answer \n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    }
  ],
  "created": 1649789429,
  "object": "edit"
}
2022-04-12 18:50:40.355241 fix syntax errors 3 ['\n\n# My answer \n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N\npermutations = []\nfor i in range(N):\n    permutations.append(i + 1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutation(n - 1, r - 1)\n        permutations[i], permutations[n - 1] = permutations[n - 1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i + 1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\nimport itertools\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N and storing them in a list\npermutations = list(itertools.permutations(range(1, N+1)))\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer \n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of length N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n']
2022-04-12 18:50:48.465009 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = [i+1 for i in range(N)]\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P[0]:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == list(P):\n        P_order = i+1\n    if permutations[i] == list(Q):\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 2,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i + 1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n - 1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n - 1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = Q_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i + 1\n    if permutations[i] == Q:\n        Q_order = i + 1\n\nprint(abs(P_order-Q_order))\n"
    }
  ],
  "created": 1649789440,
  "object": "edit"
}
2022-04-12 18:50:48.465269 fix syntax errors 3 ['\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = [i+1 for i in range(N)]\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P[0]:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == list(P):\n        P_order = i+1\n    if permutations[i] == list(Q):\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i + 1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n - 1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n - 1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in the permutations\nP_order = Q_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i + 1\n    if permutations[i] == Q:\n        Q_order = i + 1\n\nprint(abs(P_order-Q_order))\n']
2022-04-12 18:50:48.465311 size on output set 9
