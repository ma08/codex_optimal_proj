["\n\ndef main():\n    s = input()\n    print(s[::-1].replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper())\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    b = input().strip()\n    if b == 'A':\n        print('T', end='')\n    elif b == 'T':\n        print('A', end='')\n    elif b == 'C':\n        print('G', end='')\n    elif b == 'G':\n        print('C', end='')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a = input()\n    if a == 'A': print('T')\n    elif a == 'T': print('A')\n    elif a == 'C': print('G')\n    elif a == 'G': print('C')\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    a = input()\n    if a == 'A':\n        print('T')\n    elif a == 'T':\n        print('A')\n    elif a == 'C':\n        print('G')\n    elif a == 'G':\n        print('C')\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef main():\n    a = input()\n    if a == 'A':\n        print('T')\n    elif a == 'T':\n        print('A')\n    elif a == 'C':\n        print('G')\n    elif a == 'G':\n        print('C')\n", "\n\n# Read input\nb = input() \n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\", \"N\": \"N\" }\n\n# Print output\nprint(bases[b])\n", "\n\ndef dna_to_rna(b):\n    # Dict of bases\n    bases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n    # Print output\n    print(bases[b])\n\n# Print output\nprint(bases[b])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Mar  3 11:00:18 2020\n\n@author: alberto\n\"\"\"\n\n# Read input\nb = input()\n\n# Dict of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n", "\ndef main():\n    b = input().strip()\n    if b == 'A':\n        print('T')\n    elif b == 'T':\n        print('A')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Read input\nb = raw_input() \n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n", "\n\n# Read input\nb = input()\n\n# Dictionary of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n", "\nb = raw_input()\nprint {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}[b]\n", "\n# Read input\nb = input()\n\n# Dictionary of base\nbase = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(base[b])\n", "\n\n# Read input\nb = input().strip()\n\n# Dict of bases\nbases = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n# Print output\nprint(bases[b])\n", "\n\ndef main():\n    s = input()\n    print(s.replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper()[::-1])\n\nif __name__ == '__main__':\n    main()\n", "#\n\ndef main():\n    a = input()\n    if a == 'A':\n        print('T')\n    elif a == 'T':\n        print('A')\n    elif a == 'C':\n        print('G')\n    elif a == 'G':\n        print('C')\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Read input\nb = input()\n\n# Dictionary of base\nbase = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n# Dictionary of base\nbase = { \"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\" }\n\n\n# Print output\nprint(base[b])\n", "\n\ndef main():\n    b = raw_input().strip()\n    if b == 'A':\n        print 'T'\n    elif b == 'T':\n        print 'A'\n    elif b == 'C':\n        print 'G'\n    elif b == 'G':\n        print 'C'\n\nif __name__ == '__main__':\n    main()\n"]