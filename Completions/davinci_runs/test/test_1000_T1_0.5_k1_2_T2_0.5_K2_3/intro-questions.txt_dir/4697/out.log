2022-04-09 21:30:17.153704 """
Snuke loves puzzles.
Today, he is working on a puzzle using S- and c-shaped pieces.
In this puzzle, you can combine two c-shaped pieces into one S-shaped piece, as shown in the figure below:
Snuke decided to create as many Scc groups as possible by putting together one S-shaped piece and two c-shaped pieces.
Find the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.

-----Constraints-----
 - 1 ≤ N,M ≤ 10^{12}

-----Input-----
The input is given from Standard Input in the following format:
N M

-----Output-----
Print the answer.

-----Sample Input-----
1 6

-----Sample Output-----
2

Two Scc groups can be created as follows:
 - Combine two c-shaped pieces into one S-shaped piece
 - Create two Scc groups, each from one S-shaped piece and two c-shaped pieces
"""
2022-04-09 21:30:17.153752 --------------------------
2022-04-09 21:30:29.313493 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\n\nans = 0\n\nif n == 0:\n    ans = m // 3\n    m %= 3\n    if m == 1:\n        ans += 1\nelif n == 1:\n    ans = m // 3\n    m %= 3\n    if m == 2:\n        ans += 1\nelse:\n    ans = m // 3\n    m %= 3\n    if m == 1:\n        ans += 1\n    if n > m:\n        ans += m\n    else:\n        ans += n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    n: the number of S-shaped pieces\n    m: the number of c-shaped pieces\n    \"\"\"\n    n, m = map(int, input().split())\n    # n: the number of S-shaped pieces\n    # m: the number of c-shaped pieces\n    # c = (m - 2 * n) / 2\n    # s = n - c\n    # print(int(s + c))\n\n    # c = (m - 2 * n) / 2\n    # s = n - c\n    # print(int(s + c))\n    # if m < 2 * n:\n    #     print(0)\n    # else:\n    #     if (m - 2 * n) % 2 == 0:\n    #         print((m - 2 * n) // 2 + n)\n    #     else:\n    #         print((m - 2 * n) // 2 + n - 1)\n\n    # if m < 2 * n:\n    #     print(0)\n    # else:\n    #     print(min(m - 2 * n + n, n))\n    print(min(m // 2, n))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649554217,
  "id": "cmpl-4vGh7ub3JwREX7f8qPRVo0t4SC3AM",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:30:29.313843 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\n\nans = 0\n\nif n == 0:\n    ans = m // 3\n    m %= 3\n    if m == 1:\n        ans += 1\nelif n == 1:\n    ans = m // 3\n    m %= 3\n    if m == 2:\n        ans += 1\nelse:\n    ans = m // 3\n    m %= 3\n    if m == 1:\n        ans += 1\n    if n > m:\n        ans += m\n    else:\n        ans += n\nprint(ans)"
}
2022-04-09 21:30:29.313898 REASON stop
2022-04-09 21:30:29.316314 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    n: the number of S-shaped pieces\n    m: the number of c-shaped pieces\n    \"\"\"\n    n, m = map(int, input().split())\n    # n: the number of S-shaped pieces\n    # m: the number of c-shaped pieces\n    # c = (m - 2 * n) / 2\n    # s = n - c\n    # print(int(s + c))\n\n    # c = (m - 2 * n) / 2\n    # s = n - c\n    # print(int(s + c))\n    # if m < 2 * n:\n    #     print(0)\n    # else:\n    #     if (m - 2 * n) % 2 == 0:\n    #         print((m - 2 * n) // 2 + n)\n    #     else:\n    #         print((m - 2 * n) // 2 + n - 1)\n\n    # if m < 2 * n:\n    #     print(0)\n    # else:\n    #     print(min(m - 2 * n + n, n))\n    print(min(m // 2, n))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 21:30:29.316698 REASON stop
