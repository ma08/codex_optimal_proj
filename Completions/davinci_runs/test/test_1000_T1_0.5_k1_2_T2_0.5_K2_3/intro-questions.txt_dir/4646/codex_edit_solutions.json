["\n\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   not make the array good\n        #   if there are an even number of odd elements, then we can make\n        #   the array good\n        return -1 if a.count(1) % 2 else 0 # if a.count(1) is even\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array good if there are an even number of odd\n        #   elements, then we can make the array good\n        return 0\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "def main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        print(min_moves(a))\n\ndef min_moves(a):\n    if len(a) % 2 != 0:\n        return -1\n    moves = 0\n    for i in range(len(a)):\n        if i % 2 != a[i] % 2:\n            moves += 1\n    return int(moves / 2)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        print(min_moves(a))\n\n\ndef min_moves(a):\n    odd = 0\n    even = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even % 2 == 0 and odd % 2 == 0:\n        return 0\n    elif even % 2 == 1 and odd % 2 == 1:\n        return 1\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we can not\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return -1 if a.count(1) % 2 else 0\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return 0\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "\n\n\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we can't\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return -1 if a.count(1) % 2 else 0\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return 0\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we cannot\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return -1 if a.count(1) % 2 else 0 # if a.count(1) % 2 else 0\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array bad\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return 0 # if a.count(1) % 2 else 0\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "\n\nimport math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        print(min_moves(a, n))\n\ndef min_moves(a, n):\n    if n % 2 != 0:\n        return -1\n    moves = 0\n    for i in range(n):\n        if i % 2 != a[i] % 2:\n            moves += 1\n    return int(moves / 2)\n\nif __name__ == '__main__':\n    main()\n", "def main(a, n):\n    if n % 2 != 0:\n        return -1\n    moves = 0\n    for i in range(n):\n        if i % 2 != a[i] % 2:\n            moves += 1\n    return int(moves / 2)\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(main(a, n))\n", "\n\n\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we cannot\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return -1 if a.count(1) % 2 else 0  # noqa\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array bad\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return 0\n\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "\n\n\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we cannot\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return -1 if a.count(1) % 2 else 0\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array bad\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return 0\n\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "import math\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        print(min_moves(a, n))\n\n\n\ndef min_moves(a, n):\n    if n % 2 != 0:\n        return -1\n    moves = 0\n    for i in range(n):\n        if i % 2 != a[i] % 2:\n            moves += 1\n    return int(moves / 2)\n\n\ndef min_moves_2(a):\n    odd = 0\n    even = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even % 2 == 0 and odd % 2 == 0:\n        return 0\n    elif even % 2 == 1 and odd % 2 == 1:\n        return 1\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        print(min_moves(a, n))\n# min_moves function.\ndef min_moves(a, n):\n    if n % 2 != 0:\n        return -1\n    moves = 0\n    for i in range(n):\n        if i % 2 != a[i] % 2:\n            moves += 1\n    return int(moves / 2)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we can not\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return -1 if a.count(1) % 2 == 1 else 0\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return 0\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "\n\nimport sys\n\ndef solve(a):\n    if len(a) % 2 == 0:\n        # even number of elements\n        #   if there are an odd number of odd elements, then we can't\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return -1 if a.count(1) % 2 else 1\n    else:\n        # odd number of elements\n        #   if there are an odd number of odd elements, then we can\n        #   make the array good\n        #   if there are an even number of odd elements, then we can\n        #   make the array good\n        return 1\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        n = int(sys.stdin.readline())\n        a = map(int, sys.stdin.readline().strip().split())\n\n        print solve(a)\n", "\n\nimport sys\n\ndef solve():\n    return 0\n\nif __name__ == '__main__':\n\n    t = int(sys.stdin.readline())\n\n    for i in range(t):\n        print solve()\n", "\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        print(even_odd_count(a, n))\n# min_moves function\ndef even_odd_count(a, n):\n    if n % 2 != 0:\n        return -1\n    moves = 0\n    for i in range(n):\n        if i % 2 != a[i] % 2:\n            moves += 1\n    return int(moves / 2)\n\nif __name__ == '__main__':\n    main()\n"]