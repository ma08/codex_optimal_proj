["def deal(a,b,c='0'):\n    if(c=='0' or a==c):\n        if(a=='R'):\n            return 'B'\n        if(a=='B'):\n            return 'R'\n        if(a=='G'):\n            return 'B'\n    if(a=='R' and c=='B'):\n        b = 'G'\n    if (a == 'R' and c == 'G'):\n        b = 'B'\n    if (a == 'B' and c == 'R'):\n        b = 'G'\n    if (a == 'B' and c == 'G'):\n        b = 'R'\n    if (a == 'G' and c == 'B'):\n        b = 'R'\n    if (a == 'G' and c == 'R'):\n        b = 'B'\n    return b\nn = int(input())\nss = input()\ns = list(ss)\nanswer = [s[0]]\nnumber = 0\nfor i in range(0,n-1):\n    ans = \"\"\n    if (s[i]==s[i+1]):\n        number += 1\n        if(i==n-2):\n            ans = deal(s[i],s[i+1])\n        else:\n            ans = deal(s[i],s[i+1],s[i+2])\n        s[i+1] = ans\n        answer.append(ans)\n    else:\n        answer.append(s[i+1])\ns = \"\".join(answer)\nprint(number)\nprint(s)", "input()\ngaror = list(input())\ngar = garor.copy()\nfor i in range(1, len(gar)):\n\tif(gar[i]==gar[i-1]):\n\t\toptions = ['R', 'G', 'B']\n\t\toptions.remove(gar[i-1])\n\t\tif(i<len(gar)-1 and gar[i+1] in options):\n\t\t\toptions.remove(gar[i+1])\n\t\tgar[i] = options[0]\ncount = 0\nfor i in range(0, len(gar)):\n\tif(gar[i]!=garor[i]):\n\t\tcount = count +1\nprint(count)\nstr1 = ''.join(gar)\nprint(str1)\n\n", "n = int(input())\nsi = input()\ns = []\nfor i in si:\n    s.append(i)\n\ndic = {0:'R',1:'G',2:'B'}\ndic2 = {'R':0,'G':1,'B':2}\nc = 0\n# print(s)\nfor i in range(1,len(s)):\n    if i==(len(s)-1):\n        if s[i] == s[i - 1]:\n            s[i] = dic[(dic2[s[i]] + 1) % 3]\n            c += 1\n    else:\n        if s[i]==s[i-1]:\n            if s[i+1]==s[i-1]:\n                s[i] = dic[(dic2[s[i]]+1)%3]\n                c+=1\n            else:\n                temp = [False]*3\n                temp[dic2[s[i - 1]]] = True\n                temp[dic2[s[i + 1]]] = True\n                for j in range(3):\n                    if not temp[j]:\n                        s[i]=dic[j]\n                        c+=1\nprint(c)\nfor i in s:\n    print(i,end='')\n\n", "n = int(input())\n\ns = [i for i in input()]\n\nT = ['R','G','B']\n\nadd = 0\n\nfor i in range(n-1):\n    if s[i] == s[i+1]:\n        add += 1\n        if i+2 < n:\n            for j in T:\n                if (j != s[i]) and (j !=s[i+2]):\n                    s[i+1] = j\n                    break\n        else:\n            for j in T:\n                if (j != s[i]):\n                    s[i+1] = j\n                    break\nprint(add)\nprint(''.join(s))\n", "n = int(input())\ns = input()\ns = [i for i in s]\nans = 0\ne = [\"R\",\"G\",\"B\"]\nfor i in range(1,n):\n    if s[i] == s[i-1]:\n        ans += 1\n        dame = set()\n        dame.add(e.index(s[i-1]))\n        if i != n-1:\n            dame.add(e.index(s[i+1]))\n        for j in range(3):\n            if j in dame:\n                continue\n            else:\n                s[i] = e[j]\n                break\nprint(ans)\nprint(\"\".join(s))", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    try:\n        f = open('input'+ str(inId) + '.txt', 'r')\n        sys.stdin = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    except Exception:\n        dprint('invalid input file')\nif outId>0:\n    dprint('use output', outId)\n    try:\n        f = open('stdout'+ str(outId) + '.txt', 'w')\n        sys.stdout = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    except Exception:\n        dprint('invalid output file')\n        \n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n#print(N)\ns = input()\nzs = list(s)\ng = 'RGB'\nr = 0\nfor i in range(1,N):\n    if zs[i] == zs[i-1]:\n        r+=1\n        for x in g:\n            if x == zs[i-1]: continue\n            if i<N-1 and x == zs[i+1] : continue\n            zs[i] = x\n            break\nprint(r)\nprint(''.join(zs))\n\n\n\n\n\n", "n = int(input())\ns = '!' + input().strip()\n\ndp = [[10 ** 6] * (n + 1) for i in range(3)]\npr = [[None] * (n + 1) for i in range(3)]\ndp[0][0] = dp[1][0] = dp[2][0] = 0\nfor i in range(1, n + 1):\n    for c in range(3):\n        op1 = dp[(c + 1) % 3][i - 1]\n        op2 = dp[(c + 2) % 3][i - 1]\n        pr[c][i] = (c + 1) % 3 if op1 < op2 else (c + 2) % 3\n        dp[c][i] = min(op1, op2) + ('RGB'.index(s[i]) != c)\n\nans = []\nend = [dp[0][n], dp[1][n], dp[2][n]]\nc = end.index(min(end))\nfor i in range(n, 0, -1):\n    ans.append(c)\n    c = pr[c][i]\n\nprint(min(end))\nprint(''.join('RGB'[c] for c in ans[::-1]))", "n=int(input())\ns=input()\nlens=len(s)\ndp=[[0]*5 for _ in range(lens+5)]\nparent=[[0]*5 for _ in range(lens+5)]\nR,G,B=1,2,3\nsss=\"0RGB\"\n\ndp[0][R]=dp[0][G]=dp[0][B]=1\nif s[0]==\"R\": dp[0][R]=0\nif s[0]==\"G\": dp[0][G]=0\nif s[0]==\"B\": dp[0][B]=0\n\nfor i in range(1,lens):\n    dp[i][R]=min(dp[i-1][G],dp[i-1][B])+1\n    if dp[i][R]==dp[i-1][G]+1:\n        parent[i][R]=G\n    else:\n        parent[i][R]=B\n    \n    dp[i][G]=min(dp[i-1][R],dp[i-1][B])+1\n    if dp[i][G]==dp[i-1][R]+1:\n        parent[i][G]=R\n    else:\n        parent[i][G]=B\n\n    dp[i][B]=min(dp[i-1][G],dp[i-1][R])+1\n    if dp[i][B]==dp[i-1][G]+1:\n        parent[i][B]=G\n    else:\n        parent[i][B]=R\n\n    if s[i]==\"R\": dp[i][R]-=1\n    elif s[i]==\"G\": dp[i][G]-=1\n    elif s[i]==\"B\": dp[i][B]-=1\n\nans=min(dp[lens-1][R],dp[lens-1][G],dp[lens-1][B])\nprint(min(dp[lens-1][R],dp[lens-1][G],dp[lens-1][B]))\n\nans2=[0]*lens\nif ans==dp[lens-1][R]:\n    i=lens-1\n    pp=R\n    while i>=0:\n        ans2[i]=sss[pp]\n        pp=parent[i][pp]\n        i-=1\nelif ans==dp[lens-1][G]:\n    i=lens-1\n    pp=G\n    while i>=0:\n        ans2[i]=sss[pp]\n        pp=parent[i][pp]\n        i-=1\nelse:\n    i=lens-1\n    pp=B\n    while i>=0:\n        ans2[i]=sss[pp]\n        pp=parent[i][pp]\n        i-=1\n\nprint(\"\".join(ans2))", "import itertools\nn = int(input())\ns = list(input())\ncount = 0\nvalues = {(l, r): next(iter(set(\"RGB\") - {l, r})) for l, r in itertools.product(\"RGB\", repeat=2)}\nranges = []\nstart = None\nfor i in range(1, n):\n    if s[i - 1] == s[i]:\n        if start is None:\n            start = i - 1\n    elif start is not None:\n        ranges.append((start, i))\n        start = None\nif start is not None:\n    ranges.append((start, n))\n\nfor r in ranges:\n    for i in range(r[0] + 1, r[1], 2):\n        l = s[i - 1]\n        r = s[(i + 1) % n]\n        s[i] = values[l, r]\n        count += 1\n\nprint(count)\nprint(\"\".join(s))\n", "n = int(input())\ns = input()\ns = list(s)\nif len(s) <= 2 and len(set(s)) > 1:\n    print(0)\n    print(''.join(s))\nelif len(s) == 2:\n    print(1)\n    bam = 'RGB'\n    print(s[0]+bam[(bam.index(s[0])+1)%3])\nelse:\n    perekras = 0\n    for t in range(1, len(s) - 1):\n        if s[t-1] == s[t] and s[t] == s[t+1]:\n            z = {'R', 'G', 'B'}\n            perekras += 1\n            z.discard(s[t-1])\n            z.discard(s[t+1])\n            s[t] = z.pop()\n    for t in range(1, len(s) - 1):\n        if s[t-1] == s[t] or s[t] == s[t+1]:\n            z = {'R', 'G', 'B'}\n            perekras += 1\n            z.discard(s[t-1])\n            z.discard(s[t+1])\n            s[t] = z.pop()\n    print(perekras)\n    print(''.join(s))", "\ndef main():\n    n = int(input())\n\n    clone = set([\"R\",\"G\",\"B\"])\n\n    lamps = [i for i in input()]\n    c=0\n    for i in range(len(lamps)-1):\n        if lamps[i] == lamps[i+1] and i!=len(lamps)-2:\n            t = clone - set([lamps[i],lamps[i+2]])\n            lamps[i+1] = t.pop()\n            c+=1\n        if lamps[i] == lamps[i+1] and i==len(lamps)-2:\n            t = clone - set([lamps[i]])\n            lamps[i+1] = t.pop()\n            c+=1\n\n    print(c)\n    print(\"\".join(lamps))\n\n\n\n\n\n\n\n\n\n\n\nmain()", "n = int(input())\na = input()\nz = [a[0]]\ns = ['R', 'B', 'G']\ncount = 0\nfor i in range(1, n):\n    if a[i]!=z[-1]:\n        z.append(a[i])\n    else:\n        for j in s:\n            if i+1 < n:\n                if j != a[i+1] and j != a[i]:\n                    z.append(j)\n                    count+=1\n                    break\n            else:\n                if j != a[i]:\n                    z.append(j)\n                    count+=1\n                    break\nprint(count)\nprint(''.join(z))", "import sys\n\nn = int(input())\nlamps = input()\n\nif len(lamps) == 1:\n    print(0)\n    print(lamps)\n    return\n\ndef other(c1, c2='R'):\n    if 'G' != c1 and 'G' != c2:\n        return 'G'\n    elif 'R' != c1 and 'R' != c2:\n        return 'R'\n    else:\n        return 'B'\n\nnewlamps = list(lamps)\ni = 1\nrecolors = 0\nwhile i < n-1:\n    if newlamps[i] == newlamps[i-1]:\n        recolors += 1\n        newlamps[i] = other(newlamps[i-1], newlamps[i+1])\n    i += 1\n\nif newlamps[-1] == newlamps[-2]:\n    newlamps[-1] = other(newlamps[-2])\n    recolors += 1\n\nprint(recolors)\nprint(''.join(newlamps))\n\n", "n = int(input())\ng = list(input())\ncost = 0\n\nfor i in range(1, n):\n    if g[i] == g[i-1]:\n        cost += 1\n        if i == n - 1 or g[i] == g[i+1]:\n            if g[i] == 'R': g[i] = 'G'\n            elif g[i] == 'G': g[i] = 'B'\n            else: g[i] = 'R'\n        else:\n            if g[i] == 'R' and g[i+1] == 'G':\n                g[i] = 'B'\n            elif g[i] == 'R' and g[i+1] == 'B':\n                g[i] = 'G'\n            elif g[i] == 'G' and g[i+1] == 'R':\n                g[i] = 'B'\n            elif g[i] == 'G' and g[i+1] == 'B':\n                g[i] = 'R'\n            elif g[i] == 'B' and g[i+1] == 'R':\n                g[i] = 'G'\n            else:\n                g[i] = 'R'\n\nprint(cost)\nprint(''.join(g))\n", "def div_process(s, c):\n  sl=list(s)\n  for i in range(1, len(sl), 2):\n    sl[i]=c\n  return \"\".join(sl)\n\nli=0\nct=0\ninput();i_s=input()\nsp_l=[]\nfor i in range(1, len(i_s)):\n  if not i_s[i]==i_s[i-1]:\n    sp_l.append(i_s[li:i])\n    li=i\nsp_l.append(i_s[li:])\n\nfor i in range(len(sp_l)-1):\n  sp_l[i]=div_process(sp_l[i], list({'R', 'G', 'B'}-{sp_l[i][0], sp_l[i+1][0]})[0])\nsp_l[-1]=div_process(sp_l[-1], list({'R', 'G', 'B'}-{sp_l[-1][0]})[0])\n\nprint(sum([int(len(x)/2) for x in sp_l]))\nprint(''.join(sp_l))\n", "n = int(input())\ns = list(input())\ncur = 'X'\nstart, end = 0, 0\ni = 0\nans = 0\nwhile i < n:\n\tif s[i] != cur:\n\t\tcur = s[i]\n\t\tstart = i\n\t\twhile i < n and s[i] == cur:\n\t\t\ti += 1\n\t\tif i == n:\n\t\t\tfor ch in 'RBG':\n\t\t\t\tif ch != s[start]:\n\t\t\t\t\tuse = ch\n\t\t\t\t\tbreak\n\t\telse:\n\t\t\tfor ch in 'RBG':\n\t\t\t\tif ch != s[start] and ch != s[i]:\n\t\t\t\t\tuse = ch\n\t\t\t\t\tbreak\n\t\tend = i - 1\n\t\tfor j in range(start, end + 1):\n\t\t\tif (j - start) % 2:\n\t\t\t\ts[j] = use\n\t\t\t\tans += 1\nprint(ans)\nprint(''.join(s))\n\n\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nS=list(input())\nANS=0\nLIST=[\"R\",\"G\",\"B\"]\nfor i in range(1,n):\n    \n    if S[i]==S[i-1]:\n        if i<n-1:\n            for l in LIST:            \n                if S[i-1]!=l and S[i+1]!=l:\n                    ANS+=1\n                    S[i]=l\n                    break\n\n        else:\n            for l in LIST:\n                if S[i-1]!=l:\n                    ANS+=1\n                    S[i]=l\n                    break\n\nprint(ANS)\nprint(\"\".join(S))\n    \n\n\n", "n=int(input())\nf=[\"R\",\"G\",\"B\"]\ns=list(input())\ni=1\nx=0\nwhile i<len(s)-1:\n    if s[i]==s[i-1]:\n        h=f[:]\n        h.remove(s[i-1])\n        if s[i+1] in h:\n            h.remove(s[i+1])\n        s[i]=h[0]\n        i+=1\n        x+=1\n    i+=1\nif n>1 and s[-1]==s[-2]:\n    h=f[:]\n    h.remove(s[-1])\n    s[i]=h[0]\n    x+=1\nprint(x)\nd=''\nfor i in s:\n    d+=i\nprint(d)\n", "n=int(input())\ns=list(input())+[\"*\"]\na=['*']\nl=list(\"GRB\")\nc=0\nfor i in range(n):\n    if s[i]==a[-1]:\n        for j in l:\n            if j!=a[-1] and j!=s[i+1]:\n                a.append(j)\n                c+=1\n                break\n    else:\n        a.append(s[i])\nprint(c)\nprint(''.join(a[1:]))", "# url: https://codeforces.com/contest/1108/problem/D\n\n\ndef compatible(prev, *args):\n    if not args:\n        return next(iter(colour_set - {prev}))\n    else:\n        return next(iter(colour_set - {prev, args[0]}))\n\n\nn_lamps = int(input())\ngarland = list(input())\n\ncolour_set = {'R', 'G', 'B'}\ncount = 0\n\nfor idx, lamp in enumerate(garland):\n\n    if idx == 0:\n        continue\n\n    prev = garland[idx-1]\n    if lamp == prev:\n        if idx == len(garland)-1:\n            garland[-1] = compatible(prev)\n            count += 1\n            continue\n\n        nxt = garland[idx+1]\n        garland[idx] = compatible(prev, nxt)\n        count += 1\n\nprint(count)\nprint(''.join(garland))", "h = 1\ninput()\np = 'x'\nr = 1\nt = []\nfor c in input().lower():\n    if h != 1:\n        p = next(iter(set('bgr') - {p, c}))\n        t.append(p)\n        h = 1\n    if c != p:\n        t.append(c)\n    else:\n        h = 2\n        r += 1\n    p = c\nif h != 1:\n    p = next(iter(set('bg') - {p}))\n    t.append(p)\nprint(r - 1)\nprint(''.join(t).upper())\n", "n = int(input())\ns = input()\nc = 'RGB'\nans = ''\nansk = 0\nflag = True\n\nfor i in range(n-1):\n    if flag:\n        if s[i] == s[i+1]:\n            if i == n-2:\n                ans += s[i] + c[c.find(s[i])-1]\n                ansk += 1\n                print(ansk)\n                print(ans)\n                return\n            else:\n                for j in c:\n                    if j != s[i] and j != s[i+2]:\n                        break\n                flag = False\n                ansk += 1\n                ans += s[i] + j\n        else:\n            ans += s[i] \n    else:\n        flag = True\n\nprint(ansk)\nprint(ans+s[-1])\n\n\n"]