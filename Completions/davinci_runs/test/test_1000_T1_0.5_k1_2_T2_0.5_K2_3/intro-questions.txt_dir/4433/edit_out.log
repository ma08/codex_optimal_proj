2022-04-12 20:36:52.283527 num operations 2
2022-04-12 20:36:52.283536 size on input set 1
2022-04-12 20:37:00.931286 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    }
  ],
  "created": 1649795812,
  "object": "edit"
}
2022-04-12 20:37:00.931529 fix spelling mistakes 3 ['\n\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', '\n\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', '\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n']
2022-04-12 20:37:00.931570 size on output set 3
2022-04-12 20:37:00.931577 size on input set 3
2022-04-12 20:37:08.966223 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], -x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if x_root != y_root and size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n\n    if x_root != y_root:\n        parent[y_root] = x_root\n        size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 1,
      "text": "n, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nans = []\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        ans.append(edge)\n\nprint(len(ans))\nfor edge in ans:\n    print(edge[0], edge[1])\n"
    }
  ],
  "created": 1649795820,
  "object": "edit"
}
2022-04-12 20:37:08.966398 fix syntax errors 3 ['n, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], -x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if x_root != y_root and size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n\n    if x_root != y_root:\n        parent[y_root] = x_root\n        size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', 'n, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', '\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nans = []\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        ans.append(edge)\n\nprint(len(ans))\nfor edge in ans:\n    print(edge[0], edge[1])\n']
2022-04-12 20:37:12.503455 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(list(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], -x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 2,
      "text": "\n\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    }
  ],
  "created": 1649795829,
  "object": "edit"
}
2022-04-12 20:37:12.503632 fix syntax errors 3 ['\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', '\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(list(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], -x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', '\n\nn, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n']
2022-04-12 20:37:21.934241 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n"
    }
  ],
  "created": 1649795832,
  "object": "edit"
}
2022-04-12 20:37:21.934426 fix syntax errors 3 ['\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', '\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n', '\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]: \n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n']
2022-04-12 20:37:21.934552 size on output set 8
2022-04-12 20:37:21.934562 num operations 2
2022-04-12 20:37:21.934568 size on input set 1
2022-04-12 20:37:23.475398 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solution(n, m, edges):\n    \"\"\"\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    \"\"\"\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n"
    },
    {
      "index": 1,
      "text": "\ndef solution(n, m, edges):\n    \"\"\"\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    \"\"\"\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n"
    },
    {
      "index": 2,
      "text": "\ndef solution(n, m, edges):\n    \"\"\"\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    \"\"\"\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n"
    }
  ],
  "created": 1649795841,
  "object": "edit"
}
2022-04-12 20:37:23.475595 fix spelling mistakes 3 ['\ndef solution(n, m, edges):\n    """\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    """\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n', '\ndef solution(n, m, edges):\n    """\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    """\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n', '\ndef solution(n, m, edges):\n    """\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    """\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n']
2022-04-12 20:37:23.475639 size on output set 1
2022-04-12 20:37:23.475656 size on input set 1
2022-04-12 20:37:24.999847 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import collections\n\n\ndef solution(n, m, edges):\n    \"\"\"\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    \"\"\"\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n"
    },
    {
      "index": 1,
      "text": "import collections\n\n\ndef solution(n, m, edges):\n    \"\"\"\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    \"\"\"\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n"
    },
    {
      "index": 2,
      "text": "import collections\n\n\ndef solution(n, m, edges):\n    \"\"\"\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    \"\"\"\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n"
    }
  ],
  "created": 1649795843,
  "object": "edit"
}
2022-04-12 20:37:25.000095 fix syntax errors 3 ['import collections\n\n\ndef solution(n, m, edges):\n    """\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    """\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n', 'import collections\n\n\ndef solution(n, m, edges):\n    """\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    """\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n', 'import collections\n\n\ndef solution(n, m, edges):\n    """\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    """\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n']
2022-04-12 20:37:25.000154 size on output set 1
