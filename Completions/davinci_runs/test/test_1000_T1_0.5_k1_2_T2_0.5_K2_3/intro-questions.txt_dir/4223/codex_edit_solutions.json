["from collections import Counter\n\nn = int(input())\ns = input()\ncounter = 0\nfor i in Counter(s).values():\n    counter += i - 1\nprint(counter)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Jan  5 19:03:17 2020\n\n@author: LENOVO\n\"\"\"\n\n\ndef solve(n, s):\n    counter = 0\n    for i in s:\n        counter += i - 1\n    return counter\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n", "from collections import Counter\n\nn = int(input())\ns = input()\n\ncounter = 0\n\nfor i in Counter(s).values():\n    counter += i - 1\n\nprint(counter)\n", "\nfrom collections import Counter, deque\n\nn = int(input()) # number of nodes\nm = int(input()) # number of edges\n\nvisited = [False] * n\ngraph = [[] for _ in range(n)]\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n\n\ndef dfs(v):\n    visited[v] = True\n    print(v + 1)\n    for i in graph[v]:\n        if not visited[i]:\n            dfs(i)\n\n\ndef bfs(v):\n    visited[v] = True\n    queue = deque()\n    queue.append(v)\n\n    while queue:\n        v = queue.popleft()\n        print(v + 1)\n        for i in graph[v]:\n            if not visited[i]:\n                visited[i] = True\n                queue.append(i)\n\n\nbfs(0)\n", "from collections import Counter\nn = int(input())\ns = input()\nc = Counter(s)\nans = n - sum(c.values())\nprint(ans)\n", "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s)\n\nans = n - sum(c.values())\n\nprint(ans)\n", "\n# the file\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\ncounter = 0\n\nfor i in Counter(s).values():\n    counter += i - 1\n\nprint(counter)\n", "\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s)\n\nans = n - sum(c.values()) // 2\n\nprint(ans)\n", "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\ncounter = 0\n\nfor i in Counter(s).values():\n    counter += i - 1\n\nprint(counter)\n", "from collections import Counter\n\ns = int(input())\n\nnumbers = list(map(int, input().split()))\n\ncounter = Counter(numbers)\n\nprint(counter.most_common()[0][0])\n", "from collections import Counter\n\nn = int(input())\ns = input()\nc = Counter(s)\nans = n - sum(c.values())\nprint(ans)\n", "\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s)\n\nans = n - sum(c.values()) // 2 * 2\n\nprint(ans)\n", "\nn = int(input())\ns = input()\n\ncounter = 1\nmax_counter = 1\n\nfor i in range(1, n):\n    if s[i] == s[i - 1]:\n        counter += 1\n    else:\n        max_counter = max(max_counter, counter)\n        counter = 1\n\nprint(max(max_counter, counter))\n", "from collections import Counter\n\nn = int(input())\ns = input()\nc = Counter(s)\nprint(n - sum(c.values()))\n"]