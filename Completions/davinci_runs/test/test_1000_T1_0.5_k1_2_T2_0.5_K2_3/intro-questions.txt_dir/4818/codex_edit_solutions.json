["#include <bits/stdc++.h>\nusing namespace std;\nint n, m, i, j, task_times, quiet_times, count;\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split());\n    task_times = sorted(map(int, sys.stdin.readline().split()));\n    quiet_times = sorted(map(int, sys.stdin.readline().split()));\n    i = j = 0;\n    count = 0;\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1;\n            i += 1;\n        j += 1;\n    print(count);\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"hello world\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split(' '))\n    task_lens = list(map(int, sys.stdin.readline().split(' ')))\n    quiet_lens = list(map(int, sys.stdin.readline().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for j in range(n):\n        if total < m and tasks[j] <= intervals[total]:\n            total += 1\n    print(total)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = list(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while free_time_index < m and task_index < n:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())  # n- tasks, m - intervals\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lengths = list(map(int, input().split(' ')))\n    quiet_lengths = list(map(int, input().split(' ')))\n\n    task_lengths.sort()\n    quiet_lengths.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lengths) and j < len(quiet_lengths):\n        if task_lengths[i] <= quiet_lengths[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "# this is the file\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))[::-1]\n    # print(tasks)\n    # print(intervals)\n    tasks.sort(reverse=True)\n    # print(tasks)\n    total = 0\n    # print(tasks)\n    # print(intervals)\n    for i in range(n):\n        # print(total)\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n            # print(total)\n    print(total)\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# import sys\n#\n# def main():\n#     n, m = map(int, sys.stdin.readline().split())\n#     tasks = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n#     free_times = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n#\n#     task_index = 0\n#     free_time_index = 0\n#     completed = 0\n#     while task_index < n and free_time_index < m:\n#         if tasks[task_index] <= free_times[free_time_index]:\n#             task_index += 1\n#             free_time_index += 1\n#             completed += 1\n#         else:\n#             free_time_index += 1\n#     print(completed)\n#\n# if __name__ == '__main__':\n#     main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_lens = list(map(int, sys.stdin.readline().split()))\n    quiet_lens = list(map(int, sys.stdin.readline().split()))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main(n, m, tasks, intervals):\n    pass\n", "\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    tasks_index = 0\n    intervals_index = 0\n    while tasks_index < n and intervals_index < m:\n        if tasks[tasks_index] <= intervals[intervals_index]:\n            best += 1\n            tasks_index += 1\n        intervals_index += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_time = sorted(map(int, sys.stdin.readline().split()))\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_time[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n    free_time = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_time[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split()) \n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    breaks = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    breaks.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= breaks[total]:\n            total += 1\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))[:n]\n    quiet_times = list(map(int, sys.stdin.readline().split()))[:m]\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split()) \n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = list(map(int, sys.stdin.readline().split()))\n    quiet_times = list(map(int, sys.stdin.readline().split()))\n    task_times.sort()\n    quiet_times.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n    # input\ndef main():\n    n, m = map(int, input().split())\n    tasks = sorted(map(int, input().split()), reverse=True)\n    breaks = sorted(map(int, input().split()), reverse=True)\n    # process\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= breaks[total]:\n            total += 1\n    print(total)\n\nmain()\n", "\n\ndef main():\n    # Read in the first line of input\n    n, m = map(int, input().split())\n    tasks = []\n\n    quiet = []\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Reads in the input\n    n, m = map(int, input().split(' ')) # n = number of tasks, m = number of quiet intervals\n    tasks = list(map(int, input().split(' '))) # list of tasks\n    quiet = list(map(int, input().split(' '))) # list of quiet intervals\n\n    # Sorts the tasks and quiet intervals in ascending order\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed in the quiet intervals\n    completed = 0\n\n    # Keep track of the index of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task in the task list\n    for task in tasks:\n        # Go through each quiet interval in the quiet interval list\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval (the task should be finished before the quiet interval ends)\n            if task <= quiet[i]:\n                # Increment the number of tasks completed in the quiet intervals\n                completed += 1\n\n                # Update the index of the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task in the task list\n                break\n\n    # Print out the number of tasks completed in the quiet intervals\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split()) # n- tasks, m - intervals\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(float('inf'))\n    intervals.append(float('inf'))\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "# this is the file\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(m):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\nmain()\n", "\n\ndef main():\n    # Reads in the input\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    quiet = list(map(int, input().split()))\n\n    # Sorts the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    a.sort()\n    b.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if a[i] <= b[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    t = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main(): \n    n, m = map(int, sys.stdin.readline().split())\n    tasks = map(int, sys.stdin.readline().split())\n    intervals = map(int, sys.stdin.readline().split()) \n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "# this is the file\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = [0] + list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort()\n    total = 1\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total] - intervals[total - 1]:\n            total += 1\n    print(total)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        print(\"-1\")\n    else:\n        count = 0\n        i = 0\n        j = 0\n        while i < n and j < m:\n            if a[i] > b[j]:\n                count += 1\n                j += 1\n            i += 1\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    return count\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    for i in range(n):\n        print('*' * (i + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n    free_times = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    task_times = sorted(map(int, sys.stdin.readline().strip().split()))\n    quiet_times = sorted(map(int, sys.stdin.readline().strip().split()))\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read in the first line of input and create the list of tasks\n    n = int(input())\n    tasks = list(map(int, input().split()))\n\n    # Read in the second line of input and create the list of quiet intervals\n    m = int(input())\n    quiet = list(map(int, input().split()))\n\n    # Sort the tasks\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print('*' * (i + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read in the first line of input and split it into two numbers\n    # n and m\n    n, m = input().split()\n\n    # Convert the two numbers to integers\n    n = int(n)\n    m = int(m)\n\n    # Read in the next n lines and split them into two numbers\n    # a and b\n    tasks = [input().split() for i in range(n)]\n\n    # Convert the two numbers to integers\n    for i in range(n):\n        tasks[i][0] = int(tasks[i][0])\n        tasks[i][1] = int(tasks[i][1])\n\n    # Read in the next m lines and split them into two numbers\n    # x and y\n    quiet = [input().split() for i in range(m)]\n\n    # Convert the two numbers to integers\n    for i in range(m):\n        quiet[i][0] = int(quiet[i][0])\n        quiet[i][1] = int(quiet[i][1])\n\n    # Sort the tasks and quiet intervals\n    tasks = sorted(tasks, key=lambda x: x[1])\n    quiet = sorted(quiet, key=lambda x: x[1])\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task[0] <= quiet[i][0] and task[1] >= quiet[i][1]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = sorted(map(int, input().split()))\n    free_times = sorted(map(int, input().split()), reverse=True)\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    t = list(map(int, sys.stdin.readline().split()))\n    l = list(map(int, sys.stdin.readline().split()))\n\n    t.sort()\n    l.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if t[i] <= l[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()))\n    free_times = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    print('hello world')\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nmain()\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split(' '))\n    tasks = list(map(int, input().split(' ')))\n    quiet = list(map(int, input().split(' ')))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:  # \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\n        if tasks[i] <= intervals[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks_list = map(int, sys.stdin.readline().split())\n    intervals_list = map(int, sys.stdin.readline().split())\n    tasks_list.sort()\n    intervals_list.sort()\n    tasks_list.append(math.inf) # or float('inf')\n    intervals_list.append(math.inf) # or float('inf')\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks_list[i] <= intervals_list[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\ndef main():\n    n, m = map(int, input().split())\n    task_lens = list(map(int, input().split()))\n    quiet_lens = list(map(int, input().split()))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, input().split()) # n- tasks, m - intervals\n    tasks = map(int, input().split())\n    intervals = map(int, input().split())\n    tasks.sort()\n    intervals.sort()\n    tasks.append(math.inf)\n    intervals.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split(' '))\n    task_lens = list(map(int, input().split(' ')))\n    quiet_lens = list(map(int, input().split(' ')))\n\n    task_lens.sort()\n    quiet_lens.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lens) and j < len(quiet_lens):\n        if task_lens[i] <= quiet_lens[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks_list = list(map(int, sys.stdin.readline().split()))\n    intervals_list = list(map(int, sys.stdin.readline().split()))\n    tasks_list.sort()\n    intervals_list.sort()\n    tasks_list.append(math.inf)\n    intervals_list.append(math.inf)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if tasks_list[i] <= intervals_list[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort(reverse=True)\n    intervals.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        if total >= m:\n            break\n        if tasks[i] <= intervals[total]:\n            total += 1\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Reads in the input\n    n, m = map(int, raw_input().split(' '))\n    tasks = list(map(int, raw_input().split(' ')))\n    quiet = list(map(int, raw_input().split(' ')))\n\n    # Sorts the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed\n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    tasks = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n    free_times = sorted(map(int, sys.stdin.readline().split()), reverse=True)\n\n    task_index = 0\n    free_time_index = 0\n    completed = 0\n    while task_index < n and free_time_index < m:\n        if tasks[task_index] <= free_times[free_time_index]:\n            task_index += 1\n            free_time_index += 1\n            completed += 1\n        else:\n            free_time_index += 1\n    print(completed)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    task_lengths = list(map(int, input().split()))\n    quiet_lengths = list(map(int, input().split()))\n\n    task_lengths.sort()\n    quiet_lengths.sort()\n\n    i = 0\n    j = 0\n    count = 0\n    while i < len(task_lengths) and j < len(quiet_lengths):\n        if task_lengths[i] < quiet_lengths[j]:\n            count += 1\n            i += 1\n        j += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read in the input\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    quiet = list(map(int, input().split()))\n\n    # Sort the tasks and quiet intervals\n    tasks.sort()\n    quiet.sort()\n\n    # Keep track of the number of tasks completed\n    completed = 0\n\n    # Keep track of the time of the last quiet interval\n    lastQuiet = 0\n\n    # Go through each task\n    for task in tasks:\n        # Go through each quiet interval\n        for i in range(lastQuiet, m):\n            # Check if the task can be completed in this quiet interval\n            if task <= quiet[i]:\n                # Increment the number of tasks completed\n                completed += 1\n\n                # Update the last quiet interval\n                lastQuiet = i + 1\n\n                # Move onto the next task\n                break\n\n    # Print out the number of tasks completed \n    print(completed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())  # read a line with a single integer\n    a = list(map(int, input().split()))  # read a list of integers, 2 in this case\n    b = list(map(int, input().split()))  # read a list of integers, 2 in this case\n\n\n    a.sort()\n    b.sort()\n\n    best = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if a[i] <= b[j]:\n            best += 1\n            i += 1\n        j += 1\n    print(best)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    intervals = list(map(int, input().split()))\n    tasks.sort()\n    intervals.sort()\n\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    task_times = sorted(map(int, sys.stdin.readline().split()))\n    quiet_times = sorted(map(int, sys.stdin.readline().split()))\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if task_times[i] <= quiet_times[j]:\n            count += 1\n            i += 1\n        j += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n\ndef main():\n\tn, m = map(int, input().split())\n\ttasks = list(map(int, input().split()))\n\tintervals = list(map(int, input().split()))\n\ttasks.sort()\n\tintervals.sort()\n\n\tbest = 0\n\ttasks_index = 0\n\tintervals_index = 0\n\twhile tasks_index < n and intervals_index < m:\n\t\tif tasks[tasks_index] <= intervals[intervals_index]:\n\t\t\tbest += 1\n\t\t\ttasks_index += 1\n\t\tintervals_index += 1\n\tprint(best)\n\n\nif __name__ == '__main__':\n\tmain()\n"]