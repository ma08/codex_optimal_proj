2022-04-09 21:51:54.119002 """
Recently your town has been infested by swindlers who convince unknowing tourists to play a simple dice game with them for money. The game works as follows: given is an $n$-sided die, whose sides have $1, 2, \ldots , n$ pips, and a positive integer $k$. You then roll the die, and then have to make a choice. Option $1$ is to stop rolling. Option $2$ is to reroll the die, with the limitation that the die can only be rolled $k$ times in total. Your score is the number of pips showing on your final roll.

Obviously the swindlers are better at this game than the tourists are. You, proud supporter of the Battle Against Probabilistic Catastrophes, decide to fight this problem not by banning the swindlers but by arming the tourists with information.

You create pamphlets on which tourists can find the maximum expected score for many values of $n$ and $k$. You are sure that the swindlers will soon stop their swindling if the tourists are better prepared than they are!

The layout of the flyers is done, and you have distribution channels set up. All that is left to do is to calculate the numbers to put on the pamphlet.

Given the number of sides of the die and the number of times you are allowed to roll, calculate the expected (that is, average) score when the game is played optimally.

-----Input-----
 - A single line with two integers $1\leq n\leq 100$, the number of sides of the die, and $1\leq k\leq 100$, the number of times the die may be rolled.

-----Output-----
Output the expected score when playing optimally. Your answer should have an absolute or relative error of at most $10^{-7}$.

-----Examples-----
Sample Input 1:
1 1
Sample Output 1:
1

Sample Input 2:
2 3
Sample Output 2:
1.875

Sample Input 3:
6 2
Sample Output 3:
4.25
"""
2022-04-09 21:51:54.119119 --------------------------
2022-04-09 21:52:20.498586 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()"
    }
  ],
  "created": 1649555514,
  "id": "cmpl-4vH22thNrfvCGag0HDYQRszktRX64",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:52:20.499143 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))"
}
2022-04-09 21:52:20.499288 REASON stop
2022-04-09 21:52:20.500440 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
2022-04-09 21:52:20.500476 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 21:52:20.500606 REASON stop
2022-04-09 21:52:20.501183 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
2022-04-09 21:52:20.501224 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))"
}
2022-04-09 21:52:20.501306 REASON stop
2022-04-09 21:52:20.501721 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
2022-04-09 21:52:20.501738 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0"
}
2022-04-09 21:52:20.501776 REASON stop
2022-04-09 21:52:20.502042 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
2022-04-09 21:52:20.502055 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 21:52:20.502101 REASON stop
2022-04-09 21:52:20.502393 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
2022-04-09 21:52:20.502419 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 21:52:20.502479 REASON stop
2022-04-09 21:52:20.502922 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
2022-04-09 21:52:20.502965 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)"
}
2022-04-09 21:52:20.503103 REASON stop
2022-04-09 21:52:20.504069 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
2022-04-09 21:52:20.504100 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n,k-1)\n\nmain()"
}
2022-04-09 21:52:20.504187 REASON stop
2022-04-09 21:52:20.504746 test/intro-questions.txt_dir/4747/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4747/solutions.json'
