["\n\nimport sys, math\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2.0 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1.0) / (n**k - 1.0)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "n, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2.0\n    else:\n        return (solve(n, k - 1) + n) / 2.0\n\nprint(solve(n, k))\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n ** k)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * ((n - 1) / 2.0) + (n - 1) * ((k - 1) / (2.0 * k)) * ((n - 1) / 2.0) * ((k - 2) / (2.0 * (k - 1)))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / k) * (1.0 / n) * (1.0 / k) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "import sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k) \n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n\n    print(calculate(n,m))\n\ndef calculate(n,m):\n    if m == 1:\n        return (n+1)//2.0\n    else:\n        return (n+1)//2.0 + (1.0 - 1.0/n)*(m-1)*calculate(n,m-1)\n\nmain()\n", "\n\n#Die k-times (from math import factorial)\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k)) if k == 1 else ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\ndef expected_value(n,k): return (n+1)/2 if k == 1 else ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "#Die k-times\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "import sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return (n + 1) / 2 + ((n - 1) / n) * (k - 1) * calculate(n - 1, k - 1)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    #read the inputs\n    n, k = map(int, input().split())\n    \n    #compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        #compute the probability of rolling i\n        probability = 1/float(n)\n        \n        #compute the expected score of rolling i\n        score = i\n        \n        #if we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                #compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                #compute the expected score of rolling j\n                score += j\n        \n        #add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    #print the expected score\n    print(round(expectedScore, 3))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Die, k-times.\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2\n    else:\n        numerator = 1\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**(k-1) - 1)\n        return numerator / n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n\t# Read the input\n\tn, k = map(int, sys.stdin.readline().split())\n\t\n\t# Compute the expected score\n\texpectedScore = 0\n\tfor i in range(1, n+1):\n\t\t# Compute the probability of rolling i\n\t\tprobability = 1/float(n)\n\t\t\n\t\t# Compute the expected score of rolling i\n\t\tscore = i\n\t\t\n\t\t# If we can roll again, compute the expected score for the next roll\n\t\tif k > 1:\n\t\t\tfor j in range(1, n+1):\n\t\t\t\t# Compute the probability of rolling j\n\t\t\t\tprobability *= 1/float(n)\n\t\t\t\t\n\t\t\t\t# Compute the expected score of rolling j\n\t\t\t\tscore += j\n\t\t\n\t\t# Add the expected score of this roll to the total expected score\n\t\texpectedScore += probability*score\n\t\n\t# Print the expected score\n\tprint(expectedScore)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (\n        (n - 1) / 2.0)\n", "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * ((n - 1) / 2.0) \n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)//2\n    else:\n        return (n+1)//2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected(n, k - 1)\n\n\ndef main():\n\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n#Die, k-times - https://open.kattis.com/problems/diehard3\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "\n\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2.0\n    else:\n        return (solve(n, k - 1) + n) / 2.0\n\nprint(solve(n, k))\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for the next roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n", "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1) // 2\n    else:\n        return (n + 1) // 2 + ((n - 1) / n) * (k - 1) * calculate(n, k - 1)\n\n\nmain()\n", "#!/usr/bin/python\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / k) * (1.0 / n) * (1.0 / k) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split() # read inputs\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k)) # call function\n\ndef calculate(n,k):\n    if k == 1: # base case\n        return (n+1)/2\n    else: # recursive case\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2\n    else:\n        numerator = 0\n        for i in range(1, n + 1):\n            numerator += i * (k - 1) / (n ** k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k) \n", "\n\ndef get_expected_value(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected_value(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected_value(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n**k)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k) \n", "\n#Die n-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "\n\nimport sys\n\ndef main():\n    # Read the input and split it into separate integers\n    numbers = sys.stdin.readline().split()\n\n    # Compute the sum of the integers\n    sum = 0\n    for number in numbers:\n        sum += int(number)\n\n    # Print the sum\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, k = map(int, input().split())\n\ndef solve(n,  k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1) # probability of i\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/bash\n\n# file: file.sh\n\n# This script will check if a file exists\n# and if it does it will delete it.\n\n# Check if file exists\nif [ -e $HOME/Desktop/file.txt ]\nthen\n\t# File exists, so delete it\n\trm $HOME/Desktop/file.txt\nfi\n", "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().strip().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\n\ndef calculate(n, k):\n    if k == 1:\n        return (n + 1) // 2\n    else:\n        return (n + 1) // 2 + ((n - 1) / n) * (k - 1) * calculate(n, k - 1)\n\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    #read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    #compute the expected score\n    expectedScore = 0\n    for i in range(1, n + 1):\n        #compute the probability of rolling i\n        probability = 1 / float(n)\n        \n        #compute the expected score of rolling i\n        score = i\n        \n        #if we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n + 1):\n                #compute the probability of rolling j\n                probability *= 1 / float(n)\n                \n                #compute the expected score of rolling j\n                score += j\n        \n        #add the expected score of this roll to the total expected score\n        expectedScore += probability * score\n    \n    #print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\n'''\nn, k = map(int, input().split())\n'''\ndef solve(n, k):\n    if k == 0: return 0\n    elif k == 1: return (n + 1) // 2\n    else: return (solve(n, k - 1) + n) // 2\n'''\nprint(solve(n, k))'''\n", "\n\ndef get_expected_value(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected_value(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected_value(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n/2) + get_expected(n, k-1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef run(inp):\n    n, k = [int(x) for x in inp.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0\n", "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) ** 6\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n", "\n\nimport sys\n\ndef main():\n    print(\"hello world\")\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / k) * (1.0 / n) * (1.0 / k) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "#!/usr/bin/env python\n\nimport os\nimport sys\nimport string\nimport random\n\ndef random_string(size):\n    chars = string.ascii_uppercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(size))\n\ndef create_file(name, size):\n    with open(name, 'w') as f:\n        f.write(random_string(size))\n\ndef main():\n    if len(sys.argv) < 3:\n        print \"Usage: {0} <file_name> <file_size>\".format(sys.argv[0])\n        sys.exit(1)\n\n    name = sys.argv[1]\n    size = int(sys.argv[2])\n\n    create_file(name, size)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 1:\n        return n // 2\n    if n == 1:\n        return 1\n    return (n // 2) + get_expected(n, k-1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Die, k-times - https://open.kattis.com/problems/diehard3\n\nfrom math import factorial\n\n\ndef n_choose_k(n, k):\n    return factorial(n) / (factorial(n-k) * factorial(k))\n\n\ndef expected_value(n, k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "\n\nimport sys, math\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * ((n + 1) / 2.0)\n", "\nimport sys, math\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 3)\n    1.875\n    >>> solve(6, 2)\n    4.25\n    \"\"\"\n    res = 0\n    for i in xrange(1, k+1):\n        res += i * math.pow(1.0 / n, 6)\n    return res * n\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\n\n# Die, k-times.\n\nfrom math import factorial\n\n\ndef n_choose_k(n, k):\n    return factorial(n) / (factorial(n - k) * factorial(k))\n\n\ndef expected_value(n, k):\n    if k == 1:\n        return (n + 1) / 2\n    else:\n        return ((n + 1) / 2) * (1 - n_choose_k(n, k) / n_choose_k(n + k - 1, k)) + expected_value(n, k - 1)\n\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n, k))\n", "import sys\n# import sys\n\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n + 1):\n        # Compute the probability of rolling i\n        probability = 1 / float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n + 1):\n                # Compute the probability of rolling j\n                probability *= 1 / float(n)\n\n                # Compute the expected score of rolling j\n                score += j\n\n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability * score\n\n    # Print the expected score\n    print(expectedScore)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n / 2\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k - 1) / (n ** k)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\n\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n", "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)//2\n    else:\n        return (n+1)//2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n", "\n\n#The Chocolate Feast - https://open.kattis.com/problems/chocolatefeast\n\nn = int(input())\nfor i in range(n):\n    n,c,m = [int(x) for x in input().split()]\n    \n", "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n, k))\n\n\ndef calculate(n, k):\n    if k == 1:\n        return float(n + 1) / 2\n    else:\n        return float(n + 1) / 2 + (float(n - 1) / n) * (k - 1) * calculate(n, k - 1)\n\n\nmain()\n", "\nn, k = map(int, input().split())\n\ndef solve(n, k, acc = 0):\n    if k == 0:\n        return acc\n    elif k == 1:\n        return (n + acc) // 2\n    else:\n        return solve(n // 2, k - 1, n % 2 + acc)\n\nprint(solve(n, k))\n", "\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n", "import sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i\n        score = i\n\n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j\n                score += j\n\n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n\n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected_value(n, k):\n    if k == 1:\n        return n / 2\n    if n == 1:\n        return 1\n    return (n / 2) + get_expected_value(n, k - 1)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected_value(n, k))\n\n\nif __name__ == '__main__':\n    main()\n"]