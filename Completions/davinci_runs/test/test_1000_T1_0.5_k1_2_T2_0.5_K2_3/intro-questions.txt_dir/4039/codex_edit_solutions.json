["\n\nimport sys\n\ndef main():\n    a, b = map(int, input().split())\n\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    b = []\n    for i in range(m):\n        a1, b1 = map(int, input().split())\n        a.append(a1)\n        b.append(b1)\n\n    print(n, m)\n    print(a)\n    print(b)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print(\"Hello World\")\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "from collections import deque\nimport sys\n\n\ndef main():\n    n, m = map(int, input().split())\n    maze = []\n    for _ in range(n):\n        maze.append(list(input()))\n\n    visited = [[False] * m for _ in range(n)]\n    q = deque()\n    q.append((0, 0))\n    visited[0][0] = True\n\n    while q:\n        x, y = q.popleft()\n        if x == n - 1 and y == m - 1:\n            print(\"Yes\")\n            sys.exit(0)\n        if x + 1 < n and not visited[x + 1][y] and maze[x + 1][y] == '.':\n            visited[x + 1][y] = True\n            q.append((x + 1, y))\n        if y + 1 < m and not visited[x][y + 1] and maze[x][y + 1] == '.':\n            visited[x][y + 1] = True\n            q.append((x, y + 1))\n        if x - 1 >= 0 and not visited[x - 1][y] and maze[x - 1][y] == '.':\n            visited[x - 1][y] = True\n            q.append((x - 1, y))\n        if y - 1 >= 0 and not visited[x][y - 1] and maze[x][y - 1] == '.':\n            visited[x][y - 1] = True\n            q.append((x, y - 1))\n\n    print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * m\n    b = [0] * m\n    for i in range(m):\n        a1, b1 = map(int, input().split())\n        a[i] = a1\n        b[i] = b1\n\n    print(a)\n    print(b)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    print(\"hello\")\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\nfrom collections import deque\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    maze = []\n    for _ in range(n):\n        maze.append(list(input()))\n\n    visited = [[False] * m for _ in range(n)]\n    q = deque()\n    q.append((0, 0))\n    visited[0][0] = True\n\n    while q:\n        x, y = q.popleft()\n        if x == n - 1 and y == m - 1:\n            print(\"Yes\")\n            sys.exit(0)\n        if x + 1 < n and not visited[x + 1][y] and maze[x + 1][y] == '.':\n            visited[x + 1][y] = True\n            q.append((x + 1, y))\n        if y + 1 < m and not visited[x][y + 1] and maze[x][y + 1] == '.':\n            visited[x][y + 1] = True\n            q.append((x, y + 1))\n        if x - 1 >= 0 and not visited[x - 1][y] and maze[x - 1][y] == '.':\n            visited[x - 1][y] = True\n            q.append((x - 1, y))\n        if y - 1 >= 0 and not visited[x][y - 1] and maze[x][y - 1] == '.':\n            visited[x][y - 1] = True\n            q.append((x, y - 1))\n\n    print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    print(\"Hello\")\n\nif __name__ == \"__main__\":\n    main()\n", "from collections import deque\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    maze = []\n    for _ in range(n):\n        maze.append(list(input()))\n\n    visited = [[False] * m for _ in range(n)]\n    q = deque()\n    q.append([0, 0])\n    visited[0][0] = True\n\n    while q:\n        x, y = q.popleft()\n        if x == n - 1 and y == m - 1:\n            print(\"Yes\")\n            sys.exit(0)\n        if x + 1 < n and not visited[x + 1][y] and maze[x + 1][y] == '.':\n            visited[x + 1][y] = True\n            q.append([x + 1, y])\n        if y + 1 < m and not visited[x][y + 1] and maze[x][y + 1] == '.':\n            visited[x][y + 1] = True\n            q.append([x, y + 1])\n        if x - 1 >= 0 and not visited[x - 1][y] and maze[x - 1][y] == '.':\n            visited[x - 1][y] = True\n            q.append([x - 1, y])\n        if y - 1 >= 0 and not visited[x][y - 1] and maze[x][y - 1] == '.':\n            visited[x][y - 1] = True\n            q.append([x, y - 1])\n\n    print(\"No\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, input().split())))\n\n    projects.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        if projects[i][0] > r:\n            print(\"NO\")\n            sys.exit()\n        r += projects[i][1]\n        if r < 0:\n            print(\"NO\")\n            sys.exit()\n\n    print(\"YES\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\n    print(\"Hello\")\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n    print(\"Hello\") \nif __name__ == \"__main__\":\n    main()\n"]