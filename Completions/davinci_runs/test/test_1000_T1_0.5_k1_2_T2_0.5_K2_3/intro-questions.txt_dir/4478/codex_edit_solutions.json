["\nimport sys\nimport math\n\ndef main():\n    n = int(input())\n    seqs = []\n    for _ in range(n):\n        seqs.append([int(x) for x in input().split()])\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n    if n == 2:\n        if sums[0] == sums[1]:\n            print(\"YES\")\n            print(\"1 1\")\n            print(\"2 1\")\n            sys.exit(0)\n        for i in range(len(seqs[0])):\n            for j in range(len(seqs[1])):\n                if sums[0] + seqs[1][j] - seqs[0][i] == sums[1] + seqs[0][i] - seqs[1][j]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(i+1))\n                    print(\"2 {}\".format(j+1))\n                    sys.exit(0)\n        print(\"NO\")\n        sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            if sums[i] == sums[j]:\n                print(\"YES\")\n                print(\"{} 1\".format(i+1))\n                print(\"{} 1\".format(j+1))\n                sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            for k in range(len(seqs[i])):\n                for l in range(len(seqs[j])):\n                    if sums[i] + seqs[j][l] - seqs[i][k] == sums[j] + seqs[i][k] - seqs[j][l]:\n                        print(\"YES\")\n                        print(\"{} {}\".format(i+1, k+1))\n                        print(\"{} {}\".format(j+1, l+1))\n                        sys.exit(0)\n    print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(input())\n    seqs = []\n    for _ in range(n):\n        seqs.append([int(x) for x in input().split()])\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n    if n == 2:\n        if sums[0] == sums[1]:\n            print(\"YES\")\n            print(\"1 1\\n2 1\")\n            sys.exit(0)\n        for i in range(len(seqs[0])):\n            for j in range(len(seqs[1])):\n                if sums[0] + seqs[1][j] - seqs[0][i] == sums[1] + seqs[0][i] - seqs[1][j]:\n                    print(\"YES\")\n                    print(\"1 {}\\n2 {}\".format(i+1, j+1))\n                    sys.exit(0)\n        print(\"NO\")\n        sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            if sums[i] == sums[j]:\n                print(\"YES\")\n                print(\"{} 1\\n{} 1\".format(i+1, j+1))\n                sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            for k in range(len(seqs[i])):\n                for l in range(len(seqs[j])):\n                    if sums[i] + seqs[j][l] - seqs[i][k] == sums[j] + seqs[i][k] - seqs[j][l]:\n                        print(\"YES\")\n                        print(\"{} {}\\n{} {}\".format(i+1, k+1, j+1, l+1))\n                        sys.exit(0)\n    print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n## Solution\n\nThe problem can be solved in *O(k * n)* time and *O(k)* memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable *s*.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we're currently iterating over in a variable *t*.\n\nIf there exists such a sequence *i* and such an element *x* that the sum *t* equals to the sum of the elements of the *i*-th sequence without the element with index *x*, then we've found the answer. Otherwise, we have to save the sum *t* for the current sequence *i*.\n\nWe can store the sums for the previous sequences in a hash table. We'll store the sum of the elements of the *i*-th sequence without the element with index *x* as a key, and the pair *(i, x)* as a value.\n\nIf we get the sum *t* as a key in the hash table, then we've found the answer. Otherwise, we have to update the hash table by adding the sum *t* as a key and the pair *(i, x)* as a value.\n\nIf we've found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\n```python\n\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n```\n", "\n\n# Solution\n\n\"\"\"\nThe problem can be solved in $O(k \\cdot n)$ time and $O(k)$ memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable `s`.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we're currently iterating over in a variable `t`.\n\nIf there exists such a sequence `i` and such an element `x` that the sum `t` equals to the sum of the elements of the `i`-th sequence without the element with index `x`, then we've found the answer. Otherwise, we have to save the sum `t` for the current sequence `i`.\n\nWe can store the sums for the previous sequences in a hash table. We'll store the sum of the elements of the `i`-th sequence without the element with index `x` as a key, and the pair `(i, x)` as a value.\n\nIf we get the sum `t` as a key in the hash table, then we've found the answer. Otherwise, we have to update the hash table by adding the sum `t` as a key and the pair `(i, x)` as a value.\n\nIf we've found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n", "\n\n# Solution\n\n\"\"\"\nThe problem can be solved in $O(k \\cdot n)$ time and $O(k)$ memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable $s$.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we are currently iterating over in a variable $t$. If there exists such a sequence $i$ and such an element $x$ that the sum $t$ equals to the sum of the elements of the $i$-th sequence without the element with index $x$, then we found the answer. Otherwise, we have to save the sum $t$ for the current sequence $i$.\n\nWe can store the sums for the previous sequences in a hash table. We will store the sum of the elements of the $i$-th sequence without the element with index $x$ as a key, and the pair $(i, x)$ as a value. If we get the sum $t$ as a key in the hash table, then we found the answer. Otherwise, we have to update the hash table by adding the sum $t$ as a key and the pair $(i, x)$ as a value. If we found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n", "\nimport sys\n\ndef main():\n    k = int(input())\n    seqs = []\n    for _ in range(k):\n        seqs.append([int(x) for x in input().split()])\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n    if k == 2:\n        if sums[0] == sums[1]:\n            print(\"YES\")\n            print(\"1 1\")\n            print(\"2 1\")\n            sys.exit(0)\n        for i in range(len(seqs[0]) - 1):\n            for j in range(i+1, len(seqs[0])):\n                if sums[0] + seqs[1][0] - seqs[0][j] == sums[1] + seqs[0][j] - seqs[1][0]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(j+1))\n                    print(\"2 1\")\n                    sys.exit(0)\n                if sums[0] + seqs[1][0] - seqs[0][i] == sums[1] + seqs[0][i] - seqs[1][0]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(i+1))\n                    print(\"2 1\")\n                    sys.exit(0)\n        print(\"NO\")\n        sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            if sums[i] == sums[j]:\n                print(\"YES\")\n                print(\"{} 1\".format(i+1))\n                print(\"{} 1\".format(j+1))\n                sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            for k in range(len(seqs[i]) - 1):\n                for l in range(k+1, len(seqs[j])):\n                    if sums[i] + seqs[j][l] - seqs[i][k] == sums[j] + seqs[i][k] - seqs[j][l]:\n                        print(\"YES\")\n                        print(\"{} {}\".format(i+1, k+1))\n                        print(\"{} {}\".format(j+1, l+1))\n                        sys.exit(0)\n    print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution\n\n\"\"\"\nThe problem can be solved in O(k*n) time and O(k) memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable s.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we are currently iterating over in a variable t.\n\nIf there exists such a sequence i and such an element x that the sum t equals to the sum of the elements of the i-th sequence without the element with index x, then we found the answer. Otherwise, we have to save the sum t for the current sequence i.\n\nWe can store the sums for the previous sequences in a hash table. We will store the sum of the elements of the i-th sequence without the element with index x as a key, and the pair (i, x) as a value.\n\nIf we get the sum t as a key in the hash table, then we found the answer. Otherwise, we have to update the hash table by adding the sum t as a key and the pair (i, x) as a value.\n\nIf we found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n", "\n\n# Solution\n\n\"\"\"\nThe problem can be solved in $O(k \\cdot n)$ time and $O(k)$ memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable $s$.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we are currently iterating over in a variable $t$.\n\nIf there exists such a sequence $i$ and such an element $x$ that the sum $t$ equals to the sum of the elements of the $i$-th sequence without the element with index $x$, then we found the answer. Otherwise, we have to save the sum $t$ for the current sequence $i$.\n\nWe can store the sums for the previous sequences in a hash table. We will store the sum of the elements of the $i$-th sequence without the element with index $x$ as a key, and the pair $(i, x)$ as a value.\n\nIf we get the sum $t$ as a key in the hash table, then we found the answer. Otherwise, we have to update the hash table by adding the sum $t$ as a key and the pair $(i, x)$ as a value.\n\nIf we found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n", "import sys\n\ndef main():\n    k = int(input())\n    seqs = []\n    for _ in range(k):\n        seqs.append([int(x) for x in input().split()])\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n    if k == 2:\n        if sums[0] == sums[1]:\n            print(\"YES\")\n            print(\"1 1\")\n            print(\"2 1\")\n            sys.exit(0)\n        for i in range(len(seqs[0]) - 1):\n            for j in range(i+1, len(seqs[0])):\n                if sums[0] + seqs[1][0] - seqs[0][j] == sums[1] + seqs[0][j] - seqs[1][0]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(j+1))\n                    print(\"2 1\")\n                    sys.exit(0)\n                if sums[0] + seqs[1][0] - seqs[0][i] == sums[1] + seqs[0][i] - seqs[1][0]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(i+1))\n                    print(\"2 1\")\n                    sys.exit(0)\n        print(\"NO\")\n        sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            if sums[i] == sums[j]:\n                print(\"YES\")\n                print(\"{} 1\".format(i+1))\n                print(\"{} 1\".format(j+1))\n                sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            for k in range(len(seqs[i])):\n                for l in range(len(seqs[j])):\n                    if sums[i] + seqs[j][l] - seqs[i][k] == sums[j] + seqs[i][k] - seqs[j][l]:\n                        print(\"YES\")\n                        print(\"{} {}\".format(i+1, k+1))\n                        print(\"{} {}\".format(j+1, l+1))\n                        sys.exit(0)\n    print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    k = int(input())\n    seqs = []\n    for _ in range(k):\n        seqs.append([int(x) for x in input().split()])\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n    if k == 2:\n        if sums[0] == sums[1]:\n            print(\"YES\")\n            print(\"1 1\")  # print 1st element of 1st sequence\n            print(\"2 1\")  # print 1st element of 2nd sequence\n            sys.exit(0)\n        for i in range(len(seqs[0])):\n            for j in range(len(seqs[1])):\n                if sums[0] + seqs[1][j] - seqs[0][i] == sums[1] + seqs[0][i] - seqs[1][j]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(i+1))  # print ith element of 1st sequence\n                    print(\"2 {}\".format(j+1))\n                    sys.exit(0)\n        print(\"NO\")\n        sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            if sums[i] == sums[j]:\n                print(\"YES\")\n                print(\"{} 1\".format(i+1))  # print 1st element of ith sequence\n                print(\"{} 1\".format(j+1))\n                sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            for k in range(len(seqs[i])):\n                for l in range(len(seqs[j])):\n                    if sums[i] + seqs[j][l] - seqs[i][k] == sums[j] + seqs[i][k] - seqs[j][l]:\n                        print(\"YES\")\n                        print(\"{} {}\".format(i+1, k+1))  # print kth element of ith sequence\n                        print(\"{} {}\".format(j+1, l+1))\n                        sys.exit(0)\n    print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "\n\"\"\"\n# Solution\n\n\"\"\"\nThe problem can be solved in $O(k \\cdot n)$ time and $O(k)$ memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable $s$.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we're currently iterating over in a variable $t$.\n\nIf there exists such a sequence $i$ and such an element $x$ that the sum $t$ equals to the sum of the elements of the $i$-th sequence without the element with index $x$, then we've found the answer. Otherwise, we have to save the sum $t$ for the current sequence $i$.\n\nWe can store the sums for the previous sequences in a hash table. We'll store the sum of the elements of the $i$-th sequence without the element with index $x$ as a key, and the pair $(i, x)$ as a value.\n\nIf we get the sum $t$ as a key in the hash table, then we've found the answer. Otherwise, we have to update the hash table by adding the sum $t$ as a key and the pair $(i, x)$ as a value.\n\nIf we've found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\"\"\"\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n", "\n\nimport sys\nimport math\n\ndef main():\n    k = int(input())\n    seqs = []\n    for _ in range(k):\n        seqs.append([int(x) for x in input().split()])\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n    if k == 2:\n        if sums[0] == sums[1]:\n            print(\"YES\")\n            print(\"1 1\")  # print 1st element of 1st sequence\n            print(\"2 1\")  # print 1st element of 2nd sequence\n            sys.exit(0)\n        for i in range(len(seqs[0])):\n            for j in range(len(seqs[1])):\n                if sums[0] + seqs[1][j] - seqs[0][i] == sums[1] + seqs[0][i] - seqs[1][j]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(i+1))  # print i+1th element of 1st sequence\n                    print(\"2 {}\".format(j+1))\n                    sys.exit(0)\n        print(\"NO\")\n        sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            if sums[i] == sums[j]:\n                print(\"YES\")\n                print(\"{} 1\".format(i+1))  # print 1st element of i+1th sequence\n                print(\"{} 1\".format(j+1))\n                sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            for k in range(len(seqs[i])):\n                for l in range(len(seqs[j])):\n                    if sums[i] + seqs[j][l] - seqs[i][k] == sums[j] + seqs[i][k] - seqs[j][l]:\n                        print(\"YES\")\n                        print(\"{} {}\".format(i+1, k+1))  # print k+1th element of i+1th sequence\n                        print(\"{} {}\".format(j+1, l+1))\n                        sys.exit(0)\n    print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Solution\n\n\"\"\"\nThe problem can be solved in $O(k \\cdot n)$ time and $O(k)$ memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable $s$.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we are currently iterating over in a variable $t$.\n\nIf there exists such a sequence $i$ and such an element $x$ that the sum $t$ equals to the sum of the elements of the $i$-th sequence without the element with index $x$, then we found the answer. Otherwise, we have to save the sum $t$ for the current sequence $i$.\n\nWe can store the sums for the previous sequences in a hash table. We will store the sum of the elements of the $i$-th sequence without the element with index $x$ as a key, and the pair $(i, x)$ as a value.\n\nIf we get the sum $t$ as a key in the hash table, then we found the answer. Otherwise, we have to update the hash table by adding the sum $t$ as a key and the pair $(i, x)$ as a value.\n\nIf we found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\nk = int(input())  # number of sequences\n\nsums = []  # sums of elements of sequences without one element\n\nfor i in range(k):\n    n = int(input())  # length of the i-th sequence\n    a = list(map(int, input().split()))  # the i-th sequence\n    s = sum(a)  # sum of elements of the i-th sequence\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sums:\n            print(\"YES\")\n            print(sums.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sums.append(t)\n\nprint(\"NO\")\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    seqs = []\n    for _ in range(n):\n        seqs.append([int(x) for x in input().split()])\n    sums = []\n    for seq in seqs:\n        sums.append(sum(seq))\n    if n == 2:\n        if sums[0] == sums[1]:\n            print(\"YES\")\n            print(\"1 1\")\n            print(\"2 1\")\n            sys.exit(0)\n        for i in range(len(seqs[0])):\n            for j in range(len(seqs[1])):\n                if sums[0] + seqs[1][j] - seqs[0][i] == sums[1] + seqs[0][i] - seqs[1][j]:\n                    print(\"YES\")\n                    print(\"1 {}\".format(i+1))\n                    print(\"2 {}\".format(j+1))\n                    sys.exit(0)\n        print(\"NO\")\n        sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            if sums[i] == sums[j]:\n                print(\"YES\")\n                print(\"{} 1\".format(i+1))\n                print(\"{} 1\".format(j+1))\n                sys.exit(0)\n    for i in range(len(seqs)):\n        for j in range(i+1, len(seqs)):\n            for k in range(len(seqs[i])):\n                for l in range(len(seqs[j])):\n                    if sums[i] + seqs[j][l] - seqs[i][k] == sums[j] + seqs[i][k] - seqs[j][l]:\n                        print(\"YES\")\n                        print(\"{} {}\".format(i+1, k+1))\n                        print(\"{} {}\".format(j+1, l+1))\n                        sys.exit(0)\n    print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "# Solution\n\n\n\n\n\"\"\"\nThe problem can be solved in $O(k \\cdot n)$ time and $O(k)$ memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable $s$.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we are currently iterating over in a variable $t$.\n\nIf there exists such a sequence $i$ and such an element $x$ that the sum $t$ equals to the sum of the elements of the $i$-th sequence without the element with index $x$, then we found the answer. Otherwise, we have to save the sum $t$ for the current sequence $i$.\n\nWe can store the sums for the previous sequences in a hash table. We will store the sum of the elements of the $i$-th sequence without the element with index $x$ as a key, and the pair $(i, x)$ as a value.\n\nIf we get the sum $t$ as a key in the hash table, then we found the answer. Otherwise, we have to update the hash table by adding the sum $t$ as a key and the pair $(i, x)$ as a value.\n\nIf we found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n", "import sys\n\ndef main(): \n    print(\"Hello World\") \n  \nif __name__==\"__main__\": \n    main() \n", "\n\n# Solution\n\n\"\"\"\nThe problem can be solved in O(k * n) time and O(k) memory.\n\nLet's iterate over the sequences one by one. Let's store the sum of the elements of the current sequence in a variable s.\n\nLet's iterate over the elements of the current sequence one by one. Let's store the sum of the elements of the current sequence without the element we are currently iterating over in a variable t.\n\nIf there exists such a sequence i and such an element x that the sum t equals to the sum of the elements of the i-th sequence without the element with index x, then we found the answer. Otherwise, we have to save the sum t for the current sequence i.\n\nWe can store the sums for the previous sequences in a hash table. We will store the sum of the elements of the i-th sequence without the element with index x as a key, and the pair (i, x) as a value.\n\nIf we get the sum t as a key in the hash table, then we found the answer. Otherwise, we have to update the hash table by adding the sum t as a key and the pair (i, x) as a value.\n\nIf we found the answer, we have to print it. Otherwise, we have to print \"NO\".\n\"\"\"\n\nk = int(input())\n\nsum_ = []\n\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    t = s\n    for j in range(n):\n        t -= a[j]\n        if t in sum_:\n            print(\"YES\")\n            print(sum_.index(t) + 1, j + 1)\n            print(i + 1, j + 1)\n            exit()\n        sum_.append(t)\n\nprint(\"NO\")\n"]