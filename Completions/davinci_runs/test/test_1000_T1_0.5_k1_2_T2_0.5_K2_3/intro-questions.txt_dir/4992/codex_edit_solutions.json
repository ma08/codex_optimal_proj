["\n\nimport sys\n\ndef main():\n    sys.stdin = open('exam.in', 'r')\n    sys.stdout = open('exam.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order.\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams_in_pile = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room.\n        if exams_in_pile < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile.\n        exams_in_pile += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room.\n    if exams_in_pile != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main(problem_name):\n    sys.stdin = open(problem_name + '.in', 'r')\n    sys.stdout = open(problem_name + '.out', 'w')\n\n    n = int(input())\n    s = raw_input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n", "\n\nfrom itertools import permutations\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    print(n)\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))  # Add 1 to the index to make it 1-indexed\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # check if the order is safe\n    # if it is, return the order\n    # if not, return None\n    students = rooms[:] # copy the list\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1]) # add the students to the pile\n        else:\n            if len(pile) < students[i-1]: # check if there is enough room\n                return None\n            else:\n                pile.extend(students[i-1]) # add the students to the pile\n    return order\n\ndef main(n, rooms):\n    # generate all possible room orders\n    # check if any are safe\n    # if so, print one\n    # if not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1): # iterate through the possible first rooms\n        for j in range(1, n+1): # iterate through the possible second rooms\n            for k in range(1, n+1): # iterate through the possible third rooms\n                for l in range(1, n+1): # iterate through the possible fourth rooms\n                    order = [i, j, k, l] # create a new possible order\n                    if len(set(order)) == n:\n                        orders.append(order) # add the order to the list of possible orders\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order) # check if the order is safe\n            break\n    if safe_order: # if there is a safe order, print it\n        print(' '.join(map(str, safe_order)))\n    else: # otherwise, print impossible\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip()) # read the number of rooms\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()] # read the number of students in each room\n    main(n, rooms)\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print an order\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend([students[0]])\n        else:\n            if len(pile) < students[i-1] - 1:\n                return None\n            else:\n                pile.extend([students[i-1] - 1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n", "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    # The first room will always be the last room in the order.\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile.\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):        \n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return        \n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return        \n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room_ in rooms:\n            room_.add_exam_needed(-room_.get_num_students())\n            room_.add_exam(-room_.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i - 1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\n\nif __name__ == \"__main__\":\n    main('exam')\n", "\n\n# A simple problem of combinatorics.\n\nfrom itertools import permutations\n\nn = int(input())   # number of students\n\ns = list(map(int, input().split()))   # number of books each student owns\n\nfor order in permutations(range(1, n+1)):\n    books = 0\n    for i in order:  # for each student in the order\n        books += s[i-1]\n        if books > sum(s):\n            break\n    else:\n        print(\" \".join(map(str, order)))\n        break\n\nprint(\"impossible\")\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1: # 1 1\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2: # 1 2\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1: # 2 1\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2: # 2 2\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1: # 1 1 1\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2: # 1 1 2\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1: # 1 2 1\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2: # 1 2 2\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1: # 2 1 1\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2: # 2 1 2\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1: # 2 2 1\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2: # 2 2 2\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# This is a combinatorial problem.\n# The only problem is that the solution is not necessarily unique,\n# so we need to check for uniqueness.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1:])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print an order\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\") \n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2: \n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n", "\n\n# n = int(input())\n# s = list(map(int, input().split()))\n#\n# def is_safe(order):\n#     students = 0\n#     for i in order:\n#         students += s[i-1]\n#         if students > sum(s):\n#             return False\n#     return True\n#\n# def is_safe_unique(order):\n#     students = 0\n#     for i in order:\n#         students += s[i-1]\n#         if students > sum(s):\n#             return False\n#         if students == sum(s):\n#             return True\n#     return True\n#\n# for order in itertools.permutations(range(1, n+1)):\n#     if is_safe(order):\n#         print(\" \".join(map(str, order)))\n#         break\n# else:\n#     print(\"impossible\")\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: -x[1])\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exams(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exams_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exams_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exams(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exams_needed(-room.get_num_students())\n            room.add_exams(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # check if the order is safe\n    # if it is, return the order\n    # if not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # generate all possible room orders\n    # check if any are safe\n    # if so, print one\n    # if not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(rooms[0])\n        else:\n            if len(pile) < rooms[i-1] - 1:\n                return None\n            else:\n                pile.extend(rooms[i-1] - 1)\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] is 1 and rooms[1] is 1:\n            print(\"1 2\")\n        elif rooms[0] is 1 and rooms[1] is 2:\n            print(\"2 1\")\n        elif rooms[0] is 2 and rooms[1] is 1:\n            print(\"1 2\")\n        elif rooms[0] is 2 and rooms[1] is 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 3:\n        if rooms[0] is 1 and rooms[1] is 1 and rooms[2] is 1:\n            print(\"1 2 3\")\n        elif rooms[0] is 1 and rooms[1] is 1 and rooms[2] is 2:\n            print(\"2 3 1\")\n        elif rooms[0] is 1 and rooms[1] is 2 and rooms[2] is 1:\n            print(\"1 3 2\")\n        elif rooms[0] is 1 and rooms[1] is 2 and rooms[2] is 2:\n            print(\"2 1 3\")\n        elif rooms[0] is 2 and rooms[1] is 1 and rooms[2] is 1:\n            print(\"1 2 3\")\n        elif rooms[0] is 2 and rooms[1] is 1 and rooms[2] is 2:\n            print(\"1 3 2\")\n        elif rooms[0] is 2 and rooms[1] is 2 and rooms[2] is 1:\n            print(\"1 2 3\")\n        elif rooms[0] is 2 and rooms[1] is 2 and rooms[2] is 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Sale order.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] > sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Safe order\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\"\")\n        for i in range(2, n+1):\n            print(\"\", i, end=\"\")\n        print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n#This is a combinatorics problem\n#The only problem is that the solution is not necessarily unique\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n", "\n\nimport itertools\n\nn = int(input()) #number of folders\ns = list(map(int, input().split())) #number of pages in each folder\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1: #1 1\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2: #1 2\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1: #2 1\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2: #2 2\n            print(\"impossible\") \n        else: #error\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1: #1 1 1\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2: #1 1 2\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1: #1 2 1\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2: #1 2 2\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1: #2 1 1\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2: #2 1 2\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1: #2 2 1\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2: #2 2 2\n            print(\"impossible\")\n        else: #error\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\nimport itertools\n\nn = int(input())\n\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n", "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible') \n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:])\n        else:\n            if len(pile) < students[i-1:]:\n                return None\n            else:\n                pile.extend(students[i-1:])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print an order\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n", "\n\ndef main():\n    \"\"\"\n    Sale order.\n    \"\"\"\n    n = int(input())\n    s_list = list(map(int, input().split()))\n    if s_list[0] < sum(s_list[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for j in range(2, n+1):\n            print(j, end=\" \")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())  # number of students\n    rooms = [int(x) for x in sys.stdin.readline().split()]  # capacity of each room\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:  # if the total capacity of the rooms is not enough for the students\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)  # sort the rooms by their capacity\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\") \n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order.\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile.\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1): \n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n", "#This is a combinatorial problem.\n\n\n#The only problem is that the solution is not necessarily unique, so we need to check for uniqueness.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n", "\n\n# This is a combinatorics problem\n# The only problem is that the solution is not necessarily unique\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n", "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order\n    # If not, return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[0:students[0]])\n        else:\n            if len(pile) < students[i-1] - 1:\n                return None\n            else:\n                pile.extend(students[i-1:students[i-1] - 1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one\n    # If not, print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n", "\n\ndef main():\n    \"\"\"\n    Safe order\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))[1:]\n    if s[0] < sum(s[1:]) - s[0]:\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exams(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exams_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exams_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exams(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exams_needed(-room.get_num_students())\n            room.add_exams(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1])\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main(problem_name):\n    sys.stdin = open(problem_name + '.in', 'r')\n    sys.stdout = open(problem_name + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_students):\n        self.num_students += num_students\n\n    def add_exam_needed(self, num_students_needed):\n        self.num_students_needed += num_students_needed\n\n    def get_num_students_needed(self):\n        return self.num_students_needed\n\n    def get_num_students(self):\n        return self.num_students\n\n    def get_id(self):\n        return self.id\n\ndef get_num_students_needed(rooms):\n    num_students_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_students_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_students_needed):\n        self.num_students_needed += num_students_needed\n\n    def get_num_students_needed(self):\n        return self.num_students_needed\n\n    def get_num_students(self):\n        return self.num_students\n\n    def get_id(self):\n        return self.id\n\ndef get_num_students_needed(rooms):\n    num_students_needed = 0\n    for room in rooms:\n        num_students_needed += room.get_num_students_needed()\n    return num_students_needed\n\ndef get_num_students(rooms):\n    num_students = 0\n    for room in rooms:\n        num_students += room.get_num_students()\n    return num_students\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_students_needed(rooms) == get_num_students(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_students_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_students_needed() > room.get_num_students():\n            break\n        for room in rooms:\n            room.add_students_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_students = 0\n        self.num_students_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_students)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_students):\n        self.num_students += num_students\n\n    def add_exam_needed(self, num_students_needed):\n        self.num_students_needed += num_students_needed\n\n    def get_num_students_needed(self):\n        return self.num_students_needed\n\n    def get_num_students(self):\n        return self.num_students\n\n    def get_id(self):\n        return self.id\n\ndef get_num_students_needed(rooms):\n    num_students_needed = 0\n    for room in rooms:\n        num_students_needed += room.get_num_students_needed()\n    return num_students_needed\n\ndef get_num_students(rooms):\n    num_students = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()] # [1, 1]\n    # print(rooms)\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            # print(\"1 2\")\n            print(\"1 2\")\n            # print(\"2 1\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            # print(\"1 2\")\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            # print(\"Impossible\")\n            print(\"Impossible\")\n        else:\n            # print(\"Impossible\")\n            print(\"Impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n            # print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n            # print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n            # print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n            # print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n            # print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n            # print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n            # print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"Impossible\")\n            # print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n            # print(\"Impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n            # print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n            # print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n            # print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n            # print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n            # print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n            # print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n            # print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n            # print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n            # print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n            # print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n            # print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n            # print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n            # print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n            # print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n            # print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"Impossible\")\n            # print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n            # print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n        # print(\"Impossible\")\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# This is a combinatorics problem. \n# The only problem is that the solution is not necessarily unique. \n \nimport itertools\n \nn = int(input())\n \ns = list(map(int, input().split()))\n \ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n \n \ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n \n \nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n", "\n\ndef main():\n    \"\"\"\n    Safe order\n    \"\"\"\n    n = int(input())\n    lis = list(map(int, input().split()))\n    if lis[0] < sum(lis[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('exam')\n", "\n\nimport sys\n\ndef main():\n    # sys.stdin = open('exam.in', 'r')\n    # sys.stdout = open('exam.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main()\n"]