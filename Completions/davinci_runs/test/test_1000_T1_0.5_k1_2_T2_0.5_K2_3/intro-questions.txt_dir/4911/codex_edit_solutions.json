["\n\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport os\nimport sys\n\ndef read_lines(path):\n    with open(path) as f:\n        return [line.strip() for line in f.readlines()]\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_lines = int(next(stdin))\n    lines = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_lines)]\n    n_commands = int(next(stdin)) + 1\n    commands = list(islice(stdin, n_commands))[1:]\n    print(' '.join(attributes))\n    for command in commands:\n        lines.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(line[attr] for attr in attributes) for line in lines))\n        print()\n\nmain()\n", "\n\ndef stable_sort(files, attribute):\n    return sorted(files, key=lambda x: x.split()[attribute])\n\ndef main():\n    attributes = input().split()\n    num_files = int(input())\n    files = []\n    for i in range(num_files):\n        files.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(files, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nprint(\"Hello World\")\n\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute], reverse=True)\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef stable_sort(lines, attribute):\n    return sorted(lines, key=lambda x: x[attribute])\n\ndef main():\n    attributes = input().split()\n    attributes_index = {attributes[i]: i for i in range(len(attributes))}\n    num_songs = int(input())\n    lines = []\n    for i in range(num_songs):\n        lines.append(input().split())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input().split())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for line in stable_sort(lines, attributes_index[sort]):\n            print(' '.join(line))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#-----main-----#\ndef main():\n    #read input#\n    attr_list = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split())\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort#\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print#\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#-----Main-----#\ndef main():\n    #Read input#\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #Sort#\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #Print#\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_index = attr.index(attr_sort) + 1\n        songs.sort(key=lambda x: x[attr_sort_index])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\nfrom itertools import islice\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs), end='')\n        print()\n\nmain()\n", "\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute], reverse=True)\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input().strip())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "from sys import stdin, stdout\n\n\n\n    songs = []\ndef main():\n    n = int(stdin.readline())\n    for i in range(n):\n        songs.append(stdin.readline().strip())\n    songs.sort()\n    for song in songs:\n        stdout.write(song + '\\n')\n\n\nmain()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin).rstrip())\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin).rstrip())\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes), end='\\n\\n')\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs), end='\\n\\n')\n\nmain()\n", "#!/usr/bin/env python3\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes).strip()\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes).strip())\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"main.\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_index = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_index])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n\nmain()\n", "\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute) - 1):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(stdin)[:n_commands]\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs))\n        print()\n\nmain()\n", "\ndef stable_sort(lines, attribute):\n    return sorted(lines, key=lambda x: x.split()[attribute])\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    lines = []\n    for _ in range(num_songs):\n        lines.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for _ in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for line in stable_sort(lines, attributes.index(sort)):\n            print(line)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs), end='\\n')\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song), end='\\n')\n\nmain()\n", "\n\ndef sort_by_attr(attr, songs, attr_sort):\n    attr_sort_idx = attr.index(attr_sort)\n    songs.sort(key=lambda x: x[attr_sort_idx])\n    print(*attr)\n    for song in songs:\n        print(*song)\n    print()\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        sort_by_attr(attr, songs, attr_sort)\n\nmain()\n", "\n\nimport os\nimport sys\n\ndef read_lines(path):\n    with open(path) as f:\n        return [line.strip() for line in f.readlines()]\n\nif __name__ == \"__main__\":\n    main()\n", "from itertools import islice\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin))\n    songs = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_songs)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr] for attr in attributes) for song in songs))\n        print()\n\nmain()\n", "# Copyright (C) 2019 The Raphielscape Company LLC.\n#\n# Licensed under the Raphielscape Public License, Version 1.b (the \"License\");\n# you may not use this file except in compliance with the License.\n#\n\nimport sys\n\nclass Song:\n    def __init__(self, attr):\n        self.attr = attr\n    def __repr__(self):\n        return ' '.join(self.attr)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attr[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nclass Song:\n    def __init__(self, attributes): \n        self.attributes = attributes\n    def __repr__(self):\n        return '   '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __str__(self):\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        sys.stdout.write(' '.join(attributes) + '\\n')\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''main function'''\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split() # \uc18d\uc131\ub4e4\uc744 \uc785\ub825\ubc1b\ub294\ub2e4.\n    songs = []\n    for i in range(int(sys.stdin.readline())): # \uc18d\uc131\ub4e4\uc758 \uac1c\uc218\ub9cc\ud07c \ubc18\ubcf5\ud55c\ub2e4.\n        songs.append(sys.stdin.readline().rstrip().split()) # \uc785\ub825\ubc1b\uc740 \ub178\ub798\ub4e4\uc758 \uc18d\uc131\ub4e4\uc744 \uacf5\ubc31\uc73c\ub85c \ubd84\ub9ac\ud558\uc5ec songs \ub9ac\uc2a4\ud2b8\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n    for i in range(int(sys.stdin.readline())): # \uc815\ub82c\ud560 \uc18d\uc131\uc758 \uac1c\uc218\ub9cc\ud07c \ubc18\ubcf5\ud55c\ub2e4.\n        attribute = sys.stdin.readline().rstrip() # \uc815\ub82c\ud560 \uc18d\uc131\uc744 \uc785\ub825\ubc1b\ub294\ub2e4.\n        songs.sort(key=lambda x: x[attributes.index(attribute)]) # \uc18d\uc131\uc744 \uae30\uc900\uc73c\ub85c songs \ub9ac\uc2a4\ud2b8\ub97c \uc815\ub82c\ud55c\ub2e4.\n        print(' '.join(attributes)) # \uc18d\uc131\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4.\n        for song in songs:\n            print(' '.join(song)) # \uc815\ub82c\ub41c \ub178\ub798\ub4e4\uc758 \uc18d\uc131\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4.\n        print() # \uad6c\ubd84\uc744 \uc704\ud574 \ube48 \uc904\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\nmain()\n", "# Copyright (C) 2019 The Raphielscape Company LLC.\n#\n# Licensed under the Raphielscape Public License, Version 1.b (the \"License\");\n# you may not use this file except in compliance with the License.\n#\n\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes).strip()\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes).strip())\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split() # \uc18d\uc131\ub4e4\uc744 \uc785\ub825\ubc1b\ub294\ub2e4.\n    songs = []\n    for i in range(int(sys.stdin.readline())): # \uc18d\uc131\ub4e4\uc758 \uac1c\uc218\ub9cc\ud07c \ubc18\ubcf5\ud55c\ub2e4.\n        songs.append(sys.stdin.readline().rstrip().split()) # \uc785\ub825\ubc1b\uc740 \ub178\ub798\ub4e4\uc758 \uc18d\uc131\ub4e4\uc744 \uacf5\ubc31\uc73c\ub85c \ubd84\ub9ac\ud558\uc5ec songs \ub9ac\uc2a4\ud2b8\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n    for i in range(int(sys.stdin.readline())): # \uc815\ub82c\ud560 \uc18d\uc131\uc758 \uac1c\uc218\ub9cc\ud07c \ubc18\ubcf5\ud55c\ub2e4.\n        attribute = sys.stdin.readline().rstrip() # \uc815\ub82c\ud560 \uc18d\uc131\uc744 \uc785\ub825\ubc1b\ub294\ub2e4.\n        songs.sort(key=lambda x: x[attributes.index(attribute)]) # \uc18d\uc131\uc744 \uae30\uc900\uc73c\ub85c songs \ub9ac\uc2a4\ud2b8\ub97c \uc815\ub82c\ud55c\ub2e4.\n        print(' '.join(attributes)) # \uc18d\uc131\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4.\n        for song in songs:\n            print(' '.join(song)) # \uc815\ub82c\ub41c \ub178\ub798\ub4e4\uc758 \uc18d\uc131\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4.\n        print() # \uad6c\ubd84\uc744 \uc704\ud574 \ube48 \uc904\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return '   '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute], reverse=True)\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print('   '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for i in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for i in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\ndef main():\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for __ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for __ in range(n):\n        attr_sort = input()\n        attr_sort_idx = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_idx])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\n#-----Main-----\ndef main():\n    #Read input\n    attr_list = raw_input().split(\" \")\n    num_songs = int(raw_input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(raw_input().split(\" \"))\n    num_commands = int(raw_input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(raw_input())\n    #Sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #Print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----main-----\ndef main():\n    # read inputs\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    # sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        # print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef stable_sort(files, attribute):\n    return sorted(files, key=lambda x: x.split()[attribute], reverse=True)\n\ndef main():\n    attributes = input().split()\n    num_files = int(input())\n    files = []\n    for i in range(num_files):\n        files.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(files, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef stable_sort(lines, attribute_index):\n    return sorted(lines, key=lambda x: x.split()[attribute_index])\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    lines = []\n    for i in range(num_songs):\n        lines.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for line in stable_sort(lines, attributes.index(sort)):\n            print(line)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x[attribute])\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = [[] for i in range(num_songs)]\n    for i in range(num_songs):\n        songs[i] = input().split()\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n    for i in range(num_songs):\n        for j in range(len(attributes)):\n            if attributes[j] == 'artist':\n                songs[i][j] = songs[i][j].lower()\n            else:\n                songs[i][j] = int(songs[i][j])\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(' '.join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# -----main-----\ndef main():\n    #read inputs\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    \"\"\"main function\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\ndef stable_sort(files, attribute, attributes):\n    return sorted(files, key=lambda x: x.split()[attributes.index(attribute)])\n\ndef main():\n    attributes = input().split()\n    num_files = int(input())\n    files = []\n    for i in range(num_files):\n        files.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes))\n        for song in stable_sort(files, sort, attributes):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "from sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline().strip())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline().strip())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs))\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\nimport sys\n\nclass Song:\n    def __init__(self, *attributes):\n        self.attributes = list(attributes)\n    def __repr__(self):\n        return '\\t'.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute], reverse=True)\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(*sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print('\\t'.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_lines = int(next(stdin))\n    lines = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_lines)]\n    n_commands = int(next(stdin)) + 1\n    commands = list(islice(stdin, n_commands))[1:]\n    print(' '.join(attributes))\n    for command in commands:\n        lines.sort(key=itemgetter(command.rstrip().split()[0]))\n        print('\\n'.join(' '.join(line[attr] for attr in attributes) for line in lines))\n        print()\n\nmain()\n", "from sys import stdin\n\n\ndef main():\n    n = int(stdin.readline())\n    while n != 0:\n        songs = []\n        for i in range(n):\n            songs.append(stdin.readline().strip())\n        songs.sort()\n        for song in songs:\n            print(song)\n        n = int(stdin.readline())\n        if n != 0:\n            print()\n\n\nmain()\n", "\n\ndef main():\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort_index = attr.index(input())\n        songs.sort(key=lambda x: x[attr_sort_index])  # sort by attribute\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\nimport os\nimport sys\n\ndef read_lines(path):\n    with open(path) as f:\n        return [line.strip() for line in f.readlines()]\n", "\n#-----main-----#\ndef main():\n    #read input#\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort#\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print#\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----Main-----\ndef main():\n    #Read input\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #Sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #Print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "# Copyright (C) 2019 The Raphielscape Company LLC.\n#\n# Licensed under the Raphielscape Public License, Version 1.b (the \"License\");\n# you may not use this file except in compliance with the License.\n#\n\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return \" \".join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(\" \".join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print(\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_songs = int(next(stdin).rstrip())\n    songs = [dict(zip(attributes, next(stdin).rstrip().split()))\n             for _ in range(n_songs)]\n    n_commands = int(next(stdin).rstrip())\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        songs.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(song[attr]\n                                 for attr in attributes)\n                        for song in songs))\n        print()\n\nmain()\n", "#!/usr/bin/env python3\n\n#-----main-----\ndef main():\n    #read inputs\n    attr_list = input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"main function\"\"\"\n    attr = input().split() # \u0e2d\u0e48\u0e32\u0e19\u0e08\u0e32\u0e01\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e41\u0e23\u0e01\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split()) # \u0e2d\u0e48\u0e32\u0e19\u0e08\u0e32\u0e01\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e17\u0e35\u0e48 2 \u0e16\u0e36\u0e07\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e17\u0e35\u0e48 m+1\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_in = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_in])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "def main():\n    print(\"Hello World\")\n\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport itertools\nimport operator\n\ndef main():\n    attributes = next(sys.stdin).rstrip().split()\n    n_lines = int(next(sys.stdin))\n    lines = [dict(zip(attributes, next(sys.stdin).rstrip().split())) for _ in range(n_lines)]\n    n_commands = int(next(sys.stdin)) + 1\n    commands = list(itertools.islice(sys.stdin, n_commands))[1:]\n    print(commands)\n    print(' '.join(attributes))\n    for command in commands:\n        lines.sort(key=operator.itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(line[attr] for attr in attributes) for line in lines))\n        print()\n\nmain()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split(',')\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split(','))\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_idx = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_idx])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n"]