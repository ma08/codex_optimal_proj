["import sys\nimport math\n\ndef main():\n    data = sys.stdin.readline().strip()\n    counter = 1\n    for i in range(len(data)):\n        if data[i] == data[i+1]:\n            counter += 1\n        else:\n            counter += 1\n    print(counter)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\n# Solution\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S and set the state to 1\n                print('S', end='')\n                state = 1\n            else:\n                # If the state is not 0, output an H and set the state to 0\n                print('H', end='')\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K and set the state to 1\n                print('K', end='')\n                state = 1\n            else:\n                # If the state is not 0, output an H and set the state to 0\n                print('H', end='')\n                state = 0\n        else:\n            # If the character is an L, output an H and set the state to 0\n            print('H', end='')\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = []\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves.append('C')\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves.append(counter(monster_moves[0]))\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves.append(counter(monster_moves[0]))\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == 'R':\n        return 'S'\n    elif move == 'B':\n        return 'K'\n    else:\n        return 'H'\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    moves = input().upper()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i+1] == moves[i+2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\" or moves[i] == \"P\" or moves[i] == \"S\":\n            result += \"S\"\n            i += 2\n        elif moves[i] == \"B\" or moves[i] == \"K\" or moves[i] == \"G\":\n            result += \"K\"\n            i += 2\n        elif moves[i] == \"L\" or moves[i] == \"H\" or moves[i] == \"W\":\n            result += \"H\"\n            i += 1\n    print(result)\n\nmain()\n", "# https://atcoder.jp/contests/abc124/tasks/abc124_c\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S')\n        elif moves[i] == 'B':\n            result.append('K')\n        else:\n            result.append('H')\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = ''\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += 'C'\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == 'R':\n        return 'S'\n    elif move == 'B':\n        return 'K'\n    else:\n        return 'H'\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef _input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = _input()\n    res = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            res.append('S')\n        elif moves[i] == 'B':\n            res.append('K')\n        else:\n            res.append('H')\n    for i in range(len(moves)-2):\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            res[i] = 'C'\n            res[i+1] = 'C'\n            res[i+2] = 'C'\n    print(''.join(res))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip() #strip() method returns a copy of the string in which all chars have been stripped from the beginning and the end of the string.\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\n# This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n\n# This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        move_counts[move] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\n# This solution is O(n) in time and O(3) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += 'C'\n    return mech_moves\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = \"\"\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += \"C\"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == \"R\":\n        return \"S\"\n    elif move == \"B\":\n        return \"K\"\n    else:\n        return \"H\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    moves = input().upper()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\" or moves[i] == \"P\":\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\" or moves[i] == \"K\":\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\" or moves[i] == \"H\":\n            result += \"H\"\n            i += 1\n    print(result)\n\nmain()\n", "#!/usr/bin/env python\nimport sys\nimport math\n\ndef main():\n    data = sys.stdin.readline().strip()\n    counter = 0\n    for i in range(len(data)):\n        if i == len(data)-1:\n            counter += 1\n        elif i == len(data)-2:\n            if data[i] == data[i+1]:\n                counter += 1\n            else:\n                counter += 2\n        else:\n            if data[i] == data[i+1] and data[i+1] == data[i+2]:\n                counter += 1\n            else:\n                counter += 2\n    print(counter)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\nimport sys\nimport math\n\ndef main(infile):\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = \"\"\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += \"C\"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == \"R\":\n        return \"S\"\n    elif move == \"B\":\n        return \"K\"\n    else:\n        return \"H\"\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n", "\n\n# Solution\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline().strip()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S and set the state to 1\n                print('S', end='')\n                state = 1\n            else:\n                # If the state is not 0, output an H and set the state to 0\n                print('H', end='')\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K and set the state to 1\n                print('K', end='')\n                state = 1\n            else:\n                # If the state is not 0, output an H and set the state to 0\n                print('H', end='')\n                state = 0\n    else:\n        if c == 'L':\n            # If the character is an L, output an H and set the state to 0\n            print('H', end='')\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n\n#This solution is O(n^2) in time and O(n^2) in space.\ndef matrix_bombing_plan(m):\n    matrix_sum = 0\n    for row in m:\n        for col in row:\n            matrix_sum += col\n    matrix_damage = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            matrix_damage += matrix_bombing_plan_helper(m, i, j)\n    return matrix_damage - matrix_sum\n\ndef matrix_bombing_plan_helper(m, i, j):\n    bomb_power = m[i][j]\n    matrix_sum = 0\n    for row in range(len(m)):\n        for col in range(len(m[row])):\n            if row == i and col == j:\n                matrix_sum += m[row][col] - bomb_power\n            elif row == i and col != j:\n                matrix_sum += max(m[row][col] - bomb_power, 0)\n            elif row != i and col == j:\n                matrix_sum += max(m[row][col] - bomb_power, 0)\n            else:\n                matrix_sum += m[row][col]\n    return matrix_sum\n\nimport sys\ndef main():\n    m = []\n    for line in sys.stdin:\n        m.append(list(map(int, line.split())))\n    print(matrix_bombing_plan(m))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()[1:]\n    mech_moves = \"\"\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += \"C\"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0:2])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0:2])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(moves):\n    if moves == \"RR\":\n        return \"P\"\n    elif moves == \"BB\":\n        return \"D\"\n    elif moves == \"SS\":\n        return \"B\"\n    elif moves == \"KK\":\n        return \"J\"\n    elif moves == \"HH\":\n        return \"G\"\n    elif moves[1] == \"R\":\n        return \"S\"\n    elif moves[1] == \"B\":\n        return \"K\"\n    else:\n        return \"H\"\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ndef main():\n    for line in sys.stdin:\n        data = line.strip()\n        counter = 0\n        for i in range(len(data)):\n            if i == len(data)-1:\n                counter += 1\n            elif i == len(data)-2:\n                if data[i] == data[i+1]:\n                    counter += 1\n                else:\n                    counter += 2\n            else:\n                if data[i] == data[i+1] and data[i+1] == data[i+2]:\n                    counter += 1\n                else:\n                    counter += 2\n        print(counter)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S and set the state to 1\n                print('S', end='')\n                state = 1\n            else:\n                # If the state is not 0, output an H and set the state to 0\n                print('H', end='')\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K and set the state to 1\n                print('K', end='')\n                state = 1\n            else:\n                # If the state is not 0, output an H and set the state to 0\n                print('H', end='')\n                state = 0\n        else:\n            # If the character is an L, output an H and set the state to 0\n            print('H', end='')\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n\nimport sys\nimport math\n\ndef main():\n    monster_moves = sys.stdin.readline().strip() # read the monster moves\n    mech_moves = ''\n    while len(monster_moves) > 0: # while there are monster moves\n        if len(monster_moves) >= 3: # if there are at least 3 monster moves\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += 'C' # counter with a C\n                monster_moves = monster_moves[3:] # remove the first 3 monster moves\n            else:\n                mech_moves += counter(monster_moves[0]) # counter with a single move\n                monster_moves = monster_moves[1:] # remove the first monster move\n        else:\n            mech_moves += counter(monster_moves[0]) # counter with a single move\n            monster_moves = monster_moves[1:] # remove the first monster move\n    print(mech_moves) # print the mech moves\n\ndef counter(move): # returns the required mech move to counter the monster move\n    if move == 'R':\n        return 'S'\n    elif move == 'B':\n        return 'K'\n    else:\n        return 'H'\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S')\n        elif moves[i] == 'B':\n            result.append('K')\n        else:\n            result.append('H')\n    for i in range(len(moves)-2):\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L' and result[i] != 'C' and result[i+1] != 'C' and result[i+2] != 'C': # RBxL\n            result[i] = 'C'\n            result[i+1] = 'C'\n            result[i+2] = 'C'\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    moves = input()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\" or moves[i] == \"P\" or moves[i] == \"C\":\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\" or moves[i] == \"K\":\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\" or moves[i] == \"H\":\n            result += \"H\"\n            i += 1\n    print(result)\n\nmain()\n", "\n\n#This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = ''\n    combo_breaker_stack = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_stack) == 3:\n            combo_breaker_stack.pop(0)\n        combo_breaker_stack.append(move)\n        if len(combo_breaker_stack) == 3 and \\\n           combo_breaker_stack[0] != combo_breaker_stack[1] and \\\n           combo_breaker_stack[1] != combo_breaker_stack[2] and \\\n           combo_breaker_stack[0] != combo_breaker_stack[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n#This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = ''\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    data = sys.stdin.readline().strip()\n    counter = 0\n    for i in range(len(data)):\n        if i == len(data)-1:\n            counter += 1\n        elif i == len(data)-2 and data[i] == data[i+1]:\n            counter += 1\n        elif i == len(data)-2 and data[i] != data[i+1]:\n            counter += 2\n        elif i == len(data)-3 and data[i] == data[i+1] and data[i+1] == data[i+2]:\n            counter += 1\n        elif i == len(data)-3 and data[i] == data[i+1] and data[i+1] != data[i+2]:\n            counter += 2\n        elif i == len(data)-3 and data[i] != data[i+1] and data[i+1] == data[i+2]:\n            counter += 2\n        elif i == len(data)-3 and data[i] != data[i+1] and data[i+1] != data[i+2]:\n            counter += 3\n        elif i == len(data)-4 and data[i] == data[i+1] and data[i+1] == data[i+2] and data[i+2] == data[i+3]:\n            counter += 1\n        elif i == len(data)-4 and data[i] == data[i+1] and data[i+1] == data[i+2] and data[i+2] != data[i+3]:\n            counter += 2\n        elif i == len(data)-4 and data[i] == data[i+1] and data[i+1] != data[i+2] and data[i+2] == data[i+3]:\n            counter += 2\n        elif i == len(data)-4 and data[i] == data[i+1] and data[i+1] != data[i+2] and data[i+2] != data[i+3]:\n            counter += 3\n        elif i == len(data)-4 and data[i] != data[i+1] and data[i+1] == data[i+2] and data[i+2] == data[i+3]:\n            counter += 2\n        elif i == len(data)-4 and data[i] != data[i+1] and data[i+1] == data[i+2] and data[i+2] != data[i+3]:\n            counter += 3\n        elif i == len(data)-4 and data[i] != data[i+1] and data[i+1] != data[i+2] and data[i+2] == data[i+3]:\n            counter += 3\n        elif i == len(data)-4 and data[i] != data[i+1] and data[i+1] != data[i+2] and data[i+2] != data[i+3]:\n            counter += 4\n        elif data[i] == data[i+1] and data[i+1] == data[i+2]:\n            counter += 1\n        elif data[i] == data[i+1] and data[i+1] != data[i+2]:\n            counter += 2\n        elif data[i] != data[i+1] and data[i+1] == data[i+2]:\n            counter += 2\n        elif data[i] != data[i+1] and data[i+1] != data[i+2]:\n            counter += 3\n        else:\n            counter += 2\n        '''\n        if data[i] == data[i+1] and data[i+1] == data[i+2]:\n            counter += 1\n        elif data[i] == data[i+1] and data[i+1] != data[i+2]:\n            counter += 2\n        elif data[i] != data[i+1] and data[i+1] == data[i+2]:\n            counter += 2\n        elif data[i] != data[i+1] and data[i+1] != data[i+2]:\n            if data[i] == data[i+1]:\n                counter += 1\n            else:\n                counter += 2\n        else:\n            if data[i] == data[i+1] and data[i+1] == data[i+2]:\n                counter += 1\n            else:\n                counter += 2\n        '''\n    print(counter)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    res = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            res.append('S')\n        elif moves[i] == 'B':\n            res.append('K')\n        else:\n            res.append('H')\n    for i in range(len(moves) - 2):\n        if moves[i] == 'R' and moves[i + 1] == 'B' and moves[i + 2] == 'L':\n            res[i] = 'C'\n            res[i + 1] = 'C'\n            res[i + 2] = 'C'\n    print(''.join(res))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n# Solution\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n# Solution\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n\n\ndef main():\n    print(\"hello\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'R' and i < len(moves) - 2:\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B' and i < len(moves) - 2:\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L' and i < len(moves) - 2:\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the first line of input\n    line = sys.stdin.readline()\n\n    # Initialize the state machine\n    state = 0\n\n    # Parse the input string\n    for c in line:\n        # If the character is a valid move, process it\n        if c == 'R' or c == 'B' or c == 'L':\n            # If the character is a valid move, process it\n            if c == 'R':\n                # If the character is an R, check if the state is 0\n                if state == 0:\n                    # If the state is 0, output an S\n                    print('S', end='')\n                    # Set the state to 1\n                    state = 1\n                else:\n                    # If the state is not 0, output an H\n                    print('H', end='')\n                    # Set the state to 0\n                    state = 0\n            elif c == 'B':\n                # If the character is a B, check if the state is 0\n                if state == 0:\n                    # If the state is 0, output a K\n                    print('K', end='')\n                    # Set the state to 1\n                    state = 1\n                else:\n                    # If the state is not 0, output an H\n                    print('H', end='')\n                    # Set the state to 0\n                    state = 0\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n\n# Solution\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machine\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n\n# Print a newline\nprint()\n", "\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S')\n        elif moves[i] == 'B':\n            result.append('K')\n        else:\n            result.append('H')\n    for i in range(len(moves)-2):\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L' and result[i] != 'C' and result[i+1] != 'C' and result[i+2] != 'C' and i+2 < len(result):\n            result[i] = 'C'\n            result[i+1] = 'C'\n            result[i+2] = 'C'\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    data = sys.stdin.readline().strip()\n    counter = 0\n    for i in range(len(data)):\n        if i == len(data)-1:\n            counter += 1\n        elif i == len(data)-2:\n            if data[i] == data[i+1]:\n                counter += 1\n            else:\n                counter += 2\n        else:\n            if data[i] == data[i+1] or data[i+1] == data[i+2]:\n                counter += 1\n            else:\n                counter += 2\n    print(counter)\n\nif __name__ == \"__main__\":\n    main()\n", "# https://atcoder.jp/contests/abc124/tasks/abc124_c\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S')\n        elif moves[i] == 'B':\n            result.append('K')\n        else:\n            result.append('H')\n    for i in range(len(moves)-2): # \u30eb\u30fc\u30d7\u306e\u6700\u5f8c\u306b\u3042\u308b2\u6587\u5b57\u306f\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            result[i] = 'C'\n            result[i+1] = 'C'\n            result[i+2] = 'C'\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            result.append('S')\n        elif moves[i] == 'B':\n            result.append('K')\n        else:\n            result.append('H')\n    for i in range(len(moves)-2):\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L' and result[i] != 'C' and result[i+1] != 'C' and result[i+2] != 'C': #if it's not already a clap\n            result[i] = 'C'\n            result[i+1] = 'C'\n            result[i+2] = 'C'\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    data = sys.stdin.readline().strip().split()\n    counter = 0\n    for i in range(len(data[0])):\n        if i == len(data[0])-1:\n            if data[0][i] != data[1][i]:\n                counter += 1\n            else:\n                counter += 1\n        elif i == len(data[0])-2:\n            if data[0][i] == data[1][i] and data[0][i+1] == data[1][i+1]:\n                counter += 1\n            else:\n                counter += 2\n        else:\n            if data[0][i] == data[1][i] and data[0][i+1] == data[1][i+1] and data[0][i+2] == data[1][i+2]:\n                counter += 1\n            else:\n                counter += 2\n    print(counter)\n\nif __name__ == \"__main__\":\n    main()\n", "# https://atcoder.jp/contests/abc124/tasks/abc124_c\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = list(input())\n    result = []\n    for i in range(len(moves)):\n        if moves[i] == 'R' and i % 2 == 0:\n            result.append('S')\n        elif moves[i] == 'B' and i % 2 == 0:\n            result.append('K')\n        elif moves[i] == 'R' and i % 2 == 1:\n            result.append('K')\n        elif moves[i] == 'B' and i % 2 == 1:\n            result.append('H')\n    print(''.join(result))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    moves = input()\n    res = []\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            res.append('S')\n        elif moves[i] == 'B':\n            res.append('K')\n        else:\n            res.append('H')\n    for i in range(len(moves) - 2):\n        if moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            res[i] = 'C'\n            res[i+1] = 'C'\n            res[i+2] = 'C'\n    print(''.join(res))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# This solution is O(n) in time and O(n) in space.\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n# This solution is O(n) in time and O(1) in space.\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip().upper()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip()\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'R' and i+2 < len(moves):\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B' and i+2 < len(moves):\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L' and i+2 < len(moves):\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main(infile):\n    monster_moves = infile.readline().strip()\n    mech_moves = \"\"\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += \"C\"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == \"R\":\n        return \"S\"\n    elif move == \"B\":\n        return \"K\"\n    else:\n        return \"H\"\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n", "\n\nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n\n# Initialize the state machinee\nstate = 0\n\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L':\n        # If the character is a valid move, process it\n        if c == 'R':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n# Solution \nimport sys\n\n# Read the first line of input\nline = sys.stdin.readline()\n# Initialize the state machine\nstate = 0\n# Parse the input string\nfor c in line:\n    # Check if the character is a valid move\n    if c == 'R' or c == 'B' or c == 'L' or c == 'S' or c == 'H' or c == 'K':\n        # If the character is a valid move, process it\n        if c == 'R' or c == 'S':\n            # If the character is an R, check if the state is 0\n            if state == 0:\n                # If the state is 0, output an S\n                print('S', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        elif c == 'B' or c == 'K':\n            # If the character is a B, check if the state is 0\n            if state == 0:\n                # If the state is 0, output a K\n                print('K', end='')\n                # Set the state to 1\n                state = 1\n            else:\n                # If the state is not 0, output an H\n                print('H', end='')\n                # Set the state to 0\n                state = 0\n        else:\n            # If the character is an L, output an H\n            print('H', end='')\n            # Set the state to 0\n            state = 0\n    else:\n        # If the character is not a valid move, print an error and exit\n        print('Invalid move: ' + c)\n        exit(0)\n", "\n\ndef main():\n    moves = input()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\":\n            result += \"P\"\n            i += 1\n        elif moves[i] == \"B\":\n            result += \"B\"\n            i += 1\n        elif moves[i] == \"L\":\n            result += \"L\"\n            i += 1\n    print(result)\n\nmain()\n", "\nimport sys\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    mech_moves = \"\"\n    while len(monster_moves) > 0:\n        if len(monster_moves) >= 3:\n            if monster_moves[0] == monster_moves[1] and monster_moves[1] == monster_moves[2]:\n                mech_moves += \"C\"\n                monster_moves = monster_moves[3:]\n            else:\n                mech_moves += counter(monster_moves[0])\n                monster_moves = monster_moves[1:]\n        else:\n            mech_moves += counter(monster_moves[0])\n            monster_moves = monster_moves[1:]\n    print(mech_moves)\n\ndef counter(move):\n    if move == \"R\":\n        return \"S\"\n    elif move == \"B\":\n        return \"K\"\n    else:\n        return \"H\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# This solution is O(n) in time and O(n) in space.\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_queue = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_queue) == 3:\n            combo_breaker_queue.pop(0)\n        combo_breaker_queue.append(move)\n        if len(combo_breaker_queue) == 3 and \\\n           combo_breaker_queue[0] != combo_breaker_queue[1] and \\\n           combo_breaker_queue[1] != combo_breaker_queue[2] and \\\n           combo_breaker_queue[0] != combo_breaker_queue[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n# This solution is O(n) in time and O(1) in space.\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    moves = input().upper()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i+1] and moves[i+1] == moves[i+2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\" or moves[i] == \"P\":\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\" or moves[i] == \"K\":\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\" or moves[i] == \"H\":\n            result += \"H\"\n            i += 1\n    print(result)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip() #strip() method returns a copy of the string in which all chars have been stripped from the beginning and the end of the string\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        else:\n            i += 1\n    print(counter) \n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n# This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_stack = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_stack) == 3:\n            combo_breaker_stack.pop(0)\n        combo_breaker_stack.append(move)\n        if len(combo_breaker_stack) == 3 and \\\n           combo_breaker_stack[0] != combo_breaker_stack[1] and \\\n           combo_breaker_stack[1] != combo_breaker_stack[2] and \\\n           combo_breaker_stack[0] != combo_breaker_stack[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n\n# This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\n\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    moves = input()\n    result = \"\"\n    i = 0\n    while i < len(moves):  # while i is less than the length of the moves string\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\" or moves[i] == \"P\":  # if the move is either R or P\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\" or moves[i] == \"K\":  # if the move is either B or K\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\" or moves[i] == \"H\":  # if the move is either L or H\n            result += \"H\"\n            i += 1\n    print(result)\n\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    moves = lines[0].strip() #strip() method returns a copy of the string in which all chars have been stripped from the beginning and the end of the string\n    counter = ''\n    i = 0\n    while i < len(moves):\n        if moves[i] == 'R':\n            counter += 'S'\n        elif moves[i] == 'B':\n            counter += 'K'\n        elif moves[i] == 'L':\n            counter += 'H'\n        elif moves[i] == 'R' and moves[i+1] == 'R':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'B':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'L':\n            counter += 'S'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'R':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'B':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'B' and moves[i+1] == 'L':\n            counter += 'K'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'R':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'B':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'L' and moves[i+1] == 'L':\n            counter += 'H'\n            i += 1\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'R' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'R' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'R' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'B' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'B' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'B' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'R' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'L' and moves[i+1] == 'B' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'R':\n            counter += 'C'\n            i += 3\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'B':\n            counter += 'C'\n            i += 2\n        elif moves[i] == 'L' and moves[i+1] == 'L' and moves[i+2] == 'L':\n            counter += 'C'\n            i += 2\n        else:\n            i += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\n#This solution is O(n) in time and O(n) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    combo_breaker_stack = []\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n        elif move == 'B':\n            mech_moves += 'K'\n        elif move == 'L':\n            mech_moves += 'H'\n        if len(combo_breaker_stack) == 3:\n            combo_breaker_stack.pop(0)\n        combo_breaker_stack.append(move)\n        if len(combo_breaker_stack) == 3 and \\\n           combo_breaker_stack[0] != combo_breaker_stack[1] and \\\n           combo_breaker_stack[1] != combo_breaker_stack[2] and \\\n           combo_breaker_stack[0] != combo_breaker_stack[2]:\n            mech_moves += 'C'\n    return mech_moves\n\n#This solution is O(n) in time and O(1) in space\ndef mech_monster(monster_moves):\n    mech_moves = \"\"\n    move_counts = {'R': 0, 'B': 0, 'L': 0}\n    for move in monster_moves:\n        if move == 'R':\n            mech_moves += 'S'\n            move_counts['R'] += 1\n        elif move == 'B':\n            mech_moves += 'K'\n            move_counts['B'] += 1\n        elif move == 'L':\n            mech_moves += 'H'\n            move_counts['L'] += 1\n        if move_counts['R'] == 1 and \\\n           move_counts['B'] == 1 and \\\n           move_counts['L'] == 1:\n            mech_moves += 'C'\n            move_counts = {'R': 0, 'B': 0, 'L': 0}\n    return mech_moves\n\nimport sys\ndef main():\n    monster_moves = sys.stdin.readline().strip()\n    print(mech_monster(monster_moves))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    moves = input()\n    result = \"\"\n    i = 0\n    while i < len(moves):\n        if i + 2 < len(moves) and moves[i] == moves[i + 1] == moves[i + 2]:\n            result += \"C\"\n            i += 3\n        elif moves[i] == \"R\" or moves[i] == \"P\":\n            result += \"S\"\n            i += 1\n        elif moves[i] == \"B\" or moves[i] == \"K\":\n            result += \"K\"\n            i += 1\n        elif moves[i] == \"L\" or moves[i] == \"H\":\n            result += \"H\"\n            i += 1\n    print(result)\n\nmain()\n"]