["\nfrom math import sqrt\n\ndef area(a, b, c, d):  # area of trapezoid.\n    s = (a + b + c + d) / 2\n    return sqrt((s - a) * (s - b) * (s - c) * (s - d))\n\ndef main():\n    s = [int(x) for x in input().split()]  # input.\n    s.sort()  # sort input.\n    print(max(area(s[0], s[1], s[2], s[3]), area(s[0], s[1], s[2], s[0] + s[1] + s[2])))  # print answer.\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()]\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l])\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2\n    return ((s - a) * (s - b) * (s - c) * (s - d)) ** 0.5\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\ndef main():\n    n = int(input())\n    d = defaultdict(int)\n    for i in range(n):\n        s = input()\n        d[s] += 1\n    print(max(d.values()))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()]\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l])\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2\n    return (s - a) * (s - b) * (s - c) * (s - d) ** 0.5\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nfrom math import sqrt\n\ndef main():\n    s = [int(i) for i in sys.stdin.readline().split()]\n    s.sort()\n    a = s[0]\n    b = s[1]\n    c = s[2]\n    d = s[3]\n    if d > a+b+c:\n        print(0)\n        return\n    if d == a+b+c:\n        print(sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4.0)\n        return\n    if d > a+b:\n        print(0)\n        return\n    if d == a+b:\n        print(sqrt((a+b)*(a+b-c)*(a+b-d)*(c-a+b)*(d-a-b))/4.0)\n        return\n    if d > a+c:\n        print(0)\n        return\n    if d == a+c:\n        print(sqrt((a+c)*(a+c-b)*(a+c-d)*(b-a+c)*(d-a-c))/4.0)\n        return\n    if d > b+c:\n        print(0)\n        return\n    if d == b+c:\n        print(sqrt((b+c)*(b+c-a)*(b+c-d)*(a-b+c)*(d-b-c))/4.0)\n        return\n    if d > a:\n        print(0)\n        return\n    if d == a:\n        print(sqrt((a)*(a-b)*(a-c)*(a-d)*(b+c+d-a))/4.0)\n        return\n    if d > b:\n        print(0)\n        return\n    if d == b:\n        print(sqrt((b)*(b-a)*(b-c)*(b-d)*(a+c+d-b))/4.0)\n        return\n    if d > c:\n        print(0)\n        return\n    if d == c:\n        print(sqrt((c)*(c-a)*(c-b)*(c-d)*(a+b+d-c))/4.0)\n        return\n    if d > 0:\n        print(0)\n        return\n    if d == 0:\n        print(sqrt((a)*(b)*(c)*(d)*(a+b+c+d))/4.0)\n        return\n    else:\n        print(\"Error\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    s1, s2, s3, s4 = [int(x) for x in line.split()]\n    s = s1 + s2 + s3 + s4\n    print(s*(s-2*s1)*(s-2*s2)*(s-2*s3)*(s-2*s4)**(-0.5)\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()] # edges of quadrilateral\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l]) # area of quadrilateral\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2 # semiperimeter\n    return ((s - a) * (s - b) * (s - c) * (s - d)) ** 0.5 # Heron's formula\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nfrom math import sqrt\n\ndef main():\n    s = [int(i) for i in sys.stdin.readline().strip().split()]\n    s.sort()\n    a = s[0]\n    b = s[1]\n    c = s[2]\n    d = s[3]\n    if d > a + b + c:\n        print(0.0)\n    elif d == a + b + c:\n        print(sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / 4.0)\n    elif d > a + b:\n        print(0.0)\n    elif d == a + b:\n        print(sqrt((a + b) * (a + b - c) * (a + b - d) * (c - a + b) * (d - a - b)) / 4.0)\n    elif d > a + c:\n        print(0.0)\n    elif d == a + c:\n        print(sqrt((a + c) * (a + c - b) * (a + c - d) * (b - a + c) * (d - a - c)) / 4.0)\n    elif d > b + c:\n        print(0.0)\n    elif d == b + c:\n        print(sqrt((b + c) * (b + c - a) * (b + c - d) * (a - b + c) * (d - b - c)) / 4.0)\n    elif d > a:\n        print(0.0)\n    elif d == a:\n        print(sqrt((a) * (a - b) * (a - c) * (a - d) * (b + c + d - a)) / 4.0)\n    elif d > b:\n        print(0.0)\n    elif d == b:\n        print(sqrt((b) * (b - a) * (b - c) * (b - d) * (a + c + d - b)) / 4.0)\n    elif d > c:\n        print(0.0)\n    elif d == c:\n        print(sqrt((c) * (c - a) * (c - b) * (c - d) * (a + b + d - c)) / 4.0)\n    elif d > 0:\n        print(0.0)\n    elif d == 0:\n        print(sqrt((a) * (b) * (c) * (d) * (a + b + c + d)) / 4.0)\n    print(\"Error\")\n\n\nmain()\n", "\nimport sys\nfrom math import sqrt\n\ndef area(a, b, c, d):\n    s = (a + b + c + d) / 2.0\n    return sqrt((s - a) * (s - b) * (s - c) * (s - d))\n\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    print(area(a, b, c, d))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom math import sqrt\n\ndef area(a, b, c, d):  # area of trapezoid\n    s = (a + b + c + d) / 2\n    return sqrt((s - a) * (s - b) * (s - c) * (s - d))\n\ndef main():\n    s = [int(x) for x in input().split()]  # input\n    s.sort()  # sort input\n    print(max(area(s[0], s[1], s[2], s[3]),\n              area(s[0], s[1], s[2], s[0] + s[1] + s[2])))  # print answer\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom collections import Counter\n\ndef is_all_same(a):\n    return a[0] == a[1] == a[2] == a[3]\n\ndef max_product(a):\n    if is_all_same(a):\n        return a[0]**2\n    else:\n        return max(a[0]*a[1], a[2]*a[3])\n\ndef max_product_with_one_pair(a):\n    c = Counter(a)\n    # print(c)\n    for i in range(4):\n        if c[a[i]] == 2:\n            for j in range(4):\n                if j != i:\n                    return a[i]**2 * a[j]\n\ndef max_product_with_two_pair(a):\n    c = Counter(a)\n    # print(c)\n    for i in range(4):\n        if c[a[i]] == 2:\n            for j in range(4):\n                if j != i and c[a[j]] == 2:\n                    return a[i]**2 * a[j]**2\n\ndef max_product_with_three_pair(a):\n    c = Counter(a)\n    # print(c)\n    for i in range(4):\n        if c[a[i]] == 3:\n            for j in range(4):\n                if j != i and c[a[j]] == 2:\n                    return a[i]**3 * a[j]**2\n\n\ndef main():\n    a = list(map(int, input().split()))\n    a.sort()\n    # print(a)\n    print(max(max_product(a), max_product_with_one_pair(a), max_product_with_two_pair(a), max_product_with_three_pair(a)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#-----Function Definitions-----\ndef max_quadrilateral(sides):\n    \"\"\"\n    Given four side lengths, returns the maximum area of any quadrilateral that can be constructed using these lengths.\n    \"\"\"\n    # Sort the sides in descending order\n    sides.sort(reverse=True)\n    # Area = (s(s-a)(s-b)(s-c))^(1/2), where s = (a+b+c)/2\n    s = (sides[0] + sides[1] + sides[2] + sides[3])/2\n    area = (s*(s-sides[0])*(s-sides[1])*(s-sides[2])*(s-sides[3]))**(0.5)\n    return area\n\n#-----Main Program-----\nsides = list(map(float, input().split()))\nprint(max_quadrilateral(sides))\n", "\n\ndef main():\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[1] and a[2] == a[3]:\n        print(a[0]**2)\n    else:\n        print(max(a[0] * a[1], a[2] * a[3]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n\tsides = list(map(int, input().split()))\n\tsides.sort()\n\ts1, s2, s3, s4 = sides\n\n\t# Heron's formula\n\ts = (s1 + s2 + s3 + s4) / 2\n\tarea = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nfrom math import sqrt\n\ndef main():\n    s = [float(i) for i in sys.stdin.readline().strip().split()]\n    s.sort()\n    a = s[0]\n    b = s[1]\n    c = s[2]\n    d = s[3]\n    if d >= a+b+c:\n        if d == a+b+c:\n            print(sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4.0)\n            return\n        else:\n            print(0)\n            return\n    if d >= a+b:\n        if d == a+b:\n            print(sqrt((a+b)*(a+b-c)*(a+b-d)*(c-a+b)*(d-a-b))/4.0)\n            return\n        else:\n            print(0)\n            return\n    if d >= a+c:\n        if d == a+c:\n            print(sqrt((a+c)*(a+c-b)*(a+c-d)*(b-a+c)*(d-a-c))/4.0)\n            return\n        else:\n            print(0)\n            return\n    if d >= b+c:\n        if d == b+c:\n            print(sqrt((b+c)*(b+c-a)*(b+c-d)*(a-b+c)*(d-b-c))/4.0)\n            return\n        else:\n            print(0)\n            return\n    if d >= a:\n        if d == a:\n            print(sqrt((a)*(a-b)*(a-c)*(a-d)*(b+c+d-a))/4.0)\n            return\n        else:\n            print(0)\n            return\n    if d >= b:\n        if d == b:\n            print(sqrt((b)*(b-a)*(b-c)*(b-d)*(a+c+d-b))/4.0)\n            return\n        else:\n            print(0)\n            return\n    if d >= c:\n        if d == c:\n            print(sqrt((c)*(c-a)*(c-b)*(c-d)*(a+b+d-c))/4.0)\n            return\n        else:\n            print(0)\n            return\n    if d >= 0:\n        if d == 0:\n            print(sqrt((a)*(b)*(c)*(d)*(a+b+c+d))/4.0)\n            return\n        else:\n            print(0)\n            return\n\nmain()\n", "def main():\n    print(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    a1, a2, a3, a4 = [int(x) for x in line.split()]\n    s = a1 + a2 + a3 + a4\n    print(s * (s - 2 * a1) * (s - 2 * a2) * (s - 2 * a3) * (s - 2 * a4) ** (-0.5)) # wrong\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[1] == a[2] == a[3]:\n        print(a[0]**2)\n    else:\n        print(max(a[0]*a[1], a[2]*a[3]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nfrom math import sqrt\n\ndef area(a, b, c, d):\n    s = (a + b + c + d) / 2.0\n    return sqrt((s - a) * (s - b) * (s - c) * (s - d))\n\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    print(area(a, b, c, d), end=' ')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----Function Definitions-----\ndef max_quadrilateral(sides):\n    \"\"\"\n    Given four side lengths, returns the maximum area of any quadrilateral that can be constructed using these lengths.\n    \"\"\"\n    # Sort the sides in descending order\n    sides.sort(reverse=True)\n    # Area = (s(s-a)(s-b)(s-c))^(1/2), where s = (a+b+c)/2\n    s = (sides[0] + sides[1] + sides[2] + sides[3])/2\n    area = (s*(s-sides[0])*(s-sides[1])*(s-sides[2])*(s-sides[3]))**(0.5)\n    return area\n\n#-----Main Program-----\nsides = list(map(float, input().split()))\nprint(max_quadrilateral(sides))\n", "# https://open.kattis.com/problems/quadrant\n\nx = int(input())\ny = int(input())\n\nif x > 0 and y > 0:\n\tprint(1)\nelif x < 0 and y > 0:\n\tprint(2)\nelif x < 0 and y < 0:\n\tprint(3)\nelif x > 0 and y < 0:\n\tprint(4)\n", "\nimport math\n\ndef main():\n    sides = list(map(int, input().split()))\n    sides.sort()\n    s1, s2, s3, s4 = sides\n\n    # Heron's formula \n    s = (s1 + s2 + s3 + s4) / 2\n    area = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n    print(area)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    s1, s2, s3, s4 = [int(x) for x in line.split()]\n    s = s1 + s2 + s3 + s4\n    print(s*(s-2*s1)*(s-2*s2)*(s-2*s3)*(s-2*s4)**(-0.5))\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    sides = list(map(int, input().split()))\n    sides.sort()\n    s1, s2, s3, s4 = sides\n\n    # Heron's formula.\n    s = (s1 + s2 + s3 + s4) / 2\n    area = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n    print(area)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    s = list(map(int, input().split()))\n    s.sort()\n    if s[0] == s[1] == s[2] == s[3]:\n        print(s[0] * s[0])\n    else:\n        print(max(s[0] * s[1], s[2] * s[3]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport math\n\ndef main():\n\tsides = list(map(int, input().split()))\n\tsides.sort()\n\ts1, s2, s3, s4 = sides\n\n\t# Heron's formula.\n\ts = (s1 + s2 + s3 + s4) / 2\n\n\tarea = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()] # edges of quadrilateral\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l]) # area of quadrilateral\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2 # semiperimeter\n    return (s - a) * (s - b) * (s - c) * (s - d) ** 0.5 # Heron's formula, square root\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-----Function Definition-----\ndef max_quadrilateral(sides):\n    \"\"\"\n    Given four side lengths, returns the maximum area of any quadrilateral that can be constructed using these side lengths.\n    \"\"\"\n    # Sort the sides in descending order\n    sides.sort(reverse=True)\n    # Area = (s(s-a)(s-b)(s-c))^(1/2), where s = (a+b+c)/2\n    s = (sides[0] + sides[1] + sides[2] + sides[3])/2\n    area = (s*(s-sides[0])*(s-sides[1])*(s-sides[2])*(s-sides[3]))**(1.0/2.0)\n    return area\n\n#-----Main Program-----\nsides = list(map(float, input().split()))\nprint(max_quadrilateral(sides))\n", "import sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    s1, s2, s3, s4 = [int(x) for x in line.split()]\n    s = s1 + s2 + s3 + s4\n    print(s * (s - 2 * s1) * (s - 2 * s2) * (s - 2 * s3) * (s - 2 * s4) ** (-0.5))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()]\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l])\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2\n    return ((s - a) * (s - b) * (s - c) * (s - d)) ** 0.5\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    s1, s2, s3, s4 = [int(x) for x in line.split()]\n    s = s1 + s2 + s3 + s4\n    print(int(s*(s-2*s1)*(s-2*s2)*(s-2*s3)*(s-2*s4)**(-0.5)))\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = list(map(int, input().split()))\n    n.sort()\n    if n[0] == n[1] == n[2] == n[3]:\n        print(n[0]**2)\n    else:\n        print(max(n[0] * n[1], n[2] * n[3]))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport math\n\ndef main():\n\tsides = list(map(int, input().split()))\n\tsides.sort()\n\ts1, s2, s3, s4 = sides\n\n\t# Heron's formula\n\ts = (s1 + s2 + s3 + s4) / 2\n\tarea = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()\n", "\nfrom math import sqrt\n\ndef area(a, b, c, d):  # area of trapezoid\n    s = (a + b + c + d) / 2\n    return sqrt((s - a) * (s - b) * (s - c) * (s - d))\n\ndef main():\n    s = [int(x) for x in input().split()]  # input\n    s.sort()  # sort input\n    print(max(area(s[0], s[1], s[2], s[3]),  # print answer\n              area(s[0], s[1], s[2], s[0] + s[1] + s[2])))\n\nif __name__ == \"__main__\":\n    main()\n", "from math import sqrt\n\n\ndef area(a, b, c):\n    s = (a + b + c) / 2\n    return sqrt((s - a) * (s - b) * (s - c))\n\ndef main():\n    s = [int(x) for x in input().split()]\n    s.sort()\n    print(max(area(s[0], s[1], s[2]), area(s[0], s[1], s[0] + s[1])))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nfrom math import sqrt\n\ndef main():\n    s = [int(i) for i in sys.stdin.readline().strip().split()]\n    s.sort()\n    a = s[0]\n    b = s[1]\n    c = s[2]\n    d = s[3]\n    # print(s)\n    if d > a+b+c:\n        print(0)\n        return\n    if d == a+b+c:\n        print(sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4.0)\n        return\n    if d > a+b:\n        print(0)\n        return\n    if d == a+b:\n        print(sqrt((a+b)*(a+b-c)*(a+b-d)*(c-a+b)*(d-a-b))/4.0)\n        return\n    if d > a+c:\n        print(0)\n        return\n    if d == a+c:\n        print(sqrt((a+c)*(a+c-b)*(a+c-d)*(b-a+c)*(d-a-c))/4.0)\n        return\n    if d > b+c:\n        print(0)\n        return\n    if d == b+c:\n        print(sqrt((b+c)*(b+c-a)*(b+c-d)*(a-b+c)*(d-b-c))/4)\n        return\n    if d > a:\n        print(0)\n        return\n    if d == a:\n        print(sqrt((a)*(a-b)*(a-c)*(a-d)*(b+c+d-a))/4)\n        return\n    if d > b:\n        print(0)\n        return\n    if d == b:\n        print(sqrt((b)*(b-a)*(b-c)*(b-d)*(a+c+d-b))/4)\n        return\n    if d > c:\n        print(0)\n        return\n    if d == c:\n        print(sqrt((c)*(c-a)*(c-b)*(c-d)*(a+b+d-c))/4)\n        return\n    if d > 0:\n        print(0)\n        return\n    if d == 0:\n        print(sqrt((a)*(b)*(c)*(d)*(a+b+c+d))/4)\n        return\n    else:\n        print(\"Error\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    a1, a2, a3, a4 = [int(x) for x in line.split()]\n    s = a1 + a2 + a3 + a4\n    print(s * (s - 2 * a1) * (s - 2 * a2) * (s - 2 * a3) * (s - 2 * a4) ** (-0.5)) # Error: Missing bracket\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()]\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l])\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2.0\n    return (s - a) * (s - b) * (s - c) * (s - d) ** 0.5 / 4.0\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a = list(map(int, input().split()))\n    a.sort()\n    print(max(a[0]*a[1], a[2]*a[3]))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    s = list(map(int, input().split()))\n    s.sort()\n    if s[0] == s[1] == s[2] == s[3]:\n        print(s[0]**2)\n    else:\n        print(max(s[0] * s[1], s[2] * s[3]))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nfrom math import sqrt\n\n\ndef area(s1, s2, s3):\n    s = (s1 + s2 + s3) / 2.0\n    return sqrt((s - s1) * (s - s2) * (s - s3))\n    \n\ndef main():\n    s1, s2, s3 = map(int, sys.stdin.readline().split())\n    print(area(s1, s2, s3))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nfrom math import sqrt\n\ndef main():\n\ts = [int(i) for i in sys.stdin.readline().strip().split()]\n\ts.sort()\n\ta = s[0]\n\tb = s[1]\n\tc = s[2]\n\td = s[3]\n\t#print(s)\n\tif d > a+b+c:\n\t\tprint(0)\n\t\treturn\n\tif d == a+b+c:\n\t\tprint(sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4.0)\n\t\treturn\n\tif d > a+b:\n\t\tprint(0)\n\t\treturn\n\tif d == a+b:\n\t\tprint(sqrt((a+b)*(a+b-c)*(a+b-d)*(c-a+b)*(d-a-b))/4.0)\n\t\treturn\n\tif d > a+c:\n\t\tprint(0)\n\t\treturn\n\tif d == a+c:\n\t\tprint(sqrt((a+c)*(a+c-b)*(a+c-d)*(b-a+c)*(d-a-c))/4.0)\n\t\treturn\n\tif d > b+c:\n\t\tprint(0)\n\t\treturn\n\tif d == b+c:\n\t\tprint(sqrt((b+c)*(b+c-a)*(b+c-d)*(a-b+c)*(d-b-c))/4)\n\t\treturn\n\tif d > a:\n\t\tprint(0)\n\t\treturn\n\tif d == a:\n\t\tprint(sqrt((a)*(a-b)*(a-c)*(a-d)*(b+c+d-a))/4)\n\t\treturn\n\tif d > b:\n\t\tprint(0)\n\t\treturn\n\tif d == b:\n\t\tprint(sqrt((b)*(b-a)*(b-c)*(b-d)*(a+c+d-b))/4)\n\t\treturn\n\tif d > c:\n\t\tprint(0)\n\t\treturn\n\tif d == c:\n\t\tprint(sqrt((c)*(c-a)*(c-b)*(c-d)*(a+b+d-c))/4)\n\t\treturn\n\tif d > 0:\n\t\tprint(0)\n\t\treturn\n\tif d == 0:\n\t\tprint(sqrt((a)*(b)*(c)*(d)*(a+b+c+d))/4)\n\t\treturn\n\telse:\n\t\tprint(\"Error\")\n\nmain()\n", "#!/usr/bin/env python3\n\nimport math\n\n\ndef main():\n\tsides = list(map(int, input().split()))\n\tsides.sort()\n\ts1, s2, s3, s4 = sides\n\n\t# Heron's formula\n\ts = (s1 + s2 + s3 + s4) / 2\n\tarea = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\nfrom math import sqrt\n\ndef main():\n    s = [int(i) for i in sys.stdin.readline().split()]\n    s.sort()\n    a = s[0]\n    b = s[1]\n    c = s[2]\n    d = s[3]\n    if d > a+b+c:\n        print(0)\n        return\n        print(sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4.0)\n    if d > a+b:\n        print(0)\n        return\n    if d == a+b:\n        print(sqrt((a+b)*(a+b-c)*(a+b-d)*(c-a+b)*(d-a-b))/4.0)\n    if d > a+c:\n        print(0)\n        return\n    if d == a+c:\n        print(sqrt((a+c)*(a+c-b)*(a+c-d)*(b-a+c)*(d-a-c))/4.0)\n    if d > b+c:\n        print(0)\n        return\n    if d == b+c:\n        print(sqrt((b+c)*(b+c-a)*(b+c-d)*(a-b+c)*(d-b-c))/4.0)\n    if d > a:\n        print(0)\n        return\n    if d == a:\n        print(sqrt((a)*(a-b)*(a-c)*(a-d)*(b+c+d-a))/4.0)\n    if d > b:\n        print(0)\n        return\n    if d == b:\n        print(sqrt((b)*(b-a)*(b-c)*(b-d)*(a+c+d-b))/4.0)\n    if d > c:\n        print(0)\n        return\n    if d == c:\n        print(sqrt((c)*(c-a)*(c-b)*(c-d)*(a+b+d-c))/4.0)\n    if d > 0:\n        print(0)\n        return\n    if d == 0:\n        print(sqrt((a)*(b)*(c)*(d)*(a+b+c+d))/4.0)\n    else:\n        print(\"Error\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()]\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l])\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2\n    return (s - a) * (s - b) * (s - c) * (s - d) ** 0.5\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    a1, a2, a3, a4 = [int(x) for x in line.split()]\n    s = a1 + a2 + a3 + a4\n    print(s * (s - 2 * a1) * (s - 2 * a2) * (s - 2 * a3) * (s - 2 * a4) ** (-0.5), end='')\n\nif __name__ == '__main__':\n    main()\n", "import sys\nfrom math import sqrt\n\n\ndef area(s1, s2, s3, s4):\n    s = (s1 + s2 + s3 + s4) / 2\n    return sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n\ndef main():\n    s1, s2, s3, s4 = map(int, sys.stdin.readline().split())\n    print(area(s1, s2, s3, s4))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nfrom math import sqrt\n\ndef main():\n    s = [int(i) for i in sys.stdin.readline().strip().split()]\n    s.sort()\n    a = s[0]\n    b = s[1]\n    c = s[2]\n    d = s[3]\n    if d > a+b+c:\n        print(0)\n        return\n    if d == a+b+c:\n        print(sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4.0) \n        return\n    if d > a+b:\n        print(0)\n        return\n    if d == a+b:\n        print(sqrt((a+b)*(a+b-c)*(a+b-d)*(c-a+b)*(d-a-b))/4.0)\n        return\n    if d > a+c:\n        print(0)\n        return\n    if d == a+c:\n        print(sqrt((a+c)*(a+c-b)*(a+c-d)*(b-a+c)*(d-a-c))/4.0)\n        return\n    if d > b+c:\n        print(0)\n        return\n    if d == b+c:\n        print(sqrt((b+c)*(b+c-a)*(b+c-d)*(a-b+c)*(d-b-c))/4.0)\n        return\n    if d > a:\n        print(0)\n        return\n    if d == a:\n        print(sqrt((a)*(a-b)*(a-c)*(a-d)*(b+c+d-a))/4.0)\n        return\n    if d > b:\n        print(0)\n        return\n    if d == b:\n        print(sqrt((b)*(b-a)*(b-c)*(b-d)*(a+c+d-b))/4.0)\n        return\n    if d > c:\n        print(0)\n        return\n    if d == c:\n        print(sqrt((c)*(c-a)*(c-b)*(c-d)*(a+b+d-c))/4.0)\n        return\n    if d > 0:\n        print(0)\n        return\n    if d == 0:\n        print(sqrt((a)*(b)*(c)*(d)*(a+b+c+d))/4.0)\n        return\n    else:\n        print(\"Error\")\n\nmain()\n", "\n\n#-----Function Definition-----\ndef max_quadrilateral(sides):\n    \"\"\"\n    Given four side lengths, returns the maximum area of any quadrilateral\n    that can be constructed using these side lengths.\n    \"\"\"\n    # Sort the sides in descending order\n    sides.sort(reverse=True)\n    # Area = (s(s-a)(s-b)(s-c))^(1/2), where s = (a+b+c)/2\n    s = (sides[0] + sides[1] + sides[2] + sides[3])/2\n    area = (s*(s-sides[0])*(s-sides[1])*(s-sides[2])*(s-sides[3]))**(1/2.0)\n    return area\n\n#-----Main Program-----\nsides = list(map(float, input().split()))\nprint(max_quadrilateral(sides))\n", "\nimport sys\nfrom math import sqrt\n\ndef main():\n    s = [int(i) for i in sys.stdin.readline().strip().split()]\n    s.sort()\n    a = s[0]\n    b = s[1]\n    c = s[2]\n    d = s[3]\n    #print(s)\n    if d > a+b+c:\n        print(0)\n        return\n    if d == a+b+c:\n        print(sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4.0)  # area of triangle\n        return\n    if d > a+b:\n        print(0)\n        return\n    if d == a+b:\n        print(sqrt((a+b)*(a+b-c)*(a+b-d)*(c-a+b)*(d-a-b))/4.0)  # area of trapezoid\n        return\n    if d > a+c:\n        print(0)\n        return\n    if d == a+c:\n        print(sqrt((a+c)*(a+c-b)*(a+c-d)*(b-a+c)*(d-a-c))/4.0)  # area of trapezoid\n        return\n    if d > b+c:\n        print(0)\n        return\n    if d == b+c:\n        print(sqrt((b+c)*(b+c-a)*(b+c-d)*(a-b+c)*(d-b-c))/4)  # area of trapezoid\n        return\n    if d > a:\n        print(0)\n        return\n    if d == a:\n        print(sqrt((a)*(a-b)*(a-c)*(a-d)*(b+c+d-a))/4)  # area of quadrilateral\n        return\n    if d > b:\n        print(0)\n        return\n    if d == b:\n        print(sqrt((b)*(b-a)*(b-c)*(b-d)*(a+c+d-b))/4)  # area of quadrilateral\n        return\n    if d > c:\n        print(0)\n        return\n    if d == c:\n        print(sqrt((c)*(c-a)*(c-b)*(c-d)*(a+b+d-c))/4)  # area of quadrilateral\n        return\n    if d > 0:\n        print(0)\n        return\n    if d == 0:\n        print(sqrt((a)*(b)*(c)*(d)*(a+b+c+d))/4)  # area of quadrilateral\n        return\n    else:\n        print(\"Error\")\n\nmain()\n", "\n\nimport math\n\ndef main():\n\tsides = list(map(float, input().split()))\n\tsides.sort()\n\ts1, s2, s3, s4 = sides\n\n\t# Heron's formula.\n\ts = (s1 + s2 + s3 + s4) / 2.0\n\tarea = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    s1, s2, s3, s4 = [int(x) for x in line.split()]\n    s = s1 + s2 + s3 + s4\n    print(s*(s-2*s1)*(s-2*s2)*(s-2*s3)*(s-2*s4)**(-1/2))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    line = sys.stdin.readline().strip()\n    s1, s2, s3, s4 = [int(x) for x in line.split()]\n    s = s1 + s2 + s3 + s4;\n    print(s*(s-2*s1)*(s-2*s2)*(s-2*s3)*(s-2*s4)**(-0.5));\n\nif __name__ == '__main__':\n    main();\n", "\n\n#-----Function Definition-----\ndef max_quadrilateral(sides):\n    \"\"\"\n    Given four side lengths, returns the maximum area of any quadrilateral that can be constructed using these side lengths.\n    \"\"\"\n    # Sort the sides in descending order\n    sides.sort(reverse=True)\n    # Area = (s(s-a)(s-b)(s-c))^(1/2), where s = (a+b+c)/2\n    s = (sides[0] + sides[1] + sides[2] + sides[3])/2\n    area = (s*(s-sides[0])*(s-sides[1])*(s-sides[2])*(s-sides[3]))**(0.5)\n    return area\n\n#-----Main Program-----\nsides = list(map(float, input().split()))\nprint(max_quadrilateral(sides))\n", "\n\ndef main():\n    s = list(map(int, input().split()))\n    s.sort()\n    if s[0] == s[1] == s[2] == s[3]:\n        print(s[0] ** 2)\n    else:\n        print(max(s[0] * s[1], s[2] * s[3]))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nfrom math import sqrt\n\ndef area(s1, s2, s3, s4):\n    s = (s1 + s2 + s3 + s4) / 2\n    return sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4)) * 1.0\n\n\ndef main():\n    s1, s2, s3, s4 = map(int, sys.stdin.readline().split())\n    print(area(s1, s2, s3, s4))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    s = [int(x) for x in sys.stdin.readline().split()] # edges of quadrilateral\n    max_area = 0\n    for i in range(4):\n        for j in range(i+1,4):\n            for k in range(j+1,4):\n                for l in range(k+1,4):\n                    area = area_of_quadrilateral(s[i], s[j], s[k], s[l]) # area of quadrilateral\n                    if area > max_area:\n                        max_area = area\n    print(max_area)\n\ndef area_of_quadrilateral(a, b, c, d):\n    s = (a + b + c + d) / 2 # semiperimeter\n    return (s - a) * (s - b) * (s - c) * (s - d) ** 0.5 # Heron's formula for area of quadrilateral\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef main():\n\tsides = list(map(int, input().split()))\n\tsides.sort()\n\ts1, s2, s3, s4 = sides[0], sides[1], sides[2], sides[3]\n\n\t# Heron's formula \n\ts = (s1 + s2 + s3 + s4) / 2\n\tarea = math.sqrt((s - s1) * (s - s2) * (s - s3) * (s - s4))\n\n\tprint(area)\n\nif __name__ == '__main__':\n\tmain()\n"]