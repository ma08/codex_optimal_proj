["\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n", "# Time:  O(n)\n# Space: O(1)\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\n'''\nGiven a non-negative integer represented as a non-empty array of digits, plus one to the integer.\nYou may assume the integer do not contain any leading zero, except the number 0 itself.\nThe digits are stored such that the most significant digit is at the head of the list.\n'''\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n\n        return [1] + digits\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n", "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n", "def plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\n\n\n\n\n\n\n\n\n\n\nprint(plusOne([9, 9, 9]))\n", "#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    inputs = [9,9,9]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n", "def plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n", "\n# test test\n\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n", "# Time:  O(n)\n# Space: O(1)\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n", "\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\nprint(plusOne([9, 9, 9]))\n", "\n# test\n\n# def plusOne(digits):\n#     \"\"\"\n#     :type digits: List[int]\n#     :rtype: List[int]\n#     \"\"\"\n#     plus = 1\n#     for i in range(len(digits) - 1, -1, -1):\n#         if plus == 1:\n#             if digits[i] + 1 == 10:\n#                 digits[i] = 0\n#             else:\n#                 digits[i] += 1\n#                 plus = 0\n#         else:\n#             break\n#     if plus == 1:\n#         digits.insert(0, 1)\n#     return digits\n\n\n# print(plusOne([9, 9, 9]))\n\n# def findMin(nums):\n#     \"\"\"\n#     :type nums: List[int]\n#     :rtype: int\n#     \"\"\"\n#     if len(nums) == 1:\n#         return nums[0]\n#     if len(nums) == 2:\n#         return min(nums[0], nums[1])\n#     if nums[0] < nums[len(nums) - 1]:\n#         return nums[0]\n#     if nums[0] > nums[len(nums) - 1]:\n#         left = 0\n#         right = len(nums) - 1\n#         while left <= right:\n#             mid = (left + right) // 2\n#             if nums[mid] > nums[mid + 1]:\n#                 return nums[mid + 1]\n#             if nums[mid] < nums[mid - 1]:\n#                 return nums[mid]\n#             if nums[mid] > nums[0]:\n#                 left = mid + 1\n#             else:\n#                 right = mid - 1\n#     return nums[0]\n\n\n# print(findMin([4, 5, 6, 7, 0, 1, 2]))\n\n\ndef searchInsert(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if target < nums[0]:\n        return 0\n    if target > nums[len(nums) - 1]:\n        return len(nums)\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n\nprint(searchInsert([1, 3, 5, 6], 5))\n", "\n\ndef plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    plus = 1\n    for i in range(len(digits) - 1, -1, -1):\n        if plus == 1:\n            if digits[i] + 1 == 10:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                plus = 0\n        else:\n            break\n    if plus == 1:\n        digits.insert(0, 1)\n    return digits\n\n\n\n\n\n\n\n\n\n\n\n\nprint(plusOne([9, 9, 9]))\n", "# Time:  O(n)\n# Space: O(1)\n\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\n\ndef main():\n    inputs = [1, 2, 3]\n    inputs = [4, 3, 2, 1]\n    result = Solution().plusOne(inputs)\n    print result\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return self.plusOne_0(digits)\n\n    def plusOne_0(self, digits):\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\ndef main():\n    inputs = [1,2,3]\n    inputs = [4,3,2,1]\n    result = Solution().plusOne(inputs)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n"]