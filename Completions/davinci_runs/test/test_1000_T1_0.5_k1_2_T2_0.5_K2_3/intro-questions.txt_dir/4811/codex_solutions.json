["\n\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)", "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N//2)\n\nif __name__ == \"__main__\":\n    main()", "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()", "\n\n# k = int(input())\nk = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)", "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i//2 - 1))\n\nif __name__ == \"__main__\":\n    main()"]