["\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"{} {}\".format(i, i//2-1))\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(2) \n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break_count(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break_count(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break_count(K), sep=\" \")\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break_count(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nk = int(input())\n\nprint(k)\n", "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n, n)\n\nif __name__ == '__main__':\n    main()\n", "\nk = int(input())\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then the smallest power of 2 is 8\n# If k = 5, then the smallest power of 2 is 8\n# If k = 9, then the smallest power of 2 is 16\ni = 1\nwhile 2 ** i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2 ** i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break(K), sep=' ')\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break(k):\n    bar_size = find_bar_size(k)\n    break_ = 0\n    while bar_size > k:\n        bar_size /= 2\n        break_ += 1\n    return break_\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    k = int(input())\n    print(k, k)\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)  # -2 for 0b and -1 for the first digit\n\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n\n    return 2 ** (len(bin(k)) - 3) # -2 for 0b and -1 for the first digit\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(str(i) + \" \" + str(i//2-1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    K = int(input())\n    N = 1\n    while N <= K:\n        N *= 2 \n    print(N//2)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N / 2)\n\nif __name__ == \"__main__\":\n    main()\n", "print(\"Hello World!\")\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i / 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n)\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n# @Author: gunjianpan\n# @Date:   2020-09-07 09:44:46\n# @Last Modified by:   gunjianpan\n# @Last Modified time: 2020-09-07 09:47:49\n\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i//2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    K = int(input())\n    N = 1\n    while N <= K:\n        N *= 2 \n    print(N // 2, N // 2)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)  # -3 because bin(x) returns 0b...\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2  # floor division\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than or equal to k\n# For example, if k = 7, then smallest power of 2 is 8 (2^3)\n# If k = 5, then smallest power of 2 is 8 (2^3)\n# If k = 9, then smallest power of 2 is 16 (2^4)\n# If k = 8, then smallest power of 2 is 8 (2^3)\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than or equal to k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "#!/usr/bin/env python\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\n#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3) # -2 for 0b and -1 for the first digit \n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\ndef main():\n    K = int(input())\n    A = 1\n    while A <= K:\n        A *= 2 \n    print(A//2, A//2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_breaks)\n", "\n#\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n", "\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than or equal to k\n# For example, if k = 7, then smallest power of 2 is 8 (2^3)\n# If k = 5, then smallest power of 2 is 8 (2^3)\n# If k = 9, then smallest power of 2 is 16 (2^4)\n# If k = 8, then smallest power of 2 is 8 (2^3)\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than or equal to k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "\n\ndef main():\n    K = int(input())\n    A = 1\n    while A < K:\n        A += 1\n    print(A)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(input())\n    print(find_bar_size(K), find_break(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N // 2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    if 0 in A:\n        print(0)\n        return\n\n    ans = 1\n    for a in A:\n        ans *= a\n        if ans > 10**18:\n            print(-1)\n            return\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    break_ = 1\n    while bar < k:\n        bar *= 2\n        break_ += 1\n    print(bar, break_)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    A = 2\n    while A < K:\n        A *= 2\n    print(A, A // 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef count_substrings(haystack, needle):\n    count = 0\n    for i in range(len(haystack)):\n        if haystack[i: i + len(needle)] == needle:\n            count += 1\n    return count\n\ndef contains(big_string, little_string):\n    return little_string in big_string\n\n\ndef common_letters(string_one, string_two):\n    common = []\n    for letter in string_one:\n        if (letter in string_two) and not (letter in common):\n            common.append(letter)\n    return common\n\n\ndef main():\n    \"\"\"Read and print an integer series.\"\"\"\n\n    # Read an initial series from standard input\n    data = input('Enter some integers: ')\n    numbers = data.split()\n    print(numbers)\n    print(len(numbers))\n    print(numbers[0])\n    print(numbers[1])\n    print(numbers[2])\n    print(numbers[-1])\n    print(numbers[-2])\n    print(numbers[-3])\n\n    # Convert the strings to ints\n    numbers = [int(x) for x in numbers]\n    print(numbers)\n\n    # Print the series\n    print('The series:')\n    for number in numbers:\n        print(number)\n\n    # Print the length of the series\n    print('The length of the series is', len(numbers))\n\n    # Print the smallest and largest numbers in the series\n    print('The smallest number is', min(numbers))\n    print('The largest number is', max(numbers))\n\n    # Print the sum of the series\n    print('The sum of the series is', sum(numbers))\n\n    # Print the average of the series\n    print('The average of the series is', sum(numbers) / len(numbers))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break_count(K)) \n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break_count(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(\"hello\")\n", "N = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size)\nprint(min_breaks)\n", "\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k: \n        n += 1\n    print(2**n)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[i] = a[i]\n    d = sorted(d.items(), key=lambda x: x[1])\n    for i in range(n):\n        print(d[i][0], end=\" \")\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    A = 2\n    while A < K:\n        A *= 2\n    print(A, A // 2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breakpoint(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breakpoint(k):\n    bar_size = find_bar_size(k)\n    break_ = 0\n    while bar_size > k:\n        bar_size /= 2\n        break_ += 1\n    return break_\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = [0] * (n + 1)\n    for _ in range(n):\n        x, y = [int(s) for s in input().split()]\n        a[x] = y\n    for i in range(1, n + 1):\n        print(a[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break(K))\n\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n\n    return bar_size\n\ndef find_break(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    b = 1\n    breaks = 0\n    while b < k:\n        b *= 2\n        breaks += 1\n    print(b, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\nprint(k)\nk = int(input())\n\n# First, find the smallest power of 2 greater than or equal to k\n# For example, if k = 7, then smallest power of 2 is 8.\n# If k = 5, then smallest power of 2 is 8.\n# If k = 9, then smallest power of 2 is 16.\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than or equal to k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power into two smaller bars\n    # We can do this repeatedly until we have a bar of size k.\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "\nk = int(input())\n\ni = 1\nwhile 2**i < k:\n    i += 1\n\nsmallest_power = 2**i\n\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power into two smaller bars\n    # We can do this repeatedly until we have a bar of size k.\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break(k):\n    bar_size = find_bar_size(k)\n    break_ = 0\n    while bar_size > k:\n        bar_size /= 2\n        break_ += 1\n    return break_\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_breaks)\n", "\nimport sys\n\ndef main():\n    k = int(input())\n    n = 0\n    while 2**n < k: \n        n += 1\n    print(2**n)\n    print(n)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    brk = 0\n    while bar < k:\n        bar *= 2\n        brk += 1\n    print(bar, brk)\n\nif __name__ == '__main__':\n    main()\n", "print(\"hi\")\n", "# -*- coding: utf-8 -*-\n# @Author: gunjianpan\n# @Date:   2020-09-07 09:44:46\n# @Last Modified by:   gunjianpan\n# @Last Modified time: 2020-09-07 09:44:47\n\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\n\nif __name__ == \"__main__\":\n    main()\n", "N = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_breaks)\n", "import sys\n\ndef main():\n    k = int(input())\n    n = 1\n    while 2 ** n < k:\n        n *= 2\n    print(n, n)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\ndef get_bar_size(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k):\n    bar_size = get_bar_size(k)\n    num_breaks = 0\n    while bar_size != k:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\nprint(3)\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2))\n\nif __name__ == \"__main__\":\n    main()\n"]