["\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n", "\n\n# Solution\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n", "#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, sys.stdin.readline().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n", "#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())), dtype=np.int64)\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n", "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the sub-array.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n", "#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nprint(*s_unique[s_indices[:k]])\n", "\n# Solution\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n", "\n\n# Solution\n"]