2022-04-13 07:56:54.748103 num operations 2
2022-04-13 07:56:54.748113 size on input set 1
2022-04-13 07:57:02.577431 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)] # p-list of lists of time for each task and person\n    t = [0] * n # t-list of time for each task\n    for j in range(m): # for each person\n        for i in range(n): # for each task\n            if t[i] < max(t): # if time of task is less then max time of tasks\n                t[i] = max(t) # make time of task equal max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836614,
  "object": "edit"
}
2022-04-13 07:57:02.577713 fix spelling mistakes 3 ["\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)] # p-list of lists of time for each task and person\n    t = [0] * n # t-list of time for each task\n    for j in range(m): # for each person\n        for i in range(n): # for each task\n            if t[i] < max(t): # if time of task is less then max time of tasks\n                t[i] = max(t) # make time of task equal max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:57:02.577761 size on output set 2
2022-04-13 07:57:02.577771 size on input set 2
2022-04-13 07:57:13.202945 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(m)] # p-list of lists of time for each task and person\n    t = [0] * n # t-list of time for each task\n    for j in range(m): # for each person\n        for i in range(n): # for each task\n            if t[i] < max(t): # if time of task is less then max time of tasks\n                t[i] = max(t) # make time of task equal max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())  # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)]  # p-list of lists of time for each task and person\n    t = [0] * n  # t-list of time for each task\n    for j in range(m):  # for each person\n        for i in range(n):  # for each task\n            if t[i] < max(t):  # if time of task is less then max time of tasks\n                t[i] = max(t)  # make time of task equal max time of tasks\n            t[i] += p[i][j]  # time of task + time of task for person\n    print(*t)  # print time of tasks\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)] # p-list of lists of time for each task and person (n x m)\n    t = [0] * n # t-list of time for each task\n    for i in range(n): # for each task\n        for j in range(m): # for each person\n            if t[i] < max(t): # if time of task is less than max time of tasks\n                t[i] = max(t) # make time of task equal to max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person (i x j)\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836622,
  "object": "edit"
}
2022-04-13 07:57:13.203125 fix syntax errors 3 ["\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(m)] # p-list of lists of time for each task and person\n    t = [0] * n # t-list of time for each task\n    for j in range(m): # for each person\n        for i in range(n): # for each task\n            if t[i] < max(t): # if time of task is less then max time of tasks\n                t[i] = max(t) # make time of task equal max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())  # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)]  # p-list of lists of time for each task and person\n    t = [0] * n  # t-list of time for each task\n    for j in range(m):  # for each person\n        for i in range(n):  # for each task\n            if t[i] < max(t):  # if time of task is less then max time of tasks\n                t[i] = max(t)  # make time of task equal max time of tasks\n            t[i] += p[i][j]  # time of task + time of task for person\n    print(*t)  # print time of tasks\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)] # p-list of lists of time for each task and person (n x m)\n    t = [0] * n # t-list of time for each task\n    for i in range(n): # for each task\n        for j in range(m): # for each person\n            if t[i] < max(t): # if time of task is less than max time of tasks\n                t[i] = max(t) # make time of task equal to max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person (i x j)\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:57:18.310655 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for i in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]  # \u8aad\u307f\u8fbc\u307f\n    t = [0] * n  # \u5404\u5217\u306e\u6700\u5927\u5024\u3092\u5165\u308c\u308b\u30ea\u30b9\u30c8\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836633,
  "object": "edit"
}
2022-04-13 07:57:18.310951 fix syntax errors 3 ["\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for i in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]  # 読み込み\n    t = [0] * n  # 各列の最大値を入れるリスト\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:57:18.310992 size on output set 6
2022-04-13 07:57:18.311001 num operations 2
2022-04-13 07:57:18.311006 size on input set 1
2022-04-13 07:57:21.181682 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M] * N\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M] * N\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649836638,
  "object": "edit"
}
2022-04-13 07:57:21.181857 fix spelling mistakes 3 ['\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    """\n    T = [[0] * M] * N\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    """\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    """\n    T = [[0] * M] * N\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:57:21.181891 size on output set 3
2022-04-13 07:57:21.181897 size on input set 3
2022-04-13 07:57:24.962753 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # P[i][j] = time for stage j, worker i\n    # T[i][j] = time for stage j, worker i\n    T = [[0] * M] * N\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort(key=lambda x: x[-1])\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n        print(ans[i])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649836641,
  "object": "edit"
}
2022-04-13 07:57:24.962920 fix syntax errors 3 ['\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # P[i][j] = time for stage j, worker i\n    # T[i][j] = time for stage j, worker i\n    T = [[0] * M] * N\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    """\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    """\n    T = [[0] * M for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort(key=lambda x: x[-1])\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    """\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n        print(ans[i])\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:57:29.698137 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(N)]\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(N)]\n    print(P)\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649836645,
  "object": "edit"
}
2022-04-13 07:57:29.698321 fix syntax errors 3 ['\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(N)]\n    """\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    """\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(N)]\n    print(P)\n    """\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    """\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:57:48.111129 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T = sorted(T)\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# def main():\n#     N, M = map(int, input().split())\n#     P = []\n#     for _ in range(N):\n#         P.append(list(map(int, input().split())))\n#     # print(P)\n#     \"\"\"\n#     P[i][j] = time for stage j, swather i\n#     T[i][j] = time for stage j, swather i\n#     \"\"\"\n#     T = [[0] * M for _ in range(N)]\n#     # print(T)\n#     for i in range(N):\n#         for j in range(M):\n#             if j == 0:\n#                 T[i][j] = P[i][j]\n#             else:\n#                 T[i][j] = T[i][j-1] + P[i][j]\n#     # print(T)\n#     T.sort()\n#     # print(T)\n#     ans = []\n#     for i in range(N):\n#         ans.append(T[i][-1])\n#     print(*ans)\n\n# if __name__ == \"__main__\":\n#     main()\n\n\nN, M = map(int, input().split())\nP = []\nfor _ in range(N):\n    P.append(list(map(int, input().split())))\nprint(P)\n\n\ndef main(N, M, P):\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main(N, M, P)\n"
    }
  ],
  "created": 1649836649,
  "object": "edit"
}
2022-04-13 07:57:48.111384 fix syntax errors 3 ['\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T = sorted(T)\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n# def main():\n#     N, M = map(int, input().split())\n#     P = []\n#     for _ in range(N):\n#         P.append(list(map(int, input().split())))\n#     # print(P)\n#     """\n#     P[i][j] = time for stage j, swather i\n#     T[i][j] = time for stage j, swather i\n#     """\n#     T = [[0] * M for _ in range(N)]\n#     # print(T)\n#     for i in range(N):\n#         for j in range(M):\n#             if j == 0:\n#                 T[i][j] = P[i][j]\n#             else:\n#                 T[i][j] = T[i][j-1] + P[i][j]\n#     # print(T)\n#     T.sort()\n#     # print(T)\n#     ans = []\n#     for i in range(N):\n#         ans.append(T[i][-1])\n#     print(*ans)\n\n# if __name__ == "__main__":\n#     main()\n\n\nN, M = map(int, input().split())\nP = []\nfor _ in range(N):\n    P.append(list(map(int, input().split())))\nprint(P)\n\n\ndef main(N, M, P):\n    """\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    """\n    T = [[0] * M for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == "__main__":\n    main(N, M, P)\n']
2022-04-13 07:57:48.111491 size on output set 9
2022-04-13 07:57:48.111511 num operations 2
2022-04-13 07:57:48.111516 size on input set 1
2022-04-13 07:57:50.071851 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 1,
      "text": "\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 2,
      "text": "\n# \uac00\uc7a5 \uae34 \uc99d\uac00\ud558\ub294 \ubd80\ubd84 \uc218\uc5f4\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    }
  ],
  "created": 1649836668,
  "object": "edit"
}
2022-04-13 07:57:50.072048 fix spelling mistakes 3 ['\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', '\n# 가장 긴 증가하는 부분 수열\nn, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n']
2022-04-13 07:57:50.072085 size on output set 2
2022-04-13 07:57:50.072091 size on input set 2
2022-04-13 07:57:55.355112 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "a = int(input())\nb = int(input())\nc = int(input())\nprint(a + b + c)\n"
    },
    {
      "index": 1,
      "text": "n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split()))) \n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 2,
      "text": "n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i] and i < k:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n"
    }
  ],
  "created": 1649836670,
  "object": "edit"
}
2022-04-13 07:57:55.355297 fix syntax errors 3 ['a = int(input())\nb = int(input())\nc = int(input())\nprint(a + b + c)\n', 'n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split()))) \n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n', 'n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i] and i < k:\n                t[k] = t[i] - p[k][j]\n\nprint(" ".join(map(str, t)))\n']
2022-04-13 07:58:07.669972 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\nt = list(map(int, input().split()))\nprint(max(t))\n"
    },
    {
      "index": 1,
      "text": "\n# \uc5f0\uc0b0\uc790 \ub07c\uc6cc\ub123\uae30\nn, m = map(int, input().split())\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        t[i][j] = max(t[i - 1][j - 1] + p[i - 1][j - 1], t[i][j - 1])\n\nprint(\" \".join(map(str, t)))\n"
    },
    {
      "index": 2,
      "text": "print(\"Hello World\")\n"
    }
  ],
  "created": 1649836675,
  "object": "edit"
}
2022-04-13 07:58:07.670137 fix syntax errors 3 ['n = int(input())\nt = list(map(int, input().split()))\nprint(max(t))\n', '\n# 연산자 끼워넣기\nn, m = map(int, input().split())\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        t[i][j] = max(t[i - 1][j - 1] + p[i - 1][j - 1], t[i][j - 1])\n\nprint(" ".join(map(str, t)))\n', 'print("Hello World")\n']
2022-04-13 07:58:07.670163 size on output set 6
2022-04-13 07:58:07.670184 num operations 2
2022-04-13 07:58:07.670215 size on input set 1
2022-04-13 07:58:10.699309 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    }
  ],
  "created": 1649836687,
  "object": "edit"
}
2022-04-13 07:58:10.699479 fix spelling mistakes 3 ["\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"]
2022-04-13 07:58:10.699590 size on output set 1
2022-04-13 07:58:10.699597 size on input set 1
2022-04-13 07:58:14.736161 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(workers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(workers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"
    }
  ],
  "created": 1649836690,
  "object": "edit"
}
2022-04-13 07:58:14.736348 fix syntax errors 3 ["def main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(workers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n", "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(workers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n"]
2022-04-13 07:58:14.736376 size on output set 3
2022-04-13 07:58:14.736386 num operations 2
2022-04-13 07:58:14.736390 size on input set 1
2022-04-13 07:58:18.098118 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 2,
      "text": "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    }
  ],
  "created": 1649836694,
  "object": "edit"
}
2022-04-13 07:58:18.098296 fix spelling mistakes 3 ['\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n']
2022-04-13 07:58:18.098334 size on output set 3
2022-04-13 07:58:18.098341 size on input set 3
2022-04-13 07:58:23.217940 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = [int(x) for x in input().split(' ')]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split(' ')])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(n):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(n):\n    total_time = 0\n    for j in range(m):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(n):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 2,
      "text": "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    }
  ],
  "created": 1649836698,
  "object": "edit"
}
2022-04-13 07:58:23.218211 fix syntax errors 3 ['\n\nN, M = [int(x) for x in input().split(\' \')]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split(\' \')])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\n\nn, m = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(n):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(n):\n    total_time = 0\n    for j in range(m):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(n):\n    print(total_times[i], end=" ")\nprint()\n', '\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n']
2022-04-13 07:58:27.201905 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n#print(times)\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n#print(times)\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 2,
      "text": "from sys import stdin, stdout\n\n\nN, M = [int(x) for x in stdin.readline().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in stdin.readline().split()])\n\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nstdout.write(\"\\n\")\n"
    }
  ],
  "created": 1649836703,
  "object": "edit"
}
2022-04-13 07:58:27.202114 fix syntax errors 3 ['\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n#print(times)\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n#print(times)\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', 'from sys import stdin, stdout\n\n\nN, M = [int(x) for x in stdin.readline().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in stdin.readline().split()])\n\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nstdout.write("\\n")\n']
2022-04-13 07:58:29.569462 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    },
    {
      "index": 1,
      "text": "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nprint(total_times)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n"
    }
  ],
  "created": 1649836707,
  "object": "edit"
}
2022-04-13 07:58:29.569708 fix syntax errors 3 ['\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n', '\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nprint(total_times)\n', '#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=" ")\nprint()\n']
2022-04-13 07:58:29.569746 size on output set 9
2022-04-13 07:58:29.569756 num operations 2
2022-04-13 07:58:29.569761 size on input set 1
2022-04-13 07:58:32.846307 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # \u6309\u7167\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6392\u5e8f\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # \u6309\u7167\u7b2ci\u4e2a\u65f6\u95f4\u6392\u5e8f\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    }
  ],
  "created": 1649836709,
  "object": "edit"
}
2022-04-13 07:58:32.846483 NO RESULT
2022-04-13 07:58:32.846490 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-13 07:58:32.846526 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # 按照第一个时间排序\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # 按照第i个时间排序\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', '\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n']
2022-04-13 07:58:32.846557 size on output set 2
2022-04-13 07:58:32.846563 size on input set 2
2022-04-13 07:58:35.828801 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][M-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # sort by time\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # sort by order\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649836712,
  "object": "edit"
}
2022-04-13 07:58:35.828968 fix syntax errors 3 ['import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][M-1] for i in range(N)])))\n\nmain()\n', '\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # sort by time\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # sort by order\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', 'import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:58:39.056667 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # \u6309\u7167\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6392\u5e8f\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # \u6309\u7167\u7b2ci\u4e2a\u65f6\u95f4\u6392\u5e8f\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import os\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # \u6309\u7167\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6392\u5e8f\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # \u6309\u7167\u7b2ci\u4e2a\u65f6\u95f4\u6392\u5e8f\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)]))) # \u8f93\u51fa\u7ed3\u679c\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # \u6309\u7167\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6392\u5e8f\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # \u6309\u7167\u7b2ci\u4e2a\u65f6\u95f4\u6392\u5e8f\n    print(\" \".join(map(str, [times[i][-1] for i in range(N-1)])))\n\nmain()\n"
    }
  ],
  "created": 1649836715,
  "object": "edit"
}
2022-04-13 07:58:39.056853 fix syntax errors 3 ['# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # 按照第一个时间排序\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # 按照第i个时间排序\n    print(" ".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n', 'import os\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # 按照第一个时间排序\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # 按照第i个时间排序\n    print(" ".join(map(str, [times[i][-1] for i in range(N)]))) # 输出结果\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # 按照第一个时间排序\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # 按照第i个时间排序\n    print(" ".join(map(str, [times[i][-1] for i in range(N-1)])))\n\nmain()\n']
2022-04-13 07:58:39.056897 size on output set 6
2022-04-13 07:58:39.056909 num operations 2
2022-04-13 07:58:39.056916 size on input set 1
2022-04-13 07:58:46.637269 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    mowers = [[i,j] for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(mowers) > 0:\n        mower = mowers.pop(0)\n        if mower[1] == 0:\n            completed[mower[0]] = times[mower[0]][0]\n        else:\n            completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    mowers = [[i,j] for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(mowers) > 0:\n        mower = mowers.pop(0)\n        if mower[1] == 0:\n            completed[mower[0]] = times[mower[0]][0]\n        else:\n            completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836719,
  "object": "edit"
}
2022-04-13 07:58:46.637469 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    mowers = [[i,j] for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(mowers) > 0:\n        mower = mowers.pop(0)\n        if mower[1] == 0:\n            completed[mower[0]] = times[mower[0]][0]\n        else:\n            completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    mowers = [[i,j] for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(mowers) > 0:\n        mower = mowers.pop(0)\n        if mower[1] == 0:\n            completed[mower[0]] = times[mower[0]][0]\n        else:\n            completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:58:46.637567 size on output set 2
2022-04-13 07:58:46.637574 size on input set 2
2022-04-13 07:58:53.013976 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i, j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0] * n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# coding=utf-8\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m-1)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]+1])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == m-2:\n            completed[shearer[0]] = times[shearer[0]][m-1]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]+1]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836726,
  "object": "edit"
}
2022-04-13 07:58:53.014204 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i, j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0] * n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n# coding=utf-8\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m-1)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]+1])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == m-2:\n            completed[shearer[0]] = times[shearer[0]][m-1]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]+1]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:59:04.352225 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    for line in sys.stdin:\n        n, m = [int(i) for i in line.split()]\n        times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n        mowers = [[i,j] for i in range(n) for j in range(m)]\n        mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n        completed = [0]*n\n        while len(mowers) > 0:\n            mower = mowers.pop(0)\n            if mower[1] == 0:\n                completed[mower[0]] = times[mower[0]][0]\n            else:\n                completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n        print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = tuple(int(i) for i in sys.stdin.readline().split())\n    times = [tuple(int(i) for i in sys.stdin.readline().split()) for i in range(n)]\n    mowers = [(i,j) for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]], reverse=True)\n    completed = [None]*n\n    while mowers:\n        i, j = mowers.pop(0)\n        if j == 0:\n            completed[i] = times[i][0]\n        elif completed[i-1] is None:\n            mowers.append((i, j))\n        else:\n            completed[i] = max(completed[i-1], completed[i]) + times[i][j]\n    print(' '.join(str(i) for i in completed))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    mowers = [[i,j] for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(mowers) > 0:\n        mower = mowers.pop(0)\n        if mower[1] == 0:\n            completed[mower[0]] = times[mower[0]][0]\n        else:\n            completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n    print(' '.join([str(i) for i in completed]), end='')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836733,
  "object": "edit"
}
2022-04-13 07:59:04.352518 fix syntax errors 3 ["import sys\n\ndef main():\n    for line in sys.stdin:\n        n, m = [int(i) for i in line.split()]\n        times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n        mowers = [[i,j] for i in range(n) for j in range(m)]\n        mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n        completed = [0]*n\n        while len(mowers) > 0:\n            mower = mowers.pop(0)\n            if mower[1] == 0:\n                completed[mower[0]] = times[mower[0]][0]\n            else:\n                completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n        print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = tuple(int(i) for i in sys.stdin.readline().split())\n    times = [tuple(int(i) for i in sys.stdin.readline().split()) for i in range(n)]\n    mowers = [(i,j) for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]], reverse=True)\n    completed = [None]*n\n    while mowers:\n        i, j = mowers.pop(0)\n        if j == 0:\n            completed[i] = times[i][0]\n        elif completed[i-1] is None:\n            mowers.append((i, j))\n        else:\n            completed[i] = max(completed[i-1], completed[i]) + times[i][j]\n    print(' '.join(str(i) for i in completed))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    mowers = [[i,j] for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(mowers) > 0:\n        mower = mowers.pop(0)\n        if mower[1] == 0:\n            completed[mower[0]] = times[mower[0]][0]\n        else:\n            completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n    print(' '.join([str(i) for i in completed]), end='')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:59:04.352621 size on output set 6
2022-04-13 07:59:04.352635 num operations 2
2022-04-13 07:59:04.352640 size on input set 1
2022-04-13 07:59:08.190635 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836744,
  "object": "edit"
}
2022-04-13 07:59:08.190815 fix spelling mistakes 3 ["\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:59:08.190863 size on output set 3
2022-04-13 07:59:08.190869 size on input set 3
2022-04-13 07:59:09.701018 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836748,
  "object": "edit"
}
2022-04-13 07:59:09.701290 fix syntax errors 3 ["\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:59:11.308579 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836749,
  "object": "edit"
}
2022-04-13 07:59:11.308763 fix syntax errors 3 ["\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:59:12.834502 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649836751,
  "object": "edit"
}
2022-04-13 07:59:12.834680 fix syntax errors 3 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:59:12.834729 size on output set 4
