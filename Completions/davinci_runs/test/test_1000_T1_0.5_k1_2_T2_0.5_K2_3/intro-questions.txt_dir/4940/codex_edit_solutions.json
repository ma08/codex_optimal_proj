["\n\ndef main():\n    n, m = map(int, input().split())  # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)]  # p-list of lists of time for each task and person\n    t = [0] * n  # t-list of time for each task\n    for j in range(m):  # for each person\n        for i in range(n):  # for each task\n            if t[i] < max(t):  # if time of task is less then max time of tasks\n                t[i] = max(t)  # make time of task equal max time of tasks\n            t[i] += p[i][j]  # time of task + time of task for person\n    print(*t)  # print time of tasks\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(workers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # \u6309\u7167\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6392\u5e8f\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # \u6309\u7167\u7b2ci\u4e2a\u65f6\u95f4\u6392\u5e8f\n    print(\" \".join(map(str, [times[i][-1] for i in range(N-1)])))\n\nmain()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # P[i][j] = time for stage j, worker i\n    # T[i][j] = time for stage j, worker i\n    T = [[0] * M] * N\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T = sorted(T)\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key=lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key=lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key=lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n", "def main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "import os\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # \u6309\u7167\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6392\u5e8f\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # \u6309\u7167\u7b2ci\u4e2a\u65f6\u95f4\u6392\u5e8f\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)]))) # \u8f93\u51fa\u7ed3\u679c\n\nif __name__ == '__main__':\n    main()\n", "a = int(input())\nb = int(input())\nc = int(input())\nprint(a + b + c)\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n        print(ans[i])\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for _ in range(n)]  # \u8aad\u307f\u8fbc\u307f\n    t = [0] * n  # \u5404\u5217\u306e\u6700\u5927\u5024\u3092\u5165\u308c\u308b\u30ea\u30b9\u30c8\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort(key=lambda x: x[-1])\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split()))) \n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i]:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin, stdout\n\n\nN, M = [int(x) for x in stdin.readline().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in stdin.readline().split()])\n\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nstdout.write(\"\\n\")\n", "\n# \uc5f0\uc0b0\uc790 \ub07c\uc6cc\ub123\uae30\nn, m = map(int, input().split())\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        t[i][j] = max(t[i - 1][j - 1] + p[i - 1][j - 1], t[i][j - 1])\n\nprint(\" \".join(map(str, t)))\n", "\ndef main():\n    n, m = map(int, input().split())\n    p = [list(map(int, input().split())) for i in range(n)]\n    t = [0] * n\n    for j in range(m):\n        for i in range(n):\n            if t[i] < max(t):\n                t[i] = max(t)\n            t[i] += p[i][j]\n    print(*t)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = []\n    for _ in range(N):\n        P.append(list(map(int, input().split())))\n    # print(P)\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = map(int, input().split())\n\np = []\nfor i in range(n):\n    p.append(list(map(int, input().split())))\n\nt = [0] * n\n\nfor j in range(m):\n    for i in range(n):\n        if j == 0:\n            t[i] = p[i][j]\n        else:\n            t[i] += p[i][j]\n        for k in range(n):\n            if k != i and t[k] + p[k][j] > t[i] and i < k:\n                t[k] = t[i] - p[k][j]\n\nprint(\" \".join(map(str, t)))\n", "\n\ndef main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, len(times)):\n        for j in range(stages):\n            times[i][j] += times[i - 1][j]\n    for i in range(workers):\n        print(times[i][stages - 1], end=' ')\n\n\nmain()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(N)]\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    T.sort()\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    P = [list(map(int, input().split())) for _ in range(N)]\n    print(P)\n    \"\"\"\n    P[i][j] = time for stage j, worker i\n    T[i][j] = time for stage j, worker i\n    \"\"\"\n    T = [[0 for _ in range(M)] for _ in range(N)]\n    # print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    # print(T)\n    T.sort()\n    # print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = tuple(int(i) for i in sys.stdin.readline().split())\n    times = [tuple(int(i) for i in sys.stdin.readline().split()) for i in range(n)]\n    mowers = [(i,j) for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]], reverse=True)\n    completed = [None]*n\n    while mowers:\n        i, j = mowers.pop(0)\n        if j == 0:\n            completed[i] = times[i][0]\n        elif completed[i-1] is None:\n            mowers.append((i, j))\n        else:\n            completed[i] = max(completed[i-1], completed[i]) + times[i][j]\n    print(' '.join(str(i) for i in completed))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "\n\nN, M = [int(x) for x in input().split(' ')]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split(' ')])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n", "\n# coding=utf-8\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i,j] for i in range(n) for j in range(m-1)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]+1])\n    completed = [0]*n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == m-2:\n            completed[shearer[0]] = times[shearer[0]][m-1]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]+1]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n", "\n\n# def main():\n#     N, M = map(int, input().split())\n#     P = []\n#     for _ in range(N):\n#         P.append(list(map(int, input().split())))\n#     # print(P)\n#     \"\"\"\n#     P[i][j] = time for stage j, swather i\n#     T[i][j] = time for stage j, swather i\n#     \"\"\"\n#     T = [[0] * M for _ in range(N)]\n#     # print(T)\n#     for i in range(N):\n#         for j in range(M):\n#             if j == 0:\n#                 T[i][j] = P[i][j]\n#             else:\n#                 T[i][j] = T[i][j-1] + P[i][j]\n#     # print(T)\n#     T.sort()\n#     # print(T)\n#     ans = []\n#     for i in range(N):\n#         ans.append(T[i][-1])\n#     print(*ans)\n\n# if __name__ == \"__main__\":\n#     main()\n\n\nN, M = map(int, input().split())\nP = []\nfor _ in range(N):\n    P.append(list(map(int, input().split())))\nprint(P)\n\n\ndef main(N, M, P):\n    \"\"\"\n    P[i][j] = time for stage j, swather i\n    T[i][j] = time for stage j, swather i\n    \"\"\"\n    T = [[0] * M for _ in range(N)]\n    print(T)\n    for i in range(N):\n        for j in range(M):\n            if j == 0:\n                T[i][j] = P[i][j]\n            else:\n                T[i][j] = T[i][j-1] + P[i][j]\n    print(T)\n    T.sort()\n    print(T)\n    ans = []\n    for i in range(N):\n        ans.append(T[i][-1])\n    print(*ans)\n\n\nif __name__ == \"__main__\":\n    main(N, M, P)\n", "n = int(input())\nt = list(map(int, input().split()))\nprint(max(t))\n", "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # sort by time\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # sort by order\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n", "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    mowers = [[i,j] for i in range(n) for j in range(m)]\n    mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n    completed = [0]*n\n    while len(mowers) > 0:\n        mower = mowers.pop(0)\n        if mower[1] == 0:\n            completed[mower[0]] = times[mower[0]][0]\n        else:\n            completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n    print(' '.join([str(i) for i in completed]), end='')\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, m = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(n):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage of the race\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage of the race\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage of the race\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(n):\n    total_time = 0\n    for j in range(m):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(n):\n    print(total_times[i], end=\" \")\nprint()\n", "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n#print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n#print(times)\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n#print(times)\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n#print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n", "print(\"Hello World\")\n", "#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0]) # \u6309\u7167\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6392\u5e8f\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i]) # \u6309\u7167\u7b2ci\u4e2a\u65f6\u95f4\u6392\u5e8f\n    print(\" \".join(map(str, [times[i][-1] for i in range(N)])))\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n    shearers = [[i, j] for i in range(n) for j in range(m)]\n    shearers = sorted(shearers, key=lambda x: times[x[0]][x[1]])\n    completed = [0] * n\n    while len(shearers) > 0:\n        shearer = shearers.pop(0)\n        if shearer[1] == 0:\n            completed[shearer[0]] = times[shearer[0]][0]\n        else:\n            completed[shearer[0]] = max(completed[shearer[0]], completed[shearer[0]-1]) + times[shearer[0]][shearer[1]]\n    print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a sawyer is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of sawyers completed at stage j\n    c = [0] * M\n\n    # the number of sawyers completed\n    d = 0\n\n    # the sawyers completed at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    workers, stages = [int(x) for x in input().split()]\n    times = []\n    for i in range(workers):\n        times.append([int(x) for x in input().split()])\n    times = sorted(times)\n    for i in range(1,len(times)):\n        for j in range(stages):\n            times[i][j] += times[i-1][j]\n    for i in range(workers):\n        print(times[i][stages-1], end=' ')\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(n)] # p-list of lists of time for each task and person (n x m)\n    t = [0] * n # t-list of time for each task\n    for i in range(n): # for each task\n        for j in range(m): # for each person\n            if t[i] < max(t): # if time of task is less than max time of tasks\n                t[i] = max(t) # make time of task equal to max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person (i x j)\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    p = []\n    for i in range(N):\n        p.append(list(map(int, sys.stdin.readline().split())))\n\n    # the time a swather is completed\n    t = [0] * N\n\n    # the time stage j is completed\n    s = [0] * M\n\n    # the number of swathers completed at stage j\n    c = [0] * M\n\n    # the number of swathers completed\n    d = 0\n\n    # the swathers completing at stage j\n    e = [[] for i in range(M)]\n\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                s[j] = p[0][j]\n            else:\n                if j == 0:\n                    s[j] = s[j] + p[i][j]\n                elif c[j-1] == 0:\n                    s[j] = s[j] + p[i][j]\n                else:\n                    s[j] = max(s[j], e[j-1][0]) + p[i][j]\n\n            if j == M-1:\n                t[i] = s[j]\n            c[j] += 1\n            e[j].append(t[i])\n            if j > 0:\n                e[j-1].pop(0)\n            d += 1\n\n    print(' '.join(map(str, t)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        n, m = [int(i) for i in line.split()]\n        times = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\n        mowers = [[i,j] for i in range(n) for j in range(m)]\n        mowers = sorted(mowers, key=lambda x: times[x[0]][x[1]])\n        completed = [0]*n\n        while len(mowers) > 0:\n            mower = mowers.pop(0)\n            if mower[1] == 0:\n                completed[mower[0]] = times[mower[0]][0]\n            else:\n                completed[mower[0]] = max(completed[mower[0]], completed[mower[0]-1]) + times[mower[0]][mower[1]]\n        print(' '.join([str(i) for i in completed]))\n\nif __name__ == '__main__':\n    main()\n", "\n\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n# print(times)\n\n# sort the times by the first stage.\ntimes.sort(key = lambda x: x[0])\n\n# print(times)\n\n# sort the times by the second stage.\ntimes.sort(key = lambda x: x[1])\n\n# print(times)\n\n# sort the times by the third stage.\ntimes.sort(key = lambda x: x[2])\n\n# print(times)\n\n# now we can just add up the times.\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nfor i in range(N):\n    print(total_times[i], end=\" \")\nprint()\n", "\nN, M = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(N):\n    times.append([int(x) for x in input().split()])\n\n#print(times)\n\n# sort the times by the first stage (1, 2, 3, 4)\ntimes.sort(key = lambda x: x[0])\n\n#print(times)\n\n# sort the times by the second stage (2, 3, 4, 1)\ntimes.sort(key = lambda x: x[1])\n\n#print(times)\n\n# sort the times by the third stage (3, 4, 1, 2)\ntimes.sort(key = lambda x: x[2])\n\n#print(times)\n\n# now we can just add up the times\ntotal_times = []\nfor i in range(N):\n    total_time = 0\n    for j in range(M):\n        total_time += times[i][j]\n    total_times.append(total_time)\n\nprint(total_times)\n", "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    times = []\n    for i in range(N):\n        times.append(list(map(int, sys.stdin.readline().split())))\n    times = sorted(times, key=lambda x: x[0])\n    for i in range(1, M):\n        for j in range(N):\n            times[j][i] += times[j][i-1]\n        times = sorted(times, key=lambda x: x[i])\n    print(\" \".join(map(str, [times[i][M-1] for i in range(N)])))\n\nmain()\n", "\n\ndef main():\n    n, m = map(int, input().split()) # n-number of tasks, m-number of people\n    p = [list(map(int, input().split())) for _ in range(m)] # p-list of lists of time for each task and person\n    t = [0] * n # t-list of time for each task\n    for j in range(m): # for each person\n        for i in range(n): # for each task\n            if t[i] < max(t): # if time of task is less then max time of tasks\n                t[i] = max(t) # make time of task equal max time of tasks\n            t[i] += p[i][j] # time of task + time of task for person\n    print(*t) # print time of tasks\n\nif __name__ == '__main__':\n    main()\n"]