["n = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0] * arr[0] * (sum(arr[1:]))\nfor i in range(1, n):\n    res = max(res, sum(arr[:i]) * sum(arr[i:]))\nprint(res)\n", "n = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n\na.sort()\n\ns1 = 0\ns2 = 0\nfor i in range(len(a)):\n    if i < len(a) / 2:\n        s1 += a[i]**2\n    else:\n        s2 += a[i]\n\nprint(s1 * s2)\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [int(sys.stdin.readline().strip()) for i in range(n)]\n    a.sort()\n    ans = 0\n    cur = 0.0\n    for e in a:\n        cur += e\n        ans = max(ans, cur * e)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "n = int(input())\na = []\nfor _ in range(n):\n    a.append(int(input()))\na.sort()\nmax_value = 0\nfor i in range(n):\n    current_value = a[i] ** 2 * (sum(a[i + 1:]) + a[i])\n    if current_value > max_value:\n        max_value = current_value\nprint(max_value)\n", "\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n\na.sort()\n\ns1 = 0\ns2 = 0\nfor i in range(len(a)):\n    if i < len(a) / 2:\n        s1 += a[i] ** 2\n    else:\n        s2 += a[i]\n\nprint(s1 * s2)\n", "n = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\na.sort()\n\ns1 = 0\ns2 = 0\nfor i in range(len(a)):\n    if i < len(a) / 2:\n        s1 += a[i] ** 2\n    else:\n        s2 += a[i]\n\nprint(s1 * s2)\n", "\n\ndef max_sum(a, b):\n    a.sort()\n    s1 = 0\n    for i in range(len(a)):\n        if i < len(a) / 2:\n            s1 += a[i]**2\n    for i in range(len(b)):\n        if i < len(b) / 2:\n            s2 += b[i]**2\n    return s1 * s2\n\n    return s1 * s2\n\n\nprint(s1 * s2)\n", "\n\ndef main():\n    n = int(input())\n    input = [int(i) for i in input().split()]\n    input.sort(reverse=True)\n    max_val = 0\n    for i, num in enumerate(input):\n        max_val = max(max_val, num * (i + 1))\n    print(max_val % (10 ** 9 + 7))\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# import sys\n# import bisect\n#\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     input = [int(sys.stdin.readline()) for _ in range(n)]\n#     input.sort()\n#     max_val = float('-inf')\n#     for i in range(n):\n#         if i == 0:\n#             max_val = max(max_val, input[i] * sum(input[i + 1:]))\n#         elif i == n - 1:\n#             max_val = max(max_val, input[i] * sum(input[:i]))\n#         else:\n#             max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n#     print(max_val)\n#\n#\n# if __name__ == '__main__':\n#     main()\n\n\n\n", "\n\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + sum(a[:i])) / 2\n    if current_value > max_value:\n        max_value = current_value\n\nprint(max_value)\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq*sum_lin)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq*sum_lin)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i]) / 2.0\n    if current_value > max_value:\n        max_value = current_value\n\nprint(max_value)\n", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for j in range(n):\n        a.append(int(input()))\n    a.sort()\n    s1 = 0\n    s2 = 0\n    for k in range(len(a)):\n        if k < len(a) / 2:\n            s1 += a[k]**2\n        else:\n            s2 += a[k]\n    print(s1 * s2)\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an) is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an) = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak) = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3) = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) = (a1^2 + ... + ak^2) * (an - ak) = (a1^2 + ... + ak^2) * (an - ak) = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2) = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2) = a1^2 + ... + an^2 - (an+1^2 + ... + an^2) = a1^2 + ... + an^2 - (an^2 + ... + an^2) = a1^2 + ... + an^2 - (n - k) * an^2 = a1^2 + ... + an^2 - (n - k) * an^2 = (k - (n - k)) * an^2\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2) = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2) = a1^2 + ... + an^2 - (an+1^2 + ... + an^2) = a1^2 + ... + an^2 - (an^2 + ... + an^2) = a1^2 + ... + an^2 - (n - k) * an^2 = a1^2 + ... + an^2 - (n - k) * an^2 = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for _ in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:  # \u6570\u5217\u306e\u5148\u982d\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:  # \u6570\u5217\u306e\u672b\u5c3e\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# import sys\n# import bisect\n#\n#\n# def main():\n#     n = int(sys.stdin.readline())\n#     input = [int(sys.stdin.readline()) for _ in range(n)]\n#     input.sort()\n#     max_val = float('-inf')\n#     for i in range(n):\n#         if i == 0:  # \u6570\u5217\u306e\u5148\u982d\n#             max_val = max(max_val, input[i] * sum(input[i + 1:]))\n#         elif i == n - 1:  # \u6570\u5217\u306e\u672b\u5c3e\n#             max_val = max(max_val, input[i] * sum(input[:i]))\n#         else:\n#             max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n#     print(max_val)\n#\n#\n# if __name__ == '__main__':\n#     main()\n", "\ndef main():\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    a.sort()\n    \n    s1 = 0\n    s2 = 0\n    for i in range(len(a)):\n        if i < len(a) / 2:\n            s1 += a[i]**2\n        else:\n            s2 += a[i]\n    \n    print(s1 * s2)\n    \nif __name__ == \"__main__\":\n    main()\n", "n = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*sum(arr[1:])\nfor i in range(1, n):\n    res = max(res, sum(arr[:i])*sum(arr[i:])\nprint(res)\n", "#%%\nimport sys\nn = int(input())\narr = [int(sys.stdin.readline()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\nprint(res)\n", "\n\ndef max_sum(a):\n    a.sort()\n    s1 = 0\n    s2 = 0\n    for i in range(len(a)):\n        if i < len(a) / 2:\n            s1 += a[i]**2\n        else:\n            s2 += a[i]\n\n    return s1 * s2\n\n\nprint(max_sum([1, 2, 3, 4, 5]))\n", "import sys\n\n\ndef main():\n    s = sys.stdin.readline()\n    print(s)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef main():\n    n = int(input())\n    input_list = [int(i) for i in input().split()]\n    input_list.sort(reverse=True)\n    max_val = 0\n    for i, num in enumerate(input_list):\n        max_val = max(max_val, num * (i + 1))\n    print(max_val % (10 ** 9 + 7))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0 \n    for i in range(n):\n        if i < (n//2):\n            sum_sq += math.pow(a[i],2)\n        else:\n            sum_lin += a[i]\n    print(int(sum_sq*sum_lin))\n\nif __name__ == '__main__':\n    main()\n", "\n#%%\nimport sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\n\ndef dfs(v):\n    if v == n:\n        return 0\n    if dp[v] != -1:\n        return dp[v]\n    if v + a[v] <= n:\n        dp[v] = dfs(v+a[v]) + 1\n        return dp[v]\n    else:\n        dp[v] = 0\n        return dp[v]\n\nn = int(input())\na = list(map(int, input().split()))\ndp = [-1]*n\nprint(dfs(0))\n", "#%%\nnums = [1,2,3,4]\nfor i in range(len(nums)-1):\n    nums.insert(i,nums[i+1])\n    print(i,nums)\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak) \n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = [int(sys.stdin.readline().strip()) for i in range(n)]\n    a.sort()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        cur += a[i]\n        ans = max(ans, cur * a[i])\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2) = a1^2 + ... + an^2 - (an+1^2 + ... + an^2) = a1^2 + ... + an^2 - (an^2 + ... + an^2) = a1^2 + ... + an^2 - (n - k) * an^2 - (a1^3 + ... + ak^3) = a1^2 + ... + an^2 - (n - k) * an^2 = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n#%% Input\n#%% Import\nn = int(input())\narr = [int(input()) for i in range(n)]\n#%% Sort\n\n\n#%% Calculate\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\n#%% Output\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\nprint(res)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0 \n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq*sum_lin)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfor i in range(1, 101):\n    if i % 3 == 0 and i % 5 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)\n", "\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\n\n#%%\n\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\nprint(res)\n", "\n\nimport sys\nimport math\n\na, b, c = map(int, input().split())\nif b * b - 4 * a * c < 0:\n    print('No')\nelse:\n    print('Yes')\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an\n    # = (k - (n - k)) * an\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.readlines()\n    for i in s:\n        print(i)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n    a.sort()\n    sum_sq = 0\n    sum_lin = 0\n    for i in range(n):\n        if i < (n//2):\n            sum_sq += a[i]**2\n        else:\n            sum_lin += a[i]\n    print(sum_sq*sum_lin)\n\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef max_sum(a):\n    a.sort()\n    s1 = 0\n    s2 = 0\n    for i in range(len(a)):\n        if i < len(a) / 2:\n            s1 += a[i]**2\n        else:\n            s2 += a[i]\n\n    return s1 * s2\n\n\nprint(max_sum([1, 2, 3, 4]))\n", "n = int(input())\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\na.sort()\nmax_value = 0\nfor i in range(n):\n    current_value = a[i] ** 2 * (sum(a[i + 1:]) + a[i])\n    if current_value > max_value:\n        max_value = current_value\nprint(max_value)\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "n = int(input())\na = []\nfor _ in range(n):\n    a.append(int(input()))\na.sort()\nmax_value = 0\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i]) + a[i]\n    if current_value > max_value:\n        max_value = current_value\nprint(max_value)\n", "a, b, c = map(int, input().split())\nprint(a+b+c-max(a,b,c))\n", "\n\nimport sys\nimport bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for _ in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\nprint('hello world')\n", "\n\nn = int(input())\narr = [int(input()) for i in range(n)]\n\narr.sort()\nres = arr[0]*arr[0]*(sum(arr[1:]))\nfor i in range(1,n):\n    res = max(res, sum(arr[:i])*sum(arr[i:]))\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\n\n#%%\n\nprint(res)\n", "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n\n    N = int(input().strip())\n    A = list(map(int, [input().strip() for _ in range(N)]))\n    A.sort()\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # is maximized when ak+1 + ... + an is maximized\n    # and a1^2 + ... + ak^2 is minimized\n    # which is when a1 ... ak are the smallest numbers\n\n    # (a1^2 + ... + ak^2) * (ak+1 + ... + an)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^2 + ... + ak^2) * (a1 + ... + ak)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an) - (a1^3 + ... + ak^3)\n    # = (a1^2 + ... + ak^2) * (a1 + ... + an - a1 - ... - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak)\n    # = (a1^2 + ... + ak^2) * (an - ak) * (an - ak)\n\n    # a1^2 + ... + ak^2 is minimized when a1 ... ak are the smallest numbers\n    # an - ak is maximized when an is the largest number and ak is the smallest number\n\n    # so we can use the largest and smallest numbers\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n\n    # a1^2 + ... + ak^2 = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + ak^2)\n    # = a1^2 + ... + an^2 - (an+1^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (an^2 + ... + an^2)\n    # = a1^2 + ... + an^2 - (n - k) * an^2\n    # = (k - (n - k)) * an^2\n\n    # so the answer is (k - (n - k)) * an^2 * (an - a1)\n\n    # we can use the largest and smallest numbers\n    # (k - (n - k)) * an^2 * (an - a1)\n\n    print((N - 1) * A[-1]**2 * (A[-1] - A[0]))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\na, b, c = map(int, input().split())\nif b * b - 4 * a * c < 0:\n    print('No')\nelse:\n    print('Yes')\n", "import bisect\n\nimport sys\nimport bisect\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    input = [int(sys.stdin.readline()) for _ in range(n)]\n    input.sort()\n    max_val = float('-inf')\n    for i in range(n):\n        if i == 0:  # \u6570\u5217\u306e\u5148\u982d\n            max_val = max(max_val, input[i] * sum(input[i + 1:]))\n        elif i == n - 1:  # \u6570\u5217\u306e\u672b\u5c3e\n            max_val = max(max_val, input[i] * sum(input[:i]))\n        else:\n            max_val = max(max_val, input[i] * sum(input[:i]) + input[i] * sum(input[i + 1:]))\n    print(max_val)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef main():\n    n = int(input())\n    inputs = [int(i) for i in input().split()]\n    inputs.sort(reverse=True)\n    max_val = 0\n    for i, num in enumerate(inputs):\n        max_val = max(max_val, num * (i + 1))\n    print(max_val % (10 ** 9 + 7))\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\na = []\n\nfor _ in range(n):\n    a.append(int(input()))\n\na.sort()\n\nmax_value = 0\n\nfor i in range(n):\n    current_value = a[i]**2 * (sum(a[i+1:]) + a[i]) / 2\n    if current_value > max_value:\n        max_value = current_value\n\nprint(max_value)\n", "import sys\n\ndef main():\n    s = sys.stdin.readline()\n    print(s)\n\nif __name__ == '__main__':\n    main()\n"]