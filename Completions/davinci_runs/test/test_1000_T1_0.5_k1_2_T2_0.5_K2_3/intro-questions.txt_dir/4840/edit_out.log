2022-04-13 04:31:44.052062 num operations 2
2022-04-13 04:31:44.052071 size on input set 1
2022-04-13 04:31:49.132239 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    #a1, b1, a2, b2 = 1, 4, 1, 4\n    #a3, b3, a4, b4 = 1, 6, 1, 6\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649824304,
  "object": "edit"
}
2022-04-13 04:31:49.132457 fix spelling mistakes 3 ["\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    #a1, b1, a2, b2 = 1, 4, 1, 4\n    #a3, b3, a4, b4 = 1, 6, 1, 6\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:31:49.132488 size on output set 2
2022-04-13 04:31:49.132496 size on input set 2
2022-04-13 04:31:55.134897 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    # a1, b1, a2, b2 = 1, 4, 1, 4\n    # a3, b3, a4, b4 = 1, 6, 1, 6\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    a, b = list(map(int, input().split()))\n    c, d = list(map(int, input().split()))\n    a, b, c, d = 1, 4, 1, 6\n    print(max(a, c), min(b, d))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824309,
  "object": "edit"
}
2022-04-13 04:31:55.135078 fix syntax errors 3 ["\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    # a1, b1, a2, b2 = 1, 4, 1, 4\n    # a3, b3, a4, b4 = 1, 6, 1, 6\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b = list(map(int, input().split()))\n    c, d = list(map(int, input().split()))\n    a, b, c, d = 1, 4, 1, 6\n    print(max(a, c), min(b, d))\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print(\'Gunnar\')\n    elif gunnar < emma:\n        print(\'Emma\')\n    else:\n        print(\'Tie\')\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:32:04.976103 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef solve(n):\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            return p\n    return n\n\ndef main():\n    n = int(input())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n\n\n\ndef main():\n    n = int(input())\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            print(p)\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    n = int(input())\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            print(p)\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    n = int(input())\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            print(p)\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649824315,
  "object": "edit"
}
2022-04-13 04:32:04.976315 fix syntax errors 3 ["\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef solve(n):\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            return p\n    return n\n\ndef main():\n    n = int(input())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n\n\n\ndef main():\n    n = int(input())\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            print(p)\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    n = int(input())\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            print(p)\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    n = int(input())\n    primes = get_primes(n)\n    for p in primes:\n        if n % p == 0:\n            print(p)\n            return\n    print(n)\n\nif __name__ == '__main__':\n    main()\n\ndef main():\n    a1, b1, a2, b2 = list(map(int, input().split()))\n    a3, b3, a4, b4 = list(map(int, input().split()))\n    gunnar = (b1 - a1 + 1) * (b2 - a2 + 1)\n    emma = (b3 - a3 + 1) * (b4 - a4 + 1)\n    if gunnar > emma:\n        print('Gunnar')\n    elif gunnar < emma:\n        print('Emma')\n    else:\n        print('Tie')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 04:32:04.976447 size on output set 6
2022-04-13 04:32:04.976460 num operations 2
2022-04-13 04:32:04.976465 size on input set 1
2022-04-13 04:32:16.589424 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one in range(die_one[0], die_one[1]+1):\n        for die_two in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one in range(die_one[0], die_one[1]+1):\n        for die_two in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one in range(die_one[0], die_one[1]+1):\n        for die_two in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824325,
  "object": "edit"
}
2022-04-13 04:32:16.589613 fix spelling mistakes 3 ['\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print("Gunnar")\n    elif gunnar_probability < emma_probability:\n        print("Emma")\n    else:\n        print("Tie")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one in range(die_one[0], die_one[1]+1):\n        for die_two in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print("Gunnar")\n    elif gunnar_probability < emma_probability:\n        print("Emma")\n    else:\n        print("Tie")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one in range(die_one[0], die_one[1]+1):\n        for die_two in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print("Gunnar")\n    elif gunnar_probability < emma_probability:\n        print("Emma")\n    else:\n        print("Tie")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one in range(die_one[0], die_one[1]+1):\n        for die_two in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:32:16.589654 size on output set 1
2022-04-13 04:32:16.589661 size on input set 1
2022-04-13 04:32:24.230591 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one_value in range(die_one[0], die_one[1]+1):\n        for die_two_value in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one_value in range(die_one[0], die_one[1]+1):\n        for die_two_value in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    gunnar_die_one = list(map(int, input().split(\" \")))\n    gunnar_die_two = list(map(int, input().split(\" \")))\n    emma_die_one = list(map(int, input().split(\" \")))\n    emma_die_two = list(map(int, input().split(\" \")))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print(\"Gunnar\")\n    elif gunnar_probability < emma_probability:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one_val in range(die_one[0], die_one[1]+1):\n        for die_two_val in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1) * (die_one_val + die_two_val)\n    return sum_probability\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824336,
  "object": "edit"
}
2022-04-13 04:32:24.230836 fix syntax errors 3 ['\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print("Gunnar")\n    elif gunnar_probability < emma_probability:\n        print("Emma")\n    else:\n        print("Tie")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one_value in range(die_one[0], die_one[1]+1):\n        for die_two_value in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    gunnar_die_one = list(map(int, input().split()))\n    gunnar_die_two = list(map(int, input().split()))\n    emma_die_one = list(map(int, input().split()))\n    emma_die_two = list(map(int, input().split()))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print("Gunnar")\n    elif gunnar_probability < emma_probability:\n        print("Emma")\n    else:\n        print("Tie")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one_value in range(die_one[0], die_one[1]+1):\n        for die_two_value in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1)\n    return sum_probability\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    gunnar_die_one = list(map(int, input().split(" ")))\n    gunnar_die_two = list(map(int, input().split(" ")))\n    emma_die_one = list(map(int, input().split(" ")))\n    emma_die_two = list(map(int, input().split(" ")))\n\n    gunnar_probability = calculate_probability(gunnar_die_one, gunnar_die_two)\n    emma_probability = calculate_probability(emma_die_one, emma_die_two)\n\n    if gunnar_probability > emma_probability:\n        print("Gunnar")\n    elif gunnar_probability < emma_probability:\n        print("Emma")\n    else:\n        print("Tie")\n\ndef calculate_probability(die_one, die_two):\n    sum_probability = 0\n    for die_one_val in range(die_one[0], die_one[1]+1):\n        for die_two_val in range(die_two[0], die_two[1]+1):\n            sum_probability += 1/(die_one[1]-die_one[0]+1)/(die_two[1]-die_two[0]+1) * (die_one_val + die_two_val)\n    return sum_probability\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:32:24.230875 size on output set 2
2022-04-13 04:32:24.230884 num operations 2
2022-04-13 04:32:24.230888 size on input set 1
2022-04-13 04:32:29.298230 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#g1 = [1,4,1,4]\ng1 = [1,8,1,8]\ne1 = [1,6,1,6]\n#e1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 2,
      "text": "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\") #Gunnar\nelif g_win < e_win:\n    print(\"Emma\") #Emma\nelse:\n    print(\"Tie\") #Tie\n"
    }
  ],
  "created": 1649824344,
  "object": "edit"
}
2022-04-13 04:32:29.298408 fix spelling mistakes 3 ['\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\n#g1 = [1,4,1,4]\ng1 = [1,8,1,8]\ne1 = [1,6,1,6]\n#e1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar") #Gunnar\nelif g_win < e_win:\n    print("Emma") #Emma\nelse:\n    print("Tie") #Tie\n']
2022-04-13 04:32:29.298446 size on output set 3
2022-04-13 04:32:29.298454 size on input set 3
2022-04-13 04:32:37.834925 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#g1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\n#e1 = [1,10,2,5]\n\ng1 = [1,4,1,4]\ne1 = [1,4,1,4]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\") #Gunnar\nelif g_win < e_win:\n    print(\"Emma\") #Emma\nelse:\n    print(\"Tie\") #Tie\n"
    },
    {
      "index": 1,
      "text": "\ng1 = [1,4,1,4]\ne1 = [1,6,1,6]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\") #Gunnar\nelif g_win < e_win:\n    print(\"Emma\") #Emma\nelse:\n    print(\"Tie\") #Tie\n"
    },
    {
      "index": 2,
      "text": "\n\ng = [1,4,1,4]\n#g = [1,8,1,8]\n#e = [1,6,1,6]\ne = [1,10,2,5]\n\ng_ranges = [[g[0],g[1]],[g[2],g[3]]]\ne_ranges = [[e[0],e[1]],[e[2],e[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g_ranges[0][0],g_ranges[0][1]+1):\n    for j in range(g_ranges[1][0],g_ranges[1][1]+1):\n        for k in range(e_ranges[0][0],e_ranges[0][1]+1):\n            for l in range(e_ranges[1][0],e_ranges[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\") #Gunnar\nelif g_win < e_win:\n    print(\"Emma\") #Emma\nelse:\n    print(\"Tie\") #Tie\n"
    }
  ],
  "created": 1649824349,
  "object": "edit"
}
2022-04-13 04:32:37.835160 fix syntax errors 3 ['\n\n#g1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\n#e1 = [1,10,2,5]\n\ng1 = [1,4,1,4]\ne1 = [1,4,1,4]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar") #Gunnar\nelif g_win < e_win:\n    print("Emma") #Emma\nelse:\n    print("Tie") #Tie\n', '\ng1 = [1,4,1,4]\ne1 = [1,6,1,6]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar") #Gunnar\nelif g_win < e_win:\n    print("Emma") #Emma\nelse:\n    print("Tie") #Tie\n', '\n\ng = [1,4,1,4]\n#g = [1,8,1,8]\n#e = [1,6,1,6]\ne = [1,10,2,5]\n\ng_ranges = [[g[0],g[1]],[g[2],g[3]]]\ne_ranges = [[e[0],e[1]],[e[2],e[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g_ranges[0][0],g_ranges[0][1]+1):\n    for j in range(g_ranges[1][0],g_ranges[1][1]+1):\n        for k in range(e_ranges[0][0],e_ranges[0][1]+1):\n            for l in range(e_ranges[1][0],e_ranges[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar") #Gunnar\nelif g_win < e_win:\n    print("Emma") #Emma\nelse:\n    print("Tie") #Tie\n']
2022-04-13 04:32:41.350929 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 1,
      "text": "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 2,
      "text": "\n\n#g1 = [1,4,1,4]\ng1 = [1,8,1,8] \ne1 = [1,6,1,6] \n#e1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    }
  ],
  "created": 1649824357,
  "object": "edit"
}
2022-04-13 04:32:41.351111 fix syntax errors 3 ['\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\n#g1 = [1,4,1,4]\ng1 = [1,8,1,8] \ne1 = [1,6,1,6] \n#e1 = [1,10,2,5] \n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n']
2022-04-13 04:32:43.732044 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\ne1 = [1,6,1,6]\n#e1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 1,
      "text": "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\ne1 = [1,6,1,6]\n#e1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 2,
      "text": "\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\n\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    }
  ],
  "created": 1649824361,
  "object": "edit"
}
2022-04-13 04:32:43.732225 fix syntax errors 3 ['\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\ne1 = [1,6,1,6]\n#e1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\ne1 = [1,6,1,6]\n#e1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\ng1 = [1,4,1,4]\n#g1 = [1,8,1,8]\n#e1 = [1,6,1,6]\ne1 = [1,10,2,5]\n\ng = [[g1[0],g1[1]],[g1[2],g1[3]]]\ne = [[e1[0],e1[1]],[e1[2],e1[3]]]\n\ng_win = 0\n\ne_win = 0\n\nfor i in range(g[0][0],g[0][1]+1):\n    for j in range(g[1][0],g[1][1]+1):\n        for k in range(e[0][0],e[0][1]+1):\n            for l in range(e[1][0],e[1][1]+1):\n                if i+j > k+l:\n                    g_win += 1\n                elif i+j < k+l:\n                    e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n']
2022-04-13 04:32:43.732331 size on output set 7
2022-04-13 04:32:43.732343 num operations 2
2022-04-13 04:32:43.732348 size on input set 1
2022-04-13 04:32:48.243351 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\") \n"
    },
    {
      "index": 1,
      "text": "\n\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1) * (b2-a2+1)\np2 = (d1-c1+1) * (d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n"
    },
    {
      "index": 2,
      "text": "\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n"
    }
  ],
  "created": 1649824363,
  "object": "edit"
}
2022-04-13 04:32:48.243520 fix spelling mistakes 3 ['\n\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar") \n', '\n\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1) * (b2-a2+1)\np2 = (d1-c1+1) * (d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar")\n', '\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar")\n']
2022-04-13 04:32:48.243543 size on output set 3
2022-04-13 04:32:48.243550 size on input set 3
2022-04-13 04:32:51.697479 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1 - a1 + 1) * (b2 - a2 + 1)\np2 = (d1 - c1 + 1) * (d2 - c2 + 1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n"
    },
    {
      "index": 1,
      "text": "\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1) * (b2-a2+1)\np2 = (d1-c1+1) * (d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 > p2 else \"Gunnar\")\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\n\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1) * (b2-a2+1)\np2 = (d1-c1+1) * (d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\") \n"
    }
  ],
  "created": 1649824368,
  "object": "edit"
}
2022-04-13 04:32:51.697651 fix syntax errors 3 ['\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1 - a1 + 1) * (b2 - a2 + 1)\np2 = (d1 - c1 + 1) * (d2 - c2 + 1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar")\n', '\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1) * (b2-a2+1)\np2 = (d1-c1+1) * (d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 > p2 else "Gunnar")\n', '#!/usr/bin/env python\n\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1) * (b2-a2+1)\np2 = (d1-c1+1) * (d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar") \n']
2022-04-13 04:32:54.068140 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "a1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n"
    },
    {
      "index": 1,
      "text": "\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 > p2 else \"Gunnar\")\n"
    },
    {
      "index": 2,
      "text": "a1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n"
    }
  ],
  "created": 1649824371,
  "object": "edit"
}
2022-04-13 04:32:54.068319 fix syntax errors 3 ['a1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar")\n', '\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 > p2 else "Gunnar")\n', 'a1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar")\n']
2022-04-13 04:32:58.198595 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n"
    },
    {
      "index": 1,
      "text": "\n\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\")\n"
    },
    {
      "index": 2,
      "text": "\n\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint(\"Tie\" if p1 == p2 else \"Emma\" if p1 < p2 else \"Gunnar\") \n"
    }
  ],
  "created": 1649824374,
  "object": "edit"
}
2022-04-13 04:32:58.198770 fix syntax errors 3 ['\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar")\n', '\n\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\n\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar")\n', '\n\na1,b1,a2,b2 = map(int,input().split())\nc1,d1,c2,d2 = map(int,input().split())\np1 = (b1-a1+1)*(b2-a2+1)\np2 = (d1-c1+1)*(d2-c2+1)\n\nprint("Tie" if p1 == p2 else "Emma" if p1 < p2 else "Gunnar") \n']
2022-04-13 04:32:58.198795 size on output set 9
2022-04-13 04:32:58.198807 num operations 2
2022-04-13 04:32:58.198812 size on input set 1
2022-04-13 04:33:05.593753 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b - a + 1\n    return (1/diff)\n\nfor i in range(a1, b1 + 1):\n    for j in range(a2, b2 + 1):\n        if i + j > c1 + c2 + d1 + d2:\n            g += 1\n        elif i + j < c1 + c2 + d1 + d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 1,
      "text": "\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 2,
      "text": "\n\ngunnar_first, gunnar_second, gunnar_third, gunnar_fourth = [int(x) for x in input().split()]\nemma_first, emma_second, emma_third, emma_fourth = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\nfor i in range(gunnar_first, gunnar_second+1):\n    for j in range(gunnar_third, gunnar_fourth+1):\n        if i+j > emma_first+emma_second+emma_third+emma_fourth:\n            g += 1\n        elif i+j < emma_first+emma_second+emma_third+emma_fourth:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    }
  ],
  "created": 1649824378,
  "object": "edit"
}
2022-04-13 04:33:05.594006 fix spelling mistakes 3 ['\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b - a + 1\n    return (1/diff)\n\nfor i in range(a1, b1 + 1):\n    for j in range(a2, b2 + 1):\n        if i + j > c1 + c2 + d1 + d2:\n            g += 1\n        elif i + j < c1 + c2 + d1 + d2:\n            e += 1\n\nif g > e:\n    print("Gunnar")\nelif g < e:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\na1, b1, a2, b2 = [int(x) for x in input().split()]\nc1, d1, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\n\nif g > e:\n    print("Gunnar")\nelif g < e:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\ngunnar_first, gunnar_second, gunnar_third, gunnar_fourth = [int(x) for x in input().split()]\nemma_first, emma_second, emma_third, emma_fourth = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\nfor i in range(gunnar_first, gunnar_second+1):\n    for j in range(gunnar_third, gunnar_fourth+1):\n        if i+j > emma_first+emma_second+emma_third+emma_fourth:\n            g += 1\n        elif i+j < emma_first+emma_second+emma_third+emma_fourth:\n            e += 1\n\nif g > e:\n    print("Gunnar")\nelif g < e:\n    print("Emma")\nelse:\n    print("Tie")\n']
2022-04-13 04:33:05.594041 size on output set 3
2022-04-13 04:33:05.594047 size on input set 3
2022-04-13 04:33:13.637447 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "print(\"Hello World\")\n"
    },
    {
      "index": 1,
      "text": "\n\ngunnar_first, gunnar_second, gunnar_third, gunnar_fourth = [int(x) for x in input().split()]  # [1, 2, 3, 4]\nemma_first, emma_second, emma_third, emma_fourth = [int(x) for x in input().split()]  # [5, 6, 7, 8]\n\ng = 0\ne = 0\n\nfor i in range(gunnar_first, gunnar_second + 1):\n    for j in range(gunnar_third, gunnar_fourth + 1):\n        if i + j > emma_first + emma_second + emma_third + emma_fourth:\n            g += 1\n        elif i + j < emma_first + emma_second + emma_third + emma_fourth:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 2,
      "text": "\ngunnar_first, gunnar_second, gunnar_third, gunnar_fourth = [int(x) for x in input().split()]\nemma_first, emma_second, emma_third, emma_fourth = [int(x) for x in input().split()]\n\ng = e = 0\n\nfor i in range(gunnar_first, gunnar_second+1):\n    for j in range(gunnar_third, gunnar_fourth+1):\n        if i+j > emma_first+emma_second+emma_third+emma_fourth: g += 1\n        elif i+j < emma_first+emma_second+emma_third+emma_fourth: e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    }
  ],
  "created": 1649824385,
  "object": "edit"
}
2022-04-13 04:33:13.637620 fix syntax errors 3 ['print("Hello World")\n', '\n\ngunnar_first, gunnar_second, gunnar_third, gunnar_fourth = [int(x) for x in input().split()]  # [1, 2, 3, 4]\nemma_first, emma_second, emma_third, emma_fourth = [int(x) for x in input().split()]  # [5, 6, 7, 8]\n\ng = 0\ne = 0\n\nfor i in range(gunnar_first, gunnar_second + 1):\n    for j in range(gunnar_third, gunnar_fourth + 1):\n        if i + j > emma_first + emma_second + emma_third + emma_fourth:\n            g += 1\n        elif i + j < emma_first + emma_second + emma_third + emma_fourth:\n            e += 1\n\nif g > e:\n    print("Gunnar")\nelif g < e:\n    print("Emma")\nelse:\n    print("Tie")\n', '\ngunnar_first, gunnar_second, gunnar_third, gunnar_fourth = [int(x) for x in input().split()]\nemma_first, emma_second, emma_third, emma_fourth = [int(x) for x in input().split()]\n\ng = e = 0\n\nfor i in range(gunnar_first, gunnar_second+1):\n    for j in range(gunnar_third, gunnar_fourth+1):\n        if i+j > emma_first+emma_second+emma_third+emma_fourth: g += 1\n        elif i+j < emma_first+emma_second+emma_third+emma_fourth: e += 1\n\nif g > e:\n    print("Gunnar")\nelif g < e:\n    print("Emma")\nelse:\n    print("Tie")\n']
2022-04-13 04:33:19.451698 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\na1, b1, c1, d1 = [int(x) for x in input().split()]\na2, b2, c2, d2 = [int(x) for x in input().split()]\n\ng_win = 0\ne_win = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g_win += 1\n        elif i+j < c1+c2+d1+d2:\n            e_win += 1\n\nif g_win > e_win:\n    print(\"Gunnar\")\nelif g_win < e_win:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 1,
      "text": "\n\na1, b1, c1, d1 = [int(x) for x in input().split()]\na2, b2, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+d1+c2+d2:\n            g += 1\n        elif i+j < c1+d1+c2+d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 2,
      "text": "\n\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\ng = 0\ne = 0\n\n#def get_prob(a, b):\n#    diff = b-a+1\n#    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\n\nif g > e:\n    print(\"Gunnar\")\nelif g < e:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    }
  ],
  "created": 1649824393,
  "object": "edit"
}
2022-04-13 04:33:19.451870 fix syntax errors 3 ['\n\na1, b1, c1, d1 = [int(x) for x in input().split()]\na2, b2, c2, d2 = [int(x) for x in input().split()]\n\ng_win = 0\ne_win = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g_win += 1\n        elif i+j < c1+c2+d1+d2:\n            e_win += 1\n\nif g_win > e_win:\n    print("Gunnar")\nelif g_win < e_win:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\na1, b1, c1, d1 = [int(x) for x in input().split()]\na2, b2, c2, d2 = [int(x) for x in input().split()]\n\ng = 0\ne = 0\n\ndef get_prob(a, b):\n    diff = b-a+1\n    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+d1+c2+d2:\n            g += 1\n        elif i+j < c1+d1+c2+d2:\n            e += 1\n\nif g > e:\n    print("Gunnar")\nelif g < e:\n    print("Emma")\nelse:\n    print("Tie")\n', '\n\na1, b1, a2, b2 = map(int, input().split())\nc1, d1, c2, d2 = map(int, input().split())\n\ng = 0\ne = 0\n\n#def get_prob(a, b):\n#    diff = b-a+1\n#    return (1/diff)\n\nfor i in range(a1, b1+1):\n    for j in range(a2, b2+1):\n        if i+j > c1+c2+d1+d2:\n            g += 1\n        elif i+j < c1+c2+d1+d2:\n            e += 1\n\nif g > e:\n    print("Gunnar")\nelif g < e:\n    print("Emma")\nelse:\n    print("Tie")\n']
2022-04-13 04:33:31.536033 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\na, b, c, d = [int(x) for x in input().split()]\n\nif a > b:\n    print(\"Gunnar\")\nelif a < b:\n    print(\"Emma\")\nelse:\n    if c > d:\n        print(\"Emma\")\n    elif c < d:\n        print(\"Gunnar\")\n    else:\n        print(\"Tie\")\n\n\n\n"
    },
    {
      "index": 1,
      "text": "from collections import defaultdict\n\n\nn = int(input())\n\ndef get_prob_sum(a, b):\n    return (1 / (b - a + 1))\n\ndef get_prob(a, b, c, d):\n    p_sum = 0\n    for i in range(a, b + 1):\n        for j in range(c, d + 1):\n            p_sum += get_prob_sum(i, b) * get_prob_sum(j, d)\n    return p_sum\n\nd = defaultdict(list)\nfor i in range(n):\n    a, b, c, d = [int(x) for x in input().split()]\n    d[i] = [a, b, c, d]\n\ng_prob = 0\ne_prob = 0\n\nfor key, val in d.items():\n    if key == 0:\n        g_prob += get_prob(val[0], val[1], val[2], val[3])\n    else:\n        e_prob += get_prob(val[0], val[1], val[2], val[3])\n\nif g_prob > e_prob:\n    print(\"Gunnar\")\nelif g_prob < e_prob:\n    print(\"Emma\")\nelse:\n    print(\"Tie\")\n"
    },
    {
      "index": 2,
      "text": "\nprint(\"Hello World\")\n"
    }
  ],
  "created": 1649824399,
  "object": "edit"
}
2022-04-13 04:33:31.536278 fix syntax errors 3 ['\n\na, b, c, d = [int(x) for x in input().split()]\n\nif a > b:\n    print("Gunnar")\nelif a < b:\n    print("Emma")\nelse:\n    if c > d:\n        print("Emma")\n    elif c < d:\n        print("Gunnar")\n    else:\n        print("Tie")\n\n\n\n', 'from collections import defaultdict\n\n\nn = int(input())\n\ndef get_prob_sum(a, b):\n    return (1 / (b - a + 1))\n\ndef get_prob(a, b, c, d):\n    p_sum = 0\n    for i in range(a, b + 1):\n        for j in range(c, d + 1):\n            p_sum += get_prob_sum(i, b) * get_prob_sum(j, d)\n    return p_sum\n\nd = defaultdict(list)\nfor i in range(n):\n    a, b, c, d = [int(x) for x in input().split()]\n    d[i] = [a, b, c, d]\n\ng_prob = 0\ne_prob = 0\n\nfor key, val in d.items():\n    if key == 0:\n        g_prob += get_prob(val[0], val[1], val[2], val[3])\n    else:\n        e_prob += get_prob(val[0], val[1], val[2], val[3])\n\nif g_prob > e_prob:\n    print("Gunnar")\nelif g_prob < e_prob:\n    print("Emma")\nelse:\n    print("Tie")\n', '\nprint("Hello World")\n']
2022-04-13 04:33:31.536308 size on output set 9
2022-04-13 04:33:31.536319 num operations 2
2022-04-13 04:33:31.536324 size on input set 1
2022-04-13 04:33:34.820476 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides \n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    }
  ],
  "created": 1649824411,
  "object": "edit"
}
2022-04-13 04:33:34.820643 fix spelling mistakes 3 ['\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides \n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n']
2022-04-13 04:33:34.820672 size on output set 3
2022-04-13 04:33:34.820679 size on input set 3
2022-04-13 04:33:37.041350 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/g1_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/g1_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/g1_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    }
  ],
  "created": 1649824414,
  "object": "edit"
}
2022-04-13 04:33:37.041551 fix syntax errors 3 ['\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/g1_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/g1_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, e1_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/e1_sides\n    e1_prob = e1_sides/g1_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n']
2022-04-13 04:33:39.691069 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2\n    e1_prob = e1_sides/e2\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2\n    e1_prob = e1_sides/e2 \n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    }
  ],
  "created": 1649824417,
  "object": "edit"
}
2022-04-13 04:33:39.691316 fix syntax errors 3 ['\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2\n    e1_prob = e1_sides/e2\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split())\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2\n    e1_prob = e1_sides/e2 \n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n']
2022-04-13 04:33:44.752572 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides / g2_sides\n    e1_prob = e1_sides / e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    e1_sides = 6\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob:\n        print(\"Emma\")\n    else:\n        print(\"Tie\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides #this is a comment\n    e1_prob = e1_sides/e2_sides #this is a comment\n    #Compare probabilities\n    if g1_prob > e1_prob: #this is a comment\n        print(\"Gunnar\")\n    elif g1_prob < e1_prob: #this is a comment\n        print(\"Emma\")\n    else: #this is a comment\n        print(\"Tie\")\n\nmain() #this is a comment\n"
    }
  ],
  "created": 1649824419,
  "object": "edit"
}
2022-04-13 04:33:44.752746 fix syntax errors 3 ['\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides / g2_sides\n    e1_prob = e1_sides / e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nmain()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    e1_sides = 6\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides\n    e1_prob = e1_sides/e2_sides\n    #Compare probabilities\n    if g1_prob > e1_prob:\n        print("Gunnar")\n    elif g1_prob < e1_prob:\n        print("Emma")\n    else:\n        print("Tie")\n\nif __name__ == "__main__":\n    main()\n', '\n\n#-----Solution-----\ndef main():\n    #Read Input\n    g1, g2, e1, e2 = map(int, input().split()) #this is a comment\n    #Calculate the number of dice sides\n    g1_sides, g2_sides = g2-g1+1, e2-e1+1\n    g1_prob = g1_sides/g2_sides #this is a comment\n    e1_prob = e1_sides/e2_sides #this is a comment\n    #Compare probabilities\n    if g1_prob > e1_prob: #this is a comment\n        print("Gunnar")\n    elif g1_prob < e1_prob: #this is a comment\n        print("Emma")\n    else: #this is a comment\n        print("Tie")\n\nmain() #this is a comment\n']
2022-04-13 04:33:44.752781 size on output set 7
2022-04-13 04:33:44.752795 num operations 2
2022-04-13 04:33:44.752800 size on input set 1
2022-04-13 04:33:54.795149 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    dist = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824424,
  "object": "edit"
}
2022-04-13 04:33:54.795422 fix spelling mistakes 3 ['\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    dist = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:33:54.795482 size on output set 3
2022-04-13 04:33:54.795490 size on input set 3
2022-04-13 04:34:01.701406 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    dist = []\n    for i in range(a, b+1):\n        dist.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    dist = []\n    for i in range(a, b+1):\n        dist.append(1/(b-a+1))\n    return dist\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob1[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_dist = prob_dist(gunnar_dice[0], gunnar_dice[1])\n    emma_dist = prob_dist(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_dist(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_dist(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824434,
  "object": "edit"
}
2022-04-13 04:34:01.701851 fix syntax errors 3 ['\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    dist = []\n    for i in range(a, b+1):\n        dist.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    dist = []\n    for i in range(a, b+1):\n        dist.append(1/(b-a+1))\n    return dist\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob1[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_dist = prob_dist(gunnar_dice[0], gunnar_dice[1])\n    emma_dist = prob_dist(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_dist(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_dist(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_dist(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:34:04.588385 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob + emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824441,
  "object": "edit"
}
2022-04-13 04:34:04.588674 fix syntax errors 3 ['\n\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob))\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob + emma_prob))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport numpy as np\nfrom scipy.stats import binom\n\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring\n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr)):\n        for j in range(len(distr)):\n            prob.append(distr[i]*distr[j])\n    return prob\n\ndef find_winner(prob):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob)):\n        if i < len(prob)/2:\n            prob_gunnar += prob[i]\n        else:\n            prob_emma += prob[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr)\n    emma_prob = find_prob(emma_distr)\n\n    print(find_winner(gunnar_prob))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:34:06.963860 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    \"\"\"\n    Takes user input and finds the winner of the game.\n    \"\"\"\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef prob_distr(a, b):\n    \"\"\"\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    \"\"\"\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    \"\"\"\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    \"\"\"\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    \"\"\"\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    \"\"\"\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return \"Gunnar\"\n    elif prob_gunnar < prob_emma:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824444,
  "object": "edit"
}
2022-04-13 04:34:06.964111 fix syntax errors 3 ['\n\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    """\n    Takes user input and finds the winner of the game.\n    """\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n', '\ndef prob_distr(a, b):\n    """\n    Finds the probability of each outcome occurring \n    in a given range of numbers.\n    """\n    distr = []\n    for i in range(a, b+1):\n        distr.append(1/(b-a+1))\n    return distr\n\ndef find_prob(distr1, distr2):\n    """\n    Finds the probability of each possible outcome\n    of the sum of the two dice.\n    """\n    prob = []\n    for i in range(len(distr1)):\n        for j in range(len(distr2)):\n            prob.append(distr1[i]*distr2[j])\n    return prob\n\ndef find_winner(prob1, prob2):\n    """\n    Finds the probability of each player winning\n    and decides who has the higher probability of winning.\n    """\n    prob_gunnar = 0\n    prob_emma = 0\n    for i in range(len(prob1)):\n        if i < len(prob1)/2:\n            prob_gunnar += prob1[i]\n        else:\n            prob_emma += prob2[i]\n    if prob_gunnar > prob_emma:\n        return "Gunnar"\n    elif prob_gunnar < prob_emma:\n        return "Emma"\n    else:\n        return "Tie"\n\ndef main():\n    gunnar_dice = input().split()\n    gunnar_dice = [int(i) for i in gunnar_dice]\n    emma_dice = input().split()\n    emma_dice = [int(i) for i in emma_dice]\n\n    gunnar_distr = prob_distr(gunnar_dice[0], gunnar_dice[1])\n    emma_distr = prob_distr(emma_dice[0], emma_dice[1])\n\n    gunnar_prob = find_prob(gunnar_distr, gunnar_distr)\n    emma_prob = find_prob(emma_distr, emma_distr)\n\n    print(find_winner(gunnar_prob, emma_prob))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:34:06.964173 size on output set 9
2022-04-13 04:34:06.964184 num operations 2
2022-04-13 04:34:06.964189 size on input set 1
2022-04-13 04:34:09.637454 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get inputs\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Get input.\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities.\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values.\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values.\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunn\")\nelse:\n    print(\"Emma\")\n"
    }
  ],
  "created": 1649824447,
  "object": "edit"
}
2022-04-13 04:34:09.637631 fix spelling mistakes 3 ['\n\n# Get inputs\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunnar")\nelse:\n    print("Emma")\n', '\n\n# Get input.\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities.\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values.\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values.\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunnar")\nelse:\n    print("Emma")\n', '\n\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunn")\nelse:\n    print("Emma")\n']
2022-04-13 04:34:09.637733 size on output set 3
2022-04-13 04:34:09.637741 size on input set 3
2022-04-13 04:34:24.435852 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunn\")\nelse:\n    print(\"Emma\")\n"
    },
    {
      "index": 1,
      "text": "\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunn\")\nelse:\n    print(\"Emma\")\n"
    },
    {
      "index": 2,
      "text": "\n\n# Get input\ninp = input().split()\ngunnar_a1 = int(inp[0])\ngunnar_b1 = int(inp[1])\ngunnar_a2 = int(inp[2])\ngunnar_b2 = int(inp[3])\ninp = input().split()\nemma_a1 = int(inp[0])\nemma_b1 = int(inp[1])\nemma_a2 = int(inp[2])\nemma_b2 = int(inp[3])\n\n# Calculate probabilities\ngunnar_p1 = 1/(gunnar_b1 - gunnar_a1 + 1)\ngunnar_p2 = 1/(gunnar_b2 - gunnar_a2 + 1)\nemma_p1 = 1/(emma_b1 - emma_a1 + 1)\nemma_p2 = 1/(emma_b2 - emma_a2 + 1)\n\n# Calculate expected values\ngunnar_e = 0\nfor i in range(gunnar_a1, gunnar_b1 + 1):\n    gunnar_e += i*gunnar_p1\nfor i in range(gunnar_a2, gunnar_b2 + 1):\n    gunnar_e += i*gunnar_p2\nemma_e = 0\nfor i in range(emma_a1, emma_b1 + 1):\n    emma_e += i*emma_p1\nfor i in range(emma_a2, emma_b2 + 1):\n    emma_e += i*emma_p2\n\n# Compare expected values\nif gunnar_e == emma_e:\n    print(\"Tie\")\nelif gunnar_e > emma_e:\n    print(\"Gunn\")\nelse:\n    print(\"Emma\")\n"
    }
  ],
  "created": 1649824449,
  "object": "edit"
}
2022-04-13 04:34:24.436024 fix syntax errors 3 ['\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunn")\nelse:\n    print("Emma")\n', '\n# Get input\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunn")\nelse:\n    print("Emma")\n', '\n\n# Get input\ninp = input().split()\ngunnar_a1 = int(inp[0])\ngunnar_b1 = int(inp[1])\ngunnar_a2 = int(inp[2])\ngunnar_b2 = int(inp[3])\ninp = input().split()\nemma_a1 = int(inp[0])\nemma_b1 = int(inp[1])\nemma_a2 = int(inp[2])\nemma_b2 = int(inp[3])\n\n# Calculate probabilities\ngunnar_p1 = 1/(gunnar_b1 - gunnar_a1 + 1)\ngunnar_p2 = 1/(gunnar_b2 - gunnar_a2 + 1)\nemma_p1 = 1/(emma_b1 - emma_a1 + 1)\nemma_p2 = 1/(emma_b2 - emma_a2 + 1)\n\n# Calculate expected values\ngunnar_e = 0\nfor i in range(gunnar_a1, gunnar_b1 + 1):\n    gunnar_e += i*gunnar_p1\nfor i in range(gunnar_a2, gunnar_b2 + 1):\n    gunnar_e += i*gunnar_p2\nemma_e = 0\nfor i in range(emma_a1, emma_b1 + 1):\n    emma_e += i*emma_p1\nfor i in range(emma_a2, emma_b2 + 1):\n    emma_e += i*emma_p2\n\n# Compare expected values\nif gunnar_e == emma_e:\n    print("Tie")\nelif gunnar_e > emma_e:\n    print("Gunn")\nelse:\n    print("Emma")\n']
2022-04-13 04:34:41.940067 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get input.\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities.\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values.\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values.\nif g_e == e_e:\n    print('Tie')\nelif g_e > e_e:\n    print('Gunnar')\nelse:\n    print('Emma')\n"
    },
    {
      "index": 1,
      "text": "\n# Get input.\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities.\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values.\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values.\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Get input.\n    inp = input().split()\n    g_a1 = int(inp[0])\n    g_b1 = int(inp[1])\n    g_a2 = int(inp[2])\n    g_b2 = int(inp[3])\n    inp = input().split()\n    e_a1 = int(inp[0])\n    e_b1 = int(inp[1])\n    e_a2 = int(inp[2])\n    e_b2 = int(inp[3])\n\n    # Calculate probabilities.\n    g_p1 = 1/(g_b1 - g_a1 + 1)\n    g_p2 = 1/(g_b2 - g_a2 + 1)\n    e_p1 = 1/(e_b1 - e_a1 + 1)\n    e_p2 = 1/(e_b2 - e_a2 + 1)\n\n    # Calculate expected values.\n    g_e = 0\n    for i in range(g_a1, g_b1 + 1):\n        g_e += i*g_p1\n    for i in range(g_a2, g_b2 + 1):\n        g_e += i*g_p2\n    e_e = 0\n    for i in range(e_a1, e_b1 + 1):\n        e_e += i*e_p1\n    for i in range(e_a2, e_b2 + 1):\n        e_e += i*e_p2\n\n    # Compare expected values.\n    if g_e == e_e:\n        print(\"Tie\")\n    elif g_e > e_e:\n        print(\"Gunnar\")\n    else:\n        print(\"Emma\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649824464,
  "object": "edit"
}
2022-04-13 04:34:41.940259 fix syntax errors 3 ["\n\n# Get input.\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities.\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values.\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values.\nif g_e == e_e:\n    print('Tie')\nelif g_e > e_e:\n    print('Gunnar')\nelse:\n    print('Emma')\n", '\n# Get input.\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities.\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values.\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values.\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunnar")\nelse:\n    print("Emma")\n', '\n\ndef main():\n    # Get input.\n    inp = input().split()\n    g_a1 = int(inp[0])\n    g_b1 = int(inp[1])\n    g_a2 = int(inp[2])\n    g_b2 = int(inp[3])\n    inp = input().split()\n    e_a1 = int(inp[0])\n    e_b1 = int(inp[1])\n    e_a2 = int(inp[2])\n    e_b2 = int(inp[3])\n\n    # Calculate probabilities.\n    g_p1 = 1/(g_b1 - g_a1 + 1)\n    g_p2 = 1/(g_b2 - g_a2 + 1)\n    e_p1 = 1/(e_b1 - e_a1 + 1)\n    e_p2 = 1/(e_b2 - e_a2 + 1)\n\n    # Calculate expected values.\n    g_e = 0\n    for i in range(g_a1, g_b1 + 1):\n        g_e += i*g_p1\n    for i in range(g_a2, g_b2 + 1):\n        g_e += i*g_p2\n    e_e = 0\n    for i in range(e_a1, e_b1 + 1):\n        e_e += i*e_p1\n    for i in range(e_a2, e_b2 + 1):\n        e_e += i*e_p2\n\n    # Compare expected values.\n    if g_e == e_e:\n        print("Tie")\n    elif g_e > e_e:\n        print("Gunnar")\n    else:\n        print("Emma")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 04:34:59.996216 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get inputs\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1.0/(g_b1 - g_a1 + 1)\ng_p2 = 1.0/(g_b2 - g_a2 + 1)\ne_p1 = 1.0/(e_b1 - e_a1 + 1)\ne_p2 = 1.0/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    # Get inputs\n    inp = input().split()\n    g_a1 = int(inp[0])\n    g_b1 = int(inp[1])\n    g_a2 = int(inp[2])\n    g_b2 = int(inp[3])\n    inp = input().split()\n    e_a1 = int(inp[0])\n    e_b1 = int(inp[1])\n    e_a2 = int(inp[2])\n    e_b2 = int(inp[3])\n\n    # Calculate probabilities\n    g_p1 = 1/(g_b1 - g_a1 + 1)\n    g_p2 = 1/(g_b2 - g_a2 + 1)\n    e_p1 = 1/(e_b1 - e_a1 + 1)\n    e_p2 = 1/(e_b2 - e_a2 + 1)\n\n    # Calculate expected values\n    g_e = 0\n    for i in range(g_a1, g_b1 + 1):\n        g_e += i*g_p1\n    for i in range(g_a2, g_b2 + 1):\n        g_e += i*g_p2\n    e_e = 0\n    for i in range(e_a1, e_b1 + 1):\n        e_e += i*e_p1\n    for i in range(e_a2, e_b2 + 1):\n        e_e += i*e_p2\n\n    # Compare expected values\n    if g_e == e_e:\n        print(\"Tie\")\n    elif g_e > e_e:\n        print(\"Gunnar\")\n    else:\n        print(\"Emma\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Get inputs\ninp = raw_input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = raw_input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print(\"Tie\")\nelif g_e > e_e:\n    print(\"Gunnar\")\nelse:\n    print(\"Emma\")\n"
    }
  ],
  "created": 1649824481,
  "object": "edit"
}
2022-04-13 04:34:59.996389 fix syntax errors 3 ['\n\n# Get inputs\ninp = input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1.0/(g_b1 - g_a1 + 1)\ng_p2 = 1.0/(g_b2 - g_a2 + 1)\ne_p1 = 1.0/(e_b1 - e_a1 + 1)\ne_p2 = 1.0/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunnar")\nelse:\n    print("Emma")\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    # Get inputs\n    inp = input().split()\n    g_a1 = int(inp[0])\n    g_b1 = int(inp[1])\n    g_a2 = int(inp[2])\n    g_b2 = int(inp[3])\n    inp = input().split()\n    e_a1 = int(inp[0])\n    e_b1 = int(inp[1])\n    e_a2 = int(inp[2])\n    e_b2 = int(inp[3])\n\n    # Calculate probabilities\n    g_p1 = 1/(g_b1 - g_a1 + 1)\n    g_p2 = 1/(g_b2 - g_a2 + 1)\n    e_p1 = 1/(e_b1 - e_a1 + 1)\n    e_p2 = 1/(e_b2 - e_a2 + 1)\n\n    # Calculate expected values\n    g_e = 0\n    for i in range(g_a1, g_b1 + 1):\n        g_e += i*g_p1\n    for i in range(g_a2, g_b2 + 1):\n        g_e += i*g_p2\n    e_e = 0\n    for i in range(e_a1, e_b1 + 1):\n        e_e += i*e_p1\n    for i in range(e_a2, e_b2 + 1):\n        e_e += i*e_p2\n\n    # Compare expected values\n    if g_e == e_e:\n        print("Tie")\n    elif g_e > e_e:\n        print("Gunnar")\n    else:\n        print("Emma")\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Get inputs\ninp = raw_input().split()\ng_a1 = int(inp[0])\ng_b1 = int(inp[1])\ng_a2 = int(inp[2])\ng_b2 = int(inp[3])\ninp = raw_input().split()\ne_a1 = int(inp[0])\ne_b1 = int(inp[1])\ne_a2 = int(inp[2])\ne_b2 = int(inp[3])\n\n# Calculate probabilities\ng_p1 = 1/(g_b1 - g_a1 + 1)\ng_p2 = 1/(g_b2 - g_a2 + 1)\ne_p1 = 1/(e_b1 - e_a1 + 1)\ne_p2 = 1/(e_b2 - e_a2 + 1)\n\n# Calculate expected values\ng_e = 0\nfor i in range(g_a1, g_b1 + 1):\n    g_e += i*g_p1\nfor i in range(g_a2, g_b2 + 1):\n    g_e += i*g_p2\ne_e = 0\nfor i in range(e_a1, e_b1 + 1):\n    e_e += i*e_p1\nfor i in range(e_a2, e_b2 + 1):\n    e_e += i*e_p2\n\n# Compare expected values\nif g_e == e_e:\n    print("Tie")\nelif g_e > e_e:\n    print("Gunnar")\nelse:\n    print("Emma")\n']
2022-04-13 04:34:59.996429 size on output set 8
