["\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline().strip()\n\n    #print(type(s))\n\n    # split the string into a list of characters\n    s = list(s)\n    #print(type(s))\n\n    # convert the list of characters to a list of integers\n    s = list(map(int, s))\n    #print(type(s))\n\n    # sum the digits in s\n    s = sum(s)\n    #print(type(s))\n\n    # if the sum is divisible by 3, s is divisible by 3\n    if s % 3 == 0:\n        print(len(str(s)))\n    else:\n        print(0)\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline()\n    s = s.strip()\n    s = int(s)\n    print(s)\n\n    # convert s to a string.\n    s = str(s)\n    print(s)\n\n    # split the string into a list of characters\n    s = list(s)\n    print(s)\n\n    # convert the list of characters to a list of integers\n    s = list(map(int, s))\n    print(s)\n\n    # sum the digits in s\n    s = sum(s)\n    print(s)\n\n    # if the sum is divisible by 3, s is divisible by 3\n    if s % 3 == 0:\n        print(len(s) - 1)\n    else:\n        print(0)\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\ns = input()\n\n# Count the number of digits that are divisible by 3.\ndigits_divisible_by_3 = 0\nfor digit in s:\n    if int(digit) % 3 == 0:\n        digits_divisible_by_3 += 1\n\n# Count the number of digits that have remainder 1.\ndigits_remainder_1 = 0\nfor digit in s:\n    if int(digit) % 3 == 1:\n        digits_remainder_1 += 1\n\n# Count the number of digits that have remainder 2.\ndigits_remainder_2 = 0\nfor digit in s:\n    if int(digit) % 3 == 2:\n        digits_remainder_2 += 1\n\n# Compute the maximum number of cuts that can be made.\nmax_cuts = 0\n\n# We can always cut a digit that is divisible by 3.\nmax_cuts += digits_divisible_by_3\n\n# We can cut a digit that is not divisible by 3 if the number of digits\n# with the same remainder is greater than the number of digits that are\n# divisible by 3.\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3\n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n", "\n\n# https://open.kattis.com/problems/filip\n\nimport sys\n\ndef main():\n    # read the input and convert it to a list of integers\n    a, b = sys.stdin.readline().split()\n    a = list(map(int, a))\n    b = list(map(int, b))\n\n    # reverse the lists\n    a.reverse()\n    b.reverse()\n\n    # compare the lists\n    for i in range(3):\n        if a[i] > b[i]:\n            print(a[0], a[1], a[2], sep='')\n            return 0\n        elif a[i] < b[i]:\n            print(b[0], b[1], b[2], sep='')\n            return 0\n\n    # if the lists are equal, print the first one\n    print(a[0], a[1], a[2], sep='')\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\ns = input()\n\n# Count the number of digits that are divisible by 3.\ndigits_divisible_by_3 = 0\nfor digit in s:\n    digits_divisible_by_3 += (int(digit) % 3) == 0\n\n# Count the number of digits that have a remainder of 1.\ndigits_remainder_1 = 0\nfor digit in s:\n    digits_remainder_1 += (int(digit) % 3) == 1\n\n# Count the number of digits that have a remainder of 2.\ndigits_remainder_2 = 0\nfor digit in s:\n    digits_remainder_2 += (int(digit) % 3) == 2\n\n# Compute the maximum number of cuts that can be made.\nmax_cuts = 0\n\n# We can always cut a digit that is divisible by 3.\nmax_cuts += digits_divisible_by_3\n\n# We can cut a digit that is not divisible by 3 if the number of digits\n# with the same remainder is greater than the number of digits that are\n# divisible by 3.\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3\n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n", "\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline()\n    s = s.strip()\n    s = int(s)\n    #print(s)\n\n    # convert s to a string\n    s = str(s)\n    #print(s)\n\n    # split the string into a list of characters\n    s = list(s)\n    #print(s)\n\n    # convert the list of characters to a list of integers\n    s = list(map(int, s))\n    #print(s)\n\n\n    # sum the digits in s until the sum is divisible by 3\n    while True:\n        s = sum(s)\n        #print(s)\n        # if the sum is divisible by 3, s is divisible by 3\n        if s % 3 == 0:\n            print(len(s) - 1)\n            break\n        else:\n            print(0)\n            break\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\ns = input()\n\ndef is_divisible_by_3(digit):\n    return int(digit) % 3 == 0\n\n# Count the number of digits that have a remainder of 1.\ndigits_remainder_1 = 0\nfor digit in s:\n    digits_remainder_1 += int(digit) % 3 == 1\n\n# Count the number of digits that have a remainder of 2.\ndigits_remainder_2 = 0\nfor digit in s:\n    digits_remainder_2 += int(digit) % 3 == 2\n\n# Compute the maximum number of cuts that can be made.\nmax_cuts = 0\n\n# We can always cut a digit that is divisible by 3.\nmax_cuts += digits_divisible_by_3\n\n# We can cut a digit that is not divisible by 3 if the number of digits\n# with the same remainder is greater than the number of digits that are\n# divisible by 3.\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3\n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n", "\ns = str(s)\ns = input()\n\n# Count the number of digits that are divisible by 3.\ndigits_divisible_by_3 = 0\nfor digit in s:\n    if int(digit) % 3 == 0:\n        digits_divisible_by_3 += 1\n\n# Count the number of digits that have a remainder of 1.\ndigits_remainder_1 = 0\nfor digit in s:\n    if int(digit) % 3 == 1:\n        digits_remainder_1 += 1\n\n# Count the number of digits that have a remainder of 2.\ndigits_remainder_2 = 0\nfor digit in s:\n    if int(digit) % 3 == 2:\n        digits_remainder_2 += 1\n\n# Compute the maximum number of cuts that can be made.\nmax_cuts = 0\n\n# We can always cut a digit that is divisible by 3.\nmax_cuts += digits_divisible_by_3\n\n# We can cut a digit that is not divisible by 3 if the number of digits\n# with the same remainder is greater than the number of digits that are\n# divisible by 3.\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3\n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n", "\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline()\n    s = s.strip()\n    s = int(s)\n    # print(s)\n\n    # convert s to a string.\n    s = str(s)\n    # print(s)\n\n    # split the string into a list of characters\n    s = list(s)\n    # print(s)\n\n    # convert the list of characters to a list of integers\n    s = list(map(int, s))\n    # print(s)\n\n    # sum the digits in s\n    s = sum(s)\n    # print(s)\n\n    # if the sum is divisible by 3, s is divisible by 3\n    if s % 3 == 0:\n        print(len(s) - 1)\n    else:\n        print(0)\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\n# s = input()\n#\n# # Count the number of digits that are divisible by 3.\n# digits_divisible_by_3 = 0\n# for digit in s:\n#     digits_divisible_by_3 += int(digit) % 3 == 0\n#\n# # Count the number of digits that have a remainder of 1 when divided by 3.\n# digits_remainder_1 = 0\n# for digit in s:\n#     digits_remainder_1 += int(digit) % 3 == 1\n#\n# # Count the number of digits that have a remainder of 2 when divided by 3.\n# digits_remainder_2 = 0\n# for digit in s:\n#     digits_remainder_2 += int(digit) % 3 == 2\n#\n# # Compute the maximum number of cuts that can be made.\n# max_cuts = 0\n#\n# # We can always cut a digit that is divisible by 3.\n# max_cuts += digits_divisible_by_3\n#\n# # We can cut a digit that is not divisible by 3 if the number of digits\n# # with the same remainder is greater than the number of digits that are\n# # divisible by 3.\n# if digits_remainder_1 > digits_divisible_by_3:\n#     max_cuts += digits_remainder_1 - digits_divisible_by_3\n#\n# if digits_remainder_2 > digits_divisible_by_3:\n#     max_cuts += digits_remainder_2 - digits_divisible_by_3\n#\n# print(max_cuts)\n", "\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline()\n    s = s.strip()\n    s = int(s)\n    #print(s)\n\n    # convert s to a string\n    s = str(s)\n    #print(s)\n\n    # split the string into a list of characters\n    s = list(s)\n    #print(s)\n\n    # convert the list of characters to a list of integers\n    s = list(map(int, s))\n    #print(s)\n\n    # sum the digits in s\n    s = sum(s)\n    #print(s)\n\n    # if the sum is divisible by 3, s is divisible by 3\n    if s % 3 == 0:\n        print(len(s) - 1) # len(s) is how many digits are in s\n    else:\n        print(0)\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ns = input()\n\n# Count the number of digits that are divisible by 3.\ndigits_divisible_by_3 = 0\nfor digit in s:\n    digits_divisible_by_3 += int(digit) % 3 == 0\n\n# Count the number of digits that have a remainder of 1 when divided by 3.\ndigits_remainder_1 = 0\nfor digit in s:\n    digits_remainder_1 += int(digit) % 3 == 1\n\n# Count the number of digits that have a remainder of 2 when divided by 3.\ndigits_remainder_2 = 0\nfor digit in s:\n    digits_remainder_2 += int(digit) % 3 == 2\n\n# Compute the maximum number of cuts that can be made.\nmax_cuts = 0\n\n# We can always cut a digit that is divisible by 3.\nmax_cuts += digits_divisible_by_3\n\n# We can cut a digit that is not divisible by 3 if the number of digits\n# with the same remainder is greater than the number of digits that are\n# divisible by 3.\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3 \n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n", "\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline()\n    s = s.strip()\n    s = int(s)\n    #print(s)\n\n    # convert s to a string\n    s = str(s)\n    #print(s)\n\n    # split the string into a list of characters\n    s = list(s)\n    #print(s)\n\n    # convert the list of characters to a list of integers\n    s = list(map(int, s))\n    #print(s)\n\n    # sum the digits in s\n    s = sum(s)\n    #print(s)\n\n    # if the sum is divisible by 3, s is divisible by 3\n    if s % 3 == 0:\n        print(len(s) - 1)\n    else:\n        print(0)\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline()\n    s = s.strip()\n    s = int(s)\n    # print(s)\n\n    # convert s to a string.\n    s = str(s)\n    # print(s)\n\n    # split the string into a list of characters\n    s = list(s)\n    # print(s)\n\n    # convert the list of characters to a list of integers\n    s = list(map(int, s))\n    # print(s)\n\n    # sum the digits in s\n    s = sum(s)\n    # print(s)\n\n    # if the sum is divisible by 3, s is divisible by 3\n    if s % 3 == 0:\n        print(len(s) - 1)\n    else:\n\n        print(0)\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\ns = input()\n\n# Count the number of digits that are divisible by 3.\ndigits_divisible_by_3 = 0\nfor digit in s:\n    digits_divisible_by_3 += int(digit) % 3 == 0\n\n# Count the number of digits that have remainder 1.\ndigits_remainder_1 = 0\nfor digit in s:\n    digits_remainder_1 += int(digit) % 3 == 1\n\n# Count the number of digits that have remainder 2.\ndigits_remainder_2 = 0\nfor digit in s:\n    digits_remainder_2 += int(digit) % 3 == 2\n\n# Compute the maximum number of cuts that can be made.\nmax_cuts = 0\n\n# We can always cut a digit that is divisible by 3.\nmax_cuts += digits_divisible_by_3\n\n# We can cut a digit that is not divisible by 3 if the number of digits\n# with the same remainder is greater than the number of digits that are\n# divisible by 3.\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3\n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n", "\n\ns = input()\n\ndigits_divisible_by_3 = 0\nfor digit in s:\n    digits_divisible_by_3 += int(digit) % 3 == 0\n\ndigits_remainder_1 = 0\nfor digit in s:\n    digits_remainder_1 += int(digit) % 3 == 1\n\ndigits_remainder_2 = 0\nfor digit in s:\n    digits_remainder_2 += int(digit) % 3 == 2\n\nmax_cuts = 0\n\nmax_cuts += digits_divisible_by_3\n\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3\n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n", "\n\nimport sys\n\ndef main():\n    # read the input\n    s = sys.stdin.readline()\n    s = s.strip()\n    s = int(s)\n    #print(s)\n\n    # # convert s to a string\n    # s = str(s)\n    # #print(s)\n    #\n    # # split the string into a list of characters\n    # s = list(s)\n    # #print(s)\n    #\n    # # convert the list of characters to a list of integers\n    # s = list(map(int, s))\n    # #print(s)\n    #\n    # # sum the digits in s\n    # s = sum(s)\n    # #print(s)\n    #\n    # # if the sum is divisible by 3, s is divisible by 3\n    # if s % 3 == 0:\n    #     print(len(s))\n    # else:\n    #     print(0)\n\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\n# Count the number of digits that have remainder 1.\ndigits_remainder_1 = 0\nfor digit in s:\n    digits_remainder_1 += int(digit) % 3 == 1\n\n# Count the number of digits that have remainder 2.\ndigits_remainder_2 = 0\nfor digit in s:\n    digits_remainder_2 += int(digit) % 3 == 2\ns = input()\n\n# Count the number of digits that are divisible by 3.\ndigits_divisible_by_3 = 0\nfor digit in s:\n    digits_divisible_by_3 += int(digit) % 3 == 0\n\n# Compute the maximum number of cuts that can be made.\nmax_cuts = 0\n\n# We can always cut a digit that is divisible by 3.\nmax_cuts += digits_divisible_by_3\n\n# We can cut a digit that is not divisible by 3 if the number of digits\n# with the same remainder is greater than the number of digits that are\n# divisible by 3.\nif digits_remainder_1 > digits_divisible_by_3:\n    max_cuts += digits_remainder_1 - digits_divisible_by_3\n\nif digits_remainder_2 > digits_divisible_by_3:\n    max_cuts += digits_remainder_2 - digits_divisible_by_3\n\nprint(max_cuts)\n"]