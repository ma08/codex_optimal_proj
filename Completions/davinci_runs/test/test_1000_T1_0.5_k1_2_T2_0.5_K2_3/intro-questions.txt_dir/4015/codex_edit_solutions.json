["def get_input() -> list:\n    return list(map(int, input().split()))\n\n\ndef solve(n: int, m: int) -> int:\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "def get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return (solve(n * 2, m) + 1) if m % (n * 2) == 0 else (solve(n * 3, m) + 1)\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "#-----Solution-----\n\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\n#-----Code-----\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n", "\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n", "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n        return -1\n    if m % (n * 2) == 0:\n        return solve(n * 2, m) + 1\n    if m % (n * 3) == 0:\n        return solve(n * 3, m) + 1\n    return -1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input_():\n    return [int(x) for x in input().split()]  # \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438\n\n\n\ndef solve(n, m):  # \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u043b\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n    if n == m:  # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0440\u0430\u0432\u043d\u044b, \u0442\u043e \u043e\u0442\u0432\u0435\u0442 0\n        return 0\n    if n > m:  # \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e, \u0442\u043e \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0435\u043b\u044c\u0437\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c\n        return -1\n    if m % n != 0:  # \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430, \u0442\u043e \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0435\u043b\u044c\u0437\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1  # \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f\n\n\nif __name__ == '__main__':\n    n, m = get_input_()  # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430\n    print(solve(n, m))  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442\n", "def get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    pass\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\n# -----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n", "\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than M.\n#Then, multiply by 2 as many times as possible, until the number is greater than M.\n#If the number is not M, then the answer is -1.\n\nN, M = map(int, input().split())\n\nif N == M:\n    print(0)\nelif M % 2 == 0 and N % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while N < M:\n        if N * 3 <= M:\n            N *= 3\n        else:\n            N *= 2\n        steps += 1\n    if N == M:\n        print(steps)\n    else:\n        print(-1)\n", "#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than M.\n#Then, multiply by 2 as many times as possible, until the number is greater than M.\n#If the number is not M, then the answer is -1.\nN, M = map(int, input().split())\nif N == M:\n    print(0)\nelif M % 2 == 0 and N % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while N < M:\n        if N * 3 <= M and N * 2 <= M:\n            N *= 2\n        elif N * 3 <= M:\n            N *= 3\n        steps += 1\n    if N == M:\n        print(steps)\n    else:\n        print(-1)\n", "def get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n:\n        return -1\n    return solve(n * 2, m) + 1 if not m % (n * 2) else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\ndef get_input_():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input_()\n    print(solve(n, m))\n", "\n\ndef get_input_():\n    return [int(x) for x in input().split()]  # noqa\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1  # noqa\n\n\nif __name__ == '__main__':\n    n, m = get_input_()\n    print(solve(n, m))\n", "def get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]