["\n\n# SOLUTION :\n\ns, v1, v2 = input().split()\ns, v1, v2 = int(s), int(v1), int(v2)\n\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 - v2) == 0:\n    print(s // (v1 - v2), 0)\nelif s % (v1 - v2) <= v2:\n    print(s // (v1 - v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split()) #\n    if s % v1 == 0:\n        print(s // v1, 0)\n    elif s % v2 == 0:\n        print(0, s // v2)\n    elif s % v2 == v1 % v2:\n        print(s // v1, (s % v1) // v2)\n    else:\n        print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ns, v1, v2 = [int(i) for i in sys.stdin.readline().split()]\n\nx = s // v1\nif s % v1 == 0:\n    print(x, 0)\nelse: \n    y = s % v1 // v2\n    while s % v1 != 0 and s % v1 < v2:\n        x -= 1\n        y = s % v1 // v2\n    if s % v1 != 0:\n        print(x, y + 1)\n    else:\n        print(x, y)\n", "\nimport sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles\nshipment_volume, bottle_one_volume, bottle_two_volume = [int(i) for i in sys.stdin.readline().split()]\n\n# If the shipment volume is greater than the volume of a bottle one or if the\n# volume of a bottle one is not greater than the volume of a bottle two it is\n# impossible to store the oil\nif shipment_volume > bottle_one_volume or bottle_one_volume <= bottle_two_volume:\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise, the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference\n# between the volume of a bottle one and the volume of a bottle two.\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to the\n# shipment volume divided by the amount of oil that can be stored in a bottle\n# one. The number of bottles of size two needed to store the oil is equal to\n# the remainder of the shipment volume divided by the amount of oil that can be\n# stored in a bottle one divided by the volume of a bottle two.\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "\n#SOLUTION :\n\ns, v1, v2 = input().split()\ns, v1, v2 = int(s), int(v1), int(v2)\n\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 - v2) == 0:\n    print(s // (v1 - v2), 0)\nelif s % (v1 - v2) <= v2:\n    print(s // (v1 - v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "\n\nimport sys\nimport math\n\na, b, c = [int(i) for i in sys.stdin.readline().split()]\n\nfor i in range(10):\n    print(i)\n    if i == 3:\n        break\n", "\nimport sys\n\ns,v1,v2 = map(int,sys.stdin.readline().split())\n\n# if s is divisible by v1, then we can just use s/v1 v1 bottles\nif s % v1 == 0:\n    print(s//v1, 0)\n    sys.exit(0)\n\n# if s is not divisible by v1, then we will need to use some v2 bottles\nv1_bottles = s//v1\nv2_bottles = 0\n\n# while v1_bottles * v1 + v2_bottles * v2 < s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\n\nprint(v1_bottles,v2_bottles)\n", "import sys, math\n\ndef main():\n    s, v1, v2 = [int(i) for i in sys.stdin.readline().split()]\n\n    x = s // v1\n    y = s % v1 // v2\n    while s % v1 != 0 and s % v1 < v2:\n        x -= 1\n        y = s % v1 // v2\n    if s % v1 != 0:\n        print(x, y + 1)\n    else:\n        print(x, y)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ns, v1, v2 = [int(i) for i in sys.stdin.readline().split()]\n\nif s % v2 == 0:\n    print(0, s // v2)\nelif s % v1 == 0:\n    print(s // v1, 0)\nelif s < v1:\n    print(1, 0)\nelse:\n    x = s // v1\n    y = s % v1 // v2\n    while s % v1 != 0 and s % v1 < v2 and x >= 0:\n        x -= 1\n        y = s % v1 // v2\n    if s % v1 != 0:\n        print(x, y + 1)\n    else:\n        print(x, y)\n", "\nimport sys\n\ns,v1,v2 = map(int,sys.stdin.readline().split())\n# if s is divisible by v1, then we can just use s/v1 v1 bottles\nif s % v1 == 0:\n    print(s//v1, 0)\n    sys.exit(0)\n# if s is not divisible by v1, then we will need to use some v2 bottles\nv1_bottles = s//v1\nv2_bottles = 0\n# if v1_bottles * v1 + v2_bottles * v2 = s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\nprint(v1_bottles,v2_bottles)\n", "\nimport sys\n\ns,v1,v2 = map(int,sys.stdin.readline().split())\n# if s is divisible by v1, then we can just use s//v1 v1 bottles \nif s % v1 == 0:\n    print(s//v1, 0)\n    sys.exit(0)\n# if s is not divisible by v1, then we will need to use some v2 bottles to make up the difference\nv1_bottles = s//v1\nv2_bottles = 0\n# if v1_bottles * v1 + v2_bottles * v2 >= s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\nprint(v1_bottles,v2_bottles)\n", "import sys\n\ns, v1, v2 = map(int, sys.stdin.readline().split())\n\n# if s is divisible by v1, then we can just use s//v1 v1 bottles\nif s % v1 == 0:\n    print(s // v1, 0)\n    sys.exit(0)\n\n# if s is not divisible by v1, then we will need to use some v2 bottles to make up the difference\nv1_bottles = s // v1\nv2_bottles = 0\n\n# if v1_bottles * v1 + v2_bottles * v2 >= s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\n\nprint(v1_bottles, v2_bottles)\n", "\n\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split())  # s - \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439, v1 - \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, v2 - \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \n    if s % v1 == 0:  # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043a\u0440\u0430\u0442\u043d\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(s // v1, 0)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 s // v1, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 0\n    elif s % v2 == 0:  # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043a\u0440\u0430\u0442\u043d\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(0, s // v2)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 0, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 s // v2\n    elif s % v2 == v1 % v2:  # \u0435\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0430\u0432\u0435\u043d \u043e\u0441\u0442\u0430\u0442\u043a\u0443 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(s // v1, (s % v1) // v2)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 s // v1, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 (s % v1) // v2\n    else:\n        print(\"Impossible\")  # \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    if s % v2 != 0:\n        print(\"Impossible\")\n        return\n\n    ans = s // v2\n    v1_cnt = 0\n    while ans > 0:\n        if ans % v1 != 0:\n            v1_cnt += 1\n            ans -= v2\n        else:\n            break\n\n    print(ans // v1, v1_cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles.\nshipment_volume, bottle_one_volume, bottle_two_volume = [\n    int(i) for i in sys.stdin.readline().split()\n]\n\n# If the shipment volume is greater than the volume of a bottle one, or if the\n# volume of a bottle one is not greater than the volume of a bottle two, it is\n# impossible to store the oil\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# The number of bottles of size one needed to store the oil is equal to the\n# shipment volume divided by the amount of oil that can be stored in a bottle\n# one. The number of bottles of size two needed to store the oil is equal to\n# the remainder of the shipment volume divided by the amount of oil that can be\n# stored in a bottle one divided by the volume of a bottle two\nbottle_one_count = math.floor(shipment_volume / bottle_one_volume)\nbottle_two_count = math.floor((shipment_volume % bottle_one_volume) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "\n#------------------------------------------------------------------------------\n\nimport sys\n\n#------------------------------------------------------------------------------\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Read the input\n    s, v1, v2 = [int(x) for x in sys.stdin.read().split()]\n\n    # If the smaller bottle cannot hold anything, then there is no solution\n    if v2 == 0:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is smaller than the shipment, then there is no solution\n    if v1 < s:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is the same size as the shipment, then we only need one bottle\n    if v1 == s:\n        print(\"1 0\")\n        return\n\n    # If the smaller bottle is bigger than the shipment, then we need to use the smaller bottle\n    if v2 >= s:\n        print(\"0 {0}\".format(s//v2))\n        return\n\n    # If we get here, then we have to use both bottles. We'll start by filling the larger bottle\n    large_bottles = s // v1\n    small_bottles = 0\n    remaining = s - large_bottles * v1\n\n    # Now we'll fill the smaller bottles with whatever is left\n    small_bottles = remaining // v2\n    remaining = remaining - small_bottles * v2\n\n    # If there is still some left over, we need to add another large bottle\n    if remaining > 0:\n        large_bottles += 1\n\n    # Print the result\n    print(\"{0} {1}\".format(large_bottles, small_bottles))\n\n#------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#SOLUTION:\n\ns, v1, v2 = input().split()\ns, v1, v2 = int(s), int(v1), int(v2)\n\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 - v2) == 0:\n    print(s // (v1 - v2), 0)\nelif s % (v1 - v2) <= v2:\n    print(s // (v1 - v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "\n\n# SOLUTION:\n\ns, v1, v2 = input().split() # Enter the values\ns, v1, v2 = int(s), int(v1), int(v2) # Convert the values to int\n\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 - v2) == 0:\n    print(s // (v1 - v2), 0)\nelif s % (v1 - v2) <= v2:\n    print(s // (v1 - v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "\n\n#SOLUTION:\n\ns, v1, v2 = input().split() # Enter the values\ns, v1, v2 = int(s), int(v1), int(v2) # Convert the values to int\n\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 + v2) == 0:\n    print(s // (v1 + v2), 0)\nelif s % (v1 + v2) <= v2:\n    print(s // (v1 + v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "\n\n# SOLUTION:\n\ns, v1, v2 = input().split()  # Enter the values\ns, v1, v2 = int(s), int(v1), int(v2)  # Convert the values to int\n\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 - v2) == 0:\n    print(s // (v1 - v2), 0)\nelif s % (v1 - v2) <= v2:\n    print(s // (v1 - v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "\n\n# SOLUTION\n\ns, v1, v2, t1, t2 = [int(i) for i in input().split()]\n\nif (s * v1 + 2 * t1) < (s * v2 + 2 * t2):\n    print(\"First\")\nelif (s * v1 + 2 * t1) > (s * v2 + 2 * t2):\n    print(\"Second\")\nelse:\n    print(\"Friendship\")\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]  # read the input\n\n    if s % v2 != 0:\n    # check if it's impossible\n        print(\"Impossible\")\n        return \"Impossible\"\n\n    ans = s // v2\n    v1_cnt = 0\n    while ans > 0:\n        if ans % v1 != 0:\n            v1_cnt += 1\n            ans -= v2\n        else:\n            break\n\n    return (ans // v1, v1_cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n#------------------------------------------------------------------------------\n\nimport sys\n\n#------------------------------------------------------------------------------\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Read the input\n    s, v1, v2 = [int(x) for x in sys.stdin.read().split()]\n\n    # If the smaller bottle can't hold anything, then there is no solution\n    if v2 == 0:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is smaller than the shipment, then there is no solution.\n    if v1 < s:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is the same size as the shipment, then we only need one bottle.\n    if v1 == s:\n        print(\"1 0\")\n        return\n\n        return\n\n    # If the smaller bottle is bigger than the shipment, then we need to use the smaller bottle.\n    if v2 >= s:\n        print(\"0 {}\".format(s//v2))\n    # If we get here, then we have to use both bottles. We'll start by filling the larger bottle\n    large_bottles = s // v1\n    small_bottles = 0\n    remaining = s - large_bottles * v1\n\n    # Now we'll fill the smaller bottles with whatever is left\n    small_bottles = remaining // v2\n    remaining = remaining - small_bottles * v2\n\n    # If there is still some left over, we need to add another large bottle\n    if remaining > 0:\n        large_bottles += 1\n\n    # Print the result\n    print(\"{} {}\".format(large_bottles, small_bottles))\n\n#------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles\nshipment_volume, bottle_one_volume, bottle_two_volume = [\n    int(i) for i in sys.stdin.readline().split()\n]\n\n# If the shipment volume is greater than the volume of a bottle one, or if the\n# volume of a bottle one is not greater than the volume of a bottle two, it is\n# impossible to store the oil\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise, the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference\n# between the volume of a bottle one and the volume of a bottle two\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to the\n# shipment volume divided by the amount of oil that can be stored in a bottle\n# one. The number of bottles of size two needed to store the oil is equal to\n# the remainder of the shipment volume divided by the amount of oil that can be\n# stored in a bottle one divided by the volume of a bottle two\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split())  # s - \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439, v1 - \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, v2 - \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n    if s % v1 == 0:  # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043a\u0440\u0430\u0442\u043d\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(s // v1, 0)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 s // v1, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 0\n    elif s % v2 == 0:  # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043a\u0440\u0430\u0442\u043d\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(0, s // v2)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 0, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 s // v2\n    elif s % v2 == v1 % v2:  # \u0435\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0430\u0432\u0435\u043d \u043e\u0441\u0442\u0430\u0442\u043a\u0443 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(s // v1, (s % v1) // v2)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 s // v1, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 (s % v1) // v2\n    else:\n        print(\"Impossible\")  # \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439\n\nif __name__ == '__main__':\n    main()\n", "# https://codeforces.com/contest/1363/problem/A\n\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split())\n    if s % v1 == 0:\n        print(s // v1, 0)\n    elif s % v2 == 0:\n        print(0, s // v2)\n    elif s % v2 == v1 % v2:\n        print(s // v1, (s % v1) // v2)\n    else:\n        print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n", "\n#------------------------------------------------------------------------------\n\nimport sys\n\n#------------------------------------------------------------------------------\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Read the input\n    s, v1, v2 = [int(x) for x in sys.stdin.read().split()] # pylint: disable=W0612\n\n    # If the smaller bottle cannot hold anything, then there is no solution\n    if v2 == 0:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is smaller than the shipment, then there is no solution\n    if v1 < s:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is the same size as the shipment, then we only need one bottle\n    if v1 == s:\n        print(\"1 0\")\n        return\n\n    # If the smaller bottle is bigger than the shipment, then we need to use the smaller bottle\n    if v2 >= s:\n        print(\"0 {}\".format(s//v2))\n        return\n\n    # If we get here, then we have to use both bottles. We'll start by filling the larger bottle\n    large_bottles = s // v1\n    small_bottles = 0\n    remaining = s - large_bottles * v1\n\n    # Now we'll fill the smaller bottles with whatever is left\n    small_bottles = remaining // v2\n    remaining = remaining - small_bottles * v2\n\n    # If there is still some left over, we need to add another large bottle\n    if remaining > 0:\n        large_bottles += 1\n\n    # Print the result\n    print(\"{} {}\".format(large_bottles, small_bottles))\n\n#------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    main()\n", "\n# https://codeforces.com/problemset/problem/4/A\nimport sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    if s < v1 and s < v2:\n        print('Impossible')\n        return\n\n    n1 = s // v1\n    n2 = (s - (n1 * v1)) // v2\n    while n1 >= 0 and n2 * v2 < (s - (n1 * v1)):\n        n2 += 1\n        if n2 * v2 > (s - (n1 * v1)):\n            n1 -= 1\n            n2 = (s - (n1 * v1)) // v2\n\n    if n1 * v1 + n2 * v2 != s:\n        print('Impossible')\n        return\n\n    print(n1, n2)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\ns, v1, v2 = [int(i) for i in sys.stdin.readline().split()]\n\nif s % v2 == 0:\n    print(0, s // v2)\nelif s % v1 == 0:\n    print(s // v1, 0)\nelif s < v1:\n    print(1, 0)\nelse:\n    x = s // v1\n    y = s % v1 // v2\n    while s % v1 != 0 and s % v1 < v2:\n        x -= 1\n        y = s % v1 // v2\n    if s % v1 != 0:\n        print(x, y + 1)\n    else:\n        print(x, y)\n", "\nimport sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles.\nshipment_volume, bottle_one_volume, bottle_two_volume = [\n    int(i) for i in sys.stdin.readline().split()\n]\n\n# If the shipment volume is greater than the volume of a bottle one, or if the\n# volume of a bottle one is not greater than the volume of a bottle two, it is\n# impossible to store the oil\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise, the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference\n# between the volume of a bottle one and the volume of a bottle two\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to the\n# shipment volume divided by the amount of oil that can be stored in a bottle\n# one. The number of bottles of size two needed to store the oil is equal to\n# the remainder of the shipment volume divided by the amount of oil that can be\n# stored in a bottle one divided by the volume of a bottle two\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "\n\nimport sys\n\ns, v1, v2 = [int(i) for i in input().split()]\n\nif s % v2 == 0:\n    print(0, s // v2)\nelif s % v1 == 0:\n    print(s // v1, 0)\nelif s < v1:\n    print(1, 0)\nelse:\n    x = s // v1\n    y = s % v1 // v2\n    while s % v1 != 0 and s % v1 < v2:\n        x -= 1\n        y = s % v1 // v2\n    if s % v1 != 0:\n        print(x, y + 1)\n    else:\n        print(x, y)\n", "\n\nimport sys\n\ns,v1,v2 = map(int,sys.stdin.readline().split())\n\n# if s is divisible by v1, then we can just use s/v1 v1 bottles\nif s % v1 == 0:\n    print(s//v1, 0)\n    sys.exit(0)\n\n# if s is not divisible by v1, then we will need to use some v2 bottles\nv1_bottles = s//v1\nv2_bottles = 0\n\n# if v1_bottles * v1 + v2_bottles * v2 = s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\n\nprint(v1_bottles,v2_bottles)\n", "import sys\nimport math\n\ns, v1, v2 = [int(i) for i in sys.stdin.readline().split()]\n\nif s % v2 == 0:\n    print(0, s // v2)\nelif s % v1 == 0:\n    print(s // v1, 0)\nelif s < v1:\n    print(1, 0)\nelse:\n    x = s // v1\n    y = s % v1 // v2\n    while s % v1 != 0 and s % v1 < v2 and x >= 0:\n        x -= 1\n        y = s % v1 // v2\n    if s % v1 != 0:\n        print(x, y + 1)\n    else:\n        print(x, y)\n", "\n\nimport sys\n \ns,v1,v2 = map(int,sys.stdin.readline().split())\n\n# if s is divisible by v1, then we can just use s/v1 v1 bottles\nif s % v1 == 0:\n    print(s//v1, 0)\n    sys.exit(0)\n\n# if s is not divisible by v1, then we will need to use some v2 bottles\nv1_bottles = s//v1\nv2_bottles = 0\n\n# while v1_bottles * v1 + v2_bottles * v2 < s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\n\nprint(v1_bottles,v2_bottles)\n", "\n\n# SOLUTION\ns, v1, v2 = input().split()\ns, v1, v2 = int(s), int(v1), int(v2)\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 - v2) == 0:\n    print(s // (v1 - v2), 0)\nelif s % (v1 - v2) <= v2:\n    print(s // (v1 - v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "\n\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split())  # s - \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439, v1 - \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, v2 - \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \n    if s % v1 == 0:  # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043a\u0440\u0430\u0442\u043d\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(s // v1, 0)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 s // v1, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 0\n    elif s % v2 == 0:  # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043a\u0440\u0430\u0442\u043d\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(0, s // v2)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 0, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 s // v2\n    elif s % v2 == v1 % v2:  # \u0435\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0430\u0432\u0435\u043d \u043e\u0441\u0442\u0430\u0442\u043a\u0443 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n        print(s // v1, (s % v1) // v2)  # \u0442\u043e \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 s // v1, \u0430 \u043c\u0435\u0442\u0430\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 (s % v1) // v2\n    else:\n        print(\"Impossible\")  # \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0440\u0430\u043d\u0434\u0430\u0448\u0435\u0439 \n\nif __name__ == '__main__':\n    main()\n", "#\n\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split())\n    if s % v1 == 0:\n        print(s // v1, 0)\n    elif s % v2 == 0:\n        print(0, s // v2)\n    elif s % v2 == v1 % v2 and s >= v1 and s >= v2:\n        print(s // v1, (s % v1) // v2)\n    else:\n        print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles.\nshipment_volume, bottle_one_volume, bottle_two_volume = [int(i) for i in sys.stdin.readline().split()]\n\n# If the shipment volume is greater than the volume of a bottle one, or if the\n# volume of a bottle one is not greater than the volume of a bottle two, it is\n# impossible to store the oil.\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise, the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference\n# between the volume of a bottle one and the volume of a bottle two.\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to the\n# shipment volume divided by the amount of oil that can be stored in a bottle\n# one. The number of bottles of size two needed to store the oil is equal to\n# the remainder of the shipment volume divided by the amount of oil that can be\n# stored in a bottle one divided by the volume of a bottle two.\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "\n# \nimport sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    if s < v1 and s < v2:\n        print('Impossible')\n        return\n\n    n1 = s // v1\n    n2 = (s - (n1 * v1)) // v2\n    while n1 >= 0 and n2 * v2 < (s - (n1 * v1)):\n        n2 += 1\n        if n2 * v2 > (s - (n1 * v1)):\n            n1 -= 1\n            n2 = (s - (n1 * v1)) // v2\n\n    if n1 * v1 + n2 * v2 != s:\n        print('Impossible')\n        return\n\n    print(n1, n2)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles.\nshipment_volume, bottle_one_volume, bottle_two_volume = [int(i) for i in sys.stdin.readline().split()]\n\n# If the shipment volume is greater than the volume of a bottle one, or if the\n# volume of a bottle one is not greater than the volume of a bottle two, it is\n# impossible to store the oil.\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise, the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference\n# between the volume of a bottle one and the volume of a bottle two.\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to the\n# shipment volume divided by the amount of oil that can be stored in a bottle\n# one. The number of bottles of size two needed to store the oil is equal to\n# the remainder of the shipment volume divided by the amount of oil that can be\n# stored in a bottle one divided by the volume of a bottle two.\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "\n#\nimport sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    if s % v2 != 0:\n        print(\"Impossible\")\n        return\n    v2_cnt = 0\n\n    ans = s // v2\n    v1_cnt = 0\n    while ans > 0:\n            v2_cnt += 1\n        if ans % v1 != 0:\n            v1_cnt += 1\n            ans -= v2\n        else:\n            break\n\n    print(ans // v1, v2_cnt)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split())\n    if s % v1 == 0:\n        print(s // v1, 0)\n    elif s % v2 == 0:\n        print(0, s // v2)\n    elif s % v2 == v1 % v2:\n        print(s // v1, (s % v1) // v2)\n    else:\n        print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    if s < v1 and s < v2:\n        print('Impossible')\n        return\n\n    n1 = s // v1\n    n2 = (s - (n1 * v1)) // v2\n    while n1 >= 0 and n2 * v2 < (s - (n1 * v1)):\n        n2 += 1\n        if n2 * v2 > (s - (n1 * v1)):\n            n1 -= 1\n            n2 = (s - (n1 * v1)) // v2\n\n    if n1 * v1 + n2 * v2 != s:\n        print('Impossible')\n        return\n\n    print(n1, n2)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    s, v1, v2 = map(int, sys.stdin.readline().split())\n    if s % v1 == 0:\n        print(s // v1, 0)\n    elif s % v2 == 0:\n        print(0, s // v2)\n    elif s % v2 == v1 % v2:\n        print(s // v1, s // v2)\n    else:\n        print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles\nshipment_volume, bottle_one_volume, bottle_two_volume = [int(i) for i in sys.stdin.readline().split()]\n\n# If the shipment volume is greater than the volume of a bottle one or if the\n# volume of a bottle one is not greater than the volume of a bottle two then it\n# is impossible to store the oil\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference between\n# the volume of a bottle one and the volume of a bottle two\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to the shipment\n# volume divided by the amount of oil that can be stored in a bottle one. The number\n# of bottles of size two needed to store the oil is equal to the remainder of the\n# shipment volume divided by the amount of oil that can be stored in a bottle one\n# divided by the volume of a bottle two\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "\n#------------------------------------------------------------------------------\n\nimport sys\n\n#------------------------------------------------------------------------------\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Read the input\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the smaller bottle cannot hold anything, then there is no solution\n    if v2 == 0:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is smaller than the shipment, then there is no solution\n    if v1 < s:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is the same size as the shipment, then we only need one bottle\n    if v1 == s:\n        print(\"1 0\")\n        return\n\n    # If the smaller bottle is bigger than the shipment, then we need to use the smaller bottle\n    if v2 >= s:\n        print(\"0 {}\".format(s // v2))\n        return\n\n    # If we get here, then we have to use both bottles. We'll start by filling the larger bottle\n    large_bottles = s // v1\n    small_bottles = 0\n    remaining = s - large_bottles * v1\n\n    # Now we'll fill the smaller bottles with whatever is left\n    small_bottles = remaining // v2\n    remaining = remaining - small_bottles * v2\n\n    # If there is still some left over, we need to add another large bottle\n    if remaining > 0:\n        large_bottles += 1\n\n    # Print the result\n    print(\"{} {}\".format(large_bottles, small_bottles))\n\n#------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    if s < v1 and s < v2:\n        print('Impossible')\n        return\n\n    n1 = s // v1\n    n2 = (s - (n1 * v1)) // v2   \n    while n1 >= 0 and n2 * v2 < (s - (n1 * v1)):\n        n2 += 1\n        if n2 * v2 > (s - (n1 * v1)):\n            n1 -= 1\n            n2 = (s - (n1 * v1)) // v2\n\n    if n1 * v1 + n2 * v2 != s:\n        print('Impossible')\n        return\n\n    print(n1, n2)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ns, v1, v2 = map(int, sys.stdin.readline().split())\n\n# if s is divisible by v1, then we can just use s//v1 v1 bottles\nif s % v1 == 0:\n    print(s // v1, 0)\n    sys.exit(0)\n\n# if s is not divisible by v1, then we will need to use some v2 bottles to make up the difference\nv1_bottles = s // v1\nv2_bottles = 0\n\n# if v1_bottles * v1 + v2_bottles * v2 >= s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\n\nprint(v1_bottles, v2_bottles)\n", "import sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\n\na = [int(i) for i in sys.stdin.readline().split()]\n\nd = dict()\nfor i in a:\n    if i not in d.keys():\n        d[i] = 1\n    else:\n        d[i] += 1\n\ns = 0\nfor i in d:\n    s += d[i] // 2\n\nprint(s)\n", "\nimport sys\ns, v1, v2 = [int(i) for i in sys.stdin.readline().split()]\n\nif s % v2 == 0:\n    print(0, s // v2)\nelif s % v1 == 0:\n    print(s // v1, 0)\nelif s < v1:\n    print(1, 0)\nelse:\n    x = s // v1\n    y = s % v1 // v2\n    while s % v1 != 0 and s % v1 < v2 and x > 1:\n        x -= 1\n        y = s % v1 // v2\n    if s % v1 != 0:\n        print(x, y + 1)\n    else:\n        print(x, y)\n", "\n\nimport sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types\n# of bottles\nshipment_volume, bottle_one_volume, bottle_two_volume = [int(i) for i in sys.stdin.readline().split()]\n\n# If the shipment volume is greater than the volume of a bottle one or if the\n# volume of a bottle one is not greater than the volume of a bottle two then it\n# is impossible to store the oil\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference\n# between the volume of a bottle one and the volume of a bottle two\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to\n# the shipment volume divided by the amount of oil that can be stored in\n# a bottle one. The number of bottles of size two needed to store the oil\n# is equal to the remainder of the shipment volume divided by the amount\n# of oil that can be stored in a bottle one divided by the volume of a\n# bottle two\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "#-------------------------------------------------------------------------------\n\nimport sys\n\n#------------------------------------------------------------------------------\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Read the input\n    s, v1, v2 = [int(x) for x in sys.stdin.read().split()]\n\n    # If the smaller bottle can't hold anything, then there is no solution\n    if v2 == 0:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is smaller than the shipment, then there is no solution\n    if v1 < s:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is the same size as the shipment, then we only need one bottle \n    if v1 == s:\n        print(\"1 0\")\n        return\n\n    # If the smaller bottle is bigger than the shipment, then we need to use the smaller bottle\n    if v2 >= s:\n        print(\"0 {}\".format(s//v2))\n        return\n\n    # If we get here, then we have to use both bottles. We'll start by filling the larger bottle\n    large_bottles = s // v1\n    small_bottles = 0\n    remaining = s - large_bottles * v1\n\n    # Now we'll fill the smaller bottles with whatever is left\n    small_bottles = remaining // v2\n    remaining = remaining - small_bottles * v2\n\n    # If there is still some left over, we need to add another large bottle\n    if remaining > 0:\n        large_bottles += 1\n\n    # Print the result\n    print(\"{} {}\".format(large_bottles, small_bottles))\n\n#------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    s, v1, v2 = [int(x) for x in sys.stdin.readline().split()]\n\n    if s % v2 != 0:\n        print(\"Impossible\")\n        return \n\n    ans = s // v2\n    v1_cnt = 0\n    while ans > 0:\n        if ans % v1 != 0:\n            v1_cnt += 1\n            ans -= v2\n        else: break\n\n    print(ans // v1, v1_cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\n# Grab the volume of the shipment and the volumes of the two types of bottles\nshipment_volume, bottle_one_volume, bottle_two_volume = [int(i) for i in sys.stdin.readline().split()]\n\n# If the shipment volume is greater than the volume of a bottle one or if the\n# volume of a bottle one is not greater than the volume of a bottle two then it\n# is impossible to store the oil\nif (shipment_volume > bottle_one_volume) or (bottle_one_volume <= bottle_two_volume):\n    print(\"Impossible\")\n    sys.exit(0)\n\n# Otherwise the amount of oil that can be stored in a bottle one is equal to\n# the amount of oil that can be stored in a bottle two plus the difference between\n# the volume of a bottle one and the volume of a bottle two\nbottle_one_amount = (bottle_two_volume + (bottle_one_volume - bottle_two_volume))\n\n# The number of bottles of size one needed to store the oil is equal to the shipment\n# volume divided by the amount of oil that can be stored in a bottle one. The number\n# of bottles of size two needed to store the oil is equal to the remainder of the\n# shipment volume divided by the amount of oil that can be stored in a bottle one\n# divided by the volume of a bottle two\nbottle_one_count = math.floor(shipment_volume / bottle_one_amount)\nbottle_two_count = math.floor((shipment_volume % bottle_one_amount) / bottle_two_volume)\n\n# Print the number of bottles of size one and the number of bottles of size two\nprint(str(bottle_one_count) + \" \" + str(bottle_two_count))\n", "# ------------------------------------------------------------------------------\n\nimport sys\n\n# ------------------------------------------------------------------------------\n\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Read the input\n    s, v1, v2 = [int(x) for x in sys.stdin.read().split()]\n\n    # If the smaller bottle can't hold anything, then there is no solution\n    if v2 == 0:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is smaller than the shipment, then there is no solution\n    if v1 < s:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is the same size as the shipment, then we only need one bottle\n    if v1 == s:\n        print(\"1 0\")\n        return\n\n    # If the smaller bottle is bigger than the shipment, then we need to use the smaller bottle\n    if v2 >= s:\n        print(\"0 {}\".format(s//v2))\n        return\n\n    # If we get here, then we have to use both bottles. We'll start by filling\n    # the larger bottle\n    large_bottles = s // v1\n    small_bottles = 0\n    remaining = s - large_bottles * v1\n\n    # Now we'll fill the smaller bottles with whatever is left\n    small_bottles = remaining // v2\n    remaining = remaining - small_bottles * v2\n\n    # If there is still some left over, we need to add another large bottle\n    if remaining > 0:\n        large_bottles += 1\n\n    # Print the result\n    print(\"{} {}\".format(large_bottles, small_bottles))\n\n# ------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ns,v1,v2 = map(int,sys.stdin.readline().split())\n\n# if s is divisible by v1, then we can just use s/v1 v1 bottles\nif s % v1 == 0:\n    print(s//v1, 0)\n    sys.exit(0)\n\n# if s is not divisible by v1, then we will need to use some v2 bottles\nv1_bottles = s//v1\nv2_bottles = 0\n\n# while v1_bottles * v1 + v2_bottles * v2 < s, then we are not done\nwhile v1_bottles * v1 + v2_bottles * v2 > s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\n\nprint(v1_bottles,v2_bottles)\n", "\nimport sys\n\ns, v1, v2 = map(int, sys.stdin.readline().split())\n\n# if s is divisible by v1, then we can just use s/v1 v1 bottles\nif s % v1 == 0:\n    print(s // v1, 0)\n    sys.exit(0)\n\n# if s is not divisible by v1, then we will need to use some v2 bottles\nv1_bottles = s // v1\nv2_bottles = 0\n\n# if v1_bottles * v1 + v2_bottles * v2 = s, then we are done\nwhile v1_bottles * v1 + v2_bottles * v2 < s:\n    # if we have used all v1 bottles, but still not enough v2 bottles, then we cannot meet the requirements\n    if v1_bottles == 0:\n        print(\"Impossible\")\n        sys.exit(0)\n    # remove one v1 bottle, and add one v2 bottle\n    v1_bottles -= 1\n    v2_bottles += 1\n\nprint(v1_bottles, v2_bottles)\n", "\n\n# SOLUTION\n\ns, v1, v2 = input().split()\ns, v1, v2 = int(s), int(v1), int(v2)\n\nif s % v2 == 0:\n    print(s // v2, 0)\nelif s % v1 == 0:\n    print(0, s // v1)\nelif s % (v1 - v2) == 0:\n    print(s // (v1 - v2), 0)\nelif s % (v1 - v2) <= v2:\n    print(s // (v1 - v2) - 1, 1)\nelse:\n    print(\"Impossible\")\n", "#------------------------------------------------------------------------------\n\nimport sys\n\n#------------------------------------------------------------------------------\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Read the input\n    s, v1, v2 = [int(x) for x in sys.stdin.read().split()]\n\n    # If the smaller bottle can't hold anything, then there is no solution\n    if v2 == 0:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is smaller than the shipment, then there is no solution\n    if v1 < s:\n        print(\"Impossible\")\n        return\n\n    # If the larger bottle is the same size as the shipment, then we only need one bottle \n    if v1 == s:\n        print(\"1 0\")\n        return\n\n    # If the smaller bottle is bigger than the shipment, then we need to use the smaller bottle\n    if v2 >= s:\n        print(\"0 {}\".format(s / v2))\n        return\n\n    # If we get here, then we have to use both bottles. We'll start by filling the larger bottle\n    large_bottles = s / v1\n    small_bottles = 0\n    remaining = s - large_bottles * v1\n\n    # Now we'll fill the smaller bottles with whatever is left\n    small_bottles = remaining / v2\n    remaining = remaining - small_bottles * v2\n\n    # If there is still some left over, we need to add another large bottle\n    if remaining > 0:\n        large_bottles += 1\n\n    # Print the result\n    print(\"{} {}\".format(large_bottles, small_bottles))\n\n#------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    main()\n"]