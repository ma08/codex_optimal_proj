["\ndef func():\n    pass\n", "\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n# create dictionary for numbers and count\nD = {}  # key:number, value:count\nfor num in L:\n    D[num] = D.get(num, 0) + 1\n# create list of numbers\nX = []\nfor num in D:\n    if D[num] % 2:\n        X.append(num)\n# print numbers\nprint(X[0], X[1])\n", "\nN = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "print(\"hello world\")\n", "\n\n# read N, M\nN, M = map(int, input().split())\n\n# read list\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# create dictionary for numbers and count for A\nD = {}  # key:number, value:count of A\nfor num in A:\n    D[num] = D.get(num, 0) + 1  # default value = 0\n\nX = []  # list of numbers\nfor num in D:\n    if D[num] % 2:  # if odd\n        X.append(num)\n\nfor num in B:\n    if num in D:\n        if D[num] % 2:  # if odd\n            print(num)\n            break\n", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nN = int(input())\nA = list(map(int, input().split()))\nA.sort()\nA.pop(0)\nA.pop(N - 2)\nprint(gcd(A[0], A[1]))\n", "\n\n# read n\nN = int(input())\n# read list of numbers\nL = list(map(int, input().split()))\n\n# create dictionary for numbers \nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\n\n# read n\nN = int(input())\n# read list and convert to integers\nL = list(map(int, input().split()))\n\n# create dictionary for numbers \nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\n# read N\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary of numbers\nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "\n# read N\n\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers and count\nD = {}  # key:number, value:count\nfor num in L:\n    D[num] = D.get(num, 0) + 1\n\n# create list of numbers\nX = []\nfor num in D:\n    if D[num] % 2:\n        X.append(num)\n\n# print numbers\nprint(X[0], X[1])\n", "# read n\nN = int(input())\n# read list\nL = list(map(int, input().split()))\n\n# create dictionary for numbers \nD = {}\nfor i in L:\n    D[i] = D.get(i, 0) + 1\n\n# create list of numbers\nX = []\nfor i in D:\n    if D[i] % 2:\n        X.append(i)\n\n# print numbers\nprint(X[0], X[1])\n", "N = int(input())\ndivisors = list(map(int, input().split()))\nx = 1\ny = 1\nfor i in range(N):\n    if divisors[i] == 1:\n        continue\n    if divisors[i] == divisors[i + 1]:\n        x *= divisors[i]\n        i += 1\n    else:\n        y *= divisors[i]\nprint(x, y)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri May 22 14:37:45 2020\n@author: cpprhtn\n\"\"\"\n'''\n\ubb38\uc81c\n\uc5b4\ub5a4 \uc218 N(1\u2264N\u22641,000,000) \uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, N\uc758 \ub2e4\uc74c \ud070 \uc22b\uc790\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\nN\uc758 \ub2e4\uc74c \ud070 \uc22b\uc790\ub294 N\uc744 2\uc9c4\uc218\ub85c \ubc14\uafb8\uc5c8\uc744 \ub54c\uc758 1\uc758 \uac1c\uc218\uc640 \uac19\uc740 \uac1c\uc218\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uc218\uc785\ub2c8\ub2e4.\n1\ubc88\uc9f8 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc22b\uc790\ub4e4 \uc911 N\ubcf4\ub2e4 \ud070 \uc218 \uc911\uc5d0\uc11c \uac00\uc7a5 \uc791\uc740 \uc22b\uc790\ub97c \ucc3e\uc544\uc57c \ud569\ub2c8\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4, 78\uc744 2\uc9c4\uc218\ub85c \ubc14\uafb8\uba74 1001110 \uc774\uba70, 78\uc758 \ub2e4\uc74c \ud070 \uc22b\uc790\ub294 83\uc73c\ub85c 2\uc9c4\uc218\ub294 1010011 \uc785\ub2c8\ub2e4.\nN\uc774 \uc8fc\uc5b4\uc9c8 \ub54c, N\uc758 \ub2e4\uc74c \ud070 \uc22b\uc790\ub97c \ucc3e\ub294 nextBigNumber \ud568\uc218\ub97c \uc644\uc131\ud558\uc138\uc694.\n'''\ndef nextBigNumber(n):\n    # \ud568\uc218\ub97c \uc644\uc131\ud558\uc138\uc694\n    b = bin(n)[2:]\n    cnt = b.count('1')\n    while True:\n        n += 1\n        if b.count('1') == cnt:\n            return n\n# \uc544\ub798\ub294 \ud14c\uc2a4\ud2b8\ub85c \ucd9c\ub825\ud574 \ubcf4\uae30 \uc704\ud55c \ucf54\ub4dc\uc785\ub2c8\ub2e4.\nprint(nextBigNumber(78))\nprint(nextBigNumber(15))\n", "\n"]