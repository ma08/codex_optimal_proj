["print(\"Hello World\")\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n\nif __name__ == '__main__':\n    main()\n", "# https://open.kattis.com/problems/baconeggsandspam\n\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline().strip())\n\n    for _ in range(num_cases):\n        num_customers = int(sys.stdin.readline().strip())\n        menu = {}\n\n        for _ in range(num_customers):\n            order = sys.stdin.readline().strip().split()\n            name = order[0]\n\n            for item in order[1:]:\n                if item not in menu:\n                    menu[item] = set()\n                menu[item].add(name)\n\n        sorted_items = sorted(menu.keys())\n\n        for item in sorted_items:\n            print(item + ' ' + ' '.join(sorted(menu[item])))\n\n        print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport math\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    N = int(input())\n    if isPrime(N):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    bricks = list(map(int, sys.stdin.readline().strip().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()] # list comprehension\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\nmain()\n", "\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = []\n    for brick in bricks:\n        if not towers:\n            towers.append(brick)\n        else:\n            if brick != towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\nmain()\n", "N = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] < bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\n\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 1\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    print(towers, end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = [bricks[0]]\n\n    for brick in bricks:\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers) - 1, -1, -1):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\n#\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base_level = 0\n\n    for brick in bricks:\n        if brick > base_level:\n            towers += 1\n            base_level = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "# https://open.kattis.com/problems/bricks\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        num_bricks = int(line.strip())\n        bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n\n        min_width = bricks[0]\n        num_towers = 1\n\n        for brick in bricks[1:]:\n            if brick > min_width:\n                num_towers += 1\n                min_width = brick\n\n        print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "import os\n\n\ndef main():\n    print(os.getcwd())\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]  # list comprehension\n    towers = 1\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]  # list comprehension\n    towers = []\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n        else:\n            if brick > towers[-1]:\n                towers.append(brick)\n    print(len(towers))\n\n\nmain()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input(\"\"))\nbricks = list(map(int, input(\"\").split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    pass\n\nmain()\n", "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\nbricks = [int(x) for x in sys.stdin.readline().split()]\nassert(len(bricks) == n)\n\n# Count towers.\ntowers = 0\nfor i in range(n):\n    if (i == 0) or (bricks[i] > bricks[i-1]):\n        towers += 1\n\n# Print result\nprint(towers)\n", "\n\nimport sys\n\ndef main():\n    # Read input.\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers.\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result.\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 1\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    N = int(input())\n    if isPrime(N):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "from sys import stdin\n\ndef main():\n    N = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n", "# https://open.kattis.com/problems/baconeggsandspam\n\nimport sys\n\ndef main():\n    num_cases = int(sys.stdin.readline().strip())\n    while num_cases != 0:\n        num_cases -= 1\n\n        num_orders = int(sys.stdin.readline().strip())\n        orders = []\n        for _ in range(num_orders):\n            order = sys.stdin.readline().strip().split()\n            orders.append(order)\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n_bricks = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base_level = 0\n\n    for brick in bricks:\n        if brick > base_level:\n            towers += 1\n            base_level = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()] # read bricks\n    assert(len(bricks) == n) # check input\n\n    # count towers\n    towers = 0 # initialize counter\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]): # check if i is the first brick or if brick i is greater than brick i-1\n            towers += 1\n\n    # print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "n = int(input())\na = list(map(int, input().split()))\nprint(a)\n", "\n\n\nimport sys\n\ndef main():\n    # Read input.\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # Count towers.\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "#\n# N = int(input())\n# bricks = list(map(int, input().split()))\n#\n# towers = 1\n#\n# for i in range(1, N):\n#     if bricks[i] > bricks[i-1]:\n#         towers += 1\n#\n# print(towers)\n", "#\n\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = [0] * n\n\n    for brick in bricks:\n        for i in range(n):\n            if brick < towers[i]:\n                towers[i] = brick\n                break\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "N = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] < bricks[i - 1]:\n        towers += 1\n\nprint(towers)\n", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip()) # number of bricks\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()] # width of each brick\n\n    min_width = bricks[0] # minimum width of a tower\n    num_towers = 1 # number of towers\n\n    for brick in bricks[1:]:\n        if brick > min_width:\n            num_towers += 1 # increase number of towers\n            min_width = brick # set minimum width of tower\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    num_rows = int(sys.stdin.readline().strip())\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()] # read in the bricks\n\n    min_width = bricks[0] # min width of a tower\n    num_towers = 1 # number of towers\n\n    for brick in bricks[1:]:\n        if brick > min_width: # if the brick is wider than the min width of a tower, then it becomes the new min width\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert(len(bricks) == n)\n\n    # count towers\n    towers = 0\n    for i in range(n):\n        if (i == 0) or (bricks[i] > bricks[i-1]):\n            towers += 1\n\n    # print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    N = int(input())\n    if isPrime(N):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if len(towers) == 0:\n            towers.append(brick)\n            continue\n        if brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\nif __name__ == '__main__':\n    main()\n", "\ndef main(arr):\n    x = 0\n    y = 0\n    z = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            x += 1\n        elif arr[i] == 1:\n            y += 1\n        else:\n            z += 1\n\n    for i in range(x):\n        print(0, end=' ')\n    for i in range(y):\n        print(1, end=' ')\n    for i in range(z):\n        print(2, end=' ')\n    print()\n\nmain([0, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1])\n", "\nfrom sys import stdin\n\ndef main():\n    N = int(stdin.readline()) # number of test cases\n\n    for _ in range(N):\n        n = int(stdin.readline()) # number of bricks\n        bricks = [int(x) for x in stdin.readline().split()]\n        towers = 1\n        current_height = bricks[0]\n        for brick in bricks[1:]:\n            if brick > current_height:\n                towers += 1\n                current_height = brick\n        print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input()) \n    for i in range(n):\n        n = int(input())\n        bricks = [int(x) for x in input().split()]\n        towers = []\n        for brick in bricks:\n            if len(towers) == 0:\n                towers.append(brick)\n            else:\n                if brick > towers[-1]:\n                    towers.append(brick)\n        print(len(towers))\n\nmain()\n", "N = int(input())\nbricks = list(map(int, input().split()))\ntowers = 1\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\nprint(towers)\n"]