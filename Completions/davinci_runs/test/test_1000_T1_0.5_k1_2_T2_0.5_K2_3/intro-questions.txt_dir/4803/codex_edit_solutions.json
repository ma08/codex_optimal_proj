["\n\nimport math, sys\n\ndef iteration(N):\n    if N > 2.71828:\n        return -1\n    if N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e))\n\nprint(iteration(float(sys.argv[1])))\n", "\nimport math\n\ndef tetration(N):\n    if N > 2.71828 or N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e))  # tetration = e^(ln(N)/ln(e))\n\n\nprint(tetration(float(input())))  # enter the number\n", "\n# TODO\n", "\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2.0\n\nN = float(input())\n\nl, r = 1.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 1.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "# TODO:\n\n", "\nimport math\n\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5 # left border\nb = 2 # right border\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\nprint(a)\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(N ** (1 / N))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\nN = float(input())\nif N == 0:\n    print(0)\nelse:\n    def f(x):\n        return math.pow(x, x) - N\n    a = 0.5 # left border\n    b = 2 # right border\n    while b - a > 1e-5:\n        c = (a + b) / 2\n        if f(c) > 0:\n            b = c\n        else:\n            a = c\n    print(a)\n", "import math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\nimport math\n\ndef f(x):\n    return math.log(x, 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910477047449949988192520609389252603809159729918315224053430751537885413928229265833195152975172837327286760072481715842678424706667291965808101243442775783767842402963573517894999188021762430965206564211827316726257539594717255934637238632261482742622208671155839599926521176252698917540988159343930825239106053009286445257217088853196356986962795036739317684088916382728208354614938031039281154121491351615642269847507430329716746964066653152703532546711266752246055119958183196376370761799191920357958200759560530234626775794393630746305690108011494271410093913691381072581378135789400559950018354251184172136055727522103526803735726527922417373605751127887218190844900617801388971077082293100279766593583875890939568814856026322439372656247277603789081445883785501970284377936240782505270487581647032458129087839523245323789602984166922548964971560698119218658492677040395648127810217991321741630581055459880130048456299765112124153637451500563507012781592671424134210330156616535602473380784302865525722275304999883701534879300806260180962381516136690334111138653851091936739383522934588832255088706450753947395204396807906708680644509698654880168287434378612645381583428075306184548590379821799459968115441974253634439960290251001588827216474500682070419376158454712318346007262933955054823955713725684023226821301247679452264482091023564775272308208106351889915269288910845557112660396503439789627825001611015323516051965590421184494990778999200732947690586857787872098290135295661397888486050978608595701773129815531495168146717695976099421003618355913877781769845875810446628399880600616229848616935337386578773598336161338413385368421197893890018529569196780455448285848370117096721253533875862158231013310387766827211572694951817958975469399264219791552338576623167627547570354699414892904130186386119439196283887054367774322427680913236544948536676800000106526248547305586159899914017076983854831887501429389089950685453076511680333732226517566220752695179144225280816517166776672793035485154204023817460892328391703275425750867655117859395002793389592057668278967764453184040418554010435134838953120132637836928358082719378312654961745997056745071833206503455664403449045362756001125018433560736122276594927839370647842645676338818807565612168960504161139039063960162022153684941092605387688714837989559999112099164646441191856827700457424343402167227644558933012778158686952506949936461017568506016714535431581480105458860564550133203758645485840324029871709348091055621178432975209905454219\n", "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport math\n\ndef f(x):\n    \"\"\"\n    :param x:\n    :return:\n    \"\"\"\n    return math.exp(x * math.log(2)) - 2\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    n = float(input())\n    l, r = 0.0, 2.0\n\n    while r - l > 1e-9:\n        m = (l + r) / 2\n        if f(m) < 0:\n            l = m\n        else:\n            r = m\n\n    print(l)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python\nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\n\n# TODO\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    input_line = sys.stdin.readline()\n    N = float(input_line.strip())\n    print(pow(N, 1.0 / N))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\n\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5\nb = 2\n\nwhile b - a > 1e-5: \n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "\n\nimport sys\n\ndef main():\n    n = float(sys.stdin.readline().strip())\n    print(pow(n, 1.0 / n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef f(x: int):\n    return math.log(x, 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910477047449949988192520609389252603809159729918315224053430751537885413928229265833195152975172837327286760072481715842678424706667291965808101243442775783767842402963573517894999188021762430965206564211827316726257539594717255934637238632261482742622208671155839599926521176252698917540988159343930825239106053009286445257217088853196356986962795036739317684088916382728208354614938031039281154121491351615642269847507430329716746964066653152703532546711266752246055119958183196376370761799191920357958200759560530234626775794393630746305690108011494271410093913691381072581378135789400559950018354251184172136055727522103526803735726527922417373605751127887218190844900617801388971077082293100279766593583875890939568814856026322439372656247277603789081445883785501970284377936240782505270487581647032458129087839523245323789602984166922548964971560698119218658492677040395648127810217991321741630581055459880130048456299765112124153637451500563507012781592671424134210330156616535602473380784302865525722275304999883701534879300806260180962381516136690334111138653851091936739383522934588832255088706450753947395204396807906708680644509698654880168287434378612645381583428075306184548590379821799459968115441974253634439960290251001588827216474500682070419376158454712318346007262933955054823955713725684023226821301247679452264482091023564775272308208106351889915269288910845557112660396503439789627825001611015323516051965590421184494990778999200732947690586857787872098290135295661397888486050978608595701773129815531495168146717695976099421003618355913877781769845875810446628399880600616229848616935337386578773598336161338413385368421197893890018529569196780455448285848370117096721253533875862158231013310387766827211572694951817958975469399264219791552338576623167627547570354699414892904130186386119439196283887054367774322427680913236544948536676800000106526248547305586159899914017076983854831887501429389089950685453076511680333732226517566220752695179144225280816517166776672793035485154204023817460892328391703275425750867655117859395002793389592057668278967764453184040418554010435134838953120132637836928358082719378312654961745997056745071833206503455664403449045362756001125018433560736122276594927839370647842645676338818807565612168960504161139039063960162022153684941092605387688714837989559999112099164646441191856827700457424343402167227644558933012778158686952506949936461017568506016714535431581480105458860564550133203758645485840324029871709348091055621178432975209905454219\n\nprint(f(6))\n", "import math\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\na = 0.5\nb = 2\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\nprint(a)\n", "\n\nimport math\n\ndef f(x):\n\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 1.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1/N))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\n\na = 0.5 # left border\nb = 2 # right border\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\nprint(a)\n", "import math\n\ndef tetration(N):\n    if N > 2.71828 or N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e)) # tetration = e^(ln(N)/ln(e))\n\nprint(tetration(float(input())))\n", "\nimport sys\n\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1 / N))\n\n\nif __name__ == \"__main__\":\n    main()\n", "import math\nN = float(input())\n\ndef f(x):\n    return math.pow(x, x) - N\na = 0.5\nb = 2\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\n\nprint(a)\n", "import math\n\ndef f(x):\n    return math.pow(x, x) - N\n\ndef main():\n    N = float(input())\n\nwhile b - a > 1e-5:\n    c = (a + b) / 2\n    if f(c) > 0:\n        b = c\n    else:\n        a = c\nprint(a)\n", "\nimport math\n\ndef iteration(N):\n    if N > 2.71828 or N < 0.36789:\n        return -1\n    return math.exp(math.log(N) / math.log(math.e))\n\nprint(iteration(float(input())))\n", "\n# TODO: add new file\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1.0 / N))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\nN = float(input())  # \u0432\u0432\u043e\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u043e\n\n\ndef f(x):  # \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n    return math.pow(x, x) - N  # \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c\n\n\na = 0.5  # \u043b\u0435\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430\nb = 2  # \u043f\u0440\u0430\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430\n\nwhile b - a > 1e-5:  # \u043f\u043e\u043a\u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 1e-5\n    c = (a + b) / 2  # \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0442\u043e\u0447\u043a\u0430\n    if f(c) > 0:  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u043d\u0430\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0442\u043e\u0447\u043a\u0435\n        b = c  # \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u043a \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043f\u0440\u0430\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u044e\u044e\n    else:\n        a = c  # \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u043a \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043b\u0435\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u044e\u044e\nprint(a)  # \u0432\u044b\u0432\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430\n", "\nprint(\"hello world\") \nimport math\n\ndef f(x):\n    return math.exp(x * math.log(2)) - 2\n\nN = float(input())\n\nl, r = 0.0, 2.0\n\nwhile r - l > 1e-9:\n    m = (l + r) / 2\n    if f(m) < 0:\n        l = m\n    else:\n        r = m\n\nprint(l)\n", "#!/bin/bash\n\n# TODO:\n", "import math\nN = float(input(\"Enter the number: \"))\n\ndef f(x):\n    return x**x - N\n\na = 0.01\nb = N\n\nwhile b - a > 1e-6:\n    c = (a + b) / 2\n    if f(c) > 0: # \u0435\u0441\u043b\u0438 \u043d\u0430 \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f\n        b = c\n    else: # \u0438\u043d\u0430\u0447\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0443\u043b\u044f\n        a = c\n\nprint(\"The result is:\", a)\n", "import sys\n\ndef main():\n    n = float(sys.stdin.readline().strip())\n    print(pow(n, 1/n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(n)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = float(sys.stdin.readline().strip())\n    print(pow(N, 1.0 / N))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef iteration(N):\n    if N > 2.71828:\n        return -1\n    if N < 0.36789:\n        return -1\n    return math.exp(math.log(N) / math.log(math.e))\n\nprint(iteration(float(input())))\n", "\nimport math\n\ndef tetration(N):\n    if N > 2.71828 or N < 0.36789:\n        return -1\n    return math.exp(math.log(N)/math.log(math.e)) # tetration = e^(ln(N)/ln(e))\n\nprint(tetration(float(input())))\n"]