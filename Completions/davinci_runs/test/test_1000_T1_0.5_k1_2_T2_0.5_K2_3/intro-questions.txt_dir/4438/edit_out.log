2022-04-12 20:40:03.333680 num operations 2
2022-04-12 20:40:03.333696 size on input set 1
2022-04-12 20:40:05.672779 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    }
  ],
  "created": 1649796003,
  "object": "edit"
}
2022-04-12 20:40:05.673220 fix spelling mistakes 3 ['\n\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n', '\n\n\nimport sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n', '\n\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n']
2022-04-12 20:40:05.673519 size on output set 2
2022-04-12 20:40:05.673529 size on input set 2
2022-04-12 20:40:08.124291 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/python3\n\nimport sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    }
  ],
  "created": 1649796005,
  "object": "edit"
}
2022-04-12 20:40:08.124669 fix syntax errors 3 ['\n#!/usr/bin/python3\n\nimport sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n', 'import sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n', 'import sys\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n']
2022-04-12 20:40:10.321393 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n"
    }
  ],
  "created": 1649796008,
  "object": "edit"
}
2022-04-12 20:40:10.321749 fix syntax errors 3 ['\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n', '\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n', '\nimport sys\nimport math\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\ndef find_closest(p, points):\n    dists = [dist(p, point) for point in points]\n    return points[dists.index(min(dists))]\n\ndef find_closest_points(p, points):\n    dists = [dist(p, point) for point in points]\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min(dists)]\n\ndef find_closest_points_with_same_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) == max(points[i])]\n\ndef find_closest_points_with_higher_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i])]\n\ndef find_closest_points_with_lower_level(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) > max(points[i])]\n\ndef find_closest_points_with_higher_level_and_same_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] == points[i][0]]\n\ndef find_closest_points_with_higher_level_and_same_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] == points[i][1]]\n\ndef find_closest_points_with_higher_level_and_different_x(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[0] != points[i][0]]\n\ndef find_closest_points_with_higher_level_and_different_y(p, points):\n    dists = [dist(p, point) for point in points]\n    min_dist = min(dists)\n    return [points[i] for i in range(len(points)) \n        if dist(p, points[i]) == min_dist and max(p) < max(points[i]) and p[1] != points[i][1]]\n\ndef solve_easy(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        p = find_closest(p, points)\n        res += dist(p, (0, 0))\n        points.remove(p)\n    return res\n\ndef solve_hard(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = find_closest_points(p, points)\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = find_closest_points_with_same_level(p, points)\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = find_closest_points_with_higher_level(p, points)\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = find_closest_points_with_lower_level(p, points)\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = find_closest_points_with_higher_level_and_same_x(p, points)\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = find_closest_points_with_higher_level_and_same_y(p, points)\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = find_closest_points_with_higher_level_and_different_x(p, points)\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = find_closest_points_with_higher_level_and_different_y(p, points)\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\ndef solve(points):\n    res = 0\n    p = (0, 0)\n    while len(points) > 0:\n        closest_points = [point for point in points if dist(p, point) == min([dist(p, point) for point in points])]\n        if len(closest_points) == 1:\n            p = closest_points[0]\n            res += dist(p, (0, 0))\n            points.remove(p)\n        else:\n            closest_points_with_same_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) == max(point)]\n            if len(closest_points_with_same_level) > 0:\n                p = closest_points_with_same_level[0]\n                res += dist(p, (0, 0))\n                points.remove(p)\n            else:\n                closest_points_with_higher_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point)]\n                if len(closest_points_with_higher_level) > 0:\n                    p = closest_points_with_higher_level[0]\n                    res += dist(p, (0, 0))\n                    points.remove(p)\n                else:\n                    closest_points_with_lower_level = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) > max(point)]\n                    if len(closest_points_with_lower_level) > 0:\n                        p = closest_points_with_lower_level[0]\n                        res += dist(p, (0, 0))\n                        points.remove(p)\n                    else:\n                        closest_points_with_higher_level_and_same_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] == point[0]]\n                        if len(closest_points_with_higher_level_and_same_x) > 0:\n                            p = closest_points_with_higher_level_and_same_x[0]\n                            res += dist(p, (0, 0))\n                            points.remove(p)\n                        else:\n                            closest_points_with_higher_level_and_same_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] == point[1]]\n                            if len(closest_points_with_higher_level_and_same_y) > 0:\n                                p = closest_points_with_higher_level_and_same_y[0]\n                                res += dist(p, (0, 0))\n                                points.remove(p)\n                            else:\n                                closest_points_with_higher_level_and_different_x = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[0] != point[0]]\n                                if len(closest_points_with_higher_level_and_different_x) > 0:\n                                    p = closest_points_with_higher_level_and_different_x[0]\n                                    res += dist(p, (0, 0))\n                                    points.remove(p)\n                                else:\n                                    closest_points_with_higher_level_and_different_y = [point for point in points if dist(p, point) == min([dist(p, point) for point in points]) and max(p) < max(point) and p[1] != point[1]]\n                                    if len(closest_points_with_higher_level_and_different_y) > 0:\n                                        p = closest_points_with_higher_level_and_different_y[0]\n                                        res += dist(p, (0, 0))\n                                        points.remove(p)\n    return res\n\nprint(solve(points))\n']
2022-04-12 20:40:10.321991 size on output set 3
2022-04-12 20:40:10.322004 num operations 2
2022-04-12 20:40:10.322010 size on input set 1
2022-04-12 20:40:13.166724 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\ndef read_string():\n    return input().strip()\n\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip()) \n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649796010,
  "object": "edit"
}
2022-04-12 20:40:13.166922 fix spelling mistakes 3 ['\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\ndef read_string():\n    return input().strip()\n\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip()) \n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 20:40:13.166964 size on output set 3
2022-04-12 20:40:13.166970 size on input set 3
2022-04-12 20:40:20.720191 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\ndef read_string():\n    return input().strip()\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None, types=int):\n    if convert is None:\n        return tuple(types(i) for i in read_ints())\n    return tuple(map(convert, read_ints())\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\ndef read_string():\n    return input().strip()\n\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple(types=float))\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split(' ')))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple():\n    return tuple(read_ints())\n\ndef read_lines(n):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n    return lines\n\ndef read_string():\n    return input().strip()\ndef read_string_single_line():\n    return input().strip()\n\ndef read_strings():\n    return input().strip().split(' ')\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649796013,
  "object": "edit"
}
2022-04-12 20:40:20.720438 fix syntax errors 3 ['\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\ndef read_string():\n    return input().strip()\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None, types=int):\n    if convert is None:\n        return tuple(types(i) for i in read_ints())\n    return tuple(map(convert, read_ints())\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\ndef read_string():\n    return input().strip()\n\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple(types=float))\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef read_ints():\n    return list(map(int, input().strip().split(\' \')))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple():\n    return tuple(read_ints())\n\ndef read_lines(n):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n    return lines\n\ndef read_string():\n    return input().strip()\ndef read_string_single_line():\n    return input().strip()\n\ndef read_strings():\n    return input().strip().split(\' \')\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 20:40:24.177920 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points[0][0])\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef read_int():\n    return int(input())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split(' ')))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649796020,
  "object": "edit"
}
2022-04-12 20:40:24.178099 fix syntax errors 3 ['\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points[0][0])\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef read_int():\n    return int(input())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef read_ints():\n    return list(map(int, input().strip().split(\' \')))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and n > 0:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 20:40:31.721621 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip()) \n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(*points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and _ == n - 1:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\n\ndef read_int():\n    return int(input().strip())\n\n\ndef read_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().strip().split())))\n    return matrix\n\n\ndef read_lines(n):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n    return lines\n\n\ndef main():\n    n = read_int()\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649796024,
  "object": "edit"
}
2022-04-12 20:40:31.721806 fix syntax errors 3 ['\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip()) \n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline:\n            input()\n    if not consume_last_newline:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(*points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_int():\n    return int(input().strip())\n\ndef read_matrix(n, m):\n    matrix = []\n    for _ in range(n):\n        matrix.append(read_ints())\n    return matrix\n\ndef read_tuple(convert=None):\n    if convert is None:\n        return tuple(read_ints())\n    return tuple(map(convert, read_ints()))\n\ndef read_lines(n, consume_last_newline=True):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n        if consume_last_newline and _ < n - 1:\n            input()\n    if not consume_last_newline and _ == n - 1:\n        input()\n    return lines\n\n\ndef main():\n    n = read_int()\n    points = []\n    for _ in range(n):\n        points.append(read_tuple())\n    points.sort()\n    print(points)\n    return\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\n\nsys.stdin = open(\'input.txt\')\nsys.stdout = open(\'output.txt\', \'w\')\n\n\ndef read_int():\n    return int(input().strip())\n\n\ndef read_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().strip().split())))\n    return matrix\n\n\ndef read_lines(n):\n    lines = []\n    for _ in range(n):\n        lines.append(input().strip())\n    return lines\n\n\ndef main():\n    n = read_int()\n    print(n)\n    return\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 20:40:31.721844 size on output set 9
