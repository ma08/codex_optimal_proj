["#!/usr/bin/env python3\n\nimport sys\n\n\ndef is_triangle(a, b, c):\n    return a + b > c and b + c > a and a + c > b\n\n\ndef is_right(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef is_obtuse(a, b, c):\n    return a ** 2 + b ** 2 < c ** 2\n\n\ndef is_acute(a, b, c):\n    return a ** 2 + b ** 2 > c ** 2\n\n\ndef is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_equilateral(a, b, c):\n    return a == b and b == c\n\n\ndef classify(a, b, c):\n    if not is_triangle(a, b, c):\n        return 'not a triangle'\n    elif is_equilateral(a, b, c):\n        return 'equilateral'\n    elif is_isosceles(a, b, c):\n        return 'isosceles'\n    else:\n        return 'scalene'\n\n\ndef main():\n    for line in sys.stdin:\n        a, b, c = map(int, line.split())\n        print(classify(a, b, c))\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "\n\ndef person_lister(func):\n    def inner(people_list):\n        # complete the function\n        return list(map(func,sorted(people_list,key=lambda x: int(x[2]))))\n    return inner\n\n@person_lister\ndef name_format(person_list):\n    return (\"Mr. \" if person_list[3] == \"M\" else \"Ms. \") + person_list[0] + \" \" + person_list[1]\n\nif __name__ == '__main__':\n    people_list = [input().split() for i in range(int(input()))]\n    print(*name_format(people_list), sep='\\n')\n", "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])), sep='\\n')\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people))\n", "\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == \"__main__\":\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\"\\n\")\n", "\n\ndef person_lister(func):\n    def inner(people_list):\n        # complete the function\n        return map(func,sorted(people_list,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person_list):\n    return (\"Mr. \" if person_list[3] == \"M\" else \"Ms. \") + person_list[0] + \" \" + person_list[1] \n\nif __name__ == '__main__':\n    people_list = [input().split() for i in range(int(input()))]\n    print(*name_format(people_list), sep='\\n')\n", "\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "def person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "from operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2]))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1])\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "#!/bin/python3\n\n\ndef person_lister(f):\n    def inner(people):\n        return list(map(f, sorted(people, key=lambda x: int(x[2]))))\n    return inner\n\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "#abc\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "\n#abcdef\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "def person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "\n\ndef person_lister(func):\n    def inner(people_list):\n        # complete the function\n        return map(func, sorted(people_list, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person_list):\n    return (\"Mr. \" if person_list[3] == \"M\" else \"Ms. \") + person_list[0] + \" \" + person_list[1]\n\nif __name__ == '__main__':\n    people_list = [input().split() for i in range(int(input()))]\n    print(*name_format(people_list), sep='\\n')\n", "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))  # sorted(people, key=lambda x: int(x[2]))\n\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "def person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1] \n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n') \n", "# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(sum([a[i]*b[i] for i in range(n)]))\n"]