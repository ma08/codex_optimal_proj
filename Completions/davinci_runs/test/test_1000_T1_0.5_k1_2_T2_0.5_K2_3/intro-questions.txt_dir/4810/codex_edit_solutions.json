["\n\ndef main():\n    message = input()\n    r = int(len(message) ** 0.5)\n    c = int(len(message) // r)\n    for i in range(c):\n        print(message[i::c], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\n\ndef encrypt(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            matrix[i][j] = message[i * columns + j]\n\n    encrypted = []\n    for j in range(columns):\n        for i in range(rows):\n            encrypted.append(matrix[i][j])\n\n    return ''.join(decrypted)\n\n\nmessage = input()\nprint(encrypt(message))\n", "# This is a program to encrypt a message\n# This loop finds the smallest possible square matrix\nmessage = input()\n\nr = 0\nc = 0\n\nfor n in range(1, len(message) + 1):\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\n\nmatrix = [[0 for x in range(c)] for y in range(r)]\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "\n#-----main-----\n\ns = input()\n\n#najdi nejveci ctverec\nmax_ctv = int(len(s)**0.5)\n\n#vypis v ctvercich\nfor i in range(max_ctv,0,-1):\n    if len(s) % i == 0:\n        #vypis zleva doprava\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\nimport math  # import math module\n\nmessage = input() # take input\n\nlength = len(message)  # get length of input\n\nrows = math.sqrt(length)  # get number of rows\n\ncolumns = math.sqrt(length) # get number of columns\n\nif rows.is_integer(): # check if rows is integer\n    rows = int(rows)\n    columns = int(columns)\nelse: # if not integer\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = [] # create matrix\n\nfor i in range(0, rows): # add rows\n    matrix.append([]) # add row\n    for j in range(0, columns):\n        matrix[i].append(\"0\") # add column\n\nfor i in range(0, rows): # populate matrix\n    for j in range(0, columns):\n        if j + (i * columns) < length: # check if within length\n            matrix[i][j] = message[j + (i * columns)] # populate matrix\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "\nmessage = input()\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = length ** 0.5\n\n# Get the next lowest integer value of sqrt.\nrows = int(sqrt)\n\n# Get the next highest integer value of sqrt.\ncolumns = int(sqrt) + 1\n\n# If the number of rows times the number of columns is not equal to the length of the message, increment the number of rows by 1 and decrement the number of columns by 1 until the number of rows times the number of columns is equal to the length of the message.\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns.\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string\nprint(newString)\n", "\n\ns = input()\nmax_sq = int(len(s)**0.5)\nfor i in range(max_sq,0,-1):\n    if len(s) % i == 0:\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\nimport math\n\ndef decrypt(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(0, rows):\n        for j in range(0, columns):\n            matrix[i][j] = message[i * columns + j]\n\n    decrypted = []\n    for j in range(0, columns):\n        for i in range(0, rows):\n            decrypted.append(matrix[i][j])\n\n    return ''.join(decrypted)\n\n\nmessage = input()\nprint(decrypt(message))\n", "\n\n# -----main-----\n\ns = input()\n\n# najdi nejveci ctverec\nmax_ctv = int(len(s)**0.5)\n\n# vypis v ctverecich\nfor i in range(max_ctv, 0, -1):\n    if len(s) % i == 0:\n        # vypis zleva do prava\n        for j in range(0, len(s), i):\n            print(s[j:j+i])\n        break\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows < message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ') + '\\n'\n\ndef main():\n    message = sys.stdin.readline().strip()\n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "\n#decrypting the message\nimport math\n\ndef decrypt(message):\n    length = len(message)\n    sqrt = math.sqrt(length)\n    if sqrt == int(sqrt):\n        sqrt = int(sqrt)\n        return decrypt_square(message, sqrt)\n    else:\n        sqrt = int(sqrt)\n        return decrypt_rectangle(message, sqrt, sqrt+1)\n\ndef decrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i*sqrt + j]\n    return ''.join([row[i] for i in range(sqrt) for row in matrix]).strip()\n\ndef decrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i*cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix]).strip()\n\n\nmessage = input()\nprint(decrypt(message))\n", "\n\nmessage = input(\"Enter the message: \")\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = length ** 0.5\n\n# Get the next lowest integer value of the square root\nrows = int(sqrt)\n\n# Get the next highest integer value of the square root\ncolumns = int(sqrt) + 1\n\n# If the number of rows times the number of columns is not equal to the length of the message,\n# increment the number of rows by 1 and decrement the number of columns by 1\n# until the number of rows times the number of columns is equal to the length of the message\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string\nprint(newString)\n", "\nimport math\n\n\ndef encrypt(message):\n    length = len(message)\n    sqrt = math.sqrt(length)\n    if sqrt == int(sqrt):\n        sqrt = int(sqrt)\n        return encrypt_square(message, sqrt)\n    else:\n        sqrt = int(sqrt)\n        return encrypt_rectangle(message, sqrt, sqrt + 1)\n\n\ndef encrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i*sqrt + j]\n    return ''.join([row[i] for i in range(sqrt) for row in matrix])\n\ndef encrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i*cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix])\n\n\nmessage = input()\nprint(encrypt(message))\n", "\n\nmessage = input(\"\")\n\nfor n in range(1, len(message) + 1):\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\n\nmatrix = [[0 for x in range(c)] for y in range(r)]\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print(\"\")\n", "\n\nmessage = input()\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = length ** 0.5\n\n# Get the next lowest integer value of the square root.\nrows = int(sqrt)\n\n# Get the next highest integer value of the square root.\ncolumns = int(sqrt) + 1\n\n# If the number of rows times the number of columns is not equal to the length of the message, increment the number of rows by 1 and decrement the number of columns by 1 until the number of rows times the number of columns is equal to the length of the message.\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns.\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message.\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message in the matrix and increment the counter by 1.\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string.\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character at the row and column in the matrix to the new string.\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string.\nprint(newString)\n", "\n\nmessage = input()  # input message\n\nfor n in range(1, len(message) + 1):  # finding the number of rows and columns\n    if len(message) % n == 0:  # checking if the number of rows is a factor of the number of characters\n        r = n  # number of rows\n        c = int(len(message) / n)  # number of columns\n\nmatrix = [[0 for x in range(c)] for y in range(r)]  # creating a matrix\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\" \")\n    print()\n", "\n\n#-----main-----#\n\ns = input()\n\n#find the biggest square\nmax_sq = int(len(s)**0.5)\n\n#print in square\nfor i in range(max_sq,0,-1):\n    if len(s) % i == 0:\n        #print from left to right\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\n\ndef decrypt(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            matrix[i][j] = message[i * columns + j]\n\n    encrypted = []\n    for j in range(columns):\n        for i in range(rows):\n            encrypted.append(matrix[i][j])\n\n    return ''.join(decrypted)\n\n\nmessage = input()\nprint(encrypt(message))\n", "\n\nmessage = input(\"\")  # input string\n\nfor n in range(1, len(message) + 1):  # find the number of rows and columns\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\n\nmatrix = [[0 for x in range(c)] for y in range(r)]  # create a 2D matrix\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "\nimport math\n\ndef encrypt(message):\n    length = len(message)\n    sqrt_length = math.sqrt(length)\n    if sqrt_length == int(sqrt_length):\n        sqrt_length = int(sqrt_length)\n        return encrypt_square(message, sqrt_length)\n    else:\n        sqrt_length = int(sqrt_length)\n        return encrypt_rectangle(message, sqrt_length, sqrt_length+1)\n\ndef encrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i*sqrt + j]\n    return ''.join([row[i] for i in range(sqrt) for row in matrix])\n\ndef encrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i*cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix])\n\n\nmessage = input()\nprint(encrypt(message))\n", "def main():\n    m = input()\n    r = int(len(m)**(1/2))\n    c = int(len(m)/r)\n    for i in range(c):\n        print(m[i::c], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef decode(message):\n\tlength = len(message)\n\tmax_rows = int(math.sqrt(length))\n\trows = max_rows\n\tcolumns = max_rows\n\tif rows * columns < length:\n\t\trows += 1\n\n\tmatrix = [['' for x in range(columns)] for y in range(rows)]\n\tfor i in range(rows):\n\t\tfor j in range(columns):\n\t\t\tmatrix[i][j] = message[i * columns + j]\n\n\tdecoded = []\n\tfor j in range(columns):\n\t\tfor i in range(rows):\n\t\t\tdecoded.append(matrix[i][j])\n\n\treturn ''.join(decoded)\n\n\nmessage = input()\nprint(decode(message))\n", "import math\n\nmessage = input(\"Enter your message: \")\n\nlength = len(message)\n\nrows = math.sqrt(length)\n\ncolumns = math.sqrt(length)\n\nif rows.is_integer():\n    rows = int(rows)\n    columns = int(columns)\nelse:\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = []\n\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\n\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "\n\nmessage = input()\n\nfor n in range(1, len(message) + 1):\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\n\nmatrix = [[0 for x in range(c)] for y in range(r)]\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "\n\nmessage = input(\"Enter a message: \")\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = length ** 0.5\n\n# Get the next lowest integer value of sqrt\nrows = int(sqrt)\n\n# Get the next highest integer value of sqrt\ncolumns = int(sqrt) + 1\n\n# If the number of rows times the number of columns is not equal to the length of the message,\n# increment the number of rows by 1 and decrement the number of columns by 1\n# until the number of rows times the number of columns is equal to the length of the message\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string \nprint(newString)\n", "\n\nmessage = input()\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = length ** 0.5\n\n# Get the next lowest integer value of sqrt.\nrows = int(sqrt)\n\n# Get the next highest integer value of sqrt.\ncolumns = int(sqrt) + 1\n\n# If the number of rows times the number of columns is not equal to the length of the message, increment the number of rows by 1 and decrement the number of columns by 1 until the number of rows times the number of columns is equal to the length of the message.\nwhile rows * columns != length:\n    if rows * columns < length and columns != 1:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns.\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string\nprint(newString)\n", "\n\nmessage = raw_input()\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = length ** 0.5\n\n# Get the next lowest integer value of sqrt\nrows = int(sqrt)\n\n# Get the next highest integer value of sqrt\ncolumns = int(sqrt) + 1\n\n# If the number of rows times the number of columns is not equal to the length of the message,\n# increment the number of rows by 1 and decrement the number of columns by 1\n# until the number of rows times the number of columns is equal to the length of the message\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string \nprint(newString)\n", "\n\nmessage = input()\n\ndef encode(message):\n    # Get the length of the message\n    length = len(message)\n\n    # Get the square root of the length of the message\n    sqrt = length ** 0.5\n\n    # Get the next lowest integer value of sqrt.\n    rows = int(sqrt)\n\n    # Get the next highest integer value of sqrt.\n    columns = int(sqrt) + 1\n\n    # If the number of rows times the number of columns is not equal to the length of the message, increment the number of rows by 1 and decrement the number of columns by 1 until the number of rows times the number of columns is equal to the length of the message.\n    while rows * columns != length:\n        if rows * columns < length:\n            rows += 1\n        else:\n            columns -= 1\n\n    # Create a matrix with the number of rows and columns.\n    matrix = [[0 for x in range(columns)] for y in range(rows)]\n\n    # Create a counter for the message\n    counter = 0\n\n    # For each row and column in the matrix, place the character at the counter in the message\n    # in the matrix and increment the counter by 1\n    for row in range(rows):\n        for column in range(columns):\n            matrix[row][column] = message[counter]\n            counter += 1\n\n    # Create a new string\n    newString = \"\"\n\n    # For each column in the matrix, for each row in the matrix, add the character\n    # at the row and column in the matrix to the new string\n    for column in range(columns):\n        for row in range(rows):\n            newString += matrix[row][column]\n\n    # Print the new string\n    print(newString)\n\n\nencode(message)\n", "\ndef matrix(message):\n    for n in range(1, len(message) + 1):  # finding the number of rows and columns\n        if len(message) % n == 0:  # checking if the number of rows is a factor of the number of characters\n            r = n  # number of rows\n            c = int(len(message) / n)  # number of columns\n    matrix = [[0 for x in range(c)] for y in range(r)]  # creating a matrix\n    count = 0\n    for i in range(r):\n        for j in range(c):\n            matrix[i][j] = message[count]\n            count += 1\n    for i in range(c):\n        for j in range(r):\n            print(matrix[j][i], end=\"\")\n        print()\n", "import math\n\ndef encrypt(message):\n    length = len(message)\n    sqrt = math.sqrt(length)\n    sqrt = int(sqrt)\n    if sqrt*sqrt == length:\n        return encrypt_square(message, sqrt)\n    return encrypt_rectangle(message, sqrt, sqrt+1)\n\ndef encrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i*sqrt + j]\n    return ''.join(row[i] for i in range(sqrt) for row in matrix)\n\ndef encrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i*cols + j]\n    return ''.join(row[i] for i in range(cols) for row in matrix)\n\n\nmessage = input()\nprint(encrypt(message))\n", "\nimport sys\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows <= message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    message = sys.stdin.readline().strip()\n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    r = int(len(message) ** 0.5)\n    c = int(len(message) / r)\n    for i in range(c):\n        print(message[i::c], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef decrypt(message):\n    length = len(message)\n    sqr = math.sqrt(length)\n    if sqr == int(sqr):\n        sqr = int(sqr)\n        return decrypt_square(message, sqr)\n    else:\n        sqr = int(sqr)\n        return decrypt_rectangle(message, sqr, sqr + 1)\n\ndef decrypt_square(message, sqr):\n    matrix = [['' for i in range(sqr)] for j in range(sqr)]\n    for i in range(sqr):\n        for j in range(sqr):\n            matrix[i][j] = message[i * sqr + j]\n    return ''.join([row[i] for i in range(sqr) for row in matrix])\n\ndef decrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i * cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix])\n\n\nmessage = input()\nprint(decrypt(message))\n", "\nimport math # import math module\n\nmessage = input() # take input\n\nlength = len(message) # get length of input\n\nrows = math.sqrt(length) # get number of rows\n\ncolumns = math.sqrt(length) # get number of columns\n\nif rows.is_integer(): # check if rows is integer\n    rows = int(rows)\n    columns = int(columns)\nelse: # if not integer\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = [] # create matrix\n\nfor i in range(0, rows): # add rows\n    matrix.append([]) # add row\n    for j in range(0, columns):\n        matrix[i].append(\"0\") # add column\n\nfor i in range(0, rows): # populate matrix\n    for j in range(0, columns):\n        if j + (i * columns) < length: # check if within length\n            matrix[i][j] = message[j + (i * columns)] # populate matrix\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "\n\nmessage = input()  # input message \n\nfor n in range(1, len(message) + 1):  # finding the number of rows and columns\n    if len(message) % n == 0:  # checking if the number of rows is a factor of the number of characters\n        r = n  # number of rows\n        c = int(len(message) / n)  # number of columns\n\nmatrix = [[0 for x in range(c)] for y in range(r)]  # creating a matrix\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "\n\ns = input()\n\nmax_sq = int(len(s)**0.5)\n\nfor i in range(max_sq,0,-1):\n    if len(s) % i == 0:\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\n\n# -----main-----\n\ns = input()\n\n# najdi nejveci ctverec\nmax_ctv = int(len(s)**0.5)\n\n# vypis v ctvercich\nfor i in range(max_ctv, 0, -1):\n    if len(s) % i == 0:\n        # vypis zleva doprava\n        for j in range(0, len(s), i):\n            print(s[j:j + i])\n        break\n", "def main():\n    m = input()\n    r = int(len(m)**.5)\n    c = int(len(m)/r)\n    for i in range(c):\n        print(m[i::c],end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef decrypt(message):\n\tlength = len(message)\n\tmax_rows = int(math.sqrt(length))\n\trows = max_rows\n\tcolumns = max_rows\n\tif rows * columns < length:\n\t\trows += 1\n\n\tmatrix = [['' for x in range(columns)] for y in range(rows)]\n\tfor i in range(rows):\n\t\tfor j in range(columns):\n\t\t\tmatrix[i][j] = message[i * columns + j]\n\n\tdecrypted = []\n\tfor j in range(columns):\n\t\tfor i in range(rows):\n\t\t\tdecrypted.append(matrix[i][j])\n\n\treturn ''.join(decrypted)\n\n\nmessage = input()\nprint(decrypt(message))\n", "\n#-----main-----\n\ns = input()\n\n#najdi nejveci ctverec\nmax_ctv = int(len(s)**0.5)\n\n#vypis v ctverecich\nfor i in range(max_ctv,0,-1):\n    if len(s) % i == 0:\n        #vypis zleva do prava\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\n\ndef main():\n    m = input()\n    r = int(len(m) ** 0.5) + 1\n    while r > 0:\n        c = int(len(m) // r)\n        if len(m) % r == 0:\n            for i in range(c):\n                print(m[i::c], end=\"\")\n            break\n        r -= 1\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nmessage = input()\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = int(length ** 0.5)\n\n# Get the next lowest integer value of the square root\nrows = sqrt\n\n# Get the next highest integer value of the square root\ncolumns = sqrt + 1\n\n# If the number of rows times the number of columns is not equal to the length of the message,\n# increment the number of rows by 1 and decrement the number of columns by 1\n# until the number of rows times the number of columns is equal to the length of the message\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns\nmatrix = [['' for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string\nprint(newString)\n", "import math\n\ndef decode(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            matrix[i][j] = message[i * columns + j]\n\n    decoded = []\n    for j in range(columns):\n        for i in range(rows):\n            decoded.append(matrix[i][j])\n\n    return ''.join(decoded)\n\n\nmessage = input()\nprint(decode(message))\n", "\n# decryption\nimport math\n\ndef decrypt(message):\n    length = len(message)\n    sqrt = math.sqrt(length)\n    if sqrt == int(sqrt):\n        sqrt = int(sqrt)\n        return decrypt_square(message, sqrt)\n    else:\n        sqrt = int(sqrt)\n        return decrypt_rectangle(message, sqrt, sqrt+1)\n\ndef decrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i*sqrt + j]\n    return ''.join([row[i] for i in range(sqrt) for row in matrix])\n\ndef decrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i*cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix])\n\n\nmessage = input()\nprint(decrypt(message))\n", "\n# This is a program to encrypt a message\n# This loop finds the smallest possible square matrix\nmessage = input(\"Enter message: \")\n\nfor n in range(1, len(message) + 1):\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\n\nmatrix = [[0 for x in range(c)] for y in range(r)]\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "\nmessage = input()\n\n# Get the length of the message\nlength = len(message)\n# Get the square root of the length of the message\nsqrt = length ** 0.5\n# Get the next lowest integer value of sqrt\nrows = int(sqrt)\n# Get the next highest integer value of sqrt\ncolumns = int(sqrt) + 1\n# If the number of rows times the number of columns is not equal to the length of the message,\n# increment the number of rows by 1 and decrement the number of columns by 1\n# until the number of rows times the number of columns is equal to the length of the message\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n# Create a matrix with the number of rows and columns\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n# Create a counter for the message\ncounter = 0\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n# Create a new string\nnewString = \"\"\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n# Print the new string \nprint(newString)\n", "\n\ndef main():\n    m = input()\n    r = int(len(m) ** 0.5) + 1\n    c = int(len(m) // r) + 1\n    for i in range(c):\n        print(m[i::c], end='')\n\nif __name__ == \"__main__\":\n    main()\n", "\n# This is a program to encrypt a message\n# This loop finds the smallest possible square matrix\nmessage = input()\n\nr = int(input())\nc = int(len(message) / r)\n\nmatrix = [[0 for x in range(r)] for y in range(c)]\n\ncount = 0\nfor i in range(c):\n    for j in range(r):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(r):\n    for j in range(c):\n        print(matrix[j][i], end=\"\")\n    print()\n", "def main():\n    m = input()\n    r = int(len(m)**.5) + 1\n    c = int(len(m)/r) + 1\n    for i in range(c):\n        print(m[i::c], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\nmessage = input(\"Enter your message: \")\n\nlength = len(message)\n\nrows = math.sqrt(length)\n\ncolumns = math.sqrt(length)\n\nif rows.is_integer():\n    rows = int(rows)\n    columns = int(columns)\nelse:\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = []\n\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\n\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "#!/usr/bin/env python3\n\nfrom sys import stdin\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows < message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    message = stdin.readline().strip()\n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "import math # import math module\n\nmessage = input() # take input\n\nlength = len(message) # get length of input\n\nrows = math.sqrt(length) # get number of rows\n\ncolumns = math.sqrt(length) # get number of columns\n\nif rows.is_integer(): # check if rows is integer\n    rows = int(rows)\n    columns = int(columns)\nelse: # if not integer\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = [] # create matrix\n\nfor i in range(0, rows): # add rows\n    matrix.append([]) # add row\n    for j in range(0, columns):\n        matrix[i].append(\"0\") # add column\n\nfor i in range(0, rows): # populate matrix\n    for j in range(0, columns):\n        if j + (i * columns) < length: # check if within length\n            matrix[i][j] = message[j + (i * columns)] # populate matrix\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "\nimport math\n\ndef decrypt(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(length):\n        matrix[i//columns][i%columns] = message[i]\n\n    decrypted = []\n    for i in range(length):\n        decrypted.append(matrix[i//columns][i%columns])\n\n    return ''.join(decrypted)\n\n\nmessage = input()\nprint(decrypt(message))\n", "import math\ndef decrypt(message):\n    length = len(message)\n    sqrt = math.sqrt(length)\n    if sqrt == int(sqrt):\n        sqrt = int(sqrt)\n        return decrypt_square(message, sqrt)\n    else:\n        sqrt = int(sqrt)\n        return decrypt_rectangle(message, sqrt, sqrt+1)\ndef decrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i*sqrt + j]\n    return ''.join([row[i] for i in range(sqrt) for row in matrix])\ndef decrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i*cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix])\nmessage = input()\nprint(decrypt(message))\n", "\n#-----main-----\ns = input()\n#najdi nejveci ctverec\nmax_ctv = int(len(s)**0.5)\n#vypis v ctverecich\nfor i in range(max_ctv,0,-1):\n    if len(s) % i == 0:\n        #vypis zleva do prava\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows <= message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    for line in sys.stdin:\n        print(decrypt(line.strip()))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef decrypt(message):\n    message_length = len(message)\n    rows = 1\n    while rows * rows <= message_length:\n        rows += 1\n    columns = message_length // rows\n    if rows * columns < message_length:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_length):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    message = sys.stdin.readline().strip()\n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    r = int(len(message) ** .5) + 1\n    c = len(message) // r\n    for i in range(c):\n        print(message[i::c], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\nmessage = input()\n\nlength = len(message)\n\nrows = math.sqrt(length)\n\ncolumns = math.sqrt(length)\n\nif rows.is_integer():\n    rows = int(rows)\n    columns = int(columns)\nelse:\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = []\n\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\n\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "# get message\nimport math\n# get length of message\nmessage = input()\n# get rows\nlength = len(message)\n# get columns\nrows = math.sqrt(length)\n# if rows is integer\ncolumns = math.sqrt(length)\n\nif rows.is_integer():\n    rows = int(rows)\n    columns = int(columns)\nelse:\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n# matrix of message\nmatrix = []\n# fill matrix with zeros\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\n# fill matrix with message\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\n# output message\noutput = \"\"\n# fill output message\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n"]