["\n\nN = int(input())\nX = list(map(int, input().split()))\n\ndef median(l):\n    l.sort()\n    return l[len(l)//2]\n\nfor i in range(N):\n    X_copy = X[:]\n    X_copy.pop(i)\n    print(median(X_copy))", "\nimport heapq\n\ndef get_median(l, heap_low, heap_high):\n    if len(heap_low) > len(heap_high):\n        return -heap_low[0]\n    elif len(heap_low) < len(heap_high):\n        return heap_high[0]\n    else:\n        return (heap_high[0] - heap_low[0]) / 2\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    heap_low = []\n    heap_high = []\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n    for i in range(n):\n        b = get_median(n, heap_low, heap_high)\n        if a[i] > b:\n            heapq.heappush(heap_high, a[i])\n        else:\n            heapq.heappush(heap_low, -a[i])\n        if len(heap_low) < len(heap_high):\n            heapq.heappush(heap_low, -heapq.heappop(heap_high))\n        elif len(heap_low) > len(heap_high) + 1:\n            heapq.heappush(heap_high, -heapq.heappop(heap_low))\n        print(get_median(n, heap_low, heap_high))\n\nif __name__ == \"__main__\":\n    main()"]