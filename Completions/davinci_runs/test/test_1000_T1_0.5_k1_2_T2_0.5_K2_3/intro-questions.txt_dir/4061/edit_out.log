2022-04-12 16:35:11.436837 num operations 2
2022-04-12 16:35:11.436853 size on input set 1
2022-04-12 16:35:16.406581 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s. \n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649781311,
  "object": "edit"
}
2022-04-12 16:35:16.406833 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s. \n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 16:35:16.406878 size on output set 3
2022-04-12 16:35:16.406885 size on input set 3
2022-04-12 16:35:22.539238 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it. We can keep it if it is in t. We can remove it if it is not in t (or if we have already removed it). This leads to a simple dp solution. We keep a list of the length of the longest possible substring we can remove ending at each index in s. \n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s. \n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp)) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649781316,
  "object": "edit"
}
2022-04-12 16:35:22.539424 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it. We can keep it if it is in t. We can remove it if it is not in t (or if we have already removed it). This leads to a simple dp solution. We keep a list of the length of the longest possible substring we can remove ending at each index in s. \n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s. \n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp)) \n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 16:35:27.651763 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # We can note that for each character in s, we can either keep it or remove it.\n    # We can keep it if it is in t.\n    # We can remove it if it is not in t (or if we have already removed it).\n    # This leads to a simple dp solution.\n    # We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649781322,
  "object": "edit"
}
2022-04-12 16:35:27.651955 fix syntax errors 3 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # We can note that for each character in s, we can either keep it or remove it.\n    # We can keep it if it is in t.\n    # We can remove it if it is not in t (or if we have already removed it).\n    # This leads to a simple dp solution.\n    # We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 16:35:33.912891 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it. We can keep it if it is in t. We can remove it if it is not in t (or if we have already removed it). This leads to a simple dp solution. We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649781327,
  "object": "edit"
}
2022-04-12 16:35:33.913069 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it. We can keep it if it is in t. We can remove it if it is not in t (or if we have already removed it). This leads to a simple dp solution. We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    """\n\n    """\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 16:35:33.913168 size on output set 9
2022-04-12 16:35:33.913179 num operations 2
2022-04-12 16:35:33.913184 size on input set 1
2022-04-12 16:35:39.968559 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef subsequence(string, subseq):\n    if not subseq:\n        return True\n    i = 0\n    for c in string:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], subseq):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef substring(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n"
    },
    {
      "index": 2,
      "text": "\n\ndef subsequence(string, sub):\n    if not sub: # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n"
    }
  ],
  "created": 1649781333,
  "object": "edit"
}
2022-04-12 16:35:39.968771 fix spelling mistakes 3 ['\n\ndef subsequence(string, subseq):\n    if not subseq:\n        return True\n    i = 0\n    for c in string:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], subseq):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n', '\n\ndef substring(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n', '\n\ndef subsequence(string, sub):\n    if not sub: # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n']
2022-04-12 16:35:39.968807 size on output set 3
2022-04-12 16:35:39.968813 size on input set 3
2022-04-12 16:35:48.222489 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef subsequence(string, sub):\n    if not sub:  # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n"
    },
    {
      "index": 1,
      "text": "\n\ndef subsequence(string, sub):\n    if not sub: # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end: # binary search\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n"
    },
    {
      "index": 2,
      "text": "\ndef subsequence(string, sub):\n    if not sub:  # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n"
    }
  ],
  "created": 1649781340,
  "object": "edit"
}
2022-04-12 16:35:48.222669 fix syntax errors 3 ['\ndef subsequence(string, sub):\n    if not sub:  # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n', '\n\ndef subsequence(string, sub):\n    if not sub: # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end: # binary search\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n', '\ndef subsequence(string, sub):\n    if not sub:  # if sub is empty\n        return True\n    i = 0 # index of sub\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub): # if i reaches the end of sub\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0 \n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub): # if sub is a sub sequence of string[:mid]\n            end = mid\n        else:\n            start = mid + 1 # if sub is not a sub sequence of string[:mid]\n    return len(string) - end\n\nprint solve(raw_input(), raw_input()) # input string and sub\n']
2022-04-12 16:35:53.287153 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef substring(string, sub):\n    if not sub: \n        return True\n    for i in range(len(string)):\n        if string[i] == sub[0]:\n            j = 0\n            while j < len(sub) and string[i + j] == sub[j]:\n                j += 1\n            if j == len(sub):\n                return True \n    return False \n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start < end:\n        mid = (start + end) // 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef substring(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n"
    },
    {
      "index": 2,
      "text": "\ndef substring(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n"
    }
  ],
  "created": 1649781348,
  "object": "edit"
}
2022-04-12 16:35:53.287336 fix syntax errors 3 ['\n\ndef substring(string, sub):\n    if not sub: \n        return True\n    for i in range(len(string)):\n        if string[i] == sub[0]:\n            j = 0\n            while j < len(sub) and string[i + j] == sub[j]:\n                j += 1\n            if j == len(sub):\n                return True \n    return False \n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start < end:\n        mid = (start + end) // 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n', '\n\ndef substring(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n', '\ndef substring(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if substring(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n']
2022-04-12 16:35:56.362079 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef subsequence(string, subseq, start, end):\n    if not subseq:\n        return True\n    i = 0\n    for c in string[start:end]:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string, subseq, start, mid):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef subsequence(string, subseq):\n    if not subseq:\n        return True\n    i = 0\n    for c in string:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], subseq):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(raw_input(), raw_input()))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef subsequence(string, subseq, start=0):\n    if not subseq:\n        return True\n    i = 0\n    for c in string[start:]:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], subseq):\n            end = mid\n        else:\n            start = mid + 1\n    return string[:end]\n\nprint solve(raw_input(), raw_input())\n"
    }
  ],
  "created": 1649781353,
  "object": "edit"
}
2022-04-12 16:35:56.362288 fix syntax errors 3 ['\n\ndef subsequence(string, subseq, start, end):\n    if not subseq:\n        return True\n    i = 0\n    for c in string[start:end]:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string, subseq, start, mid):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint solve(raw_input(), raw_input())\n', '\n\ndef subsequence(string, subseq):\n    if not subseq:\n        return True\n    i = 0\n    for c in string:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], subseq):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(raw_input(), raw_input()))\n', '\n\ndef subsequence(string, subseq, start=0):\n    if not subseq:\n        return True\n    i = 0\n    for c in string[start:]:\n        if c == subseq[i]:\n            i += 1\n            if i == len(subseq):\n                return True\n    return False\n\ndef solve(string, subseq):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], subseq):\n            end = mid\n        else:\n            start = mid + 1\n    return string[:end]\n\nprint solve(raw_input(), raw_input())\n']
2022-04-12 16:35:56.362329 size on output set 8
