["#\n# class Solution:\n#     def canThreePartsEqualSum(self, A) -> bool:\n#         total = sum(A)\n#         if total % 3 != 0:\n#             return False\n#         target = total // 3\n#         cur = 0\n#         count = 0\n#         for num in A:\n#             cur += num\n#             if cur == target:\n#                 count += 1\n#                 cur = 0\n#         return count == 3\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        num1 = 0\n        num2 = 0\n        while l1.next:\n            num1 = (num1 * 10) + l1.val\n            l1 = l1.next\n        num1 = (num1 * 10) + l1.val\n        while l2.next:\n            num2 = (num2 * 10) + l2.val\n            l2 = l2.next\n        num2 = (num2 * 10) + l2.val\n        print(num1, num2)\n        sum_ = num1 + num2\n        print(sum_)\n        res = None\n        while sum_ > 0:\n            rem = sum_ % 10\n            sum_ = sum_ // 10\n            if res is None:\n                res = ListNode(rem)\n            else:\n                temp = ListNode(rem)\n                temp.next = res\n                res = temp\n        return res\n\n\nl1 = ListNode(2)\nl1.next = ListNode(4)\nl1.next.next = ListNode(3)\nl2 = ListNode(5)\nl2.next = ListNode(6)\nl2.next.next = ListNode(4)\n\nsol = Solution()\nres = sol.addTwoNumbers(l1, l2)\nwhile res:\n    print(res.val)\n    res = res.next\n", "'''\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.\\\nFormally, we can partition the array if we can find indexes i+1 < j with \n(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])\n'''\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "import sys\nimport heapq\nfrom collections import deque\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom collections import namedtuple\nfrom collections import deque\nfrom collections import abc\nfrom collections import Iterable\nfrom collections import Iterator\nfrom collections import Sequence\nfrom collections import Sized\nfrom collections import Container\nfrom collections import Callable\nfrom collections import Hashable\nfrom collections import Mapping\nfrom collections import MappingView\nfrom collections import MutableMapping\nfrom collections import MutableSequence\nfrom collections import MutableSet\nfrom collections import ItemsView\nfrom collections import KeysView\nfrom collections import ValuesView\nfrom collections import deque\nfrom collections import ChainMap\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom collections import defaultdict\nfrom collections import UserDict\nfrom collections import UserList\nfrom collections import UserString\nfrom collections import _Link\nfrom collections import _ChainMap\nfrom collections import _count_elements\nfrom collections import _heapq\nfrom collections import _OrderedDict\nfrom collections import _deque\nfrom collections import _eq\nfrom collections import _iskeyword\nfrom collections import _itemgetter\nfrom collections import _proxy\nfrom collections import _recursive_repr\nfrom collections import _repeat\nfrom collections import _starmap\nfrom collections import _sys\nfrom collections import _tee\nfrom collections import _unique_everseen\nfrom collections import _repeat\nfrom collections import _starmap\nfrom collections import _tee\nfrom collections import _unique_everseen\nfrom collections import _OrderedDict\nfrom collections import _count_elements\nfrom collections import _heapq\nfrom collections import _Link\nfrom collections import _ChainMap\nfrom collections import _eq\nfrom collections import _iskeyword\nfrom collections import _itemgetter\nfrom collections import _proxy\nfrom collections import _recursive_repr\nfrom collections import _sys\nfrom collections import abc\nfrom collections import namedtuple\nfrom collections import defaultdict\nfrom collections import OrderedDict\nfrom collections import Counter\nfrom collections import ChainMap\nfrom collections import UserDict\nfrom collections import UserList\nfrom collections import UserString\nfrom collections import deque\nfrom collections import Mapping\nfrom collections import MutableMapping\nfrom collections import MappingView\nfrom collections import ItemsView\nfrom collections import KeysView\nfrom collections import ValuesView\nfrom collections import MutableSequence\nfrom collections import MutableSet\nfrom collections import Callable\nfrom collections import Container\nfrom collections import Hashable\nfrom collections import Iterable\nfrom collections import Iterator\nfrom collections import Sized\nfrom collections import Sequence\nfrom collections import Set\nfrom collections import Mapping\nfrom collections import MappingView\nfrom collections import ItemsView\nfrom collections import KeysView\nfrom collections import ValuesView\nfrom collections import MutableMapping\nfrom collections import MutableSequence\nfrom collections import MutableSet\nfrom collections import Callable\nfrom collections import Container\nfrom collections import Hashable\nfrom collections import Iterable\nfrom collections import Iterator\nfrom collections import Sized\nfrom collections import Sequence\nfrom collections import Set\nfrom collections import Mapping\nfrom collections import MappingView\nfrom collections import ItemsView\nfrom collections import KeysView\nfrom collections import ValuesView\nfrom collections import MutableMapping\nfrom collections import MutableSequence\nfrom collections import MutableSet\nfrom collections import Callable\nfrom collections import Container\nfrom collections import Hashable\nfrom collections import Iterable\nfrom collections import Iterator\nfrom collections import Sized\nfrom collections import Sequence\nfrom collections import Set\nfrom collections import Mapping\nfrom collections import MappingView\nfrom collections import ItemsView\nfrom collections import KeysView\nfrom collections import ValuesView\nfrom collections import MutableMapping\nfrom collections import MutableSequence\nfrom collections import MutableSet\nfrom collections import Callable\nfrom collections import Container\nfrom collections import Hashable\nfrom collections import Iterable\nfrom collections import Iterator\nfrom collections import Sized\nfrom collections import Sequence\nfrom collections import Set\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "class Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "from typing import List\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "\"\"\"\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "#!/bin/sh\n\n# Gather information about the system\n#\n#\n\n# Output file\nOUTFILE=\"system.info\"\n\n# System information\necho \"System information\" > $OUTFILE\necho \"------------------\" >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Hostname\necho \"Hostname:\" >> $OUTFILE\necho \"---------\" >> $OUTFILE\nhostname >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Kernel Version\necho \"Kernel Version:\" >> $OUTFILE\necho \"---------------\" >> $OUTFILE\nuname -r >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Uptime\necho \"Uptime:\" >> $OUTFILE\necho \"-------\" >> $OUTFILE\nuptime >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Last reboot\necho \"Last Reboot:\" >> $OUTFILE\necho \"------------\" >> $OUTFILE\nwho -b >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# CPU info\necho \"CPU info:\" >> $OUTFILE\necho \"---------\" >> $OUTFILE\ncat /proc/cpuinfo | grep \"model name\" >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# RAM info\necho \"RAM info:\" >> $OUTFILE\necho \"---------\" >> $OUTFILE\nfree -m >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Disk info\necho \"Disk info:\" >> $OUTFILE\necho \"----------\" >> $OUTFILE\ndf -h >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Network info\necho \"Network info:\" >> $OUTFILE\necho \"-------------\" >> $OUTFILE\nip addr >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Network connections\necho \"Network connections:\" >> $OUTFILE\necho \"--------------------\" >> $OUTFILE\nnetstat -tulpn >> $OUTFILE\necho \"\" >> $OUTFILE\n\n# Active processes\necho \"Active processes:\" >> $OUTFILE\necho \"-----------------\" >> $OUTFILE\nps aux >> $OUTFILE\necho \"\" >> $OUTFILE\n", "#!/usr/bin/perl -w\n\nuse strict;\nuse warnings;\n\nmy $filename = \"file.txt\";\n\nopen my $file, '<', $filename or die \"Could not open file '$filename' $!\";\n\nwhile (my $line = <$file>) {\n\tchomp $line;\n\tprint \"$line\\n\";\n}\n\nclose $file;\n", "<?php\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n    // error opening the file.\n}\n\n$file = fopen(\"file.txt\", \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line;\n    }\n\n    fclose($file);\n} else {\n", "'''\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal\nsums.\nFormally, we can partition the array if we can find indexes i+1 < j with\n(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])\n'''\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "class Solution:\n    def canThreePartsEqualSum(self, A):\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "from typing import List\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n"]