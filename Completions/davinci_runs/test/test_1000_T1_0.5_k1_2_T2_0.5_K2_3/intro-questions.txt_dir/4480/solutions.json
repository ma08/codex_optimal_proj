["class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n#         if len(A)<3:\n#             return\n        \n#         i = 1\n#         j = len(A)-2\n        \n#         tgtsum = sum(A)/3\n#         sum1 = sum(A[:i])\n#         while i<(len(A)-2) and sum1!=tgtsum:\n#             sum1 = sum1 + A[i]\n#             i+=1\n        \n#         sum3=sum(A[j+1:])\n#         while j>1 and sum3!=tgtsum:\n#             # print (tgtsum, sum1, sum3, A[j])\n#             sum3 = sum3 + A[j]\n#             j-=1\n#         # print (i,j)\n#         if j>=i and sum1==tgtsum and sum3==tgtsum:\n#             return True\n#         else:\n#             return False\n\n        if len(A)<3:\n            return False\n        suma = sum(A)\n        if suma%3!=0:\n            return False\n        \n        runsum,target, count = 0,suma/3,0\n        \n        for val in A[:-1]:\n            runsum += val\n            if runsum==target:\n                count+=1\n                runsum=0\n                if count==2:\n                    return True\n        else:\n            return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        '''\n        # first solution\n        total = sum(A)\n        if total%3!=0: False        \n        for i in range(1,len(A)): A[i] += A[i-1]\n        if total==0 and A.count(0)<3: return False        \n        return True if A.count(total//3) and A.count(total//3*2) and A.index(total//3)<len(A)-A[::-1].index(total//3*2) else False\n        '''\n        # second solution\n        total = sum(A)\n        if total%3!=0: False\n        count, temp, Sum = 1, total//3, 0\n        for i in range(len(A)-1): \n            Sum += A[i]\n            if Sum == temp * count:\n                count+=1\n                if count==3: return True\n        print(A)\n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s=0\n        res=0\n        s1=sum(A)\n        if s1%3 != 0:\n            return False\n        target=s1//3\n        for a in A:\n            s+=a\n            if s == target:\n                s=0\n                res+=1\n        return res >2\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum = 0\n        for i in A:\n            sum += i\n        s = 0\n        c = 0\n        for i in A:\n            s += i\n            if s == int(sum/3):\n                s = 0\n                c += 1\n        return c >= 3", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        '''\n        # first solution\n        total = sum(A)\n        if total%3!=0: False        \n        for i in range(1,len(A)): A[i] += A[i-1]\n        if total==0 and A.count(0)<3: return False        \n        return True if A.count(total//3) and A.count(total//3*2) and A.index(total//3)<len(A)-A[::-1].index(total//3*2) else False\n        '''\n        # second solution\n        total = sum(A)\n        if total%3!=0: False\n        count, temp, Sum = 1, total//3, 0\n        for val in A[:-1]: \n            Sum += val\n            if Sum == temp:\n                Sum = 0\n                count+=1\n                if count==3: return True\n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n        # first solution\n        total = sum(A)\n        if total%3!=0: False        \n        for i in range(1,len(A)): A[i] += A[i-1]\n        if total==0 and A.count(0)<3: return False        \n        return True if A.count(total//3) and A.count(total//3*2) and A.index(total//3)<len(A)-A[::-1].index(total//3*2) else False\n        \n        # second solution\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        cusum = 0\n        cusum_list = list()\n        for i in range(len(A)):\n            cusum += A[i]\n            cusum_list.append(cusum)\n        if sum(A)/3 in cusum_list:\n            if sum(A)*2/3 in cusum_list[cusum_list.index(sum(A)/3) + 1:-1]:\n                return True\n            else:\n                return False\n        else:\n            return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)%3 != 0:\n            return False\n        required_sum = sum(A)//3\n        count_partition = 0\n        curr_sum = A[0]\n        i = 1\n        while i < len(A):\n            while i < len(A) and curr_sum != required_sum:\n                curr_sum += A[i]\n                i += 1\n            if curr_sum == required_sum:\n                count_partition += 1\n                if i < len(A):\n                    curr_sum = A[i]\n                    i += 1\n                    if i == len(A) and curr_sum == required_sum:\n                        count_partition += 1\n        if count_partition > 3 and required_sum == 0:\n            count_partition = 3\n        return count_partition == 3", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        avg = 0\n        for i in A:\n            avg += i\n        if(avg%3 != 0): return False\n        count = 0\n        sum = 0\n        for i in range(0,len(A)):\n            if(sum == avg//3):\n                if(i!=0):\n                    count += 1\n                    sum = A[i]\n            elif(sum != avg//3):\n                sum += A[i]\n        if(sum == avg//3): count += 1\n        return count >= 3", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)%3 != 0:\n            return False\n        \n        count, tmp_sum, target = 0, 0, sum(A)//3\n        \n        for num in A:\n            tmp_sum += num\n            if tmp_sum == target:\n                count += 1 \n                tmp_sum = 0\n        \n        return count >= 3", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if len(A) < 3 : return False\n        prefixSumMap = defaultdict(list)\n        sumUpto = {}\n        total = 0\n        for i in range(len(A)) :\n            prefixSumMap[total].append(i)\n            total += A[i]\n            sumUpto[i] = total\n        s = 0\n        for i in range(len(A)-1, 1, -1) :\n            s += A[i]\n            target = total - 2*s\n            if prefixSumMap.get(target) != None :\n                for j in prefixSumMap[target] :\n                    if j < i and j > 0 and sumUpto[j-1] == s :\n                        return True\n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n        sumA = sum(A)\n        if sumA % 3 != 0:\n            return False\n        tmpSum, isFound, eachPart = 0, 0 ,sumA//3\n        for i in A:\n            tmpSum += i\n            if tmpSum == eachPart:\n                tmpSum = 0 \n                isFound += 1\n        if isFound >=3 :\n            return True\n        else:\n            return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: list) -> bool:\n        ''' returns True if indices i and j can be found such that A[0]+...+A[i]==A[i+1]+...+A[j]==A[j+1]+...+A[-1]\n\n        Algo: form [A[0], A[0]+A[1], A[0]+A[1]+A[2], ..., sum(A)]\n        if A can be partitioned, then n=sum(A) is a multiple of 3,\n        2*n//3 must appear at some index j, and n//3 must appear at some index i<j'''\n        if len(A)<3:\n            return False\n        for i in range(1,len(A)):\n            A[i] = A[i-1]+A[i]\n        end_value=A[-1]\n        if end_value%3!=0:\n            return False\n        index=len(A)-2\n        while A[index] != 2*end_value//3:\n            index-=1\n            if index==0:\n                return False\n        index-=1\n        while A[index] != end_value//3:\n            index-=1\n            if index<0:\n                return False\n        return True", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        d = defaultdict(list)\n        sumn = 0\n        for i,num in enumerate(A) :\n            sumn += num\n            d[sumn].append(i)\n\n        if sumn % 3 != 0 :\n            return False\n        div = sumn // 3\n\n        return div in d and div*2 in d and d[div][0] < (d[div*2][-1] if d[div*2][-1] != len(A)-1 else d[div*2][-2])\n\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s%3 != 0: \n            return False\n        ps = s//3\n        count = 0\n        for x in A:\n            ps -= x\n            if not ps:\n                ps = s//3\n                count+=1\n                if count > 2:\n                    return True\n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s=sum(A)\n        if s%3!=0:\n            return 0\n        n=len(A)\n        cnt=[0]*n\n        s//=3\n        ss=0\n        for i in range(n-1,-1,-1):\n            ss+=A[i]\n            if i==n-1:\n                cnt[i]= 1 if ss==s else 0\n            else:\n                cnt[i]=cnt[i+1]+ (1 if ss==s else 0)\n        ss=0\n        ans=0\n        print(cnt)\n        for i in range(0,n-2):\n            ss+=A[i];\n            if ss==s:\n                ans+=cnt[i+2]\n        print(ans)\n        return True if ans>0 else False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        '''\n        # first solution\n        total = sum(A)\n        if total%3!=0: False        \n        for i in range(1,len(A)): A[i] += A[i-1]\n        if total==0 and A.count(0)<3: return False        \n        return True if A.count(total//3) and A.count(total//3*2) and A.index(total//3)<len(A)-A[::-1].index(total//3*2) else False\n        '''\n        # second solution\n        total = sum(A)\n        if total%3!=0: False\n        count, temp, Sum = 1, total//3, 0\n        for val in A[:-1]: \n            Sum += val\n            if Sum == temp * count:\n                count+=1\n                if count==3: return True\n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n        s = sum(A)\n        if s % 3 != 0:\n            return False\n        x = s // 3\n        c = 0\n        d = 0\n        for a in A[:-1]:\n            c += a\n            if d == 0 and c == x:\n                d = 1\n            elif d == 1 and c == 2 * x:\n                return True\n        \n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A) % 3 != 0:\n            return False\n        targetSum = sum(A) // 3\n        a = 1\n        runningSum = A[0]\n        while a < len(A) and runningSum != targetSum:\n            runningSum += A[a]\n            a += 1\n        b = len(A) - 2\n        runningSum = A[-1]\n        while b > -1 and runningSum != targetSum:\n            runningSum += A[b]\n            b -= 1\n        return not a > b", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if len(A) < 3: return False\n        for i in range(1,len(A)):\n            A[i] = A[i]+A[i-1]\n        \n        sumTarg = A[-1]/3\n        \n        first = False\n        \n        for i in range(len(A)):\n            if A[i] == sumTarg and first == False:\n                first = True\n            elif (first == True and A[i] == 2*sumTarg and i != len(A)-1):\n                return True\n        \n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        cummulative_sum = 0\n        counter = 0\n        target = sum(A) / 3\n        if target != int(target):\n            return False\n        print(target)\n        for idx in range(len(A)):\n            cummulative_sum += A[idx]\n            if cummulative_sum == target:\n                cummulative_sum = 0\n                counter += 1\n        \n        if counter == 4 and target == 0:\n            return True\n        if counter == 3:\n            return True\n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)-(sum(A)//3)*3!=0:\n            return 0\n        else:\n            s=sum(A)//3\n            c=0\n            ts=0\n            j=0\n            for i in range(len(A)):\n                j=i\n                ts+=A[i]\n                if ts==s:\n                    c+=1\n                    ts=0\n                if c==2 and j+1<len(A):\n                    for k in range(j+1,len(A)):\n                        ts+=A[k]\n                    if ts==s:\n                        return 1\n                    else:\n                        return 0\n            return 0\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        partSum = sum(A)/3\n        curSum = 0\n        partNum = 0\n        for i  in A:\n            curSum +=i\n            if(curSum == partSum):\n                curSum = 0\n                partNum +=1\n        if(partSum == 0):\n            return partNum>=3\n        else:\n            return partNum == 3\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        third = total // 3\n        cumsum, count = 0, 0\n        for i in range(0, len(A)):\n            cumsum += A[i]\n            if cumsum == third:\n                count += 1\n                cumsum = 0\n        return count == 3 or count > 3 and total == 0", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        x= 0\n        for i in A:\n            x += i\n        if x%3 !=0 :\n            return False\n        x = x/3\n        count = 0\n        sum1 = 0\n        for i in A :\n            sum1 += i\n            if sum1 == x :\n                count += 1\n                sum1 = 0\n        if count >= 3 :\n            return True\n        else:\n            return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)%3!=0:\n            return False\n        \n        req=sum(A)//3\n        \n        s=0\n        c=0\n        print(sum(A))\n        print(req)\n        for i in A:\n            s+=i\n            if s==req:\n                s=0\n                c+=1\n        \n        return c>=3", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        i = 0\n        count = A[i]\n        while (i < len(A)-1) and (count != total/3):\n            i += 1\n            count += A[i]\n            \n            \n        if (count != total/3) or (i+1 > len(A)-2):\n            return False\n        \n        j = i +1\n        count = A[j]\n        while (j < len(A)-1) and (count != total/3):\n            j += 1\n            count += A[j]\n           \n            \n        if (count != total/3) or (j+1 == len(A)):\n            return False\n        \n        if sum(A[j+1:]) == total/3:\n            return True\n        else:\n            return False\n        \n        \n            \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        #a + ....+ b = num \n        # if 3 equal amount of indices have the same sum  return true\n        # how do we find the sum? \n        # use the sum and then divide it by three thats the equal part sum\n        # use len(A) - 1  to find the number of indexes and \n        equalSum = sum(A) // 3\n        part = 0\n        numparts = 0\n        r = sum(A) % 3\n        for i in A:\n            part += i \n            if part == equalSum:\n                part = 0\n                numparts += 1\n        return not r and numparts >= 3\n\n\n\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum1=sum(A)\n        if sum1%3!=0:\n            return False\n        \n        else:\n            div=sum1//3\n            print(div)\n            i1,sum2=0,0\n            for i in A:\n                sum2=sum2+i\n                print(sum2,i)\n                if sum2==div:\n                    i1=i1+1\n                    print('sum2',sum2)\n                    sum2=0\n            if i1>=3 and div==0:\n                return True\n            if i1==3:\n                return True\n            return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s%3 != 0: \n            return False\n        ps = s//3\n        count = 0\n        for x in A:\n            ps -= x\n            if not ps:\n                ps = s//3\n                count+=1\n        return count >= 3\n        \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        isum = 0\n        \n        for i in range(0,len(A)-2):\n            isum += A[i]\n            if isum == total/3:\n                jsum = 0\n                for j in range(i+1,len(A)-1):\n                    jsum += A[j]\n                    if isum == jsum == total - isum - jsum:\n                        return True\n        return False\n            \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        target = sum(A)//3\n        \n        temp = 0\n        count = 0\n        for i in range(len(A)):\n            temp += A[i]\n            if(temp == target):\n                temp = 0\n                count += 1\n                if(count == 3):\n                    return True\n        return False\n                \n        \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        j = len(A)\n        i = 0\n        num= sum(A)//3\n        \n        print(num)\n        sum1 = 0\n        sum2 = 0\n        sum3 = 0\n        for i in range(0, j):\n            sum1 = sum1 + A[i]\n            i = i +1\n            if sum1 == num:\n                break\n        for i in range(i, j):\n            sum2 = sum2 + A[i]\n            i = i +1\n            if sum2 == num:\n                break\n        \n        if i == j:\n            return False\n        sum3 = sum(A[i:])\n        # for i in range(i, j):\n        #     sum3 = sum3 + A[i]\n        #     i = i +1\n        #     if sum3 == num:\n        #         break\n        # print(\\\"sum=\\\",sum3)\n        return sum1==sum2 and sum1 == sum3\n    \n        # return sum3\n#         for i in range(0, floor(j/3)):\n#             sum1 = sum1 + A[i]\n#             i = i+1\n\n#         sum2 =0 \n#         print(\\\"sum1 = \\\" , sum1)\n#         while sum2 is not sum1:\n#             sum2 = sum2 + A[i]\n#             print(sum2)\n#             i= i+1\n        \n#         sum3 =0\n#         for i in range(i,j):\n#             sum3 = sum3 +A[i]\n#             # print(sum3)\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        j = len(A)\n        i = 0\n        num= 0\n        for i in range(0, j):\n            num = num + A[i]\n        num = floor(num /3);\n        print(num)\n        sum1 = 0\n        sum2 = 0\n        sum3 = 0\n        for i in range(0, j):\n            sum1 = sum1 + A[i]\n            i = i +1\n            if sum1 == num:\n                break\n        for i in range(i, j):\n            sum2 = sum2 + A[i]\n            i = i +1\n            if sum2 == num:\n                break\n        \n        if i == j:\n            return False\n        for i in range(i, j):\n            sum3 = sum3 + A[i]\n            i = i +1\n            if sum3 == num:\n                break\n        print(sum1)\n        return sum1==sum2 and sum1 == sum3\n    \n        # return sum3\n#         for i in range(0, floor(j/3)):\n#             sum1 = sum1 + A[i]\n#             i = i+1\n\n#         sum2 =0 \n#         print(\\\"sum1 = \\\" , sum1)\n#         while sum2 is not sum1:\n#             sum2 = sum2 + A[i]\n#             print(sum2)\n#             i= i+1\n        \n#         sum3 =0\n#         for i in range(i,j):\n#             sum3 = sum3 +A[i]\n#             # print(sum3)\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3 != 0:\n            return False\n        flag = 0\n        temp = 0\n        for i in range(len(A)):\n            temp += A[i]\n            if flag == 0 and temp == s//3:\n                flag += 1\n            elif flag == 1 and temp == s*2/3 and i != len(A)-1:\n                return True\n        return False\n                \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        average, remainder, part, cnt = sum(A) // 3, sum(A) % 3, 0, 0\n        for a in A:\n            part += a\n            if part == average:\n                cnt += 1\n                part = 0\n        return not remainder and cnt >= 3", "\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n        total = sum(A)\n        curr_sum = 0\n        first_found_flag = False\n        \n        for i in range(len(A) - 1): #will go until the last element.\n            curr_sum += A[i]\n            if not first_found_flag: #looking for the first group\n                if curr_sum == total / 3: #we found the first group.\n                    first_found_flag = True\n            else: #looking for the second group\n                if curr_sum == total * 2 / 3:\n                    return True\n                \n        return False\n            \n        \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        l,r,s=1, len(A)-2, sum(A)\n        ls, rs, avgs = A[0], A[-1], s//3\n        while l<r:\n            if l < r and ls != avgs:\n                ls+=A[l]\n                l+=1\n            if l<r and rs!=avgs:\n                rs+=A[r]\n                r-=1\n            if ls == rs == avgs and s%3==0:\n                return True\n            \n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        t=sum(A)\n        if t%3!=0:\n            return False\n        s=0\n        p=0\n        for i in range(len(A)):\n            s+=A[i]\n            if s==t//3:\n                s=0\n                p+=1\n        if p>=3:\n            return True\n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        average, part, cnt = sum(A) // 3, 0, 0\n        for a in A:\n            part += a\n            if part == average:\n                cnt += 1\n                part = 0\n        return cnt >= 3\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3 != 0:\n            return False\n        s = s / 3\n        t = 0\n        count = 0\n        for x in A:\n            t += x\n            if t == s:\n                t = 0\n                count += 1\n        if t == 0 and count >= 3:\n            return True\n        else:\n            return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3 != 0:\n            return False\n        target = s//3\n        current = 0\n        count = 0\n        for v in A:\n            current += v\n            if current == target:\n                count += 1\n                current = 0\n                if count >= 3:\n                    return True\n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        totalSum = sum(A)\n        if totalSum % 3 != 0:\n            return False\n        \n        target = totalSum // 3\n        numPartitions = 0\n        currSum = 0\n        \n        for num in A:\n            currSum += num\n            if currSum == target:\n                numPartitions += 1\n                currSum = 0\n                if numPartitions == 3:\n                    return True\n                \n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, li: List[int]) -> bool:\n        s = sum(li)\n        if s % 3: return False\n        ts = s // 3\n        ss = 0\n        chunk = 0\n        for n in li[:-1]:\n            ss += n\n            if ss == ts:\n                chunk += 1\n                if chunk == 2:\n                    return True\n                ss = 0\n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3 != 0:\n            return False\n        curr, target = 0, s // 3\n        count = 0\n        for ix in range(len(A)):\n            curr += A[ix]\n            if curr == target:\n                curr = 0\n                count += 1\n                \n            if count == 2 and ix < len(A) - 1:\n                return True\n        \n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        \n        partition_sum = total/3\n        numberofpartition=0\n        tempsum=0\n        for i in range(len(A)):\n            tempsum+=A[i]\n            if tempsum == partition_sum:\n                numberofpartition+=1\n                tempsum=0\n            \n            if numberofpartition == 3:\n                return True\n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        S = sum(A)\n        if S % 3 != 0:\n            return False\n        \n        S_1 = S / 3\n        S_2 = S_1 + S_1\n        cur = A[0]\n        for i in range(1, len(A)-2):\n            if cur == S_1:\n                cur += A[i]\n                for j in range(i+1, len(A)-1):\n                    if cur == S_2:\n                        return True\n                    else:\n                        cur += A[j]\n                \n                if cur == S_2:\n                    return A[-1] == S_1\n            else:\n                cur += A[i]\n\n        if cur == S_1:\n            return A[-1] == S_1\n\n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        tot = sum(A)\n        if tot%3 != 0:\n            return False\n        flag = 0\n        temp_tot = 0\n        presum =[0] * (len(A) + 1)\n        s = tot//3\n        target = [2*s, s]\n        for i in range(len(A)):\n            if not target:\n                return True\n            \n            presum[i + 1] = presum[i ] + A[i]\n            if presum[i + 1] == target[-1]:\n                target.pop()\n            \n        \n        \n        \n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)%3: \n            return False\n        sumParts = sum(A)//3\n        summ=0\n        parts=0\n        for num in A:\n            summ+=num\n            if summ==sumParts:\n                parts +=1\n                summ=0\n        return parts>=3", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum=0\n        for a in A:\n            sum+=a\n        target=floor(sum/3)\n        sum=0\n        cnt=0\n        j=len(A)-1\n        i=0\n        while j>0:\n            sum+=A[j]\n            if sum==target:\n                cnt+=1\n                sum=0\n                break\n            j-=1\n        while i<j:\n            sum+=A[i]\n            if cnt<2 and sum==target:\n                cnt+=1\n                sum=0\n                if j-i<=1:\n                    return False\n            i+=1\n            if i>=j:\n                break\n        if cnt==2 and sum==target:\n            cnt+=1\n        if cnt==3:\n            return True\n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n       \n        \n        average, remainder, part, cnt = sum(A) // 3, sum(A) % 3, 0, 0\n        for a in A:\n            part += a\n            if part == average:\n                cnt += 1\n                part = 0\n        return not remainder and cnt >= 3", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3 != 0: return False\n        return self.can_partition(A, 0, 3, s // 3) \n    \n    def can_partition(self, A: List[int], i: int, n_parts: int, target_sum: int) -> bool:\n        #print(f'i={i}, n_parts={n_parts}')\n        if n_parts == 1: return i < len(A) and sum(A[i:]) == target_sum\n        if i >= len(A): return False\n        partition_sum = A[i]\n        j = i + 1\n        while j < len(A) and partition_sum != target_sum:\n            partition_sum += A[j]\n            j += 1\n        return self.can_partition(A, j, n_parts - 1, target_sum)", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum = 0\n        for num in A:\n            sum += num\n        \n        if sum%3 != 0:\n            return False\n        \n        sum = sum/3\n        total = 0\n        currentSum = 0\n        for num in A:\n            currentSum += num\n            if currentSum == sum:\n                total += 1\n                currentSum = 0\n      \n        return True if total>=3 else False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        tot = sum(A)\n        if tot % 3 != 0:\n            return False\n        target = tot // 3\n        curr_sum = 0\n        check1, check2 = 0, 0\n        for i, a in enumerate(A):\n            curr_sum += a\n            \n            if check1 != 1 and curr_sum == target:\n                check1 = 1\n                continue\n            # print(target, curr_sum)\n            if check1 and curr_sum == target*2 and i < len(A) - 1:\n                check2 = 1\n                break\n        if check1 and check2:\n            return True\n        else:\n            return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        s1 = 0\n        i = 0\n        print((s//3))\n        while i < len(A):\n            s1 += A[i]\n            if s1 == s//3:\n                break\n            i+=1\n        s1 = 0\n        i+=1\n        while i < len(A):\n            s1 += A[i]\n            print(s1)\n            if s1 == s//3:\n                if i != len(A)-1:\n                    return True\n            i+=1\n        return False\n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        tot = 0\n        bi = sum(A)//3\n        count = 0\n        \n        for i in range(len(A) - 1):\n            tot += A[i]\n            if tot == bi:\n                tot = 0\n                count += 1\n                \n                if count == 2:\n                    return True\n        return False", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n        total = sum(A)\n        \n        if total%3 != 0 :\n            return False\n        \n        target = total/3\n        print (target)\n        \n        temp = 0\n        res = []\n        for i, v in enumerate(A):\n            temp = temp + v\n            \n            if temp == target:\n                res.append(i)\n                temp = 0\n        print (res)\n        \n        return len(res)>=3\n            \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s%3!=0:\n            return False\n        target = s/3\n        total = 0\n        partitions = 0\n        for num in A:\n            total+=num\n            if total == target:\n                partitions+=1\n                total = 0\n                \n        \n        return total == 0 and partitions in [3,4]", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        n = len(A)\n        sum_a = sum(A)\n        if sum_a%3!=0:\n            return False\n        target =  sum_a//3\n        \n        output = []\n        temp_sum = 0\n        temp_output = []\n        for i in A:\n            temp_output.append(i)\n            temp_sum = temp_sum + i\n            if temp_sum ==  target:\n                if len(temp_output)>0 and len(output)<3:\n                    output.append(temp_output)\n                    temp_sum = 0\n                    temp_output = []\n        if temp_sum!=0:\n            return False\n        if len(output)!=3:\n            return False\n        else:\n            return True\n            \n        \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        tot_sum = sum(A)\n        if tot_sum % 3 != 0:\n            return(False)\n        else:\n            cum_sum = 0\n            target = tot_sum//3\n            counter = 0\n            for num in A[:-1]:\n                cum_sum += num\n                if cum_sum == target:\n                    counter += 1\n                    cum_sum = 0\n                    if counter == 2:\n                        return(True)\n            return(False)\n            \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        \n        subtotal = total // 3\n        \n        pre_sum = 0\n        k = 3\n        for i in range(len(A)):\n            pre_sum += A[i]\n            if k > 1 and pre_sum == subtotal:\n                k -= 1\n                pre_sum = 0\n            elif i == len(A)-1:\n                k -= 1\n        \n        return k == 0 and pre_sum == subtotal\n        \n        \n        \n", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if(sum(A)%3!=0):\n            return False\n        val=sum(A)//3\n        add=0\n        count=0\n        for x in range(len(A)):\n            add+=A[x]\n            if(add==val):\n                add=0\n                count+=1\n            else:\n                continue\n        if(count>=3):\n            return True\n        return False\n        \n"]