["#!/bin/python3\n\nimport sys\n\ndef solve(s):\n    return \" \".join([word.capitalize() for word in s.split(\" \")])\n\n\nif __name__ == '__main__':\n    s = input()\n    result = solve(s)\n    print(result)\n", "import xml.etree.ElementTree as etree\n\nmaxdepth = 0\n\n\ndef depth(elem, level):\n    global maxdepth\n    level += 1\n    if level > maxdepth:\n        maxdepth = level\n    for child in elem:\n        depth(child, level)\n\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        xml = input()\n        tree = etree.ElementTree(etree.fromstring(xml))\n        depth(tree.getroot(), -1)\n        print(maxdepth)\n", "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef height(root):\n    if root is None:\n        return 0\n\n    return max(height(root.left), height(root.right)) + 1\n\ndef isBalanced(root):\n    if root is None:\n        return True\n    lh = height(root.left)\n    rh = height(root.right)\n\n    if abs(lh - rh) <= 1 and isBalanced(root.left) is True and isBalanced(root.right) is True:\n        return True\n    return False\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.left.left.left = Node(8)\n\n    if isBalanced(root):\n        print(\"Tree is balanced\")\n    else:\n        print(\"Tree is not balanced\")\n", "if __name__ == '__main__':\n    print(sum([int(input().strip()) for _ in range(int(input()))]))\n", "import sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n    \nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "import xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    level += 1\n    if level > maxdepth:\n        maxdepth = level\n    for child in elem:\n        depth(child, level)\n\n\nif __name__ == '__main__':\n    for i in range(int(input())):\n        xml = input()\n        tree = etree.ElementTree(etree.fromstring(xml))\n        depth(tree.getroot(), -1)\n        print(maxdepth)\n", "\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node.iter()])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "import xml.etree.ElementTree as etree\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    # your code goes here\n    level += 1\n    if level > maxdepth:\n        maxdepth = level\n    for child in elem:\n        depth(child, level)\n\n\nif __name__ == '__main__':\n    xml = input()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    depth(tree.getroot(), -1)\n    print(maxdepth)\n", "\ndef depth(tree):\n    if tree is None:\n        return 0\n    else:\n        return max(depth(tree.left) + 1, depth(tree.right) + 1)\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n    tree = xml.strip().split()\n    print(depth(tree))\n", "def depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    tree = input()\n    depth = depth(tree)\n    print(depth)\n", "import sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum([get_attr_number(child) for child in node])\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "\ndef depth(tree):\n    if tree is None:\n        return 0\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nif __name__ == '__main__':\n    xml = \"\"\n    for i in range(int(input())):\n        xml =  xml + input() + \"\\n\"\n    tree = xml.strip()\n    print(depth(tree))\n", "#!/bin/python3\n\nimport sys\nimport xml.etree.ElementTree as etree\n\ndef get_attr_number(node):\n    # your code goes here\n    return len(node.attrib) + sum(get_attr_number(child) for child in node)\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.read()\n    tree = etree.ElementTree(etree.fromstring(xml))\n    root = tree.getroot()\n    print(get_attr_number(root))\n", "def depth(tree):\n    if tree is None:\n        return -1\n    else:\n        return max(depth(tree.left), depth(tree.right)) + 1\n\nclass Node:\n    def __init__(self, value):\n        self.left = None\n        self.right = None\n        self.value = value\n\ndef parse(tree):\n    if tree == \"\":\n        return None\n    else:\n        node = Node(tree[0])\n        left_bracket = tree.find(\"(\")\n        if left_bracket == -1:\n            return node\n        else:\n            left_subtree = tree[left_bracket + 1:tree.find(\")\")]\n            node.left = parse(left_subtree)\n            return node\n\nif __name__ == '__main__':\n    tree = \"\"\n    for i in range(int(input())):\n        tree =  tree + input() + \"\\n\"\n    tree = tree.strip()\n    tree = parse(tree)\n    depth = depth(tree.left)\n    print(depth)\n"]