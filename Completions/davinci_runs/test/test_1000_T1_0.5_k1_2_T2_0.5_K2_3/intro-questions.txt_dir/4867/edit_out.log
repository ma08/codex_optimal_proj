2022-04-13 05:27:36.976608 num operations 2
2022-04-13 05:27:36.976635 size on input set 1
2022-04-13 05:27:43.024646 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#')\n"
    },
    {
      "index": 1,
      "text": "\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 2,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    }
  ],
  "created": 1649827657,
  "object": "edit"
}
2022-04-13 05:27:43.024858 fix spelling mistakes 3 ["\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#')\n", "\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"]
2022-04-13 05:27:43.024887 size on output set 3
2022-04-13 05:27:43.024894 size on input set 3
2022-04-13 05:27:47.632217 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor _ in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor _ in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 1,
      "text": "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [input() for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 2,
      "text": "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#') # top\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#') # middle\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#') # bottom\n"
    }
  ],
  "created": 1649827663,
  "object": "edit"
}
2022-04-13 05:27:47.632393 fix syntax errors 3 ["m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor _ in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor _ in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [input() for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#') # top\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#') # middle\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#') # bottom\n"]
2022-04-13 05:28:25.793604 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print('#' + '.' * (n + left + right) + '#')\n"
    },
    {
      "index": 1,
      "text": "\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#', sep='')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#', sep='')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#', sep='')\n"
    },
    {
      "index": 2,
      "text": "\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#')\n"
    }
  ],
  "created": 1649827667,
  "object": "edit"
}
2022-04-13 05:28:25.793879 fix syntax errors 3 ["\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print('#' + '.' * (n + left + right) + '#')\n", "\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#', sep='')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#', sep='')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#', sep='')\n", "\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#')\n"]
2022-04-13 05:28:30.594455 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "m, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#', end='')\n    print()\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#', end='')\n    print()\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#', end='')\n    print()\n"
    },
    {
      "index": 2,
      "text": "\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(n)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"
    }
  ],
  "created": 1649827705,
  "object": "edit"
}
2022-04-13 05:28:30.594636 fix syntax errors 3 ["m, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "#!/usr/bin/env python3\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#', end='')\n    print()\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#', end='')\n    print()\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#', end='')\n    print()\n", "\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(n)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n"]
2022-04-13 05:28:30.594668 size on output set 9
2022-04-13 05:28:30.594691 num operations 2
2022-04-13 05:28:30.594696 size on input set 1
2022-04-13 05:28:34.709372 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n"
    },
    {
      "index": 1,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n))\n"
    },
    {
      "index": 2,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n))\n"
    }
  ],
  "created": 1649827710,
  "object": "edit"
}
2022-04-13 05:28:34.709537 fix spelling mistakes 3 ['\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m+l+r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m-n))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m-n))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m-n))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m-n))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m-n))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m-n))\n']
2022-04-13 05:28:34.709563 size on output set 2
2022-04-13 05:28:34.709570 size on input set 2
2022-04-13 05:28:38.847844 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n"
    },
    {
      "index": 1,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\n"
    },
    {
      "index": 2,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r+\".\"*(m+l+r))\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n"
    }
  ],
  "created": 1649827714,
  "object": "edit"
}
2022-04-13 05:28:38.848098 fix syntax errors 3 ['m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m+l+r))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m+l+r+n))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m+l+r+n))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m+l+r+n))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m+l+r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r+"."*(m+l+r))\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m+l+r))\n']
2022-04-13 05:28:43.219178 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n-r-l))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-r-l))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-r-l))\n"
    },
    {
      "index": 1,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\n"
    },
    {
      "index": 2,
      "text": "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\n"
    }
  ],
  "created": 1649827718,
  "object": "edit"
}
2022-04-13 05:28:43.219353 fix syntax errors 3 ['\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m-n-r-l))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m-n-r-l))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m-n-r-l))\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m-n-l-r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m-n-l-r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m-n-l-r))\n', '\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint("#"*(l+r+n)+"."*(m-n-l-r))\nfor _ in range(u):\n    print("#"*(l+r+n)+"."*(m-n-l-r))\nfor _ in range(m):\n    print("#"*l+input()+"#"*r)\nfor _ in range(d):\n    print("#"*(l+r+n)+"."*(m-n-l-r))\n']
2022-04-13 05:28:43.219379 size on output set 6
2022-04-13 05:28:43.219389 num operations 2
2022-04-13 05:28:43.219394 size on input set 1
2022-04-13 05:28:44.779281 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solutio\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 2,
      "text": "\n\n# solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    }
  ],
  "created": 1649827723,
  "object": "edit"
}
2022-04-13 05:28:44.779470 fix spelling mistakes 3 ["\n#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\n# Solutio\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\n# solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"]
2022-04-13 05:28:44.779507 size on output set 3
2022-04-13 05:28:44.779514 size on input set 3
2022-04-13 05:28:50.181861 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\n"
    },
    {
      "index": 2,
      "text": "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    }
  ],
  "created": 1649827724,
  "object": "edit"
}
2022-04-13 05:28:50.182036 fix syntax errors 3 ["#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\n", "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"]
2022-04-13 05:28:56.944889 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r + '#' * l)\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\n"
    },
    {
      "index": 1,
      "text": "\n# solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + 1))\nprint('.' * (l + r + n) + '#' * (d + u + 1))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + 1))\nprint('#' * (l + r + n) + '.' * (d + u + 1))\n"
    },
    {
      "index": 2,
      "text": "\n\n# solution1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + 2))\nprint('.' * (l + r + n) + '#' * (d + u + 2))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + 2))\nprint('#' * (l + r + n) + '.' * (d + u + 2))\n"
    }
  ],
  "created": 1649827730,
  "object": "edit"
}
2022-04-13 05:28:56.945065 fix syntax errors 3 ["\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r + '#' * l)\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\n", "\n# solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + 1))\nprint('.' * (l + r + n) + '#' * (d + u + 1))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + 1))\nprint('#' * (l + r + n) + '.' * (d + u + 1))\n", "\n\n# solution1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + 2))\nprint('.' * (l + r + n) + '#' * (d + u + 2))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + 2))\nprint('#' * (l + r + n) + '.' * (d + u + 2))\n"]
2022-04-13 05:28:58.497868 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"
    }
  ],
  "created": 1649827736,
  "object": "edit"
}
2022-04-13 05:28:58.498034 fix syntax errors 3 ["\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n"]
2022-04-13 05:28:58.498061 size on output set 7
2022-04-13 05:28:58.498073 num operations 2
2022-04-13 05:28:58.498078 size on input set 1
2022-04-13 05:29:00.051289 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 1,
      "text": "\n\n#SOLUTION \n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 2,
      "text": "\n\n#SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    }
  ],
  "created": 1649827738,
  "object": "edit"
}
2022-04-13 05:29:00.051469 fix spelling mistakes 3 ['\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n#SOLUTION \n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n#SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n']
2022-04-13 05:29:00.051496 size on output set 3
2022-04-13 05:29:00.051502 size on input set 3
2022-04-13 05:29:06.041745 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n\n# SOLUTION 2\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print((\"#.\" * n + \"#\" + \".\" * r).rstrip())\n\nfor i in range(m):\n    print((\"#\" + input() + \"#\" + \".\" * r).rstrip())\n\nfor i in range(d):\n    print((\"#.\" * n + \"#\" + \".\" * r).rstrip())\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n\n# SOLUTION 2\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\n# SOLUTION 3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 2,
      "text": "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    }
  ],
  "created": 1649827740,
  "object": "edit"
}
2022-04-13 05:29:06.042019 fix syntax errors 3 ['\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n\n# SOLUTION 2\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(("#." * n + "#" + "." * r).rstrip())\n\nfor i in range(m):\n    print(("#" + input() + "#" + "." * r).rstrip())\n\nfor i in range(d):\n    print(("#." * n + "#" + "." * r).rstrip())\n    print("#." * n + "#" + "." * r)\n', '\n\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n\n# SOLUTION 2\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n\n# SOLUTION 3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n    print("#." * n + "#" + "." * r)\n', '\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n']
2022-04-13 05:29:10.131249 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 1,
      "text": "\n\n#SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r, end = \"\\n\")\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, end = \"\\n\")\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r, end = \"\\n\")\n"
    },
    {
      "index": 2,
      "text": "\n\n#SOLUTION 1:\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n"
    }
  ],
  "created": 1649827746,
  "object": "edit"
}
2022-04-13 05:29:10.131415 fix syntax errors 3 ['\n\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n#SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r, end = "\\n")\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r, end = "\\n")\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r, end = "\\n")\n', '\n\n#SOLUTION 1:\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r, sep="")\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r, sep="")\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r, sep="")\n']
2022-04-13 05:29:14.772524 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\nm, n = map(int, input().split())  # Get the input\nu, l, r, d = map(int, input().split())  # Get the input\n\nfor i in range(u):  # Top\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):  # Middle\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):  # Bottom\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n"
    },
    {
      "index": 2,
      "text": "\n\n#SOLUTION \n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * (n + 1) + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, end=\"\")\n\nfor i in range(d):\n    print(\"#.\" * (n + 1) + \".\" * r)\n"
    }
  ],
  "created": 1649827750,
  "object": "edit"
}
2022-04-13 05:29:14.772703 fix syntax errors 3 ['\n\n# SOLUTION\n\nm, n = map(int, input().split())  # Get the input\nu, l, r, d = map(int, input().split())  # Get the input\n\nfor i in range(u):  # Top\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):  # Middle\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):  # Bottom\n    print("#." * n + "#" + "." * r)\n', '\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * n + "#" + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r)\n\nfor i in range(d):\n    print("#." * n + "#" + "." * r)\n', '\n\n#SOLUTION \n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print("#." * (n + 1) + "." * r)\n\nfor i in range(m):\n    print("#" + input() + "#" + "." * r, end="")\n\nfor i in range(d):\n    print("#." * (n + 1) + "." * r)\n']
2022-04-13 05:29:14.772733 size on output set 9
2022-04-13 05:29:14.772744 num operations 2
2022-04-13 05:29:14.772749 size on input set 1
2022-04-13 05:29:29.227476 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left border\n        print(\"\\n\" + \".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\") \n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649827754,
  "object": "edit"
}
2022-04-13 05:29:29.227718 fix spelling mistakes 3 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r), end="")\n    for _ in range(u):\n        print("\\n" + "." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="")\n    for i in range(m):\n        # Print left border\n        print("\\n" + "." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="") \n        # Print right border\n        print("." * (l + r), end="")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r))\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left border\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right border\n        print("." * (l + r))\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom border\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r))\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left border\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right border\n        print("." * (l + r))\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom border\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:29:29.227778 size on output set 2
2022-04-13 05:29:29.227785 size on input set 2
2022-04-13 05:29:35.882383 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]))\n        # Print right border\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u - 1):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r))\n    for _ in range(d - 1):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649827769,
  "object": "edit"
}
2022-04-13 05:29:35.882574 fix syntax errors 3 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r))\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left border\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]))\n        # Print right border\n        print("." * (l + r))\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom border\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r), end="")\n    for _ in range(u):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="")\n    for i in range(m):\n        # Print left border\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right border\n        print("." * (l + r), end="")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="")\n    # Print bottom border\n    print("#" * (n + l + r) + "." * (l + r), end="")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r))\n    for _ in range(u - 1):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left border\n        print("." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right border\n        print("." * (l + r))\n    for _ in range(d - 1):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom border\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:29:43.976954 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\"\\n\" + \".\" * (l + r), end=\"\", sep=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\", sep=\"\") \n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left border\n        print(\"\\n\" + \".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left border\n        print(\"\\n\" + \".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\") \n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"\\n\" + \"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649827775,
  "object": "edit"
}
2022-04-13 05:29:43.977204 fix syntax errors 3 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r), end="")\n    for _ in range(u):\n        print("\\n" + "." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    for i in range(m):\n        # Print left border\n        print("\\n" + "." * (l + r), end="", sep="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="", sep="") \n        # Print right border\n        print("." * (l + r), end="")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r), end="")\n    for _ in range(u):\n        print("\\n" + "." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="")\n    for i in range(m):\n        # Print left border\n        print("\\n" + "." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="")\n        # Print right border\n        print("." * (l + r), end="")\n    for _ in range(d):\n        print("." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom\n    print("#" * (n + l + r) + "." * (l + r))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print("#" * (n + l + r) + "." * (l + r), end="")\n    for _ in range(u):\n        print("\\n" + "." * (l + r) + "#" * (n + l + r) + "." * (l + r), end="")\n    for i in range(m):\n        # Print left border\n        print("\\n" + "." * (l + r), end="")\n        # Print puzzle\n        print("".join(puzzle[i]), end="") \n        # Print right border\n        print("." * (l + r), end="")\n    for _ in range(d):\n        print("\\n" + "." * (l + r) + "#" * (n + l + r) + "." * (l + r))\n    # Print bottom\n    print("\\n" + "#" * (n + l + r) + "." * (l + r))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 05:29:43.977250 size on output set 6
2022-04-13 05:29:43.977275 num operations 2
2022-04-13 05:29:43.977280 size on input set 1
2022-04-13 05:29:47.089436 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n#Creating the frames\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 2,
      "text": "\n\n#Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    }
  ],
  "created": 1649827784,
  "object": "edit"
}
2022-04-13 05:29:47.089611 fix spelling mistakes 3 ['\n\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n#Creating the frames\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n#Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crossword\ncrossword = [input() for x in range(M)]\n\n#Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n']
2022-04-13 05:29:47.089644 size on output set 3
2022-04-13 05:29:47.089651 size on input set 3
2022-04-13 05:29:50.165546 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n#Creating the frames\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n# Creating the frames\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n# Creating the frames\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    }
  ],
  "created": 1649827787,
  "object": "edit"
}
2022-04-13 05:29:50.165729 fix syntax errors 3 ['\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n#Creating the frames\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n# Creating the frames\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n# Creating the frames\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n']
2022-04-13 05:29:55.298831 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for i in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\") # Note the difference in the number of dots\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\") # Note the difference in the number of dots\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for _ in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\" * (N+L+R-1) + \"#\")\nframe.append(\".\" * L + crossword[0] + \".\" * R)\nfor i in range(1,M):\n    frame.append(\".\" * L + crossword[i] + \".\" * R)\nfor i in range(D):\n    frame.append(\"#.\" * (N+L+R-1) + \"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    }
  ],
  "created": 1649827790,
  "object": "edit"
}
2022-04-13 05:29:55.299018 fix syntax errors 3 ['\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for i in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#") # Note the difference in the number of dots\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#") # Note the difference in the number of dots\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for _ in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1,M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#." * (N+L+R-1) + "#")\nframe.append("." * L + crossword[0] + "." * R)\nfor i in range(1,M):\n    frame.append("." * L + crossword[i] + "." * R)\nfor i in range(D):\n    frame.append("#." * (N+L+R-1) + "#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n']
2022-04-13 05:29:59.055030 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1, M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1, M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1, M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n"
    }
  ],
  "created": 1649827795,
  "object": "edit"
}
2022-04-13 05:29:59.055206 fix syntax errors 3 ['\n\n# Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1, M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1, M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n', '\n\n# Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append("#."*(N+L+R-1)+"#")\nframe.append("."*L+crossword[0]+"."*R)\nfor i in range(1, M):\n    frame.append("."*L+crossword[i]+"."*R)\nfor i in range(D):\n    frame.append("#."*(N+L+R-1)+"#")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n']
2022-04-13 05:29:59.055238 size on output set 6
2022-04-13 05:29:59.055279 num operations 2
2022-04-13 05:29:59.055285 size on input set 1
2022-04-13 05:30:11.341332 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman's x position\n    # y: your pacman's y position\n    # pac_id: your pacman's unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    }
  ],
  "created": 1649827799,
  "object": "edit"
}
2022-04-13 05:30:11.341765 fix spelling mistakes 3 ['\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman\'s x position\n    # y: your pacman\'s y position\n    # pac_id: your pacman\'s unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n']
2022-04-13 05:30:11.341842 size on output set 3
2022-04-13 05:30:11.341848 size on input set 3
2022-04-13 05:30:20.659117 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this pac is yours\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this Pac-Man is powered up, false otherwise\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom operator import itemgetter\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    pacs = []\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        pacs.append((x, y, mine, type_id, speed_turns_left, ability_cooldown))\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []  # (x, y, value)\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x + 1, y))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid in tiles\n# height: top left corner is (x=0, y=0) in tiles\nwidth, height = [int(i) for i in raw_input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in raw_input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in raw_input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = raw_input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(raw_input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in raw_input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    }
  ],
  "created": 1649827811,
  "object": "edit"
}
2022-04-13 05:30:20.659382 fix syntax errors 3 ['\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this pac is yours\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this Pac-Man is powered up, false otherwise\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\nimport sys\nfrom operator import itemgetter\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    pacs = []\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        pacs.append((x, y, mine, type_id, speed_turns_left, ability_cooldown))\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []  # (x, y, value)\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x + 1, y))\n', '\nimport sys\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid in tiles\n# height: top left corner is (x=0, y=0) in tiles\nwidth, height = [int(i) for i in raw_input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in raw_input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in raw_input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = raw_input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(raw_input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in raw_input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n']
2022-04-13 05:30:25.992098 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman's x position\n    # y: your pacman's y position\n    # pac_id: your pacman's unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman's x position\n    # y: your pacman's y position\n    # pac_id: your pacman's unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [\n            int(j) for j in input().split()\n        ]\n        pac_id = int(pac_id)\n        mine = mine != 0\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x + 1, y))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman's x position\n    # y: your pacman's y position\n    # pac_id: your pacman's unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    }
  ],
  "created": 1649827820,
  "object": "edit"
}
2022-04-13 05:30:25.992360 fix syntax errors 3 ['\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman\'s x position\n    # y: your pacman\'s y position\n    # pac_id: your pacman\'s unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', 'import sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman\'s x position\n    # y: your pacman\'s y position\n    # pac_id: your pacman\'s unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [\n            int(j) for j in input().split()\n        ]\n        pac_id = int(pac_id)\n        mine = mine != 0\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x + 1, y))\n', '#!/usr/bin/env python3\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman\'s x position\n    # y: your pacman\'s y position\n    # pac_id: your pacman\'s unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n']
2022-04-13 05:30:36.225392 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: pac-man's x position\n    # y: pac-man's y position\n    # pac_id: pac-man's unique id\n    # mine: true if this pac-man is powered up, false otherwise\n    x, y, pac_id, mine = [int(i) for i in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac-man number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood league\n        # speed_turns_left: unused in wood league\n        # ability_cooldown: unused in wood league\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in your pac-man's sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y> | SWITCH <pacId> <type>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\n\nwidth, height = [int(i) for i in input().split()]\n\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine is not \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n"
    }
  ],
  "created": 1649827826,
  "object": "edit"
}
2022-04-13 05:30:36.225692 fix syntax errors 3 ['\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: pac-man\'s x position\n    # y: pac-man\'s y position\n    # pac_id: pac-man\'s unique id\n    # mine: true if this pac-man is powered up, false otherwise\n    x, y, pac_id, mine = [int(i) for i in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac-man number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood league\n        # speed_turns_left: unused in wood league\n        # ability_cooldown: unused in wood league\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in your pac-man\'s sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y> | SWITCH <pacId> <type>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\nimport sys\nimport math\n\n\nwidth, height = [int(i) for i in input().split()]\n\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine is not "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n', '\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print("The maze is too small!")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man\'s x position\n    # y: Pac-Man\'s y position\n    # pac_id: Pac-Man\'s unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != "0"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print("Debug messages...", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print("MOVE %d %d %d" % (pac_id, x+1, y))\n']
2022-04-13 05:30:36.225768 size on output set 9
2022-04-13 05:30:36.225790 num operations 2
2022-04-13 05:30:36.225797 size on input set 1
2022-04-13 05:30:39.927031 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(h, w, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(h):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(m, n, u, l, r, d): \n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    }
  ],
  "created": 1649827836,
  "object": "edit"
}
2022-04-13 05:30:39.927214 fix spelling mistakes 3 ['\n\ndef main(h, w, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(h):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d): \n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n']
2022-04-13 05:30:39.927246 size on output set 3
2022-04-13 05:30:39.927253 size on input set 3
2022-04-13 05:30:42.904242 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(h, w, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    for i in range(h):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(h, w, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    for i in range(h):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(h, w, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    for i in range(h):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n"
    }
  ],
  "created": 1649827839,
  "object": "edit"
}
2022-04-13 05:30:42.904476 fix syntax errors 3 ['\n\ndef main(h, w, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + w + r) + "#\\n"\n    for i in range(h):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + w + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n', '\n\ndef main(h, w, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + w + r) + "#\\n"\n    for i in range(h):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + w + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n', '\n\ndef main(h, w, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + w + r) + "#\\n"\n    for i in range(h):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + w + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n']
2022-04-13 05:30:48.497553 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(m, n, u, l, r, d): \n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out, end=\"\")\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    print(\"#.\" * (l + n + r) + \"#\" * (u + 1))\n    for i in range(u + m + d):\n        if i < u:\n            print(\"#.\" * (l + n + r) + \"#\")\n        elif i < u + m:\n            print(\"#.\" + \".\".join(input()) + \".#\")\n        else:\n            print(\"#.\" * (l + n + r) + \"#\")\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    }
  ],
  "created": 1649827842,
  "object": "edit"
}
2022-04-13 05:30:48.497731 fix syntax errors 3 ['\n\ndef main(m, n, u, l, r, d): \n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out, end="")\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    print("#." * (l + n + r) + "#" * (u + 1))\n    for i in range(u + m + d):\n        if i < u:\n            print("#." * (l + n + r) + "#")\n        elif i < u + m:\n            print("#." + ".".join(input()) + ".#")\n        else:\n            print("#." * (l + n + r) + "#")\n\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n']
2022-04-13 05:30:50.921324 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"
    }
  ],
  "created": 1649827848,
  "object": "edit"
}
2022-04-13 05:30:50.921514 fix syntax errors 3 ['\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n', '\n\ndef main(m, n, u, l, r, d):\n    out = ""\n    for i in range(u):\n        out += "#." * (l + n + r) + "#\\n"\n    for i in range(m):\n        out += "#." + ".".join(input().split()) + ".#\\n"\n    for i in range(d):\n        out += "#." * (l + n + r) + "#\\n"\n    print(out)\n\n\nif __name__ == "__main__":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n']
2022-04-13 05:30:50.921546 size on output set 5
