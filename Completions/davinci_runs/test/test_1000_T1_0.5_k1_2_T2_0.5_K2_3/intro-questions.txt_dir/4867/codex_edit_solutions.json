["m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#') # top\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#') # middle\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#') # bottom\n", "\nimport sys\nimport math\n\n\nwidth, height = [int(i) for i in input().split()]\n\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine is not \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "\n\ndef main(m, n, u, l, r, d):\n    print(\"#.\" * (l + n + r) + \"#\" * (u + 1))\n    for i in range(u + m + d):\n        if i < u:\n            print(\"#.\" * (l + n + r) + \"#\")\n        elif i < u + m:\n            print(\"#.\" + \".\".join(input()) + \".#\")\n        else:\n            print(\"#.\" * (l + n + r) + \"#\")\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n", "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n", "\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print('#' + '.' * (n + left + right) + '#')\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "#Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\n# SOLUTION\n\nm, n = map(int, input().split())  # Get the input\nu, l, r, d = map(int, input().split())  # Get the input\n\nfor i in range(u):  # Top\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):  # Middle\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):  # Bottom\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\n\n#SOLUTION \n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * (n + 1) + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, end=\"\")\n\nfor i in range(d):\n    print(\"#.\" * (n + 1) + \".\" * r)\n", "\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for i in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\") # Note the difference in the number of dots\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\") # Note the difference in the number of dots\n\n# Printing the frame\nfor line in frame:\n    print(line)\n", "\n\n# Getting inputs\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1, M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n", "\n\ndef main(m, n, u, l, r, d): \n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out, end=\"\")\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left border\n        print(\"\\n\" + \".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\") \n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"\\n\" + \"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\n\n#SOLUTION 1:\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, sep=\"\")\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r, sep=\"\")\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]))\n        # Print right border\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for i in range(m):\n        # Print left border\n        print(\"\\n\" + \".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "\n#Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n#Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n#Creating the frames\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n#Printing the frame\nfor line in frame:\n    print(line)\n", "#!/usr/bin/env python3\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman's x position\n    # y: your pacman's y position\n    # pac_id: your pacman's unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this pac is yours\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this Pac-Man is powered up, false otherwise\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\n", "\nimport sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman's x position\n    # y: your pacman's y position\n    # pac_id: your pacman's unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\"\\n\" + \".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\"\\n\" + \".\" * (l + r), end=\"\", sep=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\", sep=\"\") \n        # Print right border\n        print(\".\" * (l + r), end=\"\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n", "m, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n", "\n\n# SOLUTION\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\n\ndef main(h, w, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    for i in range(h):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + w + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    h, w = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(h, w, u, l, r, d)\n", "#!/usr/bin/env python3\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#', end='')\n    print()\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#', end='')\n    print()\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#', end='')\n    print()\n", "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\n", "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor _ in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor _ in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crosswords\ncrossword = [input() for x in range(M)]\n\n# Creating the frames\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n", "\nm, n = map(int, input().split())  # row, column\nu, l, r, d = map(int, input().split())  # up, left, right, down\npuzzle = [list(input()) for _ in range(n)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for _ in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n", "\n\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\" * (N+L+R-1) + \"#\")\nframe.append(\".\" * L + crossword[0] + \".\" * R)\nfor i in range(1,M):\n    frame.append(\".\" * L + crossword[i] + \".\" * R)\nfor i in range(D):\n    frame.append(\"#.\" * (N+L+R-1) + \"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n", "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r+\".\"*(m+l+r))\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n", "\nimport sys\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid in tiles\n# height: top left corner is (x=0, y=0) in tiles\nwidth, height = [int(i) for i in raw_input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in raw_input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in raw_input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = raw_input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(raw_input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in raw_input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "\n\n#SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r, end = \"\\n\")\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r, end = \"\\n\")\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r, end = \"\\n\")\n", "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [input() for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "\n\n# solution1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + 2))\nprint('.' * (l + r + n) + '#' * (d + u + 2))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + 2))\nprint('#' * (l + r + n) + '.' * (d + u + 2))\n", "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n-r-l))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-r-l))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-r-l))\n", "\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n\n# SOLUTION 2\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print((\"#.\" * n + \"#\" + \".\" * r).rstrip())\n\nfor i in range(m):\n    print((\"#\" + input() + \"#\" + \".\" * r).rstrip())\n\nfor i in range(d):\n    print((\"#.\" * n + \"#\" + \".\" * r).rstrip())\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\n# solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + 1))\nprint('.' * (l + r + n) + '#' * (d + u + 1))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + 1))\nprint('#' * (l + r + n) + '.' * (d + u + 1))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u - 1):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left border\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right border\n        print(\".\" * (l + r))\n    for _ in range(d - 1):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom border\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#', sep='')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#', sep='')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#', sep='')\n", "\n\n# SOLUTION 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n\n# SOLUTION 2\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\n# SOLUTION 3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\n", "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m-n-l-r))\n", "\nm, n = map(int, input().split())\nup, left, right, down = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(up):\n    print('#' + '.' * (n + left + right) + '#')\nfor i in range(m):\n    print('#' + '.' * left + ''.join(puzzle[i]) + '.' * right + '#')\nfor i in range(down):\n    print('#' + '.' * (n + left + right) + '#')\n", "\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r + '#' * l)\nprint('.' * (l + r + n) + '#' * (d + u) + '.' * (l + r + n))\nprint('#' * (l + r + n) + '.' * (d + u) + '#' * (l + r + n))\n", "\nimport sys\nfrom operator import itemgetter\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    pacs = []\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [int(j) for j in input().split()]\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        pacs.append((x, y, mine, type_id, speed_turns_left, ability_cooldown))\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []  # (x, y, value)\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x + 1, y))\n", "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n", "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small!\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: pac-man's x position\n    # y: pac-man's y position\n    # pac_id: pac-man's unique id\n    # mine: true if this pac-man is powered up, false otherwise\n    x, y, pac_id, mine = [int(i) for i in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac-man number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood league\n        # speed_turns_left: unused in wood league\n        # ability_cooldown: unused in wood league\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n\n    # visible_pellet_count: all pellets in your pac-man's sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y> | SWITCH <pacId> <type>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "import sys\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small.\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: your pacman's x position\n    # y: your pacman's y position\n    # pac_id: your pacman's unique id\n    # mine: true if this pacman is yours, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacmans and enemy pacmans in sight\n    # mine_count: number of visible pellets\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: unique id of this pacman\n        # mine: true if this pacman is yours\n        # x: position in the grid of this pacman\n        # y: position in the grid of this pacman\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = [\n            int(j) for j in input().split()\n        ]\n        pac_id = int(pac_id)\n        mine = mine != 0\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        value = int(input())\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x + 1, y))\n"]