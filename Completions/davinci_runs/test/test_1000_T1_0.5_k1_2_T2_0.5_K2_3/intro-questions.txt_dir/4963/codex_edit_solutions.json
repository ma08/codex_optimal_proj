["\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    l = [0] * n\n    l[0] = 0\n    for i in range(n - 1):\n        l[d[i] + 1] = i + 2\n    print(' '.join([str(x) for x in l]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l = [0] * n\n    l[0] = 1\n    for i in range(n - 1):\n        l[l[i] + 1] = i + 2\n    print(' '.join([str(x) for x in l]))\n\nif __name__ == '__main__':\n    main()\n", "\n'''\n'''\nimport sys\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.append(0)\n    d.append(n)\n    d = sorted(d)\n    for i in range(n):\n        print(d.index(i)+1,end=' ')\n\n\nmain()\n", "\n\n########## SOLUTION ##########\n\nn = int(input())\n\nd = list(map(int, input().split()))\n\nl = [0] * n\n\nl[0] = 1\n\nfor i in range(1, n):\n    l[i] = l[i-1] + d[i-1] + 1\n\nprint(*l)\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.append(0)\n    d.append(n)\n    d = sorted(d)\n    for i in range(n):\n        print(d.index(i)+1,end=' ')\n\nmain()\n", "\n\ndef main():\n    line = list(map(int, input().split()))[1:]\n    print(1, end=\" \")\n    for i in range(len(line)):\n        print(i+line[i], end=\" \")\n\nmain()\n", "\n\ndef main(n, d):\n    c = [0] * (n + 1)\n    for i in range(n):\n        c[d[i]] += 1\n    print(\" \".join(map(str, c[1:])))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    d = list(map(int, input().split()))\n    main(n, d)\n", "\nn = int(input())\nl = [0]*n\nd = list(map(int, input().split()))\n\nfor i in range(1, n):\n    l[d[i-1] - 1] = i\n\nprint(*l)\n", "\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    a = [0] * (n + 1)\n    a[1] = 1\n    for i in range(2, n + 1):\n        a[d[i - 2] + 1] = i\n    print(' '.join([str(x) for x in a[1:]]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main(n, d):\n    result = [1]\n    for i in d:\n        result.insert(i, len(result) + 1)\n    print(*result)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    d = list(map(int, input().split(\" \")))\n    main(n, d)\n", "from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc_a = Counter(a)\nc_b = Counter(b)\n\nc_a_keys = list(c_a.keys())\nc_b_keys = list(c_b.keys())\n\nif len(c_a_keys) < len(c_b_keys):\n    for i in range(len(c_a_keys)):\n        if c_a_keys[i] in c_b_keys:\n            c_b[c_a_keys[i]] -= c_a[c_a_keys[i]]\n            c_a[c_a_keys[i]] = 0\n        else:\n            print('NO')\n            exit()\n    for i in range(len(c_b_keys)):\n        if c_b[c_b_keys[i]] != 0:\n            print('NO')\n            exit()\n    print('YES')\nelse:\n    for i in range(len(c_b_keys)):\n        if c_b_keys[i] in c_a_keys:\n            c_a[c_b_keys[i]] -= c_b[c_b_keys[i]]\n            c_b[c_b_keys[i]] = 0\n        else:\n            print('NO')\n            exit()\n    for i in range(len(c_a_keys)):\n        if c_a[c_a_keys[i]] != 0:\n            print('NO')\n            exit()\n    print('YES')\n", "\n\nprint(\"Hello World!\")\n", "\n\ndef main(n, d, c):\n    result = [1] * n\n    for i in d:\n        result[i] = result[i] + 1\n    for i in range(n):\n        c[result[i] - 1] += 1\n    print(\" \".join(map(str,c)))\n\nif __name__ == \"__main__\":\n    n = int(input())\n    d = list(map(int, input().split()))\n    c = []\n    main(n,d,c)\n", "\n#\nn = int(input())  # the number of adjacency relations\nd = list(map(int, input().split()))  # the adjacency relations\n\nlineup = [0] * n  # the lineup\n\nfor i in range(1, n):\n    lineup[d[i-1]] = i\n\nprint(*lineup)\n", "\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    a = [0] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[d[i - 1] + 1] = i + 1\n    print(' '.join([str(x) for x in a]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nn = int(input())\nd = list(map(int, input().split()))\n\nlineup = [0] * n\n\nfor i in range(1, n):\n    lineup[d[i-1]] = i\n\nprint(*lineup)\n", "\n\ndef main(n, m):\n    result = [1]\n    for i in m:\n        result.insert(i, len(result) + 1)\n    print(\" \".join(map(str, result)))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = list(map(int, input().split(\" \")))\n    main(n, m)\n", "\n\ndef main():\n    n = int(input)\n    d = [int(x) for x in input.split()]\n    l = [0] * n\n    l[0] = 1\n    for i in range(n - 1):\n        l[d[i] + 1] = i + 2\n    print(' '.join[str(x) for x in l])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    input()\n    line = list(map(int, input().split()))\n    # print(line)\n    print(1, end=\" \")\n    for i in range(len(line)):\n        print(i+2+line[i], end=\" \")\n\nmain()\n", "\n\n########## SOLUTION #########\nn = int(input())\nd = list(map(int, input().split()))\nl = [0] * n\nl[0] = 1\n\nfor i in range(1, n):\n    l[i] = l[i-1] + d[i-1] + 1\nprint(*l)\n", "\nn = int(input())\n\nd = list(map(int, input().split()))\n\nl = [0] * n\n\nl[0] = 1\n\nfor i in range(1, n):\n    l[i] = l[i-1] + d[i-1] + 1\n\nprint(*l)\n", "\na = int(input())\nb = int(input())\nc = int(input())\nx = int(input())\nans = 0\nfor i in range(a+1):\n    for j in range(b+1):\n        for k in range(c+1):\n            if 500 * i + 100 * j + 50 * k == x:\n                ans += 1\nprint(ans)\n", "\n\ndef main():\n    input()\n    line = list(map(int, input().split()))\n    print(1, end=\"\")\n    for i in range(len(line)):\n        print(\"\", i+2+line[i], end=\"\")\n\nmain()\n", "\n\ndef main():\n    input()\n    line = list(map(int, input().split()))\n    # print(line)\n    print(1, end=\" \") \n    for i in range(len(line)-1):\n        print(i+2+line[i], end=\" \")\n\nmain()\n", "from collections import deque\n\nn = int(input())\nd = deque(map(int, input().split()))\n\nans = []\n\nfor i in range(n):\n    if d[0] == i + 1:\n        d.popleft()\n    else:\n        ans.append(d.pop())\n\nprint(' '.join(map(str, ans)))\n", "\n#!/bin/python3\n########## SOLUTION #########\n\nn = int(input())\n\nd = list(map(int, input().split()))\n\nl = [0] * n\n\nl[0] = 1\n\nfor i in range(1, n):\n    l[i] = l[i-1] + d[i-1] + 1\n\nprint(*l)\n", "n = int(input())\na = [0] * n\nb = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    a[b[i-1] - 1] = i\nprint(' '.join(map(str, a)))\n", "\n\nn = int(input())\nd = list(map(int, input().split()))\n\n# build array of people in order\npeople = [0] * n\nfor i in range(1, n):\n    people[d[i-1]] = i\n\n# print people\nprint(*people)\n", "\n\ndef main(n, d):\n    result = [1]\n    for i in range(n):\n        result.insert(d[i], len(result) + 1)\n    print(\" \".join(map(str, result)))\n\nif __name__ == \"__main__\":\n    n = int(input())\n    d = list(map(int, input().split(\" \")))\n    main(n, d)\n", "\n\n# https://codeforces.com/problemset/problem/1244/A\n\nn = int(input())\nd = list(map(int, input().split()))\n\n# build array of people in order \npeople = [0] * n\nfor i in range(1, n):\n    people[d[i-1]] = i\n\n# print people\nprint(*people)\n", "n = int(input())\nd = list(map(int, input().split()))\n\nlineup = [0] * (n+1)\n\nfor i in range(1, n+1):\n    lineup[d[i-1]] = i\n\nprint(*lineup)\n", "\n\nn = int(input())  # the number of adjacency relations\nrel = list(map(int, input().split()))  # the adjacency relations\n\nlineup = [0] * n  # the lineup\n\nfor i in range(1, n):\n    lineup[rel[i-1]] = i\n\nprint(*lineup)\n", "def func():\n    n = int(input())\n    d = list(map(int, input().split()))\n    l = [0] * n\n    l[0] = 1\n\n    for i in range(1, n):\n        l[i] = l[i-1] + d[i-1] + 1\n    print(*l)\n\nif __name__ == \"__main__\":\n    func()\n", "\n\ndef main(n, d):\n    result = []\n    for i in d:\n        result.insert(i - 1, len(result) + 1)\n    print(\" \".join(map(str, result)))\n\nif __name__ == \"__main__\":\n    n = int(input())\n    d = list(map(int, input().split(\" \")))\n    main(n, d)\n", "n = int(input())\nl = [1] * n\nd = list(map(int, input().split()))\n\nfor i in range(1, n):\n    l[d[i-1]] = i\n\nprint(' '.join(map(str, l[1:])))\n", "print(\"Hello World\")\n", "import sys\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.append(0)\n    d.append(n-1)\n    d.sort()\n    for i in range(n):\n        print(d.index(i)+1,end=' ')\n\n\nmain()\n", "\nprint(input().strip().replace('WUB', ' ').strip().replace('  ', ' '))\n", "def remove_duplicates(arr):\n    if not arr:\n        return 0\n\n    write_index = 1\n    for i in range(1, len(arr)):\n        if arr[write_index - 1] != arr[i]:\n            arr[write_index] = arr[i]\n            write_index += 1\n\n    return write_index\n\n\ndef main():\n    print(remove_duplicates([2, 3, 3, 3, 6, 9, 9]))\n    print(remove_duplicates([2, 2, 2, 11]))\n\n\nmain()\n", "import sys\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.append(0)\n    d.append(n)\n    d = sorted(d)\n    for i in range(n):\n        print(d.index(i)+1,end=' ')\n\n\nmain()\n", "import sys\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.append(0)\n    d.append(n)\n    d = sorted(d)\n    for i in range(n+1):\n        print(d.index(i)+1,end=' ')\n\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    d = [int(x) for x in sys.stdin.readline().split()]\n    d.append(0)\n    d.append(n)\n    d = sorted(d)\n    for i in range(n):\n        print(d.index(i)+1,end=' ')\n\n\nmain()\n", "#!/usr/bin/python3\n\nn = int(input())\nd = list(map(int, input().split()))\n\n# build array of people in order\npeople = [0] * n\nfor i in range(1, n):\n    people[d[i-1]] = i\n\n# print people\nprint(*people)\n", "\na = input()\nb = list(map(int, input().split()))\nprint(1, end=\" \")\nfor i in range(len(b)):\n    print(i+2+b[i], end=\" \")\n", "n = int(input())\nl = [0] * n\nd = list(map(int, input().split()))\n\nfor i in range(1, n):\n    l[d[i-1]-1] = i+1\n\nprint(' '.join(map(str, l)))\n", "n = int(input())\nd = list(map(int, input().split()))\nl = [0] * n\nl[0] = 1\n\nfor i in range(1, n):\n    l[i] = l[i-1] + d[i-1] + i\nprint(*l)\n", "n = int(input())\n\nd = list(map(int, input().split()))\n\nl = [0] * n\n\nl[0] = 1\n\nfor i in range(1, n):\n    l[i] = l[i-1] + d[i-1] + 1\n\nprint(*l)\n", "\n\n# n = int(input())\n# d = list(map(int, input().split()))\n\n# # build array of people in order \n# people = [0] * n\n# for i in range(1, n):\n#     people[d[i-1]] = i\n\n# # print people\n# print(*people)\n\n# def reverse(s):\n#     return s[::-1]\n\n# def checkPalindrome(s):\n#     # Calling reverse function\n#     rev = reverse(s)\n\n#     # Checking if both string are equal or not\n#     if (s == rev):\n#         return True\n#     return False\n\n\n# # Driver code\n# s = \"malayalam\"\n# ans = checkPalindrome(s)\n\n# if ans == 1:\n#     print(\"Yes\")\n# else:\n#     print(\"No\")\n\n\n# def reverse(s): \n#     return s[::-1] \n  \n# def isPalindrome(s): \n#     # Calling reverse function \n#     rev = reverse(s) \n  \n#     # Checking if both string are equal or not \n#     if (s == rev): \n#         return True\n#     return False\n  \n  \n# # Driver code \n# s = \"malayalam\"\n# ans = isPalindrome(s) \n  \n# if ans == 1: \n#     print(\"Yes\") \n# else: \n#     print(\"No\") \n\n# def reverse(s): \n#     return s[::-1] \n  \n# def isPalindrome(s): \n#     # Calling reverse function \n#     rev = reverse(s) \n  \n#     # Checking if both string are equal or not \n#     if (s == rev): \n#         return True\n#     return False\n  \n  \n# # Driver code \n# s = \"malayalam\"\n# ans = isPalindrome(s) \n  \n# if ans == 1: \n#     print(\"Yes\") \n# else: \n#     print(\"No\") \n\n\n# def reverse(s): \n#     return s[::-1] \n  \n# def isPalindrome(s): \n#     # Calling reverse function \n#     rev = reverse(s) \n  \n#     # Checking if both string are equal or not \n#     if (s == rev): \n#         return True\n#     return False\n  \n  \n# # Driver code \n# s = \"malayalam\"\n# ans = isPalindrome(s) \n  \n# if ans == 1: \n#     print(\"Yes\") \n# else: \n#     print(\"No\") \n\n# def reverse(s): \n#     return s[::-1] \n  \n# def isPalindrome(s): \n#     # Calling reverse function \n#     rev = reverse(s) \n  \n#     # Checking if both string are equal or not \n#     if (s == rev): \n#         return True\n#     return False\n  \n  \n# # Driver code \n# s = \"malayalam\"\n# ans = isPalindrome(s) \n  \n# if ans == 1: \n#     print(\"Yes\") \n# else: \n#     print(\"No\") \n\n\n# def reverse(s): \n#     return s[::-1] \n  \n# def isPalindrome(s): \n#     # Calling reverse function \n#     rev = reverse(s) \n  \n#     # Checking if both string are equal or not \n#     if (s == rev): \n#         return True\n#     return False\n  \n  \n# # Driver code \n# s = \"malayalam\"\n# ans = isPalindrome(s) \n  \n# if ans == 1: \n#     print(\"Yes\") \n# else: \n#     print(\"No\") \n\n\n\n\ndef reverse(s): \n    return s[::-1] \n  \ndef isPalindrome(s): \n    # Calling reverse function \n    rev = reverse(s) \n  \n    # Checking if both string are equal or not \n    if (s == rev): \n        return True\n    return False\n  \n  \n# Driver code \ns = \"malayalam\"\nans = isPalindrome(s) \n  \nif ans == 1: \n    print(\"Yes\") \nelse: \n    print(\"No\") \n"]