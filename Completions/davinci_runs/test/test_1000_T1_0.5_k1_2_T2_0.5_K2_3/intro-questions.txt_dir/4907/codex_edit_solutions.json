["\n\nimport sys\n\ndef main():\n    n = int(input())\n    if (n % 2 == 0):\n        print(\"Bob\")\n        print(n // 2) \n    else:\n        print(\"Alice\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    num = int(input())\n    if num % 2 == 0:\n        print(\"Alice\")\n        print(num // 2)\n    else:\n        print(num // 2 + 1)\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n# TODO: solve this one.\n", "\ndef main():\n    num = int(input())\n    if num % 2 == 0:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\ndef isprime(n):\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\nprint(isprime(2))\n", "\nif n == 0:\n    exit()\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alic\")\n    print(n // 2)\nelse:\n    print(n // 2 + 1)\n    print(\"Bob\")\n", "\n\n# TODO:\n\nn = int(input())\n\n# if n is even, Alice can win by breaking a piece of length 1\nif (n % 2 == 0):\n    print(\"Alice\")\n    print(1)\nelse:\n    print(\"Bob\")\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    if n % 2 == 0:\n        print(\"Alice\")\n        print(n // 2)\n    else:\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nif n % 2 == 0:\n    print(\"Bob\")\n    print(n//2)\nelse:\n    print(\"Alice\")\n", "n = int(input())\n\nif n % 2 == 0:\n    print(\"Alice\")\n    print(n//2)\nelse:\n    print(\"Bob\")\n", "\n\nn = int(input())\nif n % 2 == 0:\n    print(\"Alice\")\n    print(n//2) \nelse:\n    print(\"Bob\")\n", "\nn = int(input()) #number of stones\n\nif n % 2 == 0:\n    print(\"Alic\")\n    print(n//2)\nelse:\n    print(\"Bob\")\n", "\"\"\"\n    file: file.py\n    author: Sivamani Varun\n    date: 02/01/2020\n\"\"\"\n\ndef main():\n    num = int(input(\"\"))\n    if num % 2 == 0:\n        print(\"Alice\")\n        print(num // 2)\n    else:\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alice\")\nelse:\n    print(n // 2 + 1)\n    print(\"Bob\")\n", "\n\ndef main():\n    nums = list(map(int, input().split()))\n    if nums[0] % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\n# if n is even, Alice can win by breaking a piece of length 1.\nif (n % 2 == 0):\n    print(\"Alice\")\n    print(1)\nelse:\n    print(\"Bob\")\n", "\"\"\"\n    file: file.py\n    author: Sivamani Varun\n    date: 02/01/2020\n\"\"\"\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\nif n % 2 != 0:\n    print(\"Alice\")\n    print(n // 2)\nelse:\n    print(\"Bob\")\n", "\nn = int(input())\n\nif n%2 == 0:\n    print(\"Alice\")\n    print(n//2)\nelse:\n    print(\"Bob\")\n", "\nx = 0\nn = int(input())\n\nif n%2 == 0:\n    print(\"Bob\")\n    print(n//2)\nelse:\n    print(\"Alice\")\n", "import sys\n\ndef main():\n    n = int(input())\n    if (n % 2 == 0):\n        print(\"Bob\")\n        print(n // 2)\n    else:\n        print(\"Alice\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alic\")\n    print(n // 2)\nelse:\n    print((n + 1) // 2)\n    print(\"Bob\")\n", "\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if num % 2 == 0:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Bob\")\n    print(n//2)\nelse:\n    print(\"Alice\")\n", "\n\ndef main():\n    num = int(input())\n    if num % 2 == 0:\n        print(\"Alice\")\n        print(num / 2)\n    else:\n        print(num / 2 + 1)\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alic\")\n    print(n // 2)\nelse:\n    print(\"Bob\")\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nif n%2==0:\n    print(\"Bob\")\nelse:\n    print(\"Alice\") \n", "\n\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alic\")\n    print(n//2)\n    print((n+1)//2)\nelse:\n    print(\"Bob\")\n", "\n\n# TODO: add code here\n\nn = int(input())\n\n# if n is even, Alice can win by breaking a piece of length 1.\nif (n % 2 == 0):\n    print(\"Alice\")\n    print(1)\nelse:\n    print(\"Bob\")\n", "\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alice\")\n    print(n // 2) \nelse:\n    print(\"Bob\")\n", "\n# add comment\nn = int(input(\"Enter a number: \"))\n\nif n % 2 == 0:\n    print(\"Alice\", n//2)\nelse:\n    print(\"Bob\", n//2)\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nif n%2==0:\n    print(\"Bob\")\nelse:\n    print(\"Alice\")\n", "\n\ndef main():\n    num = int(input())\n    if num % 2 == 0:\n        print(\"Alice\")\n        print(num // 2 - 1)\n    else:\n        print(num // 2)\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(input())\n    if (n % 2 == 0):\n        print(\"Alice\")\n        print(n // 2)\n    else:\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys \n  \n# Function to return gcd of a and b \ndef gcd(a,b): \n    if a == 0 : \n        return b \n      \n    return gcd(b%a, a) \n  \n# Function to find gcd of array of \n# numbers \ndef findGCD(arr,n): \n  \n    result = arr[0] \n    for i in range(1, n): \n        result = gcd(arr[i], result) \n      \n    return result \n  \n# Driver program to test above function \narr = list(map(int, input().split())) \nn = len(arr) \nprint(findGCD(arr,n)) \n", "\n\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alic\")\n    print(n // 2)\nelse:\n    print(\"Bob\")\n", "\n\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alice\")\n    print(n // 2 + 1)\nelse:\n    print(n // 2)\n    print(\"Bob\")\n", "\n\nimport sys, math\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    print(math.ceil(n / m))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport os\nimport re\nimport argparse\nimport requests\nimport json\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport subprocess\nimport logging\nimport logging.handlers\nimport socket\nimport random\nimport string\nimport getpass\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport shutil\nimport signal\nimport tempfile\nimport zipfile\nimport tarfile\nimport glob\nimport hashlib\nimport base64\nimport platform\nimport socket\nimport getpass\nimport xml.etree.ElementTree as ET\nimport psutil\nimport pwd\nimport grp\nimport locale\nimport itertools\nimport collections\nimport threading\nimport queue\nimport multiprocessing\nimport platform\nimport subprocess\nimport shlex\nimport time\nimport os\nimport sys\nimport json\nimport re\nimport argparse\nimport requests\nimport urllib3\nimport pprint\nimport datetime\nimport time\nimport logging\nimport logging.handlers\nimport random\nimport string\nimport csv\nimport configparser\nimport fnmatch\nimport smtplib\nimport\n# TODO: solve this one.\n", "\n\n# TODO: solve this one\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nif n%2==0:\n    print(\"Bob\")\nelse:\n    print(\"Alice\")\n    \n", "\n\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alice\")\n    print(n // 2)\nelse:\n    print(\"Bob\")\n", "\n# add comment again\nn = int(input())\n\nif n % 2 == 0:\n    print(\"Alice\")\n    print(n//2)\nelse:\n    print(\"Bob\")\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    if (n % 2 == 0):\n        print(\"Alice\")\n        print(n // 2)\n    else:\n        print(\"Bob\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\nif n%2 == 0:\n    print(\"Alice\")\n    print(n//2)\nelse:\n    print(\"Bob\")\n"]