2022-04-12 22:44:29.525829 num operations 2
2022-04-12 22:44:29.525838 size on input set 1
2022-04-12 22:44:53.024744 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308cA\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(A, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cA\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n"
    },
    {
      "index": 1,
      "text": "\n\nA, B, C, D, E, F = map(int, input().split())\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"
    },
    {
      "index": 2,
      "text": "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n\u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n(\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n\u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n\u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n\u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"
    }
  ],
  "created": 1649803469,
  "object": "edit"
}
2022-04-12 22:44:53.024965 fix spelling mistakes 3 ["\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# 水の重さと砂糖の重さをそれぞれAからFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さをAからFまでとする\n# それぞれの水の重さについて、砂糖の重さをAからFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(A, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さがAの場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n", "\n\nA, B, C, D, E, F = map(int, input().split())\n\n# 水の重さと砂糖の重さをそれぞれ0からFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さを0からFまでとする\n# それぞれの水の重さについて、砂糖の重さを0からFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さが0の場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n", "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n水の重さと砂糖の重さをそれぞれ0からFまで実験する\n(水の重さ, 砂糖の重さ)のタプルのリストを作成\n水の重さを100AからFまで、砂糖の重さを0からFまでとする\nそれぞれの水の重さについて、砂糖の重さを0からFまで試していく\nこのとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\nまた、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さが0の場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"]
2022-04-12 22:44:53.025127 size on output set 3
2022-04-12 22:44:53.025135 size on input set 3
2022-04-12 22:45:03.103030 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"
    },
    {
      "index": 1,
      "text": "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"
    },
    {
      "index": 2,
      "text": "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"
    }
  ],
  "created": 1649803493,
  "object": "edit"
}
2022-04-12 22:45:03.103322 fix syntax errors 3 ["\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# 水の重さと砂糖の重さをそれぞれ0からFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さを0からFまでとする\n# それぞれの水の重さについて、砂糖の重さを0からFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さが0の場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n", "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# 水の重さと砂糖の重さをそれぞれ0からFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さを0からFまでとする\n# それぞれの水の重さについて、砂糖の重さを0からFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さが0の場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n", "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# 水の重さと砂糖の重さをそれぞれ0からFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さを0からFまでとする\n# それぞれの水の重さについて、砂糖の重さを0からFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さが0の場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"]
2022-04-12 22:45:23.518107 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nA, B, C, D, E, F = map(int, input().split())\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"
    },
    {
      "index": 1,
      "text": "\n\nA, B, C, D, E, F = map(int, input().split())  # A:\u6c34\u306e\u521d\u671f\u91cf B:\u7802\u7cd6\u306e\u521d\u671f\u91cf C:\u7802\u7cd6\u6c34\u306e\u521d\u671f\u91cf D:\u6c34\u306e\u6d88\u8cbb\u91cf E:\u7802\u7cd6\u6c34\u306e\u6d88\u8cbb\u91cf F:\u5408\u8a08\u91cf\n\nexperiments = []\nfor w in range(0, F + 1, 100 * A):\n    for s in range(0, F + 1, B):\n        if s > w or w + s > F:\n            break\n        experiments.append((w, s))  # (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E // 100]  # \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]  # \u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))  # \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n"
    },
    {
      "index": 2,
      "text": "\nA, B, C, D, E, F = map(int, input().split())\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308c0\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u30920\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c0\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print('{} {}'.format(*sugar_dissolved))\nelse:\n    print('0 0')\n"
    }
  ],
  "created": 1649803503,
  "object": "edit"
}
2022-04-12 22:45:23.518299 fix syntax errors 3 ["\nA, B, C, D, E, F = map(int, input().split())\n\n# 水の重さと砂糖の重さをそれぞれ0からFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さを0からFまでとする\n# それぞれの水の重さについて、砂糖の重さを0からFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さが0の場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n", "\n\nA, B, C, D, E, F = map(int, input().split())  # A:水の初期量 B:砂糖の初期量 C:砂糖水の初期量 D:水の消費量 E:砂糖水の消費量 F:合計量\n\nexperiments = []\nfor w in range(0, F + 1, 100 * A):\n    for s in range(0, F + 1, B):\n        if s > w or w + s > F:\n            break\n        experiments.append((w, s))  # (水の重さ, 砂糖の重さ)のタプルのリストを作成\n\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E // 100]  # 砂糖が溶けきっているものを抽出する\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]  # 砂糖の重さが0の場合は除外する\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))  # 砂糖水の密度が最大のものを抽出する\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('0 0')\n", "\nA, B, C, D, E, F = map(int, input().split())\n\n# 水の重さと砂糖の重さをそれぞれ0からFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さを0からFまでとする\n# それぞれの水の重さについて、砂糖の重さを0からFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(0, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さが0の場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > 0]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print('{} {}'.format(*sugar_dissolved))\nelse:\n    print('0 0')\n"]
2022-04-12 22:45:27.405637 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 300\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308cA\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A):\n    for s in range(A, F + 1, A):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cA\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n"
    },
    {
      "index": 1,
      "text": "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 2, 3, 3, 9, 5, 20\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308cA\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(A, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cA\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n"
    },
    {
      "index": 2,
      "text": "\n\nA, B, C, D, E, F = map(int, input().split())\n# A, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# \u6c34\u306e\u91cd\u3055\u3068\u7802\u7cd6\u306e\u91cd\u3055\u3092\u305d\u308c\u305e\u308cA\u304b\u3089F\u307e\u3067\u5b9f\u9a13\u3059\u308b\n# (\u6c34\u306e\u91cd\u3055, \u7802\u7cd6\u306e\u91cd\u3055)\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# \u6c34\u306e\u91cd\u3055\u3092100A\u304b\u3089F\u307e\u3067\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u3068\u3059\u308b\n# \u305d\u308c\u305e\u308c\u306e\u6c34\u306e\u91cd\u3055\u306b\u3064\u3044\u3066\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092A\u304b\u3089F\u307e\u3067\u8a66\u3057\u3066\u3044\u304f\n# \u3053\u306e\u3068\u304d\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304c\u6c34\u306e\u91cd\u3055\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3068\u3001\u7802\u7cd6\u306f\u6eb6\u3051\u306a\u3044\u306e\u3067break\u3059\u308b\n# \u307e\u305f\u3001\u6c34\u306e\u91cd\u3055\u304cF\u3092\u8d85\u3048\u308b\u5834\u5408\u3082break\u3059\u308b\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(A, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u5b9f\u9a13\u7d50\u679c\u306e\u3046\u3061\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cE\u500d\u4ee5\u4e0b\u306e\u6c34\u306e\u91cd\u3055\u3092\u62bd\u51fa\u3059\u308b\n# \u307e\u305f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u304cA\u306e\u5834\u5408\u306f\u9664\u5916\u3059\u308b\n# \u7802\u7cd6\u304c\u6eb6\u3051\u304d\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u62bd\u51fa\u3059\u308b\n# \u7802\u7cd6\u6c34\u306e\u5bc6\u5ea6\u306f\u3001\u7802\u7cd6\u306e\u91cd\u3055\u3092\u6c34\u306e\u91cd\u3055\uff0b\u7802\u7cd6\u306e\u91cd\u3055\u3067\u5272\u3063\u305f\u5024\u3068\u3059\u308b\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n"
    }
  ],
  "created": 1649803523,
  "object": "edit"
}
2022-04-12 22:45:27.405816 fix syntax errors 3 ["\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 1, 2, 10, 20, 15, 300\n\n# 水の重さと砂糖の重さをそれぞれAからFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さをAからFまでとする\n# それぞれの水の重さについて、砂糖の重さをAからFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A):\n    for s in range(A, F + 1, A):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さがAの場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n", "\n\n# A, B, C, D, E, F = map(int, input().split())\nA, B, C, D, E, F = 2, 3, 3, 9, 5, 20\n\n# 水の重さと砂糖の重さをそれぞれAからFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さをAからFまでとする\n# それぞれの水の重さについて、砂糖の重さをAからFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(A, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さがAの場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n", "\n\nA, B, C, D, E, F = map(int, input().split())\n# A, B, C, D, E, F = 1, 2, 10, 20, 15, 200\n\n# 水の重さと砂糖の重さをそれぞれAからFまで実験する\n# (水の重さ, 砂糖の重さ)のタプルのリストを作成\n# 水の重さを100AからFまで、砂糖の重さをAからFまでとする\n# それぞれの水の重さについて、砂糖の重さをAからFまで試していく\n# このとき、砂糖の重さが水の重さより大きくなると、砂糖は溶けないのでbreakする\n# また、水の重さがFを超える場合もbreakする\nexperiments = []\nfor w in range(A * 100, F + 1, A * 100):\n    for s in range(A, F + 1):\n        if s > w:\n            break\n        if w + s > F:\n            break\n        experiments.append((w, s))\n\n# 実験結果のうち、砂糖が溶けきっているものを抽出する\n# 実験結果のうち、砂糖の重さがE倍以下の水の重さを抽出する\n# また、砂糖の重さがAの場合は除外する\n# 砂糖が溶けきっているもののうち、砂糖水の密度が最大のものを抽出する\n# 砂糖水の密度は、砂糖の重さを水の重さ＋砂糖の重さで割った値とする\nsugar_dissolved = [(w, s) for w, s in experiments if s <= w * E / 100]\nsugar_dissolved = [(w, s) for w, s in sugar_dissolved if s > A]\nif len(sugar_dissolved) > 0:\n    sugar_dissolved = max(sugar_dissolved, key=lambda x: x[1] / (x[0] + x[1]))\n    print(' '.join(map(str, sugar_dissolved)))\nelse:\n    print('{} {}'.format(A * 100, 0))\n"]
2022-04-12 22:45:27.405964 size on output set 7
2022-04-12 22:45:27.405977 num operations 2
2022-04-12 22:45:27.405982 size on input set 1
2022-04-12 22:45:41.421026 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# ======\n# Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    },
    {
      "index": 1,
      "text": "\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    },
    {
      "index": 2,
      "text": "\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: A, B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - A, 100D/E - D - B\n# 6. Sugar-water-water: 100C/E - A, 100D/E - B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - A, 100D/E - D + C - B\n# 9. Water-sugar-water-sugar: 100C/E - C - A + D, 100D/E - D - B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    }
  ],
  "created": 1649803527,
  "object": "edit"
}
2022-04-12 22:45:41.421226 fix spelling mistakes 3 ['\n\n# ======\n# Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n', '\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n', '\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: A, B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - A, 100D/E - D - B\n# 6. Sugar-water-water: 100C/E - A, 100D/E - B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - A, 100D/E - D + C - B\n# 9. Water-sugar-water-sugar: 100C/E - C - A + D, 100D/E - D - B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n']
2022-04-12 22:45:41.421275 size on output set 3
2022-04-12 22:45:41.421281 size on input set 3
2022-04-12 22:45:47.830085 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# ===============\n#  Main Function\n# ===============\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    },
    {
      "index": 1,
      "text": "\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    },
    {
      "index": 2,
      "text": "\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(\n    filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates)\n)\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))  # TODO: round\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))  # TODO: cast\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])  # TODO: output\n"
    }
  ],
  "created": 1649803541,
  "object": "edit"
}
2022-04-12 22:45:47.830358 fix syntax errors 3 ['\n\n# ===============\n#  Main Function\n# ===============\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n', '\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n', '\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-sugar-water: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(\n    filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates)\n)\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))  # TODO: round\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))  # TODO: cast\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])  # TODO: output\n']
2022-04-12 22:46:12.825543 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# ======\n# Main\n# ======\n\n# --- Input ---\n\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    },
    {
      "index": 1,
      "text": "\n\n# ======\n# Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]))\ncandidates = list(map(lambda x: (int(round(x[0])), int(round(x[1]))), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    },
    {
      "index": 2,
      "text": "\n\n# ======\n# Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (int(round(x[0])), int(round(x[1]))), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    }
  ],
  "created": 1649803547,
  "object": "edit"
}
2022-04-12 22:46:12.825730 fix syntax errors 3 ['\n\n# ======\n# Main\n# ======\n\n# --- Input ---\n\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n', '\n\n# ======\n# Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]))\ncandidates = list(map(lambda x: (int(round(x[0])), int(round(x[1]))), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n', '\n\n# ======\n# Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: 100A, 100B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - 100A, 100D/E - D - 100B\n# 6. Sugar-water-water: 100C/E - 100A, 100D/E - 100B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - 100A, 100D/E - D + C - 100B\n# 9. Water-sugar-water-sugar: 100C/E - C - 100A + D, 100D/E - D - 100B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - 100 * A, 100 * D / E - D - 100 * B),\n    (100 * C / E - 100 * A, 100 * D / E - 100 * B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - 100 * A, 100 * D / E - D + C - 100 * B),\n    (100 * C / E - C - 100 * A + D, 100 * D / E - D - 100 * B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (int(round(x[0])), int(round(x[1]))), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n']
2022-04-12 22:46:21.193123 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: A, B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - A, 100D/E - D - B\n# 6. Sugar-water-water: 100C/E - A, 100D/E - B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - A, 100D/E - D + C - B\n# 9. Water-sugar-water-sugar: 100C/E - C - A + D, 100D/E - D - B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1]), 100 * x[1] / (x[0] + x[1])), candidates))\ncandidate = max(candidates, key=lambda x: x[2])\nprint(int(candidate[0] + candidate[1]), int(candidate[1]))\n"
    },
    {
      "index": 1,
      "text": "# -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\n# =====\n#  \u5165\u529b\n# =====\n\nA, B, C, D, E, F = map(int, input().split())\n\n# =====\n#  \u8a08\u7b97\n# =====\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    },
    {
      "index": 2,
      "text": "\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: A, B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - A, 100D/E - D - B\n# 6. Sugar-water-water: 100C/E - A, 100D/E - B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - A, 100D/E - D + C - B\n# 9. Water-sugar-water-sugar: 100C/E - C - A + D, 100D/E - D - B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(\n    filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(\n    map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(\n    map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(\n    candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n"
    }
  ],
  "created": 1649803572,
  "object": "edit"
}
2022-04-12 22:46:21.193317 fix syntax errors 3 ['\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: A, B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - A, 100D/E - D - B\n# 6. Sugar-water-water: 100C/E - A, 100D/E - B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - A, 100D/E - D + C - B\n# 9. Water-sugar-water-sugar: 100C/E - C - A + D, 100D/E - D - B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1]), 100 * x[1] / (x[0] + x[1])), candidates))\ncandidate = max(candidates, key=lambda x: x[2])\nprint(int(candidate[0] + candidate[1]), int(candidate[1]))\n', '# -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\n# =====\n#  入力\n# =====\n\nA, B, C, D, E, F = map(int, input().split())\n\n# =====\n#  計算\n# =====\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n', '\n\n# ======\n#  Main\n# ======\n\n# --- Input ---\nA, B, C, D, E, F = map(int, input().split())\n\n# --- Calculation ---\n# 1. Water: A, B\n# 2. Sugar: C, D\n# 3. Sugar-water: 100C/E, 100D/E\n# 4. Water-sugar: 100C/E - C, 100D/E - D\n# 5. Water-sugar-water: 100C/E - C - A, 100D/E - D - B\n# 6. Sugar-water-water: 100C/E - A, 100D/E - B\n# 7. Sugar-water-sugar: 100C/E - C + D, 100D/E - D + C\n# 8. Sugar-water-sugar-water: 100C/E - C + D - A, 100D/E - D + C - B\n# 9. Water-sugar-water-sugar: 100C/E - C - A + D, 100D/E - D - B + C\n\n# --- Output ---\ncandidates = [\n    (100 * C / E - C - A, 100 * D / E - D - B),\n    (100 * C / E - A, 100 * D / E - B),\n    (100 * C / E - C + D, 100 * D / E - D + C),\n    (100 * C / E - C + D - A, 100 * D / E - D + C - B),\n    (100 * C / E - C - A + D, 100 * D / E - D - B + C),\n]\ncandidates = list(\n    filter(lambda x: x[0] + x[1] <= F and x[0] >= 0 and x[1] >= 0, candidates))\ncandidates = list(\n    map(lambda x: (round(x[0]), round(x[1])), candidates))\ncandidates = list(\n    map(lambda x: (int(x[0]), int(x[1])), candidates))\ncandidate = max(\n    candidates, key=lambda x: 100 * x[1] / (x[0] + x[1]))\nprint(candidate[0] + candidate[1], candidate[1])\n']
2022-04-12 22:46:21.193396 size on output set 9
