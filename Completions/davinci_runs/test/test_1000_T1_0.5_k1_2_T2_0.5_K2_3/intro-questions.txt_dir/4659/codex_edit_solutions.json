["# \nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n", "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n", "# Pascal's Triangle\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        triangle = []\n        for i in range(numRows):\n            row = [None for _ in range(i+1)]\n            row[0], row[-1] = 1, 1\n            for j in range(1, len(row)-1):\n                row[j] = triangle[i-1][j-1] + triangle[i-1][j]\n            triangle.append(row)\n        return triangle\n", "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n", "class Solution:\n    def generate(self, numRows: int):\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n", "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        # if numRows == 0:\n        #     return []\n        # if numRows == 1:\n        #     return [[1]]\n        # if numRows == 2:\n        #     return [[1], [1,1]]\n        # res = [[1], [1,1]]\n        # for i in range(2, numRows):\n        #     tmp = [1]\n        #     for j in range(1, i):\n        #         tmp.append(res[i-1][j-1] + res[i-1][j])\n        #     tmp.append(1)\n        #     res.append(tmp)\n        # return res\n        pass\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/4/30 14:48\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle/\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n", "from typing import List\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n", "from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n", "class Solution:\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([1])\n            for j in range(1, i):\n                res[i].append(res[i-1][j-1] + res[i-1][j])\n            res[i].append(1)\n        return res\n\n", "\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j]) \n        return res\n", "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"]