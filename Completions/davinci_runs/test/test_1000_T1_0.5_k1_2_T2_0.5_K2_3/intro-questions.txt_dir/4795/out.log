2022-04-09 22:28:43.344773 """
The teacher has sent an e-mail to her students with the following task: “Write a program that will determine and output the value of $X$ if given the statement:\[ X = \mathit{number}_1^{\mathit{pow}_1} + \mathit{number}_2^{\mathit{pow}_2} + \ldots + \mathit{number}_ N^{\mathit{pow}_ N} \]

and it holds that $\mathit{number}_1$, $\mathit{number}_2$ to $\mathit{number}_ N$ are integers, and $\mathit{pow}_1$, $\mathit{pow_2}$ to $\mathit{pow}_ N$ are one-digit integers.” Unfortunately, when the teacher downloaded the task to her computer, the text formatting was lost so the task transformed into a sum of $N$ integers:\[ X = P_1 + P_2 + \ldots + P_ N \]

For example, without text formatting, the original task in the form of $X = 21^2 + 125^3$ became a task in the form of $X = 212 + 1253$. Help the teacher by writing a program that will, for given $N$ integers from $P_1$ to $P_ N$ determine and output the value of $X$ from the original task.

-----Input-----
The first line of input contains the integer $N$ ($1 \leq N \leq 10$), the number of the addends from the task. Each of the following $N$ lines contains the integer $P_ i$ ($10 \leq P_ i \leq 9999$, $i = 1, \ldots , N$) from the task.

-----Output-----
The first and only line of output must contain the value of $X$ ($X \leq 1000000000$) from the original task.

-----Examples-----
Sample Input 1:
2
212
1253
Sample Output 1:
1953566

Sample Input 2:
5
23
17
43
52
22
Sample Output 2:
102
"""
2022-04-09 22:28:43.344793 --------------------------
2022-04-09 22:29:10.376088 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = input()\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i)):\n        if int(i[j]) != 0:\n            result += int(i[:j]) ** int(i[j])\n            break\nprint(result)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    result = 0\n    for num in nums:\n        result += solve(num)\n    print(result)\n\ndef solve(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num)\n    else:\n        return int(num[0])**(length-1) + int(num[1:])\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    num = int(input())\n    nums = []\n    for i in range(num):\n        nums.append(int(input()))\n    total = 0\n    for i in nums:\n        if i >= 10 and i < 100:\n            total += i % 10\n        elif i >= 100 and i < 1000:\n            total += (i // 100) ** 2\n        elif i >= 1000 and i < 10000:\n            total += (i // 1000) ** 3\n    print(total)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(total)"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\n\nN = int(input())\noutput = 0\nfor i in range(N):\n    pow = 0\n    number = input()\n    for i in range(len(number)):\n        pow += int(number[i])\n    output += pow ** len(number)\nprint(output)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[0]), end=\"\")\n    else:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[2])+int(str(P)[2])**int(str(P)[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\n# Work out the lengths of the numbers.\n# Then, for each number, work out the base of the number by dividing the length by 2.\n# Then, work out the power of the number by subtracting the base from the length.\n# Finally, work out the value of the number by taking the base to the power of the power.\n# Add up all of those values.\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = int(length / 2)\n        power = length - base\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nN = int(input())\n\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)"
    }
  ],
  "created": 1649557723,
  "id": "cmpl-4vHbfQgGYY0jv0Pd4k3kaWJOGhDvJ",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 22:29:10.376405 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\nlist_of_values = []\nwhile n > 0:\n    number = input()\n    list_of_values.append(number)\n    n -= 1\n\nresult = 0\nfor i in list_of_values:\n    for j in range(1, len(i)):\n        if int(i[j]) != 0:\n            result += int(i[:j]) ** int(i[j])\n            break\nprint(result)"
}
2022-04-09 22:29:10.376442 REASON stop
2022-04-09 22:29:10.377320 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
2022-04-09 22:29:10.377349 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n = read_int()\n    nums = [read_int() for _ in range(n)]\n    result = 0\n    for num in nums:\n        result += solve(num)\n    print(result)\n\ndef solve(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num)\n    else:\n        return int(num[0])**(length-1) + int(num[1:])\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:29:10.377420 REASON stop
2022-04-09 22:29:10.377870 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
2022-04-09 22:29:10.377905 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    num = int(input())\n    nums = []\n    for i in range(num):\n        nums.append(int(input()))\n    total = 0\n    for i in nums:\n        if i >= 10 and i < 100:\n            total += i % 10\n        elif i >= 100 and i < 1000:\n            total += (i // 100) ** 2\n        elif i >= 1000 and i < 10000:\n            total += (i // 1000) ** 3\n    print(total)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 22:29:10.377982 REASON stop
2022-04-09 22:29:10.378381 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
2022-04-09 22:29:10.378414 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\nn = int(input())\n\ntotal = 0\n\nfor _ in range(n):\n    total += int(input())\n\nprint(total)"
}
2022-04-09 22:29:10.378486 REASON stop
2022-04-09 22:29:10.378894 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
2022-04-09 22:29:10.378929 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\n\nN = int(input())\noutput = 0\nfor i in range(N):\n    pow = 0\n    number = input()\n    for i in range(len(number)):\n        pow += int(number[i])\n    output += pow ** len(number)\nprint(output)"
}
2022-04-09 22:29:10.379005 REASON stop
2022-04-09 22:29:10.379396 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
2022-04-09 22:29:10.379491 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nN = int(input())\n\nfor i in range(N):\n    P = int(input())\n    if len(str(P)) == 2:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[0]), end=\"\")\n    else:\n        print(int(str(P)[0])**int(str(P)[1])+int(str(P)[1])**int(str(P)[2])+int(str(P)[2])**int(str(P)[0]), end=\"\")\n    if i < N-1:\n        print(\"+\", end=\"\")"
}
2022-04-09 22:29:10.379561 REASON stop
2022-04-09 22:29:10.379969 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
2022-04-09 22:29:10.379997 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\n# Work out the lengths of the numbers.\n# Then, for each number, work out the base of the number by dividing the length by 2.\n# Then, work out the power of the number by subtracting the base from the length.\n# Finally, work out the value of the number by taking the base to the power of the power.\n# Add up all of those values.\n\nimport math\n\ndef main():\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(int(input()))\n    total = 0\n    for number in numbers:\n        length = len(str(number))\n        base = int(length / 2)\n        power = length - base\n        total += int(math.pow(base, power))\n    print(total)\n\nmain()"
}
2022-04-09 22:29:10.380070 REASON stop
2022-04-09 22:29:10.380504 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
2022-04-09 22:29:10.380533 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nN = int(input())\n\nX = 0\n\nfor i in range(N):\n    P = input()\n    X += int(P[-1]) ** int(P[0])\n\nprint(X)"
}
2022-04-09 22:29:10.380603 REASON stop
2022-04-09 22:29:10.381013 test/intro-questions.txt_dir/4795/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4795/solutions.json'
