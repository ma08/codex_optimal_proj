["\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Sets up the variables for the while loop\nj = 0\ni = 0\n\n# While loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j]:\n        j = message[j].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\ndef check_password(password, msg):\n    passw = list(password)\n    for i in range(len(passw)):\n        if passw[i] not in msg:\n            return \"FAIL\"\n        msg = msg[msg.index(passw[i])+1:]\n    return \"PASS\"    \n\nif __name__ == \"__main__\":\n    print(check_password(input(), input()))\n", "\n\ndef main():\n\n    # Get the input from the user\n    password = input().strip()\n    message = input().strip()\n\n    # Set up the variables for the for loop\n    j = 0\n    i = 0\n\n    # For loop that loop until the end of the password is reached\n    while i < len(password):\n\n        # If the character at index i is found in the message, it set the variable j to that index and add 1 to i\n        if password[i] in message[j:]:\n            j = message[j:].index(password[i]) + j + 1\n            i += 1\n\n        # If the character at index i is not found in the message, it print fail and break out of the loop\n        else:\n            print(\"FAIL\")\n            break\n\n    # If the loop completes, it print pass\n    else:\n        print(\"PASS\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().split()  # read the password and message\n    pw_i = 0\n    for i in msg:  # loop through the message\n        if pw_i < len(pw) and i == pw[pw_i]:  # if the character matches the password at the current index\n            pw_i += 1  # increase the index of the password\n    if pw_i == len(pw):  # if the index of the password is at the end, the password was found\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n#SOLUTION TO PROBLEM\n#SOLUTION TO PROBLEM\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)+1\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Sets up the variables for the while loop\nj = 0\ni = 0\nflag = True\n# While loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        flag = False\n        break\n\n# If the loop completes, it prints pass\nelse:\n    pass\n\nif flag:\n    print(\"PASS\")\nelse:\n    print(\"FAIL\")\n", "\n\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Sets up the variables for the while loop\nj = 0\ni = 0\n\n# While loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]: \n        j = message[j:].index(password[i]) + j + 1 \n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\n# Gets the input from the user and strips the new line character\npassword = input().strip('\\n')\nmessage = input().strip('\\n')\n\n# Sets up the variables for the while loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i.\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    # (password is a substring of the message)\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Set up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it set the variable j to that index and add 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it print fail and break out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it print pass\nelse:\n    print(\"PASS\")\n", "\n\ndef main():\n    password = raw_input()\n    message = raw_input()\n\n    # Check if the password is valid.\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid.\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid.\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid.\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password.\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password) - 1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef check_password(password, message):  # check if the password is in the message\n    password = list(password)\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_password(input(), input()))\n", "# this is a comment\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i])>message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_passcode(passcode, message):\n    passcode = list(passcode)\n    for i in range(len(passcode)):\n        try:\n            index = message.index(passcode[i])\n        except ValueError:\n            return \"FAIL\" \n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_passcode(input(), input()))\n", "\ndef check_password(password, msg):\n    passw = list(password)\n    for i in range(len(passw)):\n        if passw[i] not in msg:\n            return \"FAIL\"\n        msg = msg[msg.index(passw[i])+1:]\n    return \"PASS\"\n\nprint(check_password(input(), input()))\n", "\n\ndef main():\n    pass_string, message_string = input().split()  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u0432\u043e\u0434\u0430\n    pass_index = 0  # \u0418\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0430\u0440\u043e\u043b\u044f\n    for char in message_string:  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438\n        if char == pass_string[pass_index]:  # \u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0430\u0440\u043e\u043b\u044f\n            pass_index += 1  # \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0430\u0440\u043e\u043b\u044f\n        if pass_index == len(pass_string):  # \u0415\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 \u043f\u0430\u0440\u043e\u043b\u044f\n            print('PASS')  # \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u043c PASS\n            return  # \u0418 \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0442.\u043a. \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d\n    print('FAIL')  # \u0415\u0441\u043b\u0438 \u0434\u043e\u0448\u043b\u0438 \u0434\u043e \u0441\u044e\u0434\u0430, \u0442\u043e \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c FAIL\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    password_string, message_string = input().split() # split the input into password string and message string\n    password_index = 0\n    for char in message_string: # iterate through the message\n        if char == password_string[password_index]:\n            password_index += 1\n        if password_index == len(password_string):\n            print('PASS') # if the password is complete, then print PASS\n            return\n    print('FAIL') # if the password is not complete, then print FAIL\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_passcode(passcode, message,):\n    passcode = list(passcode,)\n    for i in range(len(passcode,)):\n        try:\n            index = message.index(passcode[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_passcode(input(), input(),))\n", "\n\ndef check_password(password, message):  # check if the password is in the message \n    if(password in message): \n        return \"PASS\"\n    else:\n        return \"FAIL\"\n        \nprint(check_password(input(\"Password: \"), input(\"Message: \")))\n", "\n\ndef main():\n    pass_string = input()\n    message_string = input()\n    pass_index = 0  # \u0418\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0430\u0440\u043e\u043b\u044f\n    for char in message_string:  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438\n        if char == pass_string[pass_index]:\n            pass_index += 1  # \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0430\u0440\u043e\u043b\u044f\n        if pass_index == len(pass_string):\n            print('PASS')\n            return\n    print('FAIL')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main(): \n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8 or any(char.isdigit() for char in password):\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n# SOLUTION\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().split()\n    pw_i = 0\n    for i in range(len(msg)):\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef check_password(password, message):\n    password = list(password)\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return False\n        message = message[index+1:]\n    return True\n\ndef check_password_2(password, message):\n    password = list(password)\n    for i in range(len(password)):\n        index = message.find(password[i])\n        if index == -1:\n            return False\n        message = message[index+1:]\n    return True\n\nprint(check_password_2(input(), input()))\n", "import fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i])>message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    password_string, message_string = input().split() # split the input into the password and the message\n    password_index = 0\n    for char in message_string: # iterate through the message\n        if char == password_string[password_index]:\n            password_index += 1\n        if password_index == len(password_string):\n            print('PASS') # if the password is complete, then print PASS\n            return # end the program\n    print('FAIL') # if the password is not complete, then print FAIL\n\nif __name__ == \"__main__\":\n    main()\n", "password, message = input().split() \n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:] \nelse:\n    print(\"PASS\")\n", "\n\npassword, message = input().split()\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\n\n#SOLUTION TO PROBLEM 2\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\nimport sys\n\ndef main():\n    pwd, msg = sys.stdin.readline().split()\n    pwd_i = 0\n    for i in range(len(msg)):\n        if pwd_i < len(pwd) and msg[i] == pwd[pwd_i]:\n            pwd_i += 1\n    if pwd_i == len(pwd):\n        print('pass')\n    else:\n        print('fail')\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    pwd, msg = sys.stdin.readline().split()\n    pwd_i = 0\n    for i in range(len(msg)):\n        if pwd_i < len(pwd) and msg[i] == pwd[pwd_i]:\n            pwd_i += 1\n    if pwd_i == len(pwd):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    pwd, msg = sys.stdin.readline().split()\n    pwd_i = 0\n    for i in range(len(msg)):\n        if pwd_i < len(pwd) and msg[i] == pwd[pwd_i]:\n            pwd_i += 1\n    if pwd_i == len(pwd):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\npassword, message = input().split()\n\nfor i in range(len(password)):  # \u041f\u0435\u0440\u0435\u0431\u043e\u0440 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043f\u0430\u0440\u043e\u043b\u0435\n    if message.find(password[i]) == -1:  # \u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043d\u0435\u0442 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e\nelse:\n    print(\"PASS\")\n", "\ndef main(): \n    password = raw_input()\n    message = raw_input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\npassword, message = input().split()  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n\nfor i in range(len(password)):  # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c\n    if message.find(password[i]) == -1:  # \u0435\u0441\u043b\u0438 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043d\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0438\u0437 \u043f\u0430\u0440\u043e\u043b\u044f, \u0442\u043e \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0435 \u0432\u0435\u0440\u0435\u043d\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]  # \u0438\u043d\u0430\u0447\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\nelse:\n    print(\"PASS\")\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid.\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid.\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\n\ndef check_password_validity(password):\n    # Check if the password is valid.\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\n\ndef check_message_validity(password, message):\n    # Check if the message is valid.\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password.\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\ndef main():\n    password_string, message_string = input().split() # take in user input\n    password_index = 0\n    for char in message_string: # iterate through the message\n        if char == password_string[password_index]:\n            password_index += 1\n        if password_index == len(password_string):\n            print('PASS') # if the password is complete, then print PASS\n            return\n    print('FAIL') # if the password is not complete, then print FAIL\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password (password is a substring of the message)\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n\n    return False\n\nmain()\n", "\n\ndef main():\n    pass_string, message_string = input().split()  # \u0432\u0432\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    pass_index = 0  # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0430\u0440\u043e\u043b\u044f\n    for char in message_string:  # \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438\n        if char == pass_string[pass_index]:  # \u0435\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u0440\u0430\u0432\u0435\u043d \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0432 \u043f\u0430\u0440\u043e\u043b\u0435 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443\n            pass_index += 1  # \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0432 \u043f\u0430\u0440\u043e\u043b\u0435\n        if pass_index == len(pass_string):  # \u0435\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0430\u0440\u043e\u043b\u044f \u0440\u0430\u0432\u0435\u043d \u0434\u043b\u0438\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f\n            print('PASS')  # \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d\n            return\n    print('FAIL')  # \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\n\n\nif __name__ == \"__main__\":\n    main()\n", "\np, s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i.\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"fail\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"pass\")\n", "\n#SOLUTION TO PROBLEM\n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid\n    if not check_password_validity(password):\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid\n    if check_message_validity(password, message):\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password (password is a substring of the message)\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "#!/usr/bin/env python3\n\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "p,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n#this is a comment\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.find(password[i])>message.find(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\npassword, message = input().split()\n# \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n\nfor i in range(len(password)):\n    # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c\n    if message.find(password[i]) == -1:\n        # \u0435\u0441\u043b\u0438 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043d\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0438\u0437 \u043f\u0430\u0440\u043e\u043b\u044f, \u0442\u043e \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0435 \u0432\u0435\u0440\u0435\u043d\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\n        # \u0438\u043d\u0430\u0447\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\nelse:\n    print(\"PASS\")\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid.\n    password_validity = check_password_validity(password)\n    if password_validity == False:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid.\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid.\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid.\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password.\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().strip().split()\n    pw_i = 0  # index of password\n    for i in range(len(msg)):\n        if pw_i < len(pw) and msg[i] == pw[pw_i]:\n            pw_i += 1\n    if pw_i == len(pw):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef check_passcode(passcode, message):\n    passcode = list(str(passcode))\n    for i in range(len(passcode)):\n        try:\n            index = message.index(passcode[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_passcode(input(), str(input())))\n", "\n\n# # Gets the input from the user\n# password = input().strip()\n# message = input().strip()\n\n# # Sets up the variables for the for loop\n# j = 0\n# i = 0\n\n# # For loop that loops until the end of the password is reached\n# while i < len(password):\n\n#     # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i.\n#     if password[i] in message[j:]:\n#         j = message[j:].index(password[i]) + j + 1\n#         i += 1\n\n#     # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n#     else:\n#         print(\"FAIL\")\n#         break\n\n# # If the loop completes, it prints pass\n# else:\n#     print(\"PASS\")\n#\n\ndef is_substring(string, sub):\n    if string.find(sub) == -1:\n        return False\n    else:\n        return True\n\n\ndef is_rotation(s1, s2):\n    if len(s1) == len(s2) != 0:\n        return is_substring(s1 + s1, s2)\n\n\nprint(is_rotation(\"water\", \"aterw\"))\n", "with open('input.txt') as f:\n    password, message = f.readline().split()\n    for i in range(len(password)):\n        if message.find(password[i]) == -1:\n            print(\"FAIL\")\n            break\n        else:\n            message = message[message.find(password[i])+1:]\n    else:\n        print(\"PASS\")\n", "\n\ndef main():\n    pass_string, message_string = input().split()  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u0432\u043e\u0434\u0430.\n    pass_index = 0  # \u0418\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0430\u0440\u043e\u043b\u044f\n    for char in message_string:  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438.\n        if char == pass_string[pass_index]:  # \u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0430\u0440\u043e\u043b\u044f.\n            pass_index += 1  # \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0430\u0440\u043e\u043b\u044f.\n        if pass_index == len(pass_string):  # \u0415\u0441\u043b\u0438 \u0438\u043d\u0434\u0435\u043a\u0441 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 \u043f\u0430\u0440\u043e\u043b\u044f.\n            print('PASS')  # \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u043c PASS.\n            return  # \u0418 \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n    print('FAIL')  # \u0415\u0441\u043b\u0438 \u0434\u043e\u0448\u043b\u0438 \u0434\u043e \u0441\u044e\u0434\u0430, \u0442\u043e \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c FAIL.\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    pw, msg = sys.stdin.readline().split()  # read the password and message\n    # pw_i = 0\n    # for i in range(len(msg)):  # loop through the message\n    #     if pw_i < len(pw) and msg[i] == pw[pw_i]:  # if the character matches the password at the current index\n    #         pw_i += 1  # increase the index of the password\n    # if pw_i == len(pw):  # if the index of the password is at the end, the password was found\n    #     print('PASS')\n    # else:\n    #     print('FAIL')\n\n    print(pw, msg)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Get the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Set up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loop until the end of the password is reached\nwhile i < len(password)\n\n    # If the character at index i is found in the message, it set the variable j to that index and add 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it print fail and break out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it print pass\nelse:\n    print(\"PASS\")\n", "\n\ndef check_password(password, msg):\n    passw = list(password)\n    for i in range(len(passw)):\n        if passw[i] not in msg:\n            return \"FAIL\"\n        msg = msg[msg.index(passw[i])+1: ]\n    return \"PASS\"    \n\nprint(check_password(input(), input()))\n", "password, message = input().split(' ')\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "p,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print(\"FAIL\")\n        break\nelse:\n    print(\"PASS\")\n"]