["\n\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    heaters = [-r]\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n    if len(heaters) == 1:\n        print(-1)\n        return\n    heaters.append(n)\n    i = 0\n    ans = 0\n    while i < len(heaters) - 1:\n        if heaters[i] + r - 1 >= heaters[i + 1]:\n            heaters.pop(i)\n        else:\n            i += 1\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_input(n):\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    return a\n\ndef solve(a):\n    ans = 0\n    return ans\n\ndef main():\n    n = int(input())\n    a = get_input(n)\n    ans = solve(a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())  # read n and r\n    a = list(map(int, sys.stdin.readline().split()))\n    heaters = []  # array of heaters\n    for i in range(n):\n        if a[i] == 1:  # if heater is here\n            heaters.append(i)\n    if len(heaters) == 0:  # if there are no heaters\n        print(-1)\n        return\n    heaters.append(n)  # add right bound\n    heaters.insert(0, -r)  # add left bound\n    i = 0\n    ans = 0  # answer\n    while i < len(heaters) - 1:\n        if heaters[i] + r - 1 >= heaters[i + 1]:  # if the next heater is in radius of the current heater\n            heaters.pop(i)\n        else:\n            i += 1\n            ans += 1  # add 1 to answer\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_input():\n    n, r = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    return n, r, a\n\ndef solve(n, r, a):\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            continue\n        if i + r >= n:\n            if i + r == n and a[i+r] == 1:\n                ans += 1\n            else:  # i + r > n\n                return -1\n            continue\n        if a[i+r] == 1:\n            ans += 1\n            continue\n        if a[i+2*r] == 1:\n            ans += 2\n            continue\n        return -1\n    return ans\n\ndef main():\n    n, r, a = get_input()\n    ans = solve(n, r, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_input():\n    n, d = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]  # a[i] = x_i - y_i\n    return n, d, a\n\ndef solve(n, d, a):\n    ans = 0\n    i = 1\n    while i <= n:\n        if a[i-1] > 0:\n            i += 1\n        else:\n            j = i\n            while j <= n and a[j-1] < 0:\n                j += 1\n            a[j-1] = 1\n            ans += 1\n            i = j\n    return ans\n\ndef main():\n    n, r, a = get_input()\n    ans = solve(n, r, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_input():\n    n, d = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]  # a[i] = x_i - y_i\n    return n, d, a\n\ndef solve(n, d, a):\n    ans = 0\n    i = 1\n    while i <= n:\n        if a[i-1] > 0:\n            i += 1\n        else:\n            j = i\n            while j <= n and a[j-1] < 0:\n                j += 1\n            if j <= n:\n                a[j-1] = 1\n                ans += 1\n                i = j\n            else:\n                i += 1\n    return ans\n\ndef main():\n    n, r, a = get_input()\n    ans = solve(n, r, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_input():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    return n, a\n\ndef solve(n, a):\n    ans = 0\n\n    return ans\n\ndef main():\n    n, a = get_input()\n    ans = solve(n, a)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_input():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    return n, r, a\n\ndef solve(n, r, a):\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            continue\n        if i + r >= n:\n            if i + r == n and a[i+r] == 1:\n                ans += 1\n            else:  # i + r > n\n                return -1\n            continue\n        if a[i+r] == 1:\n            ans += 1\n            continue\n        if a[i+2*r] == 1:\n            ans += 2\n            continue\n        return -1\n    return ans\n\ndef main():\n    n, r, a = get_input()\n    ans = solve(n, r, a)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_input():\n    n = int(input())\n    x = [int(x) for x in input().split()]\n    return n, x\n\ndef solve(n, x):\n    ans = 0\n    return ans\n\ndef main():\n    n, x = get_input()\n    ans = solve(n, x)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_input():\n    n, r = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n\n    return n, r, a\n\ndef solve(n, r, a):\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            continue\n        if i + r >= n:\n            if i + r == n and a[i+r] == 1:\n                ans += 1\n            else:  # i + r > n\n                return -1\n            continue\n        if a[i+r] == 1:\n            ans += 1\n            continue\n        if a[i+2*r] == 1:\n            ans += 2\n            continue\n        return -1\n    return ans\n\n\ndef main():\n    n, r, a = get_input()\n    ans = solve(n, r, a)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())  # read n and r\n    a = list(map(int, sys.stdin.readline().split()))\n    heaters = []  # array of heaters\n    for i in range(n):\n        if a[i] == 1:  # if heater is here\n            heaters.append(i)\n    if len(heaters) == 0:  # if there are no heaters\n        print(-1)\n        return\n    heaters.append(n)  # add right bound\n    heaters.insert(0, -r)  # add left bound\n    i = 0\n    ans = 0  # answer\n    while i < len(heaters) - 1:\n        if heaters[i] + r - 1 >= heaters[i + 1]:  # if the next heater is in radius of the current heater\n            heaters.pop(i)\n        else:\n            i += 1\n            ans += 1  # add 1 to answer\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())  # read n and r\n    a = list(map(int, sys.stdin.readline().split()))\n    heaters = []  # array of heaters\n    for i in range(n):\n        if a[i] == 1:  # if heater is here\n            heaters.append(i)\n    if len(heaters) == 0:  # if there are no heaters\n        print(-1)\n        return\n    heaters.append(n + r)  # add right bound\n    heaters.insert(0, -r - 1)  # add left bound\n    i = 0\n    ans = 0  # answer\n    while i < len(heaters) - 1:\n        if heaters[i] + r - 1 >= heaters[i + 1]:  # if the next heater is in radius of the current heater\n            heaters.pop(i)\n        else:\n            i += 1\n            ans += 1  # add 1 to answer\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, r = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    heaters = [-r]\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n    if len(heaters) == 0:\n        print(-1)\n        return\n    heaters.append(n)\n    i = 0\n    ans = 0\n    while i < len(heaters) - 1:\n        if heaters[i] + r - 1 >= heaters[i + 1]:\n            heaters.pop(i)\n        else:\n            i += 1\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]