2022-04-12 19:51:01.013905 num operations 2
2022-04-12 19:51:01.013914 size on input set 1
2022-04-12 19:51:04.052352 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(A, B, C, D, E)\n\nprint(last)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdi\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    },
    {
      "index": 2,
      "text": "\n#\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    }
  ],
  "created": 1649793061,
  "object": "edit"
}
2022-04-12 19:51:04.052560 fix spelling mistakes 3 ['\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(A, B, C, D, E)\n\nprint(last)\n', '\n\nfrom sys import stdi\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n', '\n#\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n']
2022-04-12 19:51:04.052585 size on output set 3
2022-04-12 19:51:04.052591 size on input set 3
2022-04-12 19:51:06.032700 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    }
  ],
  "created": 1649793064,
  "object": "edit"
}
2022-04-12 19:51:06.032870 fix syntax errors 3 ['\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n', '\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n', '\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n']
2022-04-12 19:51:07.815477 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n"
    }
  ],
  "created": 1649793066,
  "object": "edit"
}
2022-04-12 19:51:07.815666 fix syntax errors 3 ['\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n', '\n#!/usr/bin/env python\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n', '\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(last, A)\nlast = max(last, B)\nlast = max(last, C)\nlast = max(last, D)\nlast = max(last, E)\n\nprint(last)\n']
2022-04-12 19:51:10.135406 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\n\nlast = 0\nlast = max(A, B, C, D, E)\n\nprint(last)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(A, B, C, D, E, last)\n\nprint(last)\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\nlast = max(A, B, C, D, E)\n\nprint(last)\n"
    }
  ],
  "created": 1649793067,
  "object": "edit"
}
2022-04-12 19:51:10.135584 fix syntax errors 3 ['\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\n\nlast = 0\nlast = max(A, B, C, D, E)\n\nprint(last)\n', '\n\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\n\nlast = 0\nlast = max(A, B, C, D, E, last)\n\nprint(last)\n', '\nfrom sys import stdin\n\nA = int(stdin.readline())\nB = int(stdin.readline())\nC = int(stdin.readline())\nD = int(stdin.readline())\nE = int(stdin.readline())\nlast = max(A, B, C, D, E)\n\nprint(last)\n']
2022-04-12 19:51:10.135608 size on output set 6
2022-04-12 19:51:10.135619 num operations 2
2022-04-12 19:51:10.135626 size on input set 1
2022-04-12 19:51:12.829425 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\na, b, c, d, e = [int(input()) for _ in range(5)] \n\nprint(max(a, b, c, d, e))\n"
    },
    {
      "index": 1,
      "text": "\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\n"
    },
    {
      "index": 2,
      "text": "\n"
    }
  ],
  "created": 1649793070,
  "object": "edit"
}
2022-04-12 19:51:12.829668 fix spelling mistakes 3 ['\n\na, b, c, d, e = [int(input()) for _ in range(5)] \n\nprint(max(a, b, c, d, e))\n', '\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\n', '\n']
2022-04-12 19:51:12.829689 size on output set 3
2022-04-12 19:51:12.829695 size on input set 3
2022-04-12 19:51:17.396219 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nprint(n - max(a, b, c, d, e) + 1)\n"
    },
    {
      "index": 2,
      "text": "\n\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\n"
    }
  ],
  "created": 1649793072,
  "object": "edit"
}
2022-04-12 19:51:17.396388 fix syntax errors 3 ['\n\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\n', '\n\nn = int(input())\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\nprint(n - max(a, b, c, d, e) + 1)\n', '\n\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\n']
2022-04-12 19:51:20.110724 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(max(int(input()) for _ in range(5)))\n"
    },
    {
      "index": 1,
      "text": "\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\nprint(min(a, b, c, d, e))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\na, b, c, d, e = [int(input()) for _ in range(5)]\nprint(max(a, b, c, d, e))\n"
    }
  ],
  "created": 1649793077,
  "object": "edit"
}
2022-04-12 19:51:20.110898 fix syntax errors 3 ['\nprint(max(int(input()) for _ in range(5)))\n', '\na, b, c, d, e = [int(input()) for _ in range(5)]\n\nprint(max(a, b, c, d, e))\nprint(min(a, b, c, d, e))\n', '#!/usr/bin/env python\na, b, c, d, e = [int(input()) for _ in range(5)]\nprint(max(a, b, c, d, e))\n']
2022-04-12 19:51:48.837687 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "The file is not there\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport time\nfrom datetime import datetime\nfrom subprocess import Popen, PIPE\n\n# \u811a\u672c\u6240\u5728\u76ee\u5f55\nSCRIPT_PATH = os.path.split(os.path.realpath(__file__))[0]\n\n# \u914d\u7f6e\u6587\u4ef6\u76ee\u5f55\nCONFIG_PATH = os.path.join(SCRIPT_PATH, 'conf')\n\n# \u914d\u7f6e\u6587\u4ef6\u540d\nCONFIG_FILE = os.path.join(CONFIG_PATH, 'config.ini')\n\n# \u5f00\u59cb\u65f6\u95f4\nstart_time = datetime.now()\n\n# \u65e5\u5fd7\u6587\u4ef6\nLOG_FILE = os.path.join(SCRIPT_PATH, 'log', '%s.log' % start_time.strftime('%Y%m%d%H%M'))\n\n# \u65e5\u5fd7\u6587\u4ef6\nLOG_HANDLE = open(LOG_FILE, 'w')\n\n# \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\nCONFIG = {}\nwith open(CONFIG_FILE, 'r') as f:\n    for line in f:\n        line = line.strip()\n        if not line or line.startswith('#'):\n            continue\n        key, value = line.split('=')\n        CONFIG[key.strip()] = value.strip()\n\n\ndef log(content):\n    LOG_HANDLE.write('%s %s\\n' % (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), content))\n    LOG_HANDLE.flush()\n\n\ndef get_file_list(path):\n    file_list = []\n    for f in os.listdir(path):\n        file_path = os.path.join(path, f)\n        if not os.path.isfile(file_path):\n            continue\n        file_list.append(file_path)\n    return file_list\n\n\ndef get_size(f):\n    size = os.path.getsize(f)\n    return size\n\n\ndef get_file_type(f):\n    cmd = 'file %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    file_type = stdout.split(':')[1].strip().lower()\n    return file_type\n\n\ndef get_md5(f):\n    cmd = 'md5sum %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    md5 = stdout.split()[0].strip()\n    return md5\n\n\ndef get_sha1(f):\n    cmd = 'sha1sum %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    sha1 = stdout.split()[0].strip()\n    return sha1\n\n\ndef get_sha256(f):\n    cmd = 'sha256sum %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    sha256 = stdout.split()[0].strip()\n    return sha256\n\n\ndef get_ssdeep(f):\n    cmd = 'ssdeep %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    ssdeep = stdout.split()[1].strip()\n    return ssdeep\n\n\ndef main():\n    log('start')\n    log('config file: %s' % CONFIG_FILE)\n    log('log file: %s' % LOG_FILE)\n    log('start time: %s' % start_time)\n    log('=' * 40)\n\n    scan_path = CONFIG.get('scan_path')\n    if not scan_path:\n        log('scan_path not config, exit')\n        sys.exit(1)\n\n    log('scan_path: %s' % scan_path)\n\n    if not os.path.exists(scan_path):\n        log('scan_path not exists, exit')\n        sys.exit(1)\n\n    log('=' * 40)\n\n    file_list = get_file_list(scan_path)\n    log('file count: %s' % len(file_list))\n\n    log('=' * 40)\n\n    for f in file_list:\n        log(f)\n\n    log('=' * 40)\n\n    log('end')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python\n\nimport sys\nimport os\nimport time\n\ndef main():\n    if len(sys.argv)!=2:\n        print(\"Usage: \", sys.argv[0], \" <file>\")\n        sys.exit(0)\n\n    filename = sys.argv[1]\n\n    if os.path.exists(filename):\n        print(\"File %s exists\" % filename)\n        print(\"Last modified: %s\" % time.ctime(os.path.getmtime(filename)))\n        print(\"Created: %s\" % time.ctime(os.path.getctime(filename)))\n    else:\n        print(\"File %s does not exist\" % filename)\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649793080,
  "object": "edit"
}
2022-04-12 19:51:48.837889 fix syntax errors 3 ['The file is not there\n', "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport time\nfrom datetime import datetime\nfrom subprocess import Popen, PIPE\n\n# 脚本所在目录\nSCRIPT_PATH = os.path.split(os.path.realpath(__file__))[0]\n\n# 配置文件目录\nCONFIG_PATH = os.path.join(SCRIPT_PATH, 'conf')\n\n# 配置文件名\nCONFIG_FILE = os.path.join(CONFIG_PATH, 'config.ini')\n\n# 开始时间\nstart_time = datetime.now()\n\n# 日志文件\nLOG_FILE = os.path.join(SCRIPT_PATH, 'log', '%s.log' % start_time.strftime('%Y%m%d%H%M'))\n\n# 日志文件\nLOG_HANDLE = open(LOG_FILE, 'w')\n\n# 读取配置文件\nCONFIG = {}\nwith open(CONFIG_FILE, 'r') as f:\n    for line in f:\n        line = line.strip()\n        if not line or line.startswith('#'):\n            continue\n        key, value = line.split('=')\n        CONFIG[key.strip()] = value.strip()\n\n\ndef log(content):\n    LOG_HANDLE.write('%s %s\\n' % (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), content))\n    LOG_HANDLE.flush()\n\n\ndef get_file_list(path):\n    file_list = []\n    for f in os.listdir(path):\n        file_path = os.path.join(path, f)\n        if not os.path.isfile(file_path):\n            continue\n        file_list.append(file_path)\n    return file_list\n\n\ndef get_size(f):\n    size = os.path.getsize(f)\n    return size\n\n\ndef get_file_type(f):\n    cmd = 'file %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    file_type = stdout.split(':')[1].strip().lower()\n    return file_type\n\n\ndef get_md5(f):\n    cmd = 'md5sum %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    md5 = stdout.split()[0].strip()\n    return md5\n\n\ndef get_sha1(f):\n    cmd = 'sha1sum %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    sha1 = stdout.split()[0].strip()\n    return sha1\n\n\ndef get_sha256(f):\n    cmd = 'sha256sum %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    sha256 = stdout.split()[0].strip()\n    return sha256\n\n\ndef get_ssdeep(f):\n    cmd = 'ssdeep %s' % f\n    p = Popen(cmd, shell=True, stdout=PIPE)\n    stdout, stderr = p.communicate()\n    if p.returncode != 0:\n        return None\n    ssdeep = stdout.split()[1].strip()\n    return ssdeep\n\n\ndef main():\n    log('start')\n    log('config file: %s' % CONFIG_FILE)\n    log('log file: %s' % LOG_FILE)\n    log('start time: %s' % start_time)\n    log('=' * 40)\n\n    scan_path = CONFIG.get('scan_path')\n    if not scan_path:\n        log('scan_path not config, exit')\n        sys.exit(1)\n\n    log('scan_path: %s' % scan_path)\n\n    if not os.path.exists(scan_path):\n        log('scan_path not exists, exit')\n        sys.exit(1)\n\n    log('=' * 40)\n\n    file_list = get_file_list(scan_path)\n    log('file count: %s' % len(file_list))\n\n    log('=' * 40)\n\n    for f in file_list:\n        log(f)\n\n    log('=' * 40)\n\n    log('end')\n\n\nif __name__ == '__main__':\n    main()\n", '#!/usr/bin/python\n\nimport sys\nimport os\nimport time\n\ndef main():\n    if len(sys.argv)!=2:\n        print("Usage: ", sys.argv[0], " <file>")\n        sys.exit(0)\n\n    filename = sys.argv[1]\n\n    if os.path.exists(filename):\n        print("File %s exists" % filename)\n        print("Last modified: %s" % time.ctime(os.path.getmtime(filename)))\n        print("Created: %s" % time.ctime(os.path.getctime(filename)))\n    else:\n        print("File %s does not exist" % filename)\n        sys.exit(1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 19:51:48.838022 size on output set 8
