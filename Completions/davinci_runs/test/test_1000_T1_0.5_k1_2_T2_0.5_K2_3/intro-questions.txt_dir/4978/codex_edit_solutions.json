["\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nprint(grid)\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0 and grid[i][j-1] == '.':\n                        new_grid[i][j-1] = 'V'\n                    elif j < m-1 and grid[i][j+1] == '.':\n                        new_grid[i][j+1] = 'V'\n                    else:\n                        new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "import sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nprint(grid)\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\n\nfor row in grid:\n    print(''.join(row))\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for _ in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    #print(grid)\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.':\n                    grid[i][j - 1] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j + 1] == '.':\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "import sys\n\nwhile True:\n    try:\n        N = int(sys.stdin.readline().strip())\n        print(N)\n    except:\n        break\n", "\n\ndef main():\n\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n\n    while True:\n\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n# \nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water (1, 2, 3)\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water (1 -> 3)\n    # * if water cell is above stone cell, air cells left and right of water cell turn into water (1 -> 3)\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to the sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \"1\", \"2\", and \"3\"\n    #   1 = air\n    #   2 = stone\n    #   3 = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == '3':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '1':\n                            grid[i-1][j] = '3'\n                        if grid[i-1][j+1] == '1':\n                            grid[i-1][j+1] = '3'\n                    elif j == M-1:\n                        if grid[i-1][j] == '1':\n                            grid[i-1][j] = '3'\n                        if grid[i-1][j-1] == '1':\n                            grid[i-1][j-1] = '3'\n                    else:\n                        if grid[i-1][j-1] == '1':\n                            grid[i-1][j-1] = '3'\n                        if grid[i-1][j] == '1':\n                            grid[i-1][j] = '3'\n                        if grid[i-1][j+1] == '1':\n                            grid[i-1][j+1] = '3'\n                else:\n                    if grid[i-1][j] == '1':\n                        grid[i-1][j] = '3'\n                    elif grid[i-1][j] == '2':\n                        if j == 0:\n                            if grid[i][j+1] == '1':\n                                grid[i][j+1] = '3'\n                        elif j == M-1:\n                            if grid[i][j-1] == '1':\n                                grid[i][j-1] = '3'\n                        else:\n                            if grid[i][j-1] == '1':\n                                grid[i][j-1] = '3'\n                            if grid[i][j+1] == '1':\n                                grid[i][j+1] = '3'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n# https://dmoj.ca/problem/ccc08s1\nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if j-1 >= 0 and grid[i][j-1] == '.':\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if j+1 < m and grid[i][j+1] == '.':\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n                        \nfor i in range(n):\n    print(grid[i])\n", "\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'v':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.': grid[i-1] = grid[i-1][:j] + \"v\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#': \n                    if (j-1 >= 0) and (grid[i][j-1] == '.'): grid[i] = grid[i][:j-1] + \"v\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'): grid[i] = grid[i][:j+1] + \"v\" + grid[i][j+2:]\n        if grid[i][j] == '^':\n            if i+1 < n:\n                if grid[i+1][j] == '.': grid[i+1] = grid[i+1][:j] + \"^\" + grid[i+1][j+1:]\n                if grid[i+1][j] == '#': \n                    if (j-1 >= 0) and (grid[i][j-1] == '.'): grid[i] = grid[i][:j-1] + \"^\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'): grid[i] = grid[i][:j+1] + \"^\" + grid[i][j+2:]\n        if grid[i][j] == '>':\n            if j+1 < m:\n                if grid[i][j+1] == '.': grid[i] = grid[i][:j+1] + \">\" + grid[i][j+2:]\n                if grid[i][j+1] == '#': \n                    if (i-1 >= 0) and (grid[i-1][j] == '.'): grid[i-1] = grid[i-1][:j] + \">\" + grid[i-1][j+1:]\n                    if (i+1 < n) and (grid[i+1][j] == '.'): grid[i+1] = grid[i+1][:j] + \">\" + grid[i+1][j+1:]\n        if grid[i][j] == '<':\n            if j-1 >= 0:\n                if grid[i][j-1] == '.': grid[i] = grid[i][:j-1] + \"<\" + grid[i][j:]\n                if grid[i][j-1] == '#': \n                    if (i-1 >= 0) and (grid[i-1][j] == '.'): grid[i-1] = grid[i-1][:j] + \"<\" + grid[i-1][j+1:]\n                    if (i+1 < n) and (grid[i+1][j] == '.'): grid[i+1] = grid[i+1][:j] + \"<\" + grid[i+1][j+1:]\n                \nfor i in range(n):\n    print(grid[i])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Jul 21 13:57:03 2020\n\n@author: konrad\n\"\"\"\n\n\n\n#N, M = map(int, input().split())\n#grid = [list(input()) for _ in range(N)]\n\n#for row in range(N):\n#    for col in range(M):\n#        if grid[row][col] == \"V\":\n#            if row == 0:\n#                pass\n#            elif grid[row-1][col] == \".\":\n#                grid[row-1][col] = \"V\"\n#            elif grid[row-1][col] == \"#\":\n#                if col > 0 and grid[row][col-1] == \".\":\n#                    grid[row][col-1] = \"V\"\n#                if col < M-1 and grid[row][col+1] == \".\":\n#                    grid[row][col+1] = \"V\"\n\n#for row in range(N):\n#    print(\"\".join(grid[row]))\n\nwhile True:\n    try:\n        print(int(input()) ** 2)\n    except:\n        break\n", "\ndef get_input():\n    n, m = [int(i) for i in input().split()]\n\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    \n    return grid\n\ndef print_output(grid):\n    for i in range(len(grid)):\n        print(grid[i])\n\ndef move_virus(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'V':\n                if i-1 >= 0:\n                    if grid[i-1][j] == '.':\n                        grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                    if grid[i-1][j] == '#':\n                        if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                            grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                        if (j+1 < len(grid[i])) and (grid[i][j+1] == '.'):\n                            grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n\nif __name__ == \"__main__\":\n    grid = get_input()\n    move_virus(grid)\n    print_output(grid)\n", "\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ngrid = [input().strip() for _ in range(N)]\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "N, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row > 0 and grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\" and grid[row-1][col-1] != \"#\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\" and grid[row-1][col+1] != \"#\":\n                    grid[row][col+1] = \"V\"\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.' or grid[i-1][j] == 'V':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#' or grid[i-1][j] == 'O':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n            elif grid[i][j] == 'O':\n                if i == 0:\n                    new_grid[i][j] = 'O'\n                elif grid[i-1][j] == '.' or grid[i-1][j] == 'V':\n                    new_grid[i-1][j] = 'O'\n                elif grid[i-1][j] == '#' or grid[i-1][j] == 'O':\n                    if j > 0:\n                        new_grid[i][j-1] = 'O'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'O'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left and right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to the sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   '.' = air\n    #   '#' = stone\n    #   'V' = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is below air cell, air cell turns into water\n    # * if water cell is below stone cell, air cells left or right of water cell turn into water\n    # * each second, water spreads\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n\n    # spread water\n    for i in range(N - 1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N - 1:\n                    if j == 0:\n                        if grid[i - 1][j] == '.':\n                            grid[i - 1][j] = 'V'\n                        if grid[i - 1][j + 1] == '.':\n                            grid[i - 1][j + 1] = 'V'\n                    elif j == M - 1:\n                        if grid[i - 1][j] == '.':\n                            grid[i - 1][j] = 'V'\n                        if grid[i - 1][j - 1] == '.':\n                            grid[i - 1][j - 1] = 'V'\n                    else:\n                        if grid[i - 1][j - 1] == '.':\n                            grid[i - 1][j - 1] = 'V'\n                        if grid[i - 1][j] == '.':\n                            grid[i - 1][j] = 'V'\n                        if grid[i - 1][j + 1] == '.':\n                            grid[i - 1][j + 1] = 'V'\n                else:\n                    if grid[i - 1][j] == '.':\n                        grid[i - 1][j] = 'V'\n                    elif grid[i - 1][j] == '#':\n                        if j == 0:\n                            if grid[i][j + 1] == '.':\n                                grid[i][j + 1] = 'V'\n                        elif j == M - 1:\n                            if grid[i][j - 1] == '.':\n                                grid[i][j - 1] = 'V'\n                        else:\n                            if grid[i][j - 1] == '.':\n                                grid[i][j - 1] = 'V'\n                            if grid[i][j + 1] == '.':\n                                grid[i][j + 1] = 'V'\n\n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = [int(i) for i in input().split()]  # n, m = rows and columns\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i - 1 >= 0:\n                if grid[i - 1][j] == '.':\n                    grid[i - 1] = grid[i - 1][:j] + \"V\" + grid[i - 1][j + 1:]\n                if grid[i - 1][j] == '#':\n                    if (j - 1 >= 0) and (grid[i][j - 1] == '.'):\n                        grid[i] = grid[i][:j - 1] + \"V\" + grid[i][j:]\n                    if (j + 1 < m) and (grid[i][j + 1] == '.'):\n                        grid[i] = grid[i][:j + 1] + \"V\" + grid[i][j + 2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i - 1][j] == \".\":\n                        grid[i - 1][j] = \"v\"\n                        changed = True\n                    if i < n - 1 and grid[i + 1][j] == \".\":\n                        grid[i + 1][j] = \"v\"\n                        changed = True\n                    if j < m - 1 and grid[i][j + 1] == \".\":\n                        grid[i][j + 1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j - 1] == \".\":\n                        grid[i][j - 1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop.\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    # print(grid) # debug\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    # print(grid) # debug\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i - 1][j] == \".\":\n                        grid[i - 1][j] = \"v\"\n                        changed = True\n                    if i < n - 1 and grid[i + 1][j] == \".\":\n                        grid[i + 1][j] = \"v\"\n                        changed = True\n                    if j < m - 1 and grid[i][j + 1] == \".\":\n                        grid[i][j + 1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j - 1] == \".\":\n                        grid[i][j - 1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    # print(grid) # debug\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    # print(grid) # debug\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input().split()\n    rows = int(input_[0])  # type: int\n    cols = int(input_[1])  # type: int\n\n    grid = []\n    for i in range(rows):\n        row = input()  # type: str\n        grid.append(row)\n\n    # This is the main loop.\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j+1:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j+1:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "from sys import stdin\n\nif __name__ == '__main__':\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for i in range(N - 1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i + 1 < N and grid[i + 1][j] == '.':\n                    grid[i + 1] = grid[i + 1][:j] + 'V' + grid[i + 1][j + 1:]\n                if j - 1 >= 0 and grid[i][j - 1] == '.':\n                    grid[i] = grid[i][:j - 1] + 'V' + grid[i][j:]\n                if j + 1 < M and grid[i][j + 1] == '.':\n                    grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n    for i in range(N):\n        print(grid[i])\n", "import sys\nsys.setrecursionlimit(10**7)\nINTMAX = 9223372036854775807\nINTMIN = -9223372036854775808\nDVSR = 1000000007\ndef POW(x, y): return pow(x, y, DVSR)\ndef INV(x, m=DVSR): return pow(x, m - 2, m)\ndef DIV(x, y, m=DVSR): return (x * INV(y, m)) % m\ndef LI(): return [int(x) for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LS(): return input().split()\ndef II(): return int(input())\ndef FLIST(n):\n    res = [1]\n    for i in range(1, n+1): res.append(res[i-1]*i%DVSR)\n    return res\n\n\ndef main():\n    N = II()\n    arr = LI()\n\n    res = [0] * N\n    for i in range(N - 1, -1, -1):\n        res[i] = res[i+1] + arr[i]\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i - 1 >= 0:\n                if grid[i - 1][j] == '.':\n                    grid[i - 1] = grid[i - 1][:j] + \"V\" + grid[i - 1][j + 1:]\n                if grid[i - 1][j] == '#':\n                    if (j - 1 >= 0) and (grid[i][j - 1] == '.'):\n                        grid[i] = grid[i][:j - 1] + \"V\" + grid[i][j:]\n                    if (j + 1 < m) and (grid[i][j + 1] == '.'):\n                        grid[i] = grid[i][:j + 1] + \"V\" + grid[i][j + 2:]\n\nfor i in range(n):\n    print(grid[i])\n", "import sys\n\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()] \n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for i in range(N - 1, -1, -1): \n        for j in range(M): \n            if grid[i][j] == 'V': \n                if i + 1 < N and grid[i + 1][j] == '.': \n                    grid[i + 1] = grid[i + 1][:j] + 'V' + grid[i + 1][j + 1:] \n                if j - 1 >= 0 and grid[i][j - 1] == '.': \n                    grid[i] = grid[i][:j - 1] + 'V' + grid[i][j:] \n                if j + 1 < M and grid[i][j + 1] == '.': \n                    grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:] \n    for i in range(N): \n        print(grid[i]) \n\nif __name__ == '__main__': \n    main() \n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop.\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                        if grid[i][j] == 'V':\n                            grid[i] = grid[i][:j] + '.' + grid[i][j+1:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                        if grid[i][j] == 'V':\n                            grid[i] = grid[i][:j] + '.' + grid[i][j+1:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\ngrid = [input().strip() for _ in range(N)]\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                new_grid[i][j] = 'V'\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    N, M = [int(x) for x in input().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in input().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]), flush=True)\n\nmain()\n", "\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for row in range(N - 1, -1, -1):\n        for col in range(M):\n            if grid[row][col] == 'V':\n                if row + 1 < N and grid[row + 1][col] == '.':\n                    grid[row + 1] = grid[row + 1][:col] + 'V' + grid[row + 1][col + 1:]\n                if col - 1 >= 0 and grid[row][col - 1] == '.':\n                    grid[row] = grid[row][:col - 1] + 'V' + grid[row][col:]\n                if col + 1 < M and grid[row][col + 1] == '.':\n                    grid[row] = grid[row][:col + 1] + 'V' + grid[row][col + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for row in range(N):\n        for col in range(M):\n            if grid[row][col] == 'v':\n                if row + 1 < N and grid[row + 1][col] == '.' and grid[row][col] == 'v':\n                    grid[row + 1] = grid[row + 1][:col] + 'V' + grid[row + 1][col + 1:]\n                if col - 1 >= 0 and grid[row][col - 1] == '.' and grid[row][col] == 'v':\n                    grid[row] = grid[row][:col - 1] + 'V' + grid[row][col:]\n                if col + 1 < M and grid[row][col + 1] == '.' and grid[row][col] == 'v':\n                    grid[row] = grid[row][:col + 1] + 'V' + grid[row][col + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N, M = map(int, input().split())\n    grid = [list(input()) for _ in range(N)]\n    for row in range(N):\n        for col in range(M):\n            if grid[row][col] == \"V\":\n                if row == 0:\n                    pass\n                elif grid[row-1][col] == \".\":\n                    grid[row-1][col] = \"V\"\n                elif grid[row-1][col] == \"#\":\n                    if col > 0 and grid[row][col-1] == \".\" and grid[row-1][col-1] != \"#\":\n                        grid[row][col-1] = \"V\"\n                    if col < M-1 and grid[row][col+1] == \".\" and grid[row-1][col+1] != \"#\":\n                        grid[row][col+1] = \"V\"\n    for row in range(N):\n        print(\"\".join(grid[row]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input()\n    input_ = input_.split()\n    rows = int(input_[0])\n    cols = int(input_[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop.\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j+1:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j+1:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# n = int(input())\n# m = int(input())\n# grid = []\n# for i in range(n):\n#     grid.append(list(input()))\n\n# print(grid)\n\n# while True:\n#     new_grid = [['.' for i in range(m)] for j in range(n)]\n#     for i in range(n):\n#         for j in range(m):\n#             if grid[i][j] == '.':\n#                 new_grid[i][j] = '.'\n#             elif grid[i][j] == '#':\n#                 new_grid[i][j] = '#'\n#             elif grid[i][j] == 'V':\n#                 if i == 0:\n#                     new_grid[i][j] = 'V'\n#                 elif grid[i-1][j] == '.':\n#                     new_grid[i-1][j] = 'V'\n#                 elif grid[i-1][j] == '#':\n#                     if j > 0:\n#                         new_grid[i][j-1] = 'V'\n#                     if j < m-1:\n#                         new_grid[i][j+1] = 'V'\n#                 new_grid[i][j] = 'V'\n#     if grid == new_grid:\n#         break\n#     grid = new_grid\n\n# for row in grid:\n#     print(''.join(row))\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0 and grid[i][j-1] == '.':\n                        new_grid[i][j-1] = 'V'\n                    elif j < m-1 and grid[i][j+1] == '.':\n                        new_grid[i][j+1] = 'V'\n                    else:\n                        new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is below air cell, air cell turns into water\n    # * if water cell is below stone cell, air cells left or right of water cell turn into water\n    # * each second, water spreads\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    # for i in range(N-1, -1, -1):\n    #     for j in range(M):\n    #         if grid[i][j] == 'V':\n    #             if i == N-1:\n    #                 if j == 0:\n    #                     if grid[i-1][j] == '.':\n    #                         grid[i-1][j] = 'V'\n    #                     if grid[i-1][j+1] == '.':\n    #                         grid[i-1][j+1] = 'V'\n    #                 elif j == M-1:\n    #                     if grid[i-1][j] == '.':\n    #                         grid[i-1][j] = 'V'\n    #                     if grid[i-1][j-1] == '.':\n    #                         grid[i-1][j-1] = 'V'\n    #                 else:\n    #                     if grid[i-1][j-1] == '.':\n    #                         grid[i-1][j-1] = 'V'\n    #                     if grid[i-1][j] == '.':\n    #                         grid[i-1][j] = 'V'\n    #                     if grid[i-1][j+1] == '.':\n    #                         grid[i-1][j+1] = 'V'\n    #             else:\n    #                 if grid[i-1][j] == '.':\n    #                     grid[i-1][j] = 'V'\n    #                 elif grid[i-1][j] == '#':\n    #                     if j == 0:\n    #                         if grid[i][j+1] == '.':\n    #                             grid[i][j+1] = 'V'\n    #                     elif j == M-1:\n    #                         if grid[i][j-1] == '.':\n    #                             grid[i][j-1] = 'V'\n    #                     else:\n    #                         if grid[i][j-1] == '.':\n    #                             grid[i][j-1] = 'V'\n    #                         if grid[i][j+1] == '.':\n    #                             grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    # print(grid) # debug\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    # print(grid) # debug\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    # print(grid) # debug\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    # print(grid) # debug\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    # e.g. if water cell is at bottom most row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    # . = air\n    # # = stone\n    # V = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, m = [int(i) for i in input().split()] #n, m = rows and columns\ngrid = []\nfor i in range(n):\n    grid.append(input())\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i - 1 >= 0:\n                if grid[i - 1][j] == '.':\n                    grid[i - 1] = grid[i - 1][:j] + \"V\" + grid[i - 1][j + 1:]\n                if grid[i - 1][j] == '#':\n                    if (j - 1 >= 0) and (grid[i][j - 1] == '.'):\n                        grid[i] = grid[i][:j - 1] + \"V\" + grid[i][j:]\n                    if (j + 1 < m) and (grid[i][j + 1] == '.'):\n                        grid[i] = grid[i][:j + 1] + \"V\" + grid[i][j + 2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is below air cell, air cell turns into water\n    # * if water cell is below stone cell, air cells left or right of water cell turn into water\n    # * each second, water spreads\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water until it stops\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid_copy = [row[:] for row in grid]\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left and right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to the sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    while grid != grid_copy:\n        for i in range(N-1, -1, -1):\n            for j in range(M):\n                if grid[i][j] == 'V':\n                    if i == N-1:\n                        if j == 0:\n                            if grid[i-1][j] == '.':\n                                grid_copy[i-1][j] = 'V'\n                            if grid[i-1][j+1] == '.':\n                                grid_copy[i-1][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i-1][j] == '.':\n                                grid_copy[i-1][j] = 'V'\n                            if grid[i-1][j-1] == '.':\n                                grid_copy[i-1][j-1] = 'V'\n                        else:\n                            if grid[i-1][j-1] == '.':\n                                grid_copy[i-1][j-1] = 'V'\n                            if grid[i-1][j] == '.':\n                                grid_copy[i-1][j] = 'V'\n                            if grid[i-1][j+1] == '.':\n                                grid_copy[i-1][j+1] = 'V'\n                    else:\n                        if grid[i-1][j] == '.':\n                            grid_copy[i-1][j] = 'V'\n                        elif grid[i-1][j] == '#':\n                            if j == 0:\n                                if grid[i][j+1] == '.':\n                                    grid_copy[i][j+1] = 'V'\n                            elif j == M-1:\n                                if grid[i][j-1] == '.':\n                                    grid_copy[i][j-1] = 'V'\n                            else:\n                                if grid[i][j-1] == '.':\n                                    grid_copy[i][j-1] = 'V'\n                                if grid[i][j+1] == '.':\n                                    grid_copy[i][j+1] = 'V'\n        grid = [row[:] for row in grid_copy]\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid_copy[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_str = input()\n    input_str = input_str.split()\n    rows = int(input_str[0])\n    cols = int(input_str[1])\n\n    grid = []\n    for i in range(rows):\n        input_str = input()\n        grid.append(input_str)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop.\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for i in range(N - 1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i + 1 < N and grid[i + 1][j] == '.': grid[i + 1] = grid[i + 1][:j] + 'V' + grid[i + 1][j + 1:]\n                if j - 1 >= 0 and grid[i][j - 1] == '.': grid[i] = grid[i][:j - 1] + 'V' + grid[i][j:]\n                if j + 1 < M and grid[i][j + 1] == '.': grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n    for i in range(N):\n        print(grid[i])\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = [[] for _ in range(N)]\n    for i in range(N):\n        grid[i] = [x for x in sys.stdin.readline().strip()]\n    for i in range(N):\n        for j in range(M): \n            if grid[i][j] == 'V': \n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.': \n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.': \n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]), file=sys.stdout)\n\nmain()\n", "import sys\nsys.setrecursionlimit(10**7)\nINTMAX = 9223372036854775807\nINTMIN = -9223372036854775808\nDVSR = 1000000007\ndef POW(x, y): return pow(x, y, DVSR)\ndef INV(x, m=DVSR): return pow(x, m - 2, m)\ndef DIV(x, y, m=DVSR): return (x * INV(y, m)) % m\ndef LI(): return [int(x) for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LS(): return input().split()\ndef II(): return int(input())\ndef FLIST(n):\n    res = [1]\n    for i in range(1, n+1): res.append(res[i-1] * i % DVSR)\n    return res\n\n\ndef main():\n    N = II()\n    arr = LI()\n\n    res = [0] * N\n    for i in range(N-1, -1, -1):\n        res[i] = res[i+1] + arr[i]\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    #print(grid) # debug\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'v'\n    #print(grid) # debug\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'v':\n                    if i > 0 and grid[i-1][j] == '.':\n                        grid[i-1][j] = 'v'\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == '.':\n                        grid[i+1][j] = 'v'\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    #print(grid) # debug\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    #print(grid) # debug\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "# import sys\n#\n# def main():\n#     N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n#     grid = []\n#     for i in range(N):\n#         grid.append([x for x in sys.stdin.readline().strip()])\n#     for i in range(N):\n#         for j in range(M):\n#             if grid[i][j] == 'V':\n#                 grid[i][j] = '.'\n#                 if i < N - 1 and grid[i + 1][j] == '.':\n#                     grid[i + 1][j] = 'V'\n#                 if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n#                     grid[i][j - 1] = 'V'\n#                     grid[i][j + 1] = 'V'\n#     for i in range(N):\n#         print(\"\".join(grid[i]))\n#\n# main()\n\nfrom collections import deque\nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = [[] for _ in range(N)]\n    queue = deque()\n    for i in range(N):\n        grid[i] = [x for x in sys.stdin.readline().strip()]\n        for j in range(M):\n            if grid[i][j] == 'V':\n                queue.append((i, j))\n    while queue:\n        x, y = queue.popleft()\n        grid[x][y] = '.'\n        if x < N - 1 and grid[x + 1][y] == '.':\n            grid[x + 1][y] = 'V'\n            queue.append((x + 1, y))\n        if y > 0 and y < M - 1 and grid[x][y - 1] == '.' and grid[x][y + 1] == '.':\n            grid[x][y - 1] = 'V'\n            grid[x][y + 1] = 'V'\n            queue.append((x, y - 1))\n            queue.append((x, y + 1))\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "import sys\nsys.setrecursionlimit(10**7)\nINTMAX = 9223372036854775807\nINTMIN = -9223372036854775808\nDVSR = 1000000007\ndef POW(x, y): return pow(x, y, DVSR)\ndef INV(x, m=DVSR): return pow(x, m - 2, m)\ndef DIV(x, y, m=DVSR): return (x * INV(y, m)) % m\ndef LI(): return [int(x) for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LS(): return input().split()\ndef II(): return int(input())\ndef FLIST(n):\n    res = [1]\n    for i in range(1, n+1): res.append(res[i-1]*i%DVSR)\n    return res\ndef solve(N, arr):\n    res = 0\n    for i in range(1, N):\n        if arr[i-1] > arr[i]:\n            res += arr[i-1] - arr[i]\n            arr[i] = arr[i-1]\n    return res\n\n\n\ndef main():\n    N = II()\n    arr = LI()\n\n    print(solve(N, arr))\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Jul 21 13:57:03 2020\n\n@author: konrad\n\"\"\"\n\ndef move(row, col, direction):\n    if direction == \"up\":\n        row -= 1\n    elif direction == \"down\":\n        row += 1\n    elif direction == \"left\":\n        col -= 1\n    elif direction == \"right\":\n        col += 1\n    return (row, col)\n\n\n\ndef print_grid(grid):\n    for row in grid:\n        print(\"\".join(row))\n\n\ndef main():\n    N, M = map(int, input().split())\n    grid = [list(input()) for _ in range(N)]\n    for row in range(N):\n        for col in range(M):\n            if grid[row][col] == \"V\":\n                if row == 0:\n                    pass\n                elif grid[row-1][col] == \".\":\n                    grid[row-1][col] = \"V\"\n                elif grid[row-1][col] == \"#\":\n                    if col > 0 and grid[row][col-1] == \".\":\n                        grid[row][col-1] = \"V\"\n                    if col < M-1 and grid[row][col+1] == \".\":\n                        grid[row][col+1] = \"V\"\n    print_grid(grid)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, m = [int(i) for i in input().split()] #n, m = rows and columns\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n#print(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0 and grid[i-1][j] == '.':\n                grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n            if i-1 >= 0 and grid[i-1][j] == '#':\n                if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                    grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                if (j+1 < m) and (grid[i][j+1] == '.'):\n                    grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\n#https://open.kattis.com/problems/virus\nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n", "\n \nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nprint(grid)\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'v':\n            if i-1 >= 0:\n                grid[i-1] = grid[i-1][:j] + \"v\" + grid[i-1][j+1:]\n            elif i+1 < n:\n                if grid[i+1][j] == '.':\n                    grid[i+1] = grid[i+1][:j] + \"v\" + grid[i+1][j+1:]\n            if j-1 >= 0:\n                if grid[i][j-1] == '.':\n                    grid[i] = grid[i][:j-1] + \"v\" + grid[i][j:]\n            elif j+1 < m:\n                if grid[i][j+1] == '.':\n                    grid[i] = grid[i][:j+1] + \"v\" + grid[i][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "def test(a, b):\n    return a+b\n", "\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottom most row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottom most row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    # for i in range(N-1, -1, -1):\n    #     for j in range(M):\n    #         if grid[i][j] == 'V':\n    #             if i == N-1:\n    #                 if j == 0:\n    #                     if grid[i-1][j] == '.':\n    #                         grid[i-1][j] = 'V'\n    #                     if grid[i-1][j+1] == '.':\n    #                         grid[i-1][j+1] = 'V'\n    #                 elif j == M-1:\n    #                     if grid[i-1][j] == '.':\n    #                         grid[i-1][j] = 'V'\n    #                     if grid[i-1][j-1] == '.':\n    #                         grid[i-1][j-1] = 'V'\n    #                 else:\n    #                     if grid[i-1][j-1] == '.':\n    #                         grid[i-1][j-1] = 'V'\n    #                     if grid[i-1][j] == '.':\n    #                         grid[i-1][j] = 'V'\n    #                     if grid[i-1][j+1] == '.':\n    #                         grid[i-1][j+1] = 'V'\n    #             else:\n    #                 if grid[i-1][j] == '.':\n    #                     grid[i-1][j] = 'V'\n    #                 elif grid[i-1][j] == '#':\n    #                     if j == 0:\n    #                         if grid[i][j+1] == '.':\n    #                             grid[i][j+1] = 'V'\n    #                     elif j == M-1:\n    #                         if grid[i][j-1] == '.':\n    #                             grid[i][j-1] = 'V'\n    #                     else:\n    #                         if grid[i][j-1] == '.':\n    #                             grid[i][j-1] = 'V'\n    #                         if grid[i][j+1] == '.':\n    #                             grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Jul 21 13:57:03 2020\n\n@author: konrad\n\"\"\"\n\n\"\"\"\n\nN, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n\"\"\"\n\n\ndef find_prime_factors(number):\n    \"\"\"\n    Finds all the prime factors of a positive integer\n    Args:\n        number(int): Number to find prime factors\n    Returns:\n        list: List containing prime factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor <= number:\n        if number % divisor == 0:\n            factors.append(divisor)\n            number /= divisor\n        else:\n            divisor += 1\n    return factors\n\n\ndef find_unique_prime_factors_with_count(number):\n    \"\"\"\n    Finds all the unique prime factors of a positive integer and the\n    count of those prime factors\n    Args:\n        number(int): Number to find prime factors\n    Returns:\n        list: List containing prime factors and their count\n    \"\"\"\n    factors = {}\n    divisor = 2\n    while divisor <= number:\n        if number % divisor == 0:\n            if divisor not in factors:\n                factors[divisor] = 0\n            factors[divisor] += 1\n            number /= divisor\n        else:\n            divisor += 1\n    return factors\n\n\ndef find_largest_prime_factor(number):\n    \"\"\"\n    Finds the largest prime factor of a positive integer\n    Args:\n        number(int): Number to find largest prime factor\n    Returns:\n        int: Largest prime factor\n    \"\"\"\n    largest_factor = 1\n    divisor = 2\n    while divisor <= number:\n        if number % divisor == 0:\n            largest_factor = divisor\n            number /= divisor\n        else:\n            divisor += 1\n    return largest_factor\n\n\ndef is_prime(number):\n    \"\"\"\n    Checks if the number is prime\n    Args:\n        number(int): Number to check\n    Returns:\n        bool: True if number is prime, else False\n    \"\"\"\n    if number == 1:\n        return False\n    divisor = 2\n    while divisor <= number / 2:\n        if number % divisor == 0:\n            return False\n        divisor += 1\n    return True\n\n\ndef find_prime_number(number):\n    \"\"\"\n    Finds the nth prime number\n    Args:\n        number(int): The nth number to find\n    Returns:\n        int: The nth prime number\n    \"\"\"\n    prime_numbers_list = []\n    prime_count = 0\n    candidate = 2\n    while prime_count < number:\n        if is_prime(candidate):\n            prime_count += 1\n            prime_numbers_list.append(candidate)\n        candidate += 1\n    return prime_numbers_list[-1]\n\n\ndef find_prime_in_range(start, end):\n    \"\"\"\n    Finds all the prime numbers in a given range\n    Args:\n        start(int): Starting number\n        end(int): Ending number\n    Returns:\n        list: List of prime numbers\n    \"\"\"\n    prime_numbers_list = []\n    for num in range(start, end + 1):\n        if is_prime(num):\n            prime_numbers_list.append(num)\n    return prime_numbers_list\n\n\ndef find_nth_fibonacci_number(number):\n    \"\"\"\n    Finds the nth fibonacci number\n    Args:\n        number(int): nth number to find\n    Returns:\n        int: The nth fibonacci number\n    \"\"\"\n    fibonacci_numbers = [0, 1]\n    while len(fibonacci_numbers) < number + 1:\n        fibonacci_numbers.append(0)\n    if number == 1:\n        return fibonacci_numbers[1]\n    else:\n        if fibonacci_numbers[number - 1] == 0:\n            fibonacci_numbers[number - 1] = find_nth_fibonacci_number(\n                number - 1)\n        if fibonacci_numbers[number - 2] == 0:\n            fibonacci_numbers[number - 2] = find_nth_fibonacci_number(\n                number - 2)\n        fibonacci_numbers[number] = fibonacci_numbers[number - 2] + \\\n            fibonacci_numbers[number - 1]\n    return fibonacci_numbers[number]\n\n\ndef find_fibonacci_in_range(start, end):\n    \"\"\"\n    Finds all fibonacci numbers in a given range\n    Args:\n        start(int): Starting number\n        end(int): Ending number\n    Returns:\n        list: List of fibonacci numbers\n    \"\"\"\n    fibonacci_numbers = []\n    for num in range(start, end + 1):\n        fibonacci_numbers.append(find_nth_fibonacci_number(num))\n    return fibonacci_numbers\n\n\ndef find_factorial(number):\n    \"\"\"\n    Finds the factorial of a number\n    Args:\n        number(int): Number to find factorial\n    Returns:\n        int: Factorial of a number\n    \"\"\"\n    factorial = 1\n    if number < 0:\n        return \"Factorial doesn't exist for negative numbers\"\n    elif number == 0:\n        return 1\n    else:\n        for num in range(1, number + 1):\n            factorial = factorial * num\n        return factorial\n", "\n# https://codeforces.com/problemset/problem/1335/B\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n"]