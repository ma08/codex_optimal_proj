["\n\n#SOLUTION\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "# coding: utf-8\n\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0 or Q % (N + 1) == 0:\n    print(\"opponent\")\nelse:\n    print(\"paul\")\n", "\n\n#Program\n\nn,p,q=map(int,input().split())\n\nif(p/n == q/n):\n    if(p%n != 0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p/n > q/n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\n\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"oppenent\")\n", "# SOLUTION\n\ndef who_serves(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(who_serves(n, p, q))\n", "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"oppenent\")\n", "\n#\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print(\"paul\") \nelse:\n    print(\"opponent\")\n", "\nfrom collections import Counter\nprint(Counter(input()).most_common()[0][0]) \n", "N, P, Q = map(int, input().split())\nPauls_turn = True\n\nwhile P + Q > 0:\n    if Pauls_turn:\n        P -= N if P >= N else P\n    else:\n        Q -= N if Q >= N else Q\n    Pauls_turn = not Pauls_turn\n\nif Pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\nN, P, Q = map(int, input().split())\nif P % N == 0 and Q % N == 0:\n    print('paul') \nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\n\nif __name__ == \"__main__\":\n    N, P, Q = map(int, input().split())\n\n    pauls_turn = True\n\n    while P + Q > 0:\n        if pauls_turn:\n            P -= N\n        else:\n            Q -= N\n        pauls_turn = not pauls_turn\n\n    if pauls_turn:\n        print(\"paula\")\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paula\")\nelse:\n    print(\"opponent\")\n", "import sys\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nN = int(input())\nA = [int(x) for x in input().split()]\nif N % 2 == 1:\n    if A[0] == 1:\n        print(\"First\")\n    else:\n        print(\"Second\") \nelif N % 2 == 0:\n    if A[0] == 1:\n        print(\"Second\")\n    else:\n        print(\"First\")\n", "\nN, P, Q = [int(x) for x in input().split()] # get the number of rounds and the number of points for both players\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0: # if the number of points for the opponent is a multiple of the number of rounds + 1, the opponent wins\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\n#Program to check who will win the game.\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\nrounds_before_first_player_serves_again = 2 * rounds_before_first_player_serves\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\n#Program\n\nn,p,q=map(int,input().split())\n\nif(p//n == q//n)\n    if(p%n == 0)\n        print(\"opponent\")\n    else\n        print(\"paul\")\nelse\n    if(p//n > q//n)\n        print(\"opponent\")\n    else\n        print(\"paul\")\n", "\n# SOLUTION\n\ndef whoServes(n, p, q):\n    if (p + q) % (2 * n) < n:\n        return 'paul' if (p + q) % 2 == 0 else 'opponent'\n    else:\n        return 'opponent' if (p + q) % 2 == 0 else 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "#!/usr/bin/env python3\n\nN = int(input())\nA = [int(x) for x in input().split()]\n\nif A[0] == 1:\n    print(\"First\")\nelse:\n    print(\"Second\")\n", "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serves\nrounds_before_first_player_serves = N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "import sys\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "N, P, Q = map(int, input().split())\n\nif P % N == Q % N:\n    if P % 2 == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    print('opponent')\n", "\nimport sys\nn, p, q = map(int, sys.stdin.readline().split())\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "# coding: utf-8\n\nN, P, Q = [int(x) for x in input().split()]\n\nif P % (N + 1) == 0:\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if (P // (N + 1)) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        if P >= N:\n            P -= N\n    else:\n        if Q >= N:\n            Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paula\")\nelse:\n    print(\"opponent\")\n", "\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n# test\nN, P, Q = map(int, input().split())\n\npauls_turn = True\n\nwhile P + Q > 0:\n    if pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    pauls_turn = not pauls_turn\n\nif pauls_turn:\n    print(\"paula\")\nelse:\n    print(\"opponent\")\n", "\n# https://codeforces.com/problemset/problem/1335/A\nn, p, q = map(int, input().split())\n\nif p > q:\n    p, q = q, p\n\nif (q - p) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\n# Program to check who will win the game\n\nn, p, q = map(int, input().split())\n\nif p//n == q//n:\n    if p % n == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if p//n > q//n:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "N, P, Q = map(int, input().split())\nif P % N == 0 or Q % N == 0:\n    print('paul')\nelse:\n    print('opponent')\n", "\n\n# SOLUTION\n\ndef who_serves(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(who_serves(n, p, q))\n", "# SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\n\n#Program to check who will win the game\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n): #// is integer division\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\n\nn,p,q=map(int,input().split())\n\nif(p//n==q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"pau\")\nelse:\n    if(p//n>q//n):\n        print(\"opponent\")\n    else:\n        print(\"pau\")\n", "\nN, P, Q = map(int, input().split())\n\nPauls_turn = True\n\nwhile P + Q > 0:\n    if Pauls_turn:\n        P -= N\n    else:\n        Q -= N\n    Pauls_turn = not Pauls_turn\n\nif Pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nimport sys\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        sys.stdout.write('paul')\n    else:\n        sys.stdout.write('opponent')\nelse:\n    if Q % N == 0:\n        sys.stdout.write('opponent')\n    else:\n        sys.stdout.write('paul')\n", "\nn,p,q=map(int,input().split())\n\nif(p//n == q//n):\n    if(p%n == 0):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\nelse:\n    if(p//n > q//n):\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\n\nN, P, Q = [int(x) for x in input().split()]  # get the number of rounds and the number of points for both players\n\nif P % (N + 1) == 0:  # if the number of points for the opponent is a multiple of the number of rounds + 1, the opponent wins\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "import sys\nfrom collections import Counter\nprint(Counter(sys.stdin.readlines()).most_common()[0][0])\n", "\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serve\nrounds_before_first_player_serve = N\n\n# Calculate the number of rounds before the second player serve\nrounds_before_second_player_serve = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n# Program\n\nn,p,q=map(int,input().split())\n\nif p//n == q//n:\n    if p % n == 0:\n        print(\"opponent\")\n    else:\n        print(\"pau\")\nelse:\n    if p//n > q//n:\n        print(\"opponent\")\n    else:\n        print(\"pau\")\n", "#\n# n, p, q = map(int, input().split())\n#\n# if p > q:\n#     p, q = q, p\n#\n# if (q - p) % (2 * n) < n:\n#     print(\"paul\")\n# else:\n#     print(\"opponent\")\n", "n, p, q = map(int, input().split())\np, q = min(p, q), max(p, q)\n\nif (q - p) % (2 * n) < n or (q - p) % (2 * n) == n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "def whoServes(n, p, q):\n    if (p + q) % 2 == 0:\n        return 'paul' if (p + q) % (2 * n) < n else 'opponent'\n    return 'opponent' if (p + q) % (2 * n) < n else 'paul'\n\nn, p, q = map(int, input().split())\nprint(whoServes(n, p, q))\n", "\nimport sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nN, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n", "\n\nimport sys\n\n# Grab the input\nN, P, Q = map(int, input().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serve\nrounds_before_first_player_serve = N\n\n# Calculate the number of rounds before the second player serve\nrounds_before_second_player_serve = 2 * N\n\n# Calculate the number of rounds before the first player serve again\nrounds_before_first_player_serve_again = 3 * N\n\n# Calculate the number of rounds before the second player serve again\nrounds_before_second_player_serve_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serve_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\nN, P, Q = [int(x) for x in input().split()] # get the number of rounds and the number of points for both players \n\nif P % (N + 1) == 0: # if the number of points for the opponent is a multiple of the number of rounds + 1, the opponent wins\n    print(\"opponent\")\nelif Q % (N + 1) == 0:\n    print(\"paul\")\nelse:\n    if P // (N + 1) % 2 == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n", "\nN = int(input())\nA = [int(x) for x in input().split()]\n\nif N % 2 == 1:\n    if A[0] == 1:\n        print(\"First\")\n    else:\n        print(\"Second\")\nelif N % 2 == 0:\n    if A[0] == 1:\n        print(\"Second\")\n    else:\n        print(\"First\")\n", "from collections import Counter\nprint(Counter(input()).most_common()[0][0])  # use most_common() to get the most common element\n", "\n\n# SOLUTION\n\ndef who_serves(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\n\nn, p, q = map(int, input().split())\nprint(who_serves(n, p, q))\n", "\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round <= N:\n    print(\"opponent\")\nelse:\n    print(\"paul\")\n", "\nN, P, Q = map(int, input().split())\n\nPauls_turn = True\n\nwhile P + Q > 0:\n    if Pauls_turn:\n        if P - N >= 0:\n            P -= N\n        else:\n            P = 0\n    else:\n        if Q - N >= 0:\n            Q -= N\n        else:\n            Q = 0\n    Pauls_turn = not Pauls_turn\n\nif Pauls_turn:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n#\nn, m = map(int, input().split())\n\narr = [0] * n\n\nfor i in range(m):\n    s, c = map(int, input().split())\n    if arr[s - 1] == 0:\n        arr[s - 1] = c\n    elif arr[s - 1] != c:\n        print(-1)\n        exit()\n\nif arr[0] == 0:\n    arr[0] = 1\n\nfor i in range(1, n):\n    if arr[i] == 0:\n        arr[i] = 0\n\nprint(''.join(map(str, arr)))\n", "import sys\n\nn, p, q = map(int, sys.stdin.readline().split())\n\nif (p + q) % (2 * n) < n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\nimport sys\nn, p, q = map(int, input().split())\n\nif p == q:\n    print(\"paul\")\n    sys.exit()\n\nif (q - p) % (2 * n) <= n:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "\n\n#SOLUTION\n\ndef whoServes(n, p, q):\n    if p + q == 0:\n        return 'paul'\n    elif (p + q) % (2 * n) < n:\n        if (p + q) % 2 == 0:\n            return 'paul'\n        else:\n            return 'opponent'\n    else:\n        if (p + q) % 2 == 0:\n            return 'opponent'\n        else:\n            return 'paul'\n\nn, p, q = map(int, input().split())\n\n\n\nprint(whoServes(n, p, q))\n", "# coding: utf-8\n\nN = int(input())\nxs = [int(x) for x in input().split()]\n\nprint(xs)\n", "\n\n#Program\n\nn,p,q=map(int,input().split())\n\nif(p//n<=q//n):\n    if(p%n==0):\n        print(\"opponent\")\n    else:\n        print(\"pau\")\nelse:\n    if(p//n<q//n):\n        print(\"opponent\")\n    else:\n        print(\"pau\")\n", "\nimport sys\n\n# Grab the input\nN, P, Q = map(int, sys.stdin.readline().split()) \n\n# Calculate the number of rounds played\nrounds_played = P + Q \n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N \n\n# Calculate the number of rounds before the first player serve\nrounds_before_first_player_serve = N \n\n# Calculate the number of rounds before the second player serve\nrounds_before_second_player_serve = 2 * N \n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N \n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N \n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player \n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player) \n\nif rounds_played_current_round == 0:\n    print(\"paul\") \nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\") \nelse:\n    print(\"opponent\") \n", "\nimport sys\n\n# Grab the input\nN, P, Q = map(int, input().split())\n\n# Calculate the number of rounds played\nrounds_played = P + Q\n\n# Calculate the number of rounds per player\nrounds_per_player = 2 * N\n\n# Calculate the number of rounds before the first player serve\nrounds_before_first_player_serve = N\n\n# Calculate the number of rounds before the second player serve\nrounds_before_second_player_serve = 2 * N\n\n# Calculate the number of rounds before the first player serves again\nrounds_before_first_player_serves_again = 3 * N\n\n# Calculate the number of rounds before the second player serves again\nrounds_before_second_player_serves_again = 4 * N\n\n# Calculate the number of complete rounds\ncomplete_rounds = rounds_played // rounds_per_player\n\n# Calculate the number of rounds played in the current round\nrounds_played_current_round = rounds_played - (complete_rounds * rounds_per_player)\n\nif rounds_played_current_round == 0:\n    print(\"paul\")\nelif rounds_played_current_round < rounds_before_first_player_serves_again:\n    print(\"paul\")\nelse:\n    print(\"opponent\")\n", "N, P, Q = map(int, input().split())\n\nif P % N == 0:\n    if Q % N == 0:\n        print('paul')\n    else:\n        print('opponent')\nelse:\n    if Q % N == 0:\n        print('opponent')\n    else:\n        print('paul')\n"]