2022-04-09 20:01:04.598698 """
There are $n$ players sitting at the card table. Each player has a favorite number. The favorite number of the $j$-th player is $f_j$.

There are $k \cdot n$ cards on the table. Each card contains a single integer: the $i$-th card contains number $c_i$. Also, you are given a sequence $h_1, h_2, \dots, h_k$. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly $k$ cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals $h_t$ if the player holds $t$ cards containing his favorite number. If a player gets no cards with his favorite number (i.e., $t=0$), his joy level is $0$.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence $h_1, \dots, h_k$ is the same for all the players.


-----Input-----

The first line of input contains two integers $n$ and $k$ ($1 \le n \le 500, 1 \le k \le 10$) — the number of players and the number of cards each player will get.

The second line contains $k \cdot n$ integers $c_1, c_2, \dots, c_{k \cdot n}$ ($1 \le c_i \le 10^5$) — the numbers written on the cards.

The third line contains $n$ integers $f_1, f_2, \dots, f_n$ ($1 \le f_j \le 10^5$) — the favorite numbers of the players.

The fourth line contains $k$ integers $h_1, h_2, \dots, h_k$ ($1 \le h_t \le 10^5$), where $h_t$ is the joy level of a player if he gets exactly $t$ cards with his favorite number written on them. It is guaranteed that the condition $h_{t - 1} < h_t$ holds for each $t \in [2..k]$.


-----Output-----

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.


-----Examples-----
Input
4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7

Output
21

Input
3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3

Output
0



-----Note-----

In the first example, one possible optimal card distribution is the following:  Player $1$ gets cards with numbers $[1, 3, 8]$;  Player $2$ gets cards with numbers $[2, 2, 8]$;  Player $3$ gets cards with numbers $[2, 2, 8]$;  Player $4$ gets cards with numbers $[5, 5, 5]$. 

Thus, the answer is $2 + 6 + 6 + 7 = 21$.

In the second example, no player can get a card with his favorite number. Thus, the answer is $0$.
"""
2022-04-09 20:01:04.598768 --------------------------
2022-04-09 20:01:25.793282 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649548865,
  "id": "cmpl-4vFIncLPajQGh5qNlRS6nD8GJNmRx",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:01:25.793535 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:01:25.793597 REASON stop
2022-04-09 20:01:25.794966 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:01:25.795075 REASON stop
