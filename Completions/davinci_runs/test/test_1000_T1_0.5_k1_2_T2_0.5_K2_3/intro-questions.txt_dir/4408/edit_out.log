2022-04-12 20:20:05.578601 num operations 2
2022-04-12 20:20:05.578609 size on input set 1
2022-04-12 20:20:10.997562 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_favorite_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649794805,
  "object": "edit"
}
2022-04-12 20:20:10.997788 fix spelling mistakes 3 ['\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_favorite_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 20:20:10.997829 size on output set 3
2022-04-12 20:20:10.997837 size on input set 3
2022-04-12 20:20:12.979166 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index * k:(index + 1) * k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for _ in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649794811,
  "object": "edit"
}
2022-04-12 20:20:12.979346 fix syntax errors 3 ['\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index * k:(index + 1) * k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for _ in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nsys.setrecursionlimit(100000)\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_number = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_number[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 20:20:18.027558 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0][0], get_input()[0][1]\n    cards = get_input()[1][0:n*k]\n    player_fav_numbers = get_input()[2][0:n]\n    joy_levels = get_input()[3][0:k+1]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = [[]]\n    for i in range(4):\n        inputs[0].append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0][0]\n    cards = get_input()[0][1]\n    player_fav_numbers = get_input()[0][2]\n    joy_levels = get_input()[0][3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k : (index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n\n    main()\n"
    }
  ],
  "created": 1649794813,
  "object": "edit"
}
2022-04-12 20:20:18.027739 fix syntax errors 3 ['import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0][0], get_input()[0][1]\n    cards = get_input()[1][0:n*k]\n    player_fav_numbers = get_input()[2][0:n]\n    joy_levels = get_input()[3][0:k+1]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = [[]]\n    for i in range(4):\n        inputs[0].append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0][0]\n    cards = get_input()[0][1]\n    player_fav_numbers = get_input()[0][2]\n    joy_levels = get_input()[0][3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k : (index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n\n    main()\n']
2022-04-12 20:20:23.202792 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_favorite_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input(n):\n    return list(map(int, input().split()))[:n]\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input(2)\n    cards = get_input(n*k)\n    player_favorite_numbers = get_input(n)\n    joy_levels = get_input(k)\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels, k):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return (k-len(fav_cards))*joy_levels[0] + len(fav_cards)*joy_levels[1]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_favorite_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = -1\n    for i in range(n):\n        max_joy = max(max_joy, get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels, k))\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649794818,
  "object": "edit"
}
2022-04-12 20:20:23.202974 fix syntax errors 3 ['\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_favorite_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input(n):\n    return list(map(int, input().split()))[:n]\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input(2)\n    cards = get_input(n*k)\n    player_favorite_numbers = get_input(n)\n    joy_levels = get_input(k)\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_favorite_number, joy_levels, k):\n    fav_cards = list(filter(lambda x: x == player_favorite_number, cards))\n    return (k-len(fav_cards))*joy_levels[0] + len(fav_cards)*joy_levels[1]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_favorite_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = -1\n    for i in range(n):\n        max_joy = max(max_joy, get_player_joy(get_cards(cards, i, k), player_favorite_numbers[i], joy_levels, k))\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 20:20:23.203085 size on output set 9
2022-04-12 20:20:23.203101 num operations 2
2022-04-12 20:20:23.203107 size on input set 1
2022-04-12 20:20:32.844113 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards_per_player.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_per_player.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fave_cards_count = {}\n    for f, c in fave_cards.items():\n        fave_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fave_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fave_cards.items():\n        cards_per_player[f] = fave_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649794823,
  "object": "edit"
}
2022-04-12 20:20:32.844306 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards_per_player.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_per_player.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fave_cards_count = {}\n    for f, c in fave_cards.items():\n        fave_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fave_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fave_cards.items():\n        cards_per_player[f] = fave_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 20:20:32.844349 size on output set 3
2022-04-12 20:20:32.844355 size on input set 3
2022-04-12 20:20:41.582876 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = {}\n    for i, f in enumerate(faves):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i+1]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = {}\n    for i, f in enumerate(faves):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i+1]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = len(c)\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count[c] -= 1\n\n    cards_per_player = [0] * n\n    for c, v in fav_cards_count.items():\n        cards_per_player[c-1] = v\n\n    joy_sum = 0\n    for i, c in enumerate(cards_per_player):\n        joy_sum += joy[c] * fav_cards[i+1]\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fave_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fave_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649794832,
  "object": "edit"
}
2022-04-12 20:20:41.583122 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = {}\n    for i, f in enumerate(faves):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i+1]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = {}\n    for i, f in enumerate(faves):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i+1]\n\n    fav_cards_count = {}\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = len(c)\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count[c] -= 1\n\n    cards_per_player = [0] * n\n    for c, v in fav_cards_count.items():\n        cards_per_player[c-1] = v\n\n    joy_sum = 0\n    for i, c in enumerate(cards_per_player):\n        joy_sum += joy[c] * fav_cards[i+1]\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fave_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fave_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 20:20:46.225055 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().split()]\n    cards = [int(x) for x in sys.stdin.readline().split()]\n    favs = [int(x) for x in sys.stdin.readline().split()]\n    joy = [int(x) for x in sys.stdin.readline().split()]\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards_per_player.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_per_player.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, _ = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f in fav_cards_per_player:\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f in fav_cards_per_player:\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    favs = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards_per_player.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_per_player.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649794841,
  "object": "edit"
}
2022-04-12 20:20:46.225290 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().split()]\n    cards = [int(x) for x in sys.stdin.readline().split()]\n    favs = [int(x) for x in sys.stdin.readline().split()]\n    joy = [int(x) for x in sys.stdin.readline().split()]\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards_per_player.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_per_player.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, _ = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f in fav_cards_per_player:\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f in fav_cards_per_player:\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    favs = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fav_cards_per_player = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_per_player:\n            fav_cards_per_player[f].append(i)\n        else:\n            fav_cards_per_player[f] = [i]\n\n    fav_cards_count = {}\n    for f, c in fav_cards_per_player.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_per_player:\n            fav_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_per_player.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_per_player.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 20:20:57.087269 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    faves = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fave_cards = [[] for _ in range(n)]\n    for i, f in enumerate(faves, 1):\n        fave_cards[f - 1].append(i)\n\n    fave_cards_count = [0 for _ in range(n)]\n\n    for c in cards:\n        fave_cards_count[c - 1] += 1\n\n    cards_per_player = [c // len(f) for c, f in zip(fave_cards_count, fave_cards)]\n\n    joy_sum = 0\n    for j, c in zip(joy, cards_per_player):\n        joy_sum += j * c\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fave_cards_count = {}\n    for f in fave_cards:\n        fave_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fave_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f in fave_cards:\n        cards_per_player[f] = fave_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    faves = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fave_cards_count = {}\n    for f, c in fave_cards.items():\n        fave_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fave_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fave_cards.items():\n        cards_per_player[f] = fave_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649794846,
  "object": "edit"
}
2022-04-12 20:20:57.087474 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    faves = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fave_cards = [[] for _ in range(n)]\n    for i, f in enumerate(faves, 1):\n        fave_cards[f - 1].append(i)\n\n    fave_cards_count = [0 for _ in range(n)]\n\n    for c in cards:\n        fave_cards_count[c - 1] += 1\n\n    cards_per_player = [c // len(f) for c, f in zip(fave_cards_count, fave_cards)]\n\n    joy_sum = 0\n    for j, c in zip(joy, cards_per_player):\n        joy_sum += j * c\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    faves = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fave_cards_count = {}\n    for f in fave_cards:\n        fave_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fave_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f in fave_cards:\n        cards_per_player[f] = fave_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    faves = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fave_cards = {}\n    for i, f in enumerate(faves):\n        if f in fave_cards:\n            fave_cards[f].append(i)\n        else:\n            fave_cards[f] = [i]\n\n    fave_cards_count = {}\n    for f, c in fave_cards.items():\n        fave_cards_count[f] = 0\n\n    for c in cards:\n        if c in fave_cards:\n            fave_cards_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fave_cards.items():\n        cards_per_player[f] = fave_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fave_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 20:20:57.087518 size on output set 9
