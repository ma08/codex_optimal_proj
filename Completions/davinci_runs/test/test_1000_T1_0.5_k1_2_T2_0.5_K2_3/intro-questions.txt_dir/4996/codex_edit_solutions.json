["\n# get input\n# get input\nmessage = input()\nkey = input()\n\n# create the alphabet list\nalphabet = []\nfor i in range(26):\n    alphabet.append(chr(65+i))\n\n# create the decrypted message\ndecrypted = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        decrypted += alphabet[(alphabet.index(message[i]) - alphabet.index(key[i]) + 26) % 26]\n    else:\n        encrypted += alphabet[(alphabet.index(message[i]) + alphabet.index(key[i]) + 26) % 26]\n\n# print the decrypted message\nprint(decrypted)\n", "#!/usr/bin/env python3\n\ndef shift(c, key, i):\n    if i % 2 == 0:\n        return chr((ord(c) - ord('A') + ord(key[i % len(key)]) - ord('A')) % 26 + ord('A'))\n    else:\n        return chr((ord(c) - ord('A') - (ord(key[i % len(key)]) - ord('A'))) % 26 + ord('A'))\n\nc = input()\nk = input()\nprint(\"\".join(shift(c[i], k, i) for i in range(len(c))))\n", "\n\ndef main():\n    message = input()\n    key = input()\n    decrypted = \"\"\n    for i in range(len(message)):\n        if i % 2 == 0:\n            decrypted += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord(\"A\"))\n        else:\n            decrypted += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord(\"A\"))\n    print(decrypted)\n\nmain()\n", "\nmessage = input()\nkey = input()\nencrypted = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        encrypted += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n    else:\n        encrypted += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('A'))\nprint(encrypted)\n", "\nprint('hello world')\n", "\n\ndef decrypt(ciphertext, key):\n    plaintext = \"\"\n    for i in range(len(ciphertext)):\n        if i % 2 == 0:\n            plaintext += chr((ord(ciphertext[i]) - ord(key[i]) + 26) % 26 + 65)\n        else:\n            plaintext += chr((ord(ciphertext[i]) - ord(key[i]) - 26) % 26 + 65)\n    return plaintext\n\nprint(decrypt(input(), input()))\n", "\n# get input\nmessage = input()\nkey = input()\n\n# create the alphabet list\nalphabet = []\nfor i in range(26):\n    alphabet.append(chr(65+i))\n\n# create the encrypted message\nencrypted = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        encrypted += alphabet[(alphabet.index(message[i]) - alphabet.index(key[i%len(key)]) + 26) % 26]\n    else:\n        encrypted += alphabet[(alphabet.index(message[i]) + alphabet.index(key[i%len(key)]) + 26) % 26]\n\n# print the encrypted message\nprint(encrypted)\n", "\nimport sys\n\nmessage = sys.stdin.readline().strip()\nkey = sys.stdin.readline().strip()\n\noutput = \"\"\nfor i in range(len(message)):\n    if (i % 2 == 0):\n        output += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    else:\n        output += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('a'))\nprint(output)\n", "\n\ndef main():\n    message = input()\n    key = input()\n    decrypted = \"\"\n    for i in range(len(message)):\n        if i % 2 == 0:\n            decrypted += chr((ord(message[i]) - ord(key[i % len(key)]) + 26) % 26 + ord('A'))\n        else:\n            decrypted += chr((ord(message[i]) - ord(key[i % len(key)]) - 26) % 26 + ord('A'))\n    print(decrypted)\n\nmain()\n", "import sys\n\nmessage = sys.stdin.readline().strip()\nkey = sys.stdin.readline().strip()\n\noutput = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        output += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    else:\n        output += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('a'))\nprint(output)\n", "\n\ndef main():\n    message = input().upper()\n    key = input().upper()\n    decrypted = \"\"\n    for i in range(len(message)):\n        if i % 2 == 0:\n            decrypted += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n        else:\n            decrypted += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('A'))\n    print(decrypted)\n\nmain()\n", "\n\ndef decrypt(c, k):\n    decrypted = ''\n    for i in range(len(c)):\n        if i % 2 == 0:\n            decrypted += chr((ord(c[i]) - ord(k[i]) + 26) % 26 + ord('a'))\n        else:\n            decrypted += chr((ord(c[i]) - ord(k[i]) - 26) % 26 + ord('a'))\n    return decrypted\n\nprint(decrypt(input(), input()))\n", "\nmessage = input()\nkey = input()\n\nencrypted = []\n\nfor i in range(len(message)):\n    shift = ord(key[i % len(key)]) - 65\n    if i % 2 == 0:\n        encrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n    else:\n        encrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n\nprint(''.join(encrypted))\n", "\ndef shift(c, key, i):\n    if i % 2 == 0:\n        return chr((ord(c) - ord('A') + ord(key[i]) - ord('A')) % 26 + ord('A'))\n    else:\n        return chr((ord(c) - ord('A') - (ord(key[i]) - ord('A'))) % 26 + ord('A'))\n\nc = input()\nk = input()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(\"\".join(shift(c[i], k, i) for i in range(len(c))))\n", "\n\ndef shift(c, key, i):\n    if i % 2 == 0:\n        return chr((ord(c) - ord('A') + ord(key[i]) - ord('A')) % 26 + ord('A'))\n    else:\n        return chr((ord(c) - ord('A') - (ord(key[i]) - ord('A'))) % 26 + ord('A'))\n\nc = input()\nk = input()\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(\"\".join(shift(c[i], k, i) for i in range(len(c))))\n", "\ndef decrypt(ciphertext, key):\n    plaintext = \"\"\n    for i in range(len(ciphertext)): # iterate through each character of the ciphertext\n        if i % 2 == 0: # even characters\n            plaintext += chr((ord(ciphertext[i]) - ord(key[i]) + 26) % 26 + ord('A')) # add a character to the plaintext\n        else: # odd characters\n            plaintext += chr((ord(ciphertext[i]) - ord(key[i]) - 26) % 26 + ord('A')) # add a character to the plaintext\n    return plaintext\n\nprint(decrypt(input(), input()))\n", "#!/usr/bin/env python3\n\nmessage = input()\nkey = input()\n\ndecrypted = []\n\nfor i in range(len(message)):\n    shift = ord(key[i % len(key)]) - 65\n    if i % 2 == 0:\n        decrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n    else:\n        decrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n\nprint(''.join(decrypted))\n", "#!/usr/bin/env python3\n\ndef shift(c, key):\n    return chr((ord(c) + ord(key) - 2 * ord('A')) % 26 + ord('A'))\n\nc = input()\nk = input()\nprint(\"\".join(shift(c[i], k[i % len(k)]) for i in range(len(c))))\n", "\n\n# get input\nmessage = input()\nkey = input()\n\n# create the alphabet list\nalphabet = []\nfor i in range(26):\n    alphabet.append(chr(65+i))\n\n# create the decrypted message\ndecrypted = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        decrypted += alphabet[(alphabet.index(message[i]) - alphabet.index(key[i]) + 26) % 26]\n    else:\n        decrypted += alphabet[(alphabet.index(message[i]) + alphabet.index(key[i]) + 26) % 26]\n\n# print the decrypted message\nprint(decrypted)\n", "\n\ndef shift(c, key, i): # i is the index of the char in the key\n    if i % 2 == 0:\n        return chr((ord(c) - ord('A') + ord(key[i]) - ord('A')) % 26 + ord('A'))\n    else:\n        return chr((ord(c) - ord('A') - (ord(key[i]) - ord('A'))) % 26 + ord('A'))\n\nc = input()\nk = input()\nprint(\"\".join(shift(c[i], k, i) for i in range(len(c)))) \n", "\nprint(decrypt(input(), input()))\n", "\nmessage = input().upper()\nkey = input().upper()\n\nencrypted = []\n\nfor i in range(len(message)):\n    shift = ord(key[i % len(key)]) - 65\n    if i % 2 == 0:\n        encrypted.append(chr((ord(message[i]) - shift + 26) % 26 + 65))\n    else:\n        encrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n\nprint(''.join(encrypted))\n", "\ndef shift(c, key, i): # i is the index of the char in the key\n    return chr((ord(c) - ord('A') + (1 if i % 2 == 0 else -1) * (ord(key[i]) - ord('A'))) % 26 + ord('A'))\n\nc = input()\nk = input()\nprint(\"\".join(shift(c[i], k, i) for i in range(len(c))))\n", "\n\ndef decrypt(message, key):  # function to decrypt the message\n    decrypted = \"\"  # decrypted message\n    for i in range(len(message)):\n        if i % 2 == 0:  # if the index of the character is even\n            decrypted = decrypted + chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n        else:  # if the index of the character is odd\n            decrypted = decrypted + chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('a'))\n    return decrypted\n\n\nprint(decrypt(input(), input()))  # print the decrypted message\n", "\nmessage = input(\"Enter the message: \")\nkey = input(\"Enter the key: \")\ndecrypted = []\nfor i in range(len(message)):\n    shift = ord(key[i]) - 65\n    if i % 2 == 0:\n        decrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n    else:\n        decrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\nprint(''.join(decrypted))\n", "\n\ndef encrypt(message, key, keyLength):\n    encrypted = \"\"\n    for i in range(len(message) // keyLength):\n        for j in range(keyLength):\n            if j % 2 == 0:\n                encrypted = encrypted + chr((ord(message[i + j]) + ord(key[j]) + 26) % 26 + ord('A'))\n            else:\n                encrypted = encrypted + chr((ord(message[i + j]) + ord(key[j]) - 26) % 26 + ord('A'))\n    return encrypted\n\nprint(encrypt(input(), input(), int(input())))\n", "\n\ndef main():\n    message = input()\n    key = input()\n    encrypted = \"\"\n    for i in range(len(message)):\n        if i % 2 == 0:\n            encrypted += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A'))  # add 26 to prevent negative\n        else:\n            encrypted += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('A'))  # add 26 to prevent negative\n    print(encrypted)\n\nmain()\n", "\n\ndef main():\n    message = input()\n    key = input()\n    encrypted = \"\"\n    for i in range(len(message)):\n        if i % 2 == 0:\n            encrypted += chr((ord(message[i]) - ord(key[i])) % 26 + ord('A'))\n        else:\n            encrypted += chr((ord(message[i]) - ord(key[i])) % 26 + ord('A'))\n    print(encrypted)\n\nmain()\n", "\n\ndef encrypt(message, key):\n    encrypted = \"\"\n    for i in range(len(message)):\n        if i % 2 == 0:\n            encrypted = encrypted + chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n        else:\n            encrypted = encrypted + chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('a'))\n    return encrypted\n\nprint(encrypt(input(), input()))\n", "\n\ndef encrypt(message, key):\n\tencrypted = \"\"\n\tfor i in range(len(message)):\n\t\tif i % 2 == 0:\n\t\t\tencrypted = encrypted + chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n\t\telse:\n\t\t\tencrypted = encrypted + chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('A'))\n\treturn encrypted\n\nprint(encrypt(input(), input()))\n", "\n\n# i is the index of the char in the key\ndef shift(c, key, i):\n    if i % 2 == 0:\n        return chr((ord(c) - ord('A') + ord(key[i]) - ord('A')) % 26 + ord('A'))\n    else:\n        return chr((ord(c) - ord('A') - (ord(key[i]) - ord('A'))) % 26 + ord('A'))\n\n\nc = input()\nk = input()\nprint(\"\".join(shift(c[i], k, i) for i in range(len(c))))\n", "\n\ndef encrypt(message, key):\n    encrypted = \"\"\n    for i in range(len(message)):\n        if i % 2 == 1:\n            encrypted = encrypted + chr((ord(message[i]) + ord(key[i]) + 26) % 26 + ord('a'))\n        else:\n            encrypted = encrypted + chr((ord(message[i]) + ord(key[i]) - 26) % 26 + ord('a'))\n    return encrypted\n\nprint(encrypt(input(), input()))\n", "\n\n# get input\nmessage = input()\nkey = input()\n\n# create the alphabet list\nalphabet = []\nfor i in range(26):\n    alphabet.append(chr(65+i))\n\n# create the decrypted message\ndecrypted = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        decrypted += alphabet[(alphabet.index(message[i]) - alphabet.index(key[i]) + 26) % 26]\n    else:\n        decrypted += alphabet[(alphabet.index(message[i]) + alphabet.index(key[i]) + 26) % 26]\n\n# print the encrypted message\nprint(encrypted)\n", "#!/usr/bin/env python3\n\nmessage = input(\"Enter the message: \")\nkey = input(\"Enter the key: \")\n\ndecrypted = []\n\nfor i in range(len(message)):\n    shift = ord(key[i]) - 65\n    if i % 2 == 0:\n        decrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n    else:\n        decrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n\nprint(''.join(decrypted))\n", "\n\ndef decrypt(c, k):\n    decrypted = ''\n    for i in range(len(c)):\n        decrypted += chr((ord(c[i]) - ord(k[i])) % 26 + ord('A'))\n    return decrypted\n\nprint(decrypt(input(), input()))\n", "\nmessage = input(\"Enter the message: \")\nkey = input(\"Enter the key: \")\n\nencrypted = []\n\nfor i in range(len(message)):\n    shift = ord(key[i]) - 65\n    if i % 2 == 0:\n        encrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n    else:\n        encrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n\nprint(''.join(decrypted))\n", "\n\n# get input from user\nmessage = input(\"Enter a message to encrypt: \")\nkey = input(\"Enter a key: \")\n\n# create the alphabet list\nalphabet = []\nfor i in range(26):\n    alphabet.append(chr(65+i))\n\n# create the encrypted message by subtracting the index of the key character and the index of the message character (if i % 2 == 0) or by adding the index of the key character and the index of the message character (if i % 2 == 1)\nencrypted = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        encrypted += alphabet[(alphabet.index(message[i]) - alphabet.index(key[i]) + 26) % 26]\n    else:\n        encrypted += alphabet[(alphabet.index(message[i]) + alphabet.index(key[i]) + 26) % 26]\n\n# print the encrypted message to the user\nprint(encrypted)\n", "\n\ndef vigenereCipherEncrypt(cipher, key):\n    i = 0\n    encrypted = ''\n    for char in cipher:\n        if i % 2 == 0:\n            encrypted += chr(ord(char) + (ord(key[i % len(key)]) - ord('A')))\n        else:\n            encrypted += chr(ord(char) - (ord(key[i % len(key)]) - ord('A')))\n        i += 1\n    return encrypted\n\nprint(vigenereCipherEncrypt(input(), input()))\n", "\n\ndef decrypt(message, key):  # function to decrypt the message\n    decrypted = \"\"  # decrypted message\n    for i in range(len(message)):\n        if i % 2 == 0:  # if the index of the character is even\n            decrypted = decrypted + chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n        else:  # if the index of the character is odd\n            decrypted = decrypted + chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('A'))\n    return decrypted\n\n\nprint(decrypt(input(), input()))  # print the decrypted message.\n", "\n\ndef decrypt(message, key):  # function to decrypt the message\n    decrypted = \"\"  # decrypted message\n    for i in range(len(message)):\n        if i % 2 == 0:  # if the index of the character is even\n            decrypted += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A'))\n        else:  # if the index of the character is odd\n            decrypted += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('A'))\n    return decrypted\n\n\nprint(decrypt(input(), input()))  # print the decrypted message\n", "\n\ndef encrypt(message, key):\n    encrypted = \"\"\n    for i in range(len(message) - 1):\n        if i % 2 == 0:\n            encrypted = encrypted + chr((ord(message[i]) + ord(key[i]) + 26) % 26 + ord('A'))\n        else:\n            encrypted = encrypted + chr((ord(message[i]) + ord(key[i]) - 26) % 26 + ord('A'))\n    return encrypted\n\nprint(encrypt(input(), input()))\n", "#!/usr/bin/python3\n\nmessage = input()\nkey = input()\n\ndecrypted = []\n\nfor i in range(len(message)):\n    shift = ord(key[i]) - 65\n    if i % 2 == 0:\n        decrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n    else:\n        decrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n\nprint(''.join(decrypted))\n", "import sys\n\nmessage = sys.stdin.readline().strip().lower()\nkey = sys.stdin.readline().strip().lower()\n\noutput = \"\"\nfor i in range(len(message)):\n    if (i % 2 == 0):\n        output += chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('a'))\n    else:\n        output += chr((ord(message[i]) - ord(key[i]) - 26) % 26 + ord('a'))\nprint(output)\n", "\n\n# get input\nmessage = input()\nkey = input()\n\n# create the alphabet list\nalphabet = []\nfor i in range(26):\n    alphabet.append(chr(65+i))\n\n# create the encrypted message\nencrypted = \"\"\nfor i in range(len(message)):\n    if i % 2 == 0:\n        encrypted += alphabet[(alphabet.index(message[i]) - alphabet.index(key[i]) + 26) % 26]\n    else:\n        encrypted += alphabet[(alphabet.index(message[i]) + alphabet.index(key[i]) + 26) % 26] \n\n# print the decrypted message\nprint(encrypted)\n", "\n\nclass VigenereCipher:\n\nprint(vigenereCipherEncrypt(input(), input()))\n", "\n\ndef vigenereCipherEncrypt(cipher, key, encrypted):\n    i = 0\n    for char in cipher:\n        if i % 2 == 0:\n            encrypted += chr(ord(char) + (ord(key[i]) - ord('A')))\n        else:\n            encrypted += chr(ord(char) - (ord(key[i]) - ord('A')))\n        i += 1\n    return encrypted\n\nprint(vigenereCipherEncrypt(input(), input(), \"\"))\n", "\n\ndef encrypt(c, k):\n    encrypted = \"\"\n    for i in range(len(c)): \n        if i % 2 == 0:\n            encrypted += chr((ord(c[i]) + ord(k[i]) - 2 * ord('A')) % 26 + ord('A'))\n        else:\n            encrypted += chr((ord(c[i]) - ord(k[i]) + 26) % 26 + ord('A'))\n    return encrypted\n\nprint(encrypt(input(), input()))\n", "\n\nmessage = input(\"Enter the message: \")\nkey = input(\"Enter the key: \")\n\ndecrypted = []\n\nfor i in range(len(message)):\n    shift = ord(key[i]) - 65\n    if i % 2 == 0:\n        decrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n    else:\n        decrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n\n\n\n# message = input(\"Enter the message: \")\n# key = input(\"Enter the key: \")\n#\n# decrypted = []\n#\n# for i in range(len(message)):\n#     shift = ord(key[i]) - 65\n#     if i % 2 == 0:\n#         decrypted.append(chr((ord(message[i]) - shift - 65) % 26 + 65))\n#     else:\n#         decrypted.append(chr((ord(message[i]) + shift - 65) % 26 + 65))\n#\n# print(''.join(decrypted))\nprint(''.join(decrypted))\n"]