["\ndef find_floor(n, x):\n    floor = 0\n    while n > 0:\n        if floor == 0:\n            n -= 2\n        else:\n            n -= x\n        floor += 1\n    return floor - 1\n\nt = int(input())\n\nfor i in range(t):\n    n, x = map(int, input().split())\n    print(find_floor(n, x))\n", "\n\nfrom math import ceil\n\ndef find_floor(n, x):\n    floor = 1\n    n -= x\n    if n == 0:\n        return floor\n    while n > 0:\n        n -= x\n        floor += 1\n    return floor\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        print(find_floor(n, x))\n", "\n\nfrom math import ceil\n\ndef find_floor(n, x):\n    floor = 1\n    n -= 1\n    if n == 0:\n        return floor\n    while n > 0:\n        n -= x\n        floor += 1\n    return floor\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        print(find_floor(n, x))\n", "\n\ndef find_floor(n, x):  # finds the floor given the number of students and the number of floors\n    floor = 0\n    while n > 0:\n        if floor == 0:\n            n -= 2\n        else:\n            n -= x\n        floor += 1\n\n    return floor\n\nt = int(input())\n\nfor i in range(t):\n    n, x = map(int, input().split())\n    print(find_floor(n, x))\n", "\n\nfrom math import ceil\n\n\ndef find_floor(n, x):\n    floor = 1\n    n -= 2\n    if n == 0:\n        return floor\n    elif n < 0:\n        return -1\n    else:\n        floor += 1\n    while n > 0:\n        n -= x\n        floor += 1\n    return floor\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        print(find_floor(n, x))\n", "def find_floor(n, x):\n    floor = 0\n    while n > 0:\n        if floor == 0:\n            n -= 2\n        else:\n            n -= x\n        floor += 1\n    return floor\n\nt = int(input())\n\nfor i in range(t):\n    n, x = map(int, input().split())\n    print(find_floor(n, x)) \n", "\n\nfrom math import ceil\n\ndef find_floor(n, x):\n    floor = 1\n    n -= 1\n    if n == 0:\n        return floor\n    elif n < 0:\n        return -1\n    else:\n        floor += 1\n    while n > 0:\n        n -= x\n        floor += 1\n    return floor\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        print(find_floor(n, x))\n", "#\n", "def find_floor(n, x):\n    floor = 0\n    while n > 0:\n        if floor == 0:\n            n -= 2\n        else:\n            n -= x\n        floor += 1\n    return floor\n\nt = int(input())\nfor i in range(t):\n    n, x = map(int, input().split())\n    print(find_floor(n, x))\n", "\ndef find_floor(n, x):\n    floor = 1\n    n -= x\n    if n <= 0:\n        return floor\n    while n > 0:\n        n -= x\n        floor += 1\n    return floor\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        print(find_floor(n, x))\n", "\nimport math\n\ndef find_floor(n, x):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return int(math.ceil((n-2)/x)) + 2\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        print(find_floor(n, x))\n", "\n\ndef find_floor(n, x):  # finds the floor given the number of students and the number of floors\n    floor = 0\n    while n > 0:\n        if floor == 0:\n            n -= 2\n        else:\n            n -= x\n        floor += 1\n    return floor\n\nt = int(input())\n\nfor i in range(t):\n    n, x = map(int, input().split())\n    print(find_floor(n, x))\n", "from math import ceil\n\ndef find_floor(n, x, floors=1):\n    if n == 0: return floors\n    if n <= x: return floors + 1\n    return find_floor(n - x, x, floors + 1)\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split()) \n        print(find_floor(n, x))\n", "\nif __name__ == \"__main__\":\n    pass\n"]