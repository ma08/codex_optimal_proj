["\n#!/usr/bin/env python\nimport sys\n\ndef main():\n    h,w,n = map(int,sys.stdin.readline().split())\n    bricks = sorted(map(int,sys.stdin.readline().split()))\n    sum = 0\n    i = 0\n    for i in range(n):\n        sum += bricks[i]\n        if sum >= w:\n            h -= 1\n            sum = 0\n            i -= 1\n        if h == 0:\n            print \"YES\"\n            break\n    if h != 0:\n        print \"NO\"\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))[::-1]\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0 and w > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < h:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0 and w > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    for i in range(1, n + 1):\n        if n % i == 0:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = sorted(list(map(int, sys.stdin.readline().split())))\n\n    if sum(bricks) < h * w:  # if the sum of bricks is less than the area, it's not possible\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:  # while the height is positive\n        if i == n:  # if we've used all the bricks\n            print(\"NO\")\n            return\n        if bricks[i] < w:  # if the brick is less than the width\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:  # if the width is 0\n            w = h - 1  # set the width to the height minus 1\n            h -= 1  # decrease the height\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    blocks = list(map(int, input().split()))\n    blocks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(blocks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(blocks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(blocks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(blocks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = sorted(list(map(int, sys.stdin.readline().split())))\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w and i != n-1:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"no\")\n    else:\n        if h == 1:\n            print(\"yes\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"yes\")\n            else:\n                print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    for i in range(1, n + 1):\n        if n % i == 0:\n            print(i)\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h * w:\n        print \"no\"\n    else:\n        if h == 1:\n            print \"yes\"\n        else:\n            layer = 0\n            while bricks and layer < h - 1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks and bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print \"yes\"\n            else:\n                print \"no\"\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    print \"hello\"\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\" \n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n", "#!/usr/bin/python\n\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print 'YES'\n    else:\n        print 'NO'\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")\n                return\n        if layer == 0:\n            print(\"NO\")\n            return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = sorted(map(int,sys.stdin.readline().split()))\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n", "n = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\nimport sys\n\ndef main():\n    h, w = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) <= h * w:\n        print 'YES'\n    else:\n        print 'NO'\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\nimport sys\n\ndef main():\n    h, w, n = [int(x) for x in sys.stdin.readline().strip().split()]\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()]\n    if sum(bricks) >= h * w:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main(n):\n    for i in range(1, n+1):\n        if n%i == 0:\n            print(i, end=\" \")\nif __name__ == '__main__':\n    n = int(input())\n    main(n)\n", "\n\nn = int(input())\n", "\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        while layer + bricks[i] <= w:\n            layer += bricks[i]\n            i += 1\n            if i == n:\n                print(\"YES\")\n                return\n        if layer == 0:\n            print(\"NO\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES') \nelse:\n    print('NO')\n", "\nimport sys\n\n\n    \"\"\"\n    This is the main function\n    \"\"\"\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(1, bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w - 1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(1, bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(1, bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(1, bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w - 1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint(\"NO\")\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\n#!/usr/bin/env python2\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = map(int,sys.stdin.readline().split())\n\tbricks.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbrick = map(int,sys.stdin.readline().split())\n\tbrick.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += brick[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain()\n", "n = int(input())\ns = 0\n\nfor i in range(n):\n    s += int(input())\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "import sys\n\ndef solve():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    solve()\n", "\n#!/usr/bin/env python\nimport sys\n\ndef main():\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbricks = sorted(map(int,sys.stdin.readline().split()))\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += bricks[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\tif h != 0:\n\t\tprint(\"NO\")\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n - 1):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(bricks[i]):\n                    layers[0][j] += 1\n                    if j + k == w:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i - 1][j] == 0:\n                if j == 0:\n                    if layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w:\n                                break\n                elif j == w - 1:\n                    if layers[i - 1][j - 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w:\n                                break\n                else:\n                    if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                        for k in range(bricks[i]):\n                            layers[i][j] += 1\n                            if j + k == w:\n                                break\n    for j in range(w):\n        if layers[h - 1][j] == 0:\n            for k in range(bricks[n - 1]):\n                layers[h - 1][j] += 1\n                if j + k == w:\n                    break\n            break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    blocks = sorted(list(map(int, input().split())), reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(h):\n            if j == 0:\n                for k in range(w):\n                    if layers[j][k] == 0:\n                        for l in range(blocks[i]):\n                            layers[j][k+l] += 1\n                            if k+l == w-1:\n                                break\n                        break\n            else:\n                for k in range(w):\n                    if layers[j-1][k] == 0:\n                        if k == 0:\n                            if layers[j-1][k+1] == 0:\n                                for l in range(blocks[i]):\n                                    layers[j][k+l] += 1\n                                    if k+l == w-1:\n                                        break\n                                break\n                        elif k == w-1:\n                            if layers[j-1][k-1] == 0:\n                                for l in range(blocks[i]):\n                                    layers[j][k+l] += 1\n                                    if k+l == w-1:\n                                        break\n                                break\n                        else:\n                            if layers[j-1][k-1] == 0 and layers[j-1][k+1] == 0:\n                                for l in range(blocks[i]):\n                                    layers[j][k+l] += 1\n                                    if k+l == w-1:\n                                        break\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\n#!/usr/bin/env python\nimport sys\n\ndef main(argv):\n\th,w,n = map(int,sys.stdin.readline().split())\n\tbrick = map(int,sys.stdin.readline().split())\n\tbrick.sort()\n\tsum = 0\n\ti = 0\n\tfor i in range(n):\n\t\tsum += brick[i]\n\t\tif sum >= w:\n\t\t\th -= 1\n\t\t\tsum = 0\n\t\t\ti -= 1\n\t\tif h == 0:\n\t\t\tprint \"YES\"\n\t\t\tbreak\n\tif h != 0:\n\t\tprint \"NO\"\n\nif __name__ == \"__main__\":\n\tmain(sys.argv)\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    for i in range(n):\n        if bricks[i] > w:\n            print('NO')\n            return None\n    layers = [0] * h\n    for i in range(n):\n        for j in range(h):\n            if layers[j] + bricks[i] <= w:\n                layers[j] += bricks[i]\n                break\n            if j == h - 1:\n                print('NO')\n                return None\n    print('YES')\n    return None\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    blocks = list(map(int, input().split()))\n    blocks.sort(reverse=True)\n    layers = []\n    for i in range(h):\n        layers.append([0] * w)\n    for i in range(n):\n        for j in range(w):\n            if layers[0][j] == 0:\n                for k in range(blocks[i]):\n                    layers[0][j] += 1\n                    if j+k >= w-1:\n                        break\n                break\n    for i in range(1, h):\n        for j in range(w):\n            if layers[i-1][j] == 0:\n                if j == 0:\n                    if layers[i-1][j+1] == 0:\n                        for k in range(blocks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n                elif j == w-1:\n                    if layers[i-1][j-1] == 0:\n                        for k in range(blocks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n                else:\n                    if layers[i-1][j-1] == 0 and layers[i-1][j+1] == 0:\n                        for k in range(blocks[i]):\n                            layers[i][j] += 1\n                            if j+k >= w-1:\n                                break\n    for i in range(h):\n        for j in range(w):\n            if layers[i][j] == 0:\n                print('NO')\n                return\n    print('YES')\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0 and w > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = sorted(list(map(int, sys.stdin.readline().split())), reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h-1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n \nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\nh, w, n = map(int, input().split())\nbricks = list(map(int, input().split()))\nbricks.sort(reverse=True)\nlayers = []\nfor i in range(h):\n    layers.append([0] * w)\nfor i in range(n):\n    for j in range(w):\n        if layers[0][j] == 0:\n            for k in range(bricks[i]):\n                layers[0][j] += 1\n                if j + k == w - 1:\n                    break\n                break\nfor i in range(1, h):\n    for j in range(w):\n        if layers[i - 1][j] == 0:\n            if j == 0:\n                if layers[i - 1][j + 1] == 0:\n                    for k in range(bricks[i]):\n                        layers[i][j] += 1\n                        if j + k == w - 1:\n                            break\n            elif j == w - 1:\n                if layers[i - 1][j - 1] == 0:\n                    for k in range(bricks[i]):\n                        layers[i][j] += 1\n                        if j + k == w - 1:\n                            break\n            else:\n                if layers[i - 1][j - 1] == 0 and layers[i - 1][j + 1] == 0:\n                    for k in range(bricks[i]):\n                        layers[i][j] += 1\n                        if j + k == w - 1:\n                            break\nfor i in range(h):\n    for j in range(w):\n        if layers[i][j] == 0:\n            print('NO')\n            return\nprint('YES')\n", "\n\ndef main():\n    h, w, n = map(int, input().split())\n    bricks = list(map(int, input().split()))\n    i = 0\n    for _ in range(h):\n        layer = 0\n        if i < n:\n            while layer + bricks[i] <= w:\n                layer += bricks[i]\n                i += 1\n                if i == n:\n                    print(\"YES\")\n                    return\n        if layer == 0:\n            print(\"NO\")\n            return\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 1:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\u0421\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b\nn = int(input())\n\ns = 0\n\nfor i in range(n):\n    s += int(input())\n\nif s % n == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\nimport sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split()) \n    bricks = map(int, sys.stdin.readline().split())\n    bricks.sort()\n\n    if sum(bricks) < h*w:\n        print(\"NO\")\n    else:\n        if h == 1:\n            print(\"YES\")\n        else:\n            layer = 0\n            while bricks and layer < h-1:\n                if bricks[-1] >= w:\n                    bricks.pop()\n                    layer += 1\n                elif bricks[-1] < w:\n                    bricks.pop()\n                    if bricks[-1] == bricks[-2]:\n                        bricks.pop()\n                        bricks.pop()\n                    else:\n                        bricks.pop()\n            if bricks:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    h, w, n = map(int, sys.stdin.readline().split())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    bricks.sort(reverse=True)\n\n    if sum(bricks) < h * w:\n        print(\"NO\")\n        return\n\n    i = 0\n    while h > 0:\n        if i == n:\n            print(\"NO\")\n            return\n        if bricks[i] < w:\n            print(\"NO\")\n            return\n        w -= 1\n        i += 1\n        if w == 0:\n            w = h - 1\n            h -= 1\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n"]