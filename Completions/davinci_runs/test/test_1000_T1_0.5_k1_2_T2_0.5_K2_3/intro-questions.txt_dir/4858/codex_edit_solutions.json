["\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[0]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                falcon.append((i,j+m))\n\n    # find the leftmost and the rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and the bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame_1 = []\n        for i in range(m):\n            frame_1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame_2 = []\n        for i in range(m):\n            frame_2.append(sys.stdin.readline().strip())\n\n        frame_3 = []\n        for i in range(m):\n            frame_3.append('')\n            for j in range(n):\n                if frame_1[i][j] == c:\n                    frame_3[i] += c\n                elif frame_2[i][j] == c:\n                    frame_3[i] += c\n                else:\n                    frame_3[i] += '.'\n\n        for i in range(m):\n            print(frame_3[i])\n\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalconPosition(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalconPosition(frame1, C)\n    x2, y2 = findFalconPosition(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][dy:] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "M, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][dy:] + ' '*dy for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n    # find the leftmost and rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n    first = []\n    second = []\n    for _ in range(M):\n        first.append(list(input()))\n    for _ in range(M):\n        second.append(list(input()))\n    for i in range(M):\n        for j in range(N):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'x'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'x'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == 'x' and first[i][j] != 'x':\n                second[i][j] = '^'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'x':\n                second[i][j] = C\n    for i in range(M):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()   # M=\u884c\u6570 N=\u5217\u6570 C=\u6587\u5b57\n    M = int(M)                  # M\u3092int\u578b\u306b\u5909\u63db\n    N = int(N)                  # N\u3092int\u578b\u306b\u5909\u63db\n    first = []                  # 1\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\n    second = []                 # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\n    for i in range(M):          # 1\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u5165\u529b\u3059\u308b\n        first.append(list(input()))  # 1\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\n    for i in range(M):          # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u5165\u529b\u3059\u308b\n        second.append(list(input()))  # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\n    for i in range(M):          # 1\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u51e6\u7406\u3059\u308b\n        for j in range(N):      # \u5217\u6570\u5206\u7e70\u308a\u8fd4\u3059\n            if first[i][j] != C:  # 1\u3064\u76ee\u306e\u6587\u5b57\u5217\u304cC\u3067\u306a\u3051\u308c\u3070\n                first[i][j] = '.'  # first\u306ei\u884cj\u5217\u76ee\u3092'.'\u306b\u5909\u63db\n            else:                  # 1\u3064\u76ee\u306e\u6587\u5b57\u5217\u304cC\u3067\u3042\u308c\u3070\n                first[i][j] = 'x'  # first\u306ei\u884cj\u5217\u76ee\u3092'x'\u306b\u5909\u63db\n            if second[i][j] != C:  # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u304cC\u3067\u306a\u3051\u308c\u3070\n                second[i][j] = '.'  # second\u306ei\u884cj\u5217\u76ee\u3092'.'\u306b\u5909\u63db\n            else:                  # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u304cC\u3067\u3042\u308c\u3070\n                second[i][j] = 'x'  # second\u306ei\u884cj\u5217\u76ee\u3092'x'\u306b\u5909\u63db\n    for i in range(M):          # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u51e6\u7406\u3059\u308b\n        for j in range(N):      # \u5217\u6570\u5206\u7e70\u308a\u8fd4\u3059\n            if second[i][j] == 'x' and first[i][j] != 'x':  # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u304cC\u30671\u3064\u76ee\u306e\u6587\u5b57\u5217\u304cC\u3067\u306a\u3044\u306a\u3089\n                second[i][j] = '^'  # second\u306ei\u884cj\u5217\u76ee\u3092'^'\u306b\u5909\u63db\n    for i in range(M):          # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u51e6\u7406\u3059\u308b\n        for j in range(N):      # \u5217\u6570\u5206\u7e70\u308a\u8fd4\u3059\n            if second[i][j] == '^':  # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u304c'^'\u306a\u3089\n                second[i][j] = '.'  # second\u306ei\u884cj\u5217\u76ee\u3092'.'\u306b\u5909\u63db\n            if second[i][j] == 'x':  # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u304c'x'\u306a\u3089\n                second[i][j] = C    # second\u306ei\u884cj\u5217\u76ee\u3092C\u306b\u5909\u63db\n    for i in range(M):          # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b\n        print(''.join(second[i]))  # 2\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u51fa\u529b\n    print()  # \u6539\u884c\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\nimport sys\n\ndef main():\n    rows, cols, c = sys.stdin.readline().split()\n    rows, cols = int(rows), int(cols)\n    frame1 = [sys.stdin.readline().rstrip() for _ in range(rows)]\n    sys.stdin.readline()\n    frame2 = [sys.stdin.readline().rstrip() for _ in range(rows)]\n\n    frame3 = []\n    for i in range(rows):\n        frame3.append(\"\")\n        for j in range(cols):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        sys.stdout.write(line + '\\n')\n    sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# M, N, C = input().split()\n# M = int(M)\n# N = int(N)\n#\n# frame1 = [input() for i in range(M)]\n# input()\n# frame2 = [input() for i in range(M)]\n#\n# def findFalconPosition(frame, C):\n#     for i in range(M):\n#         for j in range(N):\n#             if frame[i][j] == C:\n#                 return i, j\n#\n# def shift(frame1, frame2, C):\n#     x1, y1 = findFalconPosition(frame1, C)\n#     x2, y2 = findFalconPosition(frame2, C)\n#     return x1 - x2, y1 - y2\n#\n# def shiftFrame(frame, dx, dy):\n#     return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n#\n# def solve(frame1, frame2, C):\n#     dx, dy = shift(frame1, frame2, C)\n#     shiftedFrame1 = shiftFrame(frame1, dx, dy)\n#     shiftedFrame2 = shiftFrame(frame2, dx, dy)\n#     for i in range(M):\n#         for j in range(N):\n#             if frame2[i][j] == C:\n#                 shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n#     return shiftedFrame1\n#\n# print('\\n'.join(solve(frame1, frame2, C)))\n# print()\n", "\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    m, n, c = lines[0].split()\n    m, n = int(m), int(n)\n    first_frame = lines[1:m+1]\n    second_frame = lines[m+1:3*m+1]\n    result = []\n    for i in range(m):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()  # M = rows, N = columns, C = color\n    M = int(M)\n    N = int(N)\n    first = []  # list of lists of the first picture\n    second = []  # list of lists of the second picture\n    for i in range(M):\n        first.append(list(input()))\n    for i in range(M):\n        second.append(list(input()))\n    for i in range(M):\n        for j in range(N):\n            if first[i][j] != C:\n                first[i][j] = '.'  # if not C, then replace with '.'\n            else:\n                first[i][j] = 'X'  # if C, then replace with 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'  # if not C, then replace with '.'\n            else:\n                second[i][j] = 'X'  # if C, then replace with 'X'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'  # if C in second picture and not in first, then replace with '^'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == '^':\n                second[i][j] = '.'  # if '^', then replace with '.'\n            if second[i][j] == 'X':\n                second[i][j] = C  # if 'X', then replace with C\n    for i in range(M):\n        print(''.join(second[i]))\n    print()\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first_image = []\n    second_image = []\n    for _ in range(m):\n        first_image.append(list(input()))\n    for _ in range(m):\n        second_image.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first_image[i][j] != c:\n                first_image[i][j] = '.'\n            else:\n                first_image[i][j] = 'x'\n            if second_image[i][j] != c:\n                second_image[i][j] = '.'\n            else:\n                second_image[i][j] = 'x'\n    for i in range(m):\n        for j in range(n):\n            if second_image[i][j] == 'x' and first_image[i][j] != 'x':\n                second_image[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second_image[i][j] == '^':\n                second_image[i][j] = '.'\n            if second_image[i][j] == 'x':\n                second_image[i][j] = c\n    for i in range(m):\n        print(''.join(second_image[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m, c = input().split()\n    n, m = int(n), int(m) # n = height, m = width\n    frame1 = [input().rstrip() for _ in range(n)]\n    input()\n    frame2 = [input().rstrip() for _ in range(n)]\n\n    frame3 = []\n    for i in range(n):\n        frame3.append(\"\")\n        for j in range(m):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + [' '*N]*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first_matrix = []\n        for i in range(M): first_matrix.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second_matrix = []\n        for i in range(M): second_matrix.append(sys.stdin.readline())\n        for i in range(M): \n            for j in range(N): \n                if second_matrix[i][j] == C: sys.stdout.write(first_matrix[i][j])\n                else: sys.stdout.write(second_matrix[i][j])\n            sys.stdout.write(\"\\n\") \n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    rows, cols, c = input().split()\n    rows, cols = int(rows), int(cols)\n    frame1 = [input().rstrip() for _ in range(rows)]\n    input()\n    frame2 = [input().rstrip() for _ in range(rows)]\n\n    frame3 = []\n    for i in range(rows):\n        frame3.append(\"\")\n        for j in range(cols):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame (x, y)\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n\n    # find the centroid of the falcon in the second frame (x, y)\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n\n    # find the distance between the centroids\n    distance = int(((cx1-cx2)**2 + (cy1-cy2)**2)**0.5)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n\n    # find the movement of the falcon\n    if distance != 0:\n        movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    else:\n        movement = [0, 0]\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        if cx3 < M and cy3 < N and cx3 >= 0 and cy3 >= 0:\n            frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame (old)\n    # falcon1 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame1[i][j] == C:\n    #             falcon1.append((i, j))\n    # print(falcon1)\n\n    # find the falcon in the second frame (old)\n    # falcon2 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame2[i][j] == C:\n    #             falcon2.append((i, j))\n    # print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    # print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    # print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    # print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    # print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    # print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    # print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    # print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    while True:\n        M, N, C = input().split()\n        if M == N == C == '0':\n            break\n        M = int(M)\n        N = int(N)\n        first = []\n        second = []\n        for i in range(M):\n            first.append(list(input()))\n        for i in range(M):\n            second.append(list(input()))\n        for i in range(M):\n            for j in range(N):\n                if first[i][j] != C:\n                    first[i][j] = '.'\n                else:\n                    first[i][j] = 'X'\n                if second[i][j] != C:\n                    second[i][j] = '.'\n                else:\n                    second[i][j] = 'X'\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == 'X' and first[i][j] != 'X':\n                    second[i][j] = '^'\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == '^':\n                    second[i][j] = '.'\n                if second[i][j] == 'X':\n                    second[i][j] = C\n        for i in range(M):\n            print(''.join(second[i]))\n        print() \n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j)) # left half\n                falcon.append((i,j+m)) # right half\n\n    # find the leftmost and the rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and the bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first_matrix = []\n        for i in range(M):\n            first_matrix.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second_matrix = []\n        for i in range(N):\n            second_matrix.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second_matrix[i][j] == C:\n                    sys.stdout.write(first_matrix[i][j])\n                else:\n                    sys.stdout.write(second_matrix[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append([i, j])\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append([i, j])\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0][0]\n        cy1 += point[0][1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0][0]\n        cy2 += point[0][1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**(1/2)\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n, m, c = input().split()\n    n, m = int(n), int(m)\n    frame1 = [input().rstrip() for _ in range(n)]\n    input()\n    frame2 = [input().rstrip() for _ in range(n)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "def findFalcon(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalcon(frame1, C)\n    x2, y2 = findFalcon(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nif __name__ == '__main__':\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = [input() for i in range(M)]\n    input()\n    frame2 = [input() for i in range(M)]\n\n    print('\\n'.join(solve(frame1, frame2, C)))\n    print()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame_1 = []\n        for i in range(m):\n            frame_1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame_2 = []\n        for i in range(m):\n            frame_2.append(sys.stdin.readline().strip())\n\n        frame_3 = []\n        for i in range(m):\n            frame_3.append('')\n            for j in range(n):\n                if frame_1[i][j] == c:\n                    frame_3[i] += c\n                elif frame_2[i][j] == c:\n                    frame_3[i] += c\n                else:\n                    frame_3[i] += '.'\n\n        for i in range(m):\n            print(frame_3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = map(int, line.split())\n        \n        frame_1 = []\n        for i in range(m):\n            frame_1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame_2 = []\n        for i in range(m):\n            frame_2.append(sys.stdin.readline().strip())\n        \n        frame_3 = []\n        for i in range(m):\n            frame_3.append('')\n            for j in range(n):\n                if frame_1[i][j] == c:\n                    frame_3[i] += c\n                elif frame_2[i][j] == c:\n                    frame_3[i] += c\n                else:\n                    frame_3[i] += '.'\n        \n        for i in range(m):\n            print(frame_3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame (wrong)\n    #falcon1 = []\n    #for i in range(M):\n    #    for j in range(N):\n    #        if frame1[i][j] == C:\n    #            falcon1.append((i, j))\n    #print(falcon1)\n\n    # find the falcon in the second frame (wrong)\n    #falcon2 = []\n    #for i in range(M):\n    #    for j in range(N):\n    #        if frame2[i][j] == C:\n    #            falcon2.append((i, j))\n    #print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = cx1/len(falcon1)\n    cy1 = cy1/len(falcon1)\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = cx2/len(falcon2)\n    cy2 = cy2/len(falcon2)\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    first = True\n    for line in sys.stdin:\n        if first:\n            first = False\n        else:\n            m, n, c = line.split()\n            m = int(m)\n            n = int(n)\n        \n            frame1 = []\n            for i in range(m):\n                frame1.append(sys.stdin.readline().strip())\n        \n            sys.stdin.readline()\n        \n            frame2 = []\n            for i in range(m):\n                frame2.append(sys.stdin.readline().strip())\n        \n            frame3 = []\n            for i in range(m):\n                frame3.append('')\n                for j in range(n):\n                    if frame1[i][j] == c:\n                        frame3[i] += c\n                    elif frame2[i][j] == c:\n                        frame3[i] += c\n                    else:\n                        frame3[i] += '.'\n        \n            for i in range(m):\n                print(frame3[i])\n        \n            print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n                falcon.append((i,j+1))\n    # find the leftmost and rightmost points of the falcon\n    # the points are needed to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n    first = []\n    second = []\n    for i in range(M):\n        first.append(list(input()))\n    for i in range(M):\n        second.append(list(input()))\n    for i in range(M):\n        for j in range(N):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = C\n    for i in range(M):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef findFalcon(frame, c):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == c:\n                return i, j\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split(\" \")\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(N):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()  # M = rows, N = columns, C = color\n    M = int(M)\n    N = int(N)\n    first = []  # list of lists of the first picture\n    second = []  # list of lists of the second picture\n    for i in range(M):\n        first.append(list(input()))\n    for i in range(M):\n        second.append(list(input()))\n    for i in range(M):\n        for j in range(N):\n            if first[i][j] != C:\n                first[i][j] = '.'  # if not C, then replace with '.'\n            else:\n                first[i][j] = 'X'  # if C, then replace with 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'  # if not C, then replace with '.'\n            else:\n                second[i][j] = 'X'  # if C, then replace with 'X'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'  # if C in second picture and not in first, then replace with '^'\n    for i in range(M):\n        for j in range(N):\n            if second[i][j] == '^':\n                second[i][j] = '.'  # if '^', then replace with '.'\n            if second[i][j] == 'X':\n                second[i][j] = C  # if 'X', then replace with C\n    for i in range(M):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\ndef findLastWord(s):\n    return ''.join(sorted(s, key=lambda x: (-ord(x), x)))\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().rstrip() for _ in range(m)]\n    input()\n    frame2 = [input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame (wrong)\n    # falcon1 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame1[i][j] == C:\n    #             falcon1.append((i, j))\n    # print(falcon1)\n\n    # find the falcon in the second frame (wrong)\n    # falcon2 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame2[i][j] == C:\n    #             falcon2.append((i, j))\n    # print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    # print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    # print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    # print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    # print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    # print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    # print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    # print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n                falcon.append((i,j)) \n    # find the leftmost and rightmost points of the falcon\n    # the points are needed to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        try:\n            m, n, c = line.split()\n            m = int(m)\n            n = int(n)\n\n            frame1 = []\n            for i in range(m):\n                frame1.append(sys.stdin.readline().strip())\n\n            sys.stdin.readline()\n\n            frame2 = []\n            for i in range(m):\n                frame2.append(sys.stdin.readline().strip())\n\n            frame3 = []\n            for i in range(m):\n                frame3.append('')\n                for j in range(n):\n                    if frame1[i][j] == c:\n                        frame3[i] += c\n                    elif frame2[i][j] == c:\n                        frame3[i] += c\n                    else:\n                        frame3[i] += '.'\n\n            for i in range(m):\n                print(frame3[i])\n\n            print()\n        except:\n            pass\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    rows, cols, c = input().split()\n    rows, cols = int(rows), int(cols)\n    frame1 = [input().rstrip() for _ in range(rows)]\n    input()\n    frame2 = [input().rstrip() for _ in range(rows)]\n\n    frame3 = []\n    for i in range(rows):\n        frame3.append(\"\")\n        for j in range(cols):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport os\n\nimport sys\n\ndef main():\n    if os.path.exists('file.txt'):\n        with open('file.txt', 'r') as f:\n            m, n, c = f.readline().split()\n            m, n = int(m), int(n)\n            frame1 = [f.readline().rstrip() for _ in range(m)]\n            f.readline()\n            frame2 = [f.readline().rstrip() for _ in range(m)]\n\n            frame3 = []\n            for i in range(m):\n                frame3.append(\"\")\n                for j in range(n):\n                    if frame1[i][j] == frame2[i][j]:\n                        frame3[i] += frame2[i][j]\n                    elif frame1[i][j] == c:\n                        frame3[i] += frame1[i][j]\n                    else:\n                        frame3[i] += frame2[i][j]\n\n            for line in frame3:\n                print(line)\n\n            print()\n    else:\n        m, n, c = input().split()\n        m, n = int(m), int(n)\n        frame1 = [input().rstrip() for _ in range(m)]\n        input()\n        frame2 = [input().rstrip() for _ in range(m)]\n\n        frame3 = []\n        for i in range(m):\n            frame3.append(\"\")\n            for j in range(n):\n                if frame1[i][j] == frame2[i][j]:\n                    frame3[i] += frame2[i][j]\n                elif frame1[i][j] == c:\n                    frame3[i] += frame1[i][j]\n                else:\n                    frame3[i] += frame2[i][j]\n\n        for line in frame3:\n            print(line)\n\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nM, N, C = input().split()\nM, N = int(M), int(N)\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalconPosition(frame, C):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == C:\n                return i, j\n\ndef shift(frame1, frame2, C):\n    x1, y1 = findFalconPosition(frame1, C)\n    x2, y2 = findFalconPosition(frame2, C)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, C):\n    dx, dy = shift(frame1, frame2, C)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + C + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\n\nimport sys\n\ndef main():\n    n, m, c = input().split()\n    n, m = int(n), int(m) # n: rows, m: columns\n    frame1 = [input().rstrip() for _ in range(n)]\n    input()\n    frame2 = [input().rstrip() for _ in range(n)]\n\n    frame3 = []\n    for i in range(n):\n        frame3.append(\"\")\n        for j in range(m):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.strip().split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = [''] * n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                falcon.append((i,j+m))\n\n    # find the leftmost and the rightmost points\n    # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and the bottommost points\n    # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = [''] * n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    m, n, c = input().split() \n    m, n = int(m), int(n)\n    frame1 = [input().rstrip() for _ in range(m)]\n    input()\n    frame2 = [input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the center of the falcon in the first frame,\n    # if the falcon is not found, then return\n    cx1 = 0\n    cy1 = 0\n    if cx1 == 0 and cy1 == 0:\n        return\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the center of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    if cx2 == 0 and cy2 == 0:\n        return\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centers\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    for line in frame3:\n        print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(N):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the center of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the center of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centers\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for _ in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame2 = []\n        for _ in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()  # noqa: E701\n        M = int(M)\n        N = int(N)\n        first_matrix = []\n        for i in range(M):\n            first_matrix.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second_matrix = []\n        for i in range(N):\n            second_matrix.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second_matrix[i][j] == C:\n                    sys.stdout.write(first_matrix[i][j])\n                else:\n                    sys.stdout.write(second_matrix[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame (old)\n    # falcon1 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame1[i][j] == C:\n    #             falcon1.append((i, j))\n    # print(falcon1)\n\n    # find the falcon in the second frame (old)\n    # falcon2 = []\n    # for i in range(M):\n    #     for j in range(N):\n    #         if frame2[i][j] == C:\n    #             falcon2.append((i, j))\n    # print(falcon2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"]