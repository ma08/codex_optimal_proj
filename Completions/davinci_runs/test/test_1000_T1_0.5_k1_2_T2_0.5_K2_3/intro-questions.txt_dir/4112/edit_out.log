2022-04-12 17:12:27.289206 num operations 2
2022-04-12 17:12:27.289222 size on input set 1
2022-04-12 17:12:31.403834 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 1,
      "text": "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j - 1]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 2,
      "text": "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    }
  ],
  "created": 1649783547,
  "object": "edit"
}
2022-04-12 17:12:31.404082 fix spelling mistakes 3 ['\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j - 1]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n']
2022-04-12 17:12:31.404136 size on output set 2
2022-04-12 17:12:31.404143 size on input set 2
2022-04-12 17:12:51.936418 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive) with j - i >= k\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\nfor i in range(n):\n    dp[i][i + 1] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width + 1):\n        j = i + width - 1\n        dp[i][j + 1] = max(dp[i][j], dp[i + 1][j + 1], dp[i][j] + pictures[j])\n\nfor row in dp:\n    print(row)\n\nif x == n:\n    print(dp[0][n])\nelif x > n:\n    print(-1)\nelse:\n    # with j - i >= k and j - i >= x and i <= j - x\n    dp2 = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(n):\n        dp2[i][i + 1] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width + 1):\n            j = i + width - 1\n            dp2[i][j + 1] = max(dp2[i][j], dp2[i + 1][j + 1], dp2[i][j] + pictures[j])\n\n    for row in dp2:\n        print(row)\n\n    print(dp2[0][n])\n"
    },
    {
      "index": 1,
      "text": "\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n + 1)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n + 1):\n    for i in range(n - width):\n        j = i + width\n        dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n + 1)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n + 1):\n        for i in range(n - width):\n            j = i + width\n            dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 2,
      "text": "\nprint(\"Hello world\")\n"
    }
  ],
  "created": 1649783551,
  "object": "edit"
}
2022-04-12 17:12:51.936763 fix syntax errors 3 ['\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive) with j - i >= k\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\nfor i in range(n):\n    dp[i][i + 1] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width + 1):\n        j = i + width - 1\n        dp[i][j + 1] = max(dp[i][j], dp[i + 1][j + 1], dp[i][j] + pictures[j])\n\nfor row in dp:\n    print(row)\n\nif x == n:\n    print(dp[0][n])\nelif x > n:\n    print(-1)\nelse:\n    # with j - i >= k and j - i >= x and i <= j - x\n    dp2 = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(n):\n        dp2[i][i + 1] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width + 1):\n            j = i + width - 1\n            dp2[i][j + 1] = max(dp2[i][j], dp2[i + 1][j + 1], dp2[i][j] + pictures[j])\n\n    for row in dp2:\n        print(row)\n\n    print(dp2[0][n])\n', '\n\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n + 1)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n + 1):\n    for i in range(n - width):\n        j = i + width\n        dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j] (inclusive)\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n + 1)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n + 1):\n        for i in range(n - width):\n            j = i + width\n            dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\nprint("Hello world")\n']
2022-04-12 17:13:05.776464 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j - 1]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 1,
      "text": "\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k - 1\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j] - pictures[j - k + 1])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    },
    {
      "index": 2,
      "text": "\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j - 1]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n"
    }
  ],
  "created": 1649783571,
  "object": "edit"
}
2022-04-12 17:13:05.776672 fix syntax errors 3 ['\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j - 1]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j]\n# with j - i >= k - 1\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j] - pictures[j - k + 1])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n', '\nn, k, x = map(int, input().split())\npictures = list(map(int, input().split()))\n\n# print(n, k, x)\n# print(pictures)\n\n# dp[i][j] = max sum of pictures from range [i, j - 1]\n# with j - i >= k\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = pictures[i]\n\nfor width in range(1, n):\n    for i in range(n - width):\n        j = i + width\n        if j - i + 1 < k:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], dp[i][j - 1] + pictures[j])\n\n# for row in dp:\n#     print(row)\n\nif x == n:\n    print(dp[0][n - 1])\nelif x > n:\n    print(-1)\nelse:\n    # dp[i][j] = max sum of pictures from range [i, j - 1]\n    # with j - i >= k and j - i >= x\n    dp2 = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp2[i][i] = pictures[i]\n\n    for width in range(1, n):\n        for i in range(n - width):\n            j = i + width\n            if j - i + 1 < k or j - i + 1 < x:\n                dp2[i][j] = 0\n            else:\n                dp2[i][j] = max(dp2[i][j - 1], dp2[i + 1][j], dp2[i][j - 1] + pictures[j])\n\n    # for row in dp2:\n    #     print(row)\n\n    print(dp2[0][n - 1])\n']
2022-04-12 17:13:05.776807 size on output set 5
2022-04-12 17:13:05.776826 num operations 2
2022-04-12 17:13:05.776831 size on input set 1
2022-04-12 17:13:32.004170 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())  # n: \u9802\u70b9\u6570, k: \u8fba\u6570, x: \u59cb\u70b9\n    A = list(map(int, input().split()))  # \u9802\u70b9\u306e\u4fa1\u5024\n    if x < k:  # \u59cb\u70b9\u304b\u3089k\u672c\u4ee5\u4e0a\u306e\u8fba\u3092\u5f35\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\n        print(-1)  # -1\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 1:  # k == 1\u306e\u3068\u304d\n        print(sum(A))  # \u5168\u3066\u306e\u9802\u70b9\u3092\u9078\u629e\u3057\u305f\u3068\u304d\u306e\u4fa1\u5024\u306e\u548c\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 2:  # k == 2\u306e\u3068\u304d\n        print(max(A))  # \u4fa1\u5024\u304c\u6700\u5927\u306e\u9802\u70b9\u306e\u5024\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 3:  # k == 3\u306e\u3068\u304d\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 4:  # k == 4\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 5:  # k == 5\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n    return  # \u7d42\u4e86\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649783585,
  "object": "edit"
}
2022-04-12 17:13:32.004378 fix spelling mistakes 3 ["\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())  # n: 頂点数, k: 辺数, x: 始点\n    A = list(map(int, input().split()))  # 頂点の価値\n    if x < k:  # 始点からk本以上の辺を張ることができない\n        print(-1)  # -1を出力\n        return  # 終了\n    if k == 1:  # k == 1のとき\n        print(sum(A))  # 全ての頂点を選択したときの価値の和を出力\n        return  # 終了\n    if k == 2:  # k == 2のとき\n        print(max(A))  # 価値が最大の頂点の値を出力\n        return  # 終了\n    if k == 3:  # k == 3のとき\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # 始点と終点を選択するか, 最初と最後以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    if k == 4:  # k == 4のとき\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # 始点と終点, 始点から2番目と終点から2番目の頂点を選択するか, 最初と最後から2番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    if k == 5:  # k == 5のとき\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # 始点と終点, 始点から2番目, 3番目と終点から2番目, 3番目の頂点を選択するか, 最初と最後から2番目, 3番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # 始点と終点, 始点から2番目, 3番目, 4番目と終点から2番目, 3番目, 4番目の頂点を選択するか, 最初と最後から2番目, 3番目, 4番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n    return  # 終了\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:13:32.004441 size on output set 3
2022-04-12 17:13:32.004535 size on input set 3
2022-04-12 17:13:39.687644 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649783612,
  "object": "edit"
}
2022-04-12 17:13:39.687827 fix syntax errors 3 ["\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x < k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n - 1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n - 2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n - 3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n - 4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:13:53.844074 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())  # n: \u9802\u70b9\u6570, k: \u8fba\u6570, x: \u59cb\u70b9\n    A = list(map(int, input().split()))  # \u9802\u70b9\u306e\u4fa1\u5024\n    if x < k:  # \u59cb\u70b9\u304b\u3089k\u672c\u4ee5\u4e0a\u306e\u8fba\u3092\u5f35\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\n        print(-1)  # -1\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    elif k == 1:  # k == 1\u306e\u3068\u304d\n        print(sum(A))  # \u5168\u3066\u306e\u9802\u70b9\u3092\u9078\u629e\u3057\u305f\u3068\u304d\u306e\u4fa1\u5024\u306e\u548c\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    elif k == 2:  # k == 2\u306e\u3068\u304d\n        print(max(A))  # \u4fa1\u5024\u304c\u6700\u5927\u306e\u9802\u70b9\u306e\u5024\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    elif k == 3:  # k == 3\u306e\u3068\u304d\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    elif k == 4:  # k == 4\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    elif k == 5:  # k == 5\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    else:  # \u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n    return  # \u7d42\u4e86\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())  # n: \u9802\u70b9\u6570, k: \u8fba\u6570, x: \u59cb\u70b9\n    A = list(map(int, input().split()))  # \u9802\u70b9\u306e\u4fa1\u5024\n    if x < k:  # \u59cb\u70b9\u304b\u3089k\u672c\u4ee5\u4e0a\u306e\u8fba\u3092\u5f35\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\n        print(-1)  # -1\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 1:  # k == 1\u306e\u3068\u304d\n        print(sum(A))  # \u5168\u3066\u306e\u9802\u70b9\u3092\u9078\u629e\u3057\u305f\u3068\u304d\u306e\u4fa1\u5024\u306e\u548c\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 2:  # k == 2\u306e\u3068\u304d\n        print(max(A))  # \u4fa1\u5024\u304c\u6700\u5927\u306e\u9802\u70b9\u306e\u5024\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 3:  # k == 3\u306e\u3068\u304d\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 4:  # k == 4\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 5:  # k == 5\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\u3059\u308b\n    return  # \u7d42\u4e86\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())  # n: \u9802\u70b9\u6570, k: \u8fba\u6570, x: \u59cb\u70b9\n    A = list(map(int, input().split()))  # \u9802\u70b9\u306e\u4fa1\u5024\n    if x < k:  # \u59cb\u70b9\u304b\u3089k\u672c\u4ee5\u4e0a\u306e\u8fba\u3092\u5f35\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\n        print(-1)  # -1\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 1:  # k == 1\u306e\u3068\u304d\n        print(sum(A))  # \u5168\u3066\u306e\u9802\u70b9\u3092\u9078\u629e\u3057\u305f\u3068\u304d\u306e\u4fa1\u5024\u306e\u548c\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 2:  # k == 2\u306e\u3068\u304d\n        print(max(A))  # \u4fa1\u5024\u304c\u6700\u5927\u306e\u9802\u70b9\u306e\u5024\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 3:  # k == 3\u306e\u3068\u304d\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 4:  # k == 4\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    if k == 5:  # k == 5\u306e\u3068\u304d\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\n        return  # \u7d42\u4e86\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # \u59cb\u70b9\u3068\u7d42\u70b9, \u59cb\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u3068\u7d42\u70b9\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b, \u6700\u521d\u3068\u6700\u5f8c\u304b\u30892\u756a\u76ee, 3\u756a\u76ee, 4\u756a\u76ee\u306e\u9802\u70b9\u4ee5\u5916\u306e\u9802\u70b9\u3092\u9078\u629e\u3059\u308b\u304b\u306e\u3046\u3061, \u4fa1\u5024\u306e\u548c\u304c\u5927\u304d\u3044\u65b9\u3092\u51fa\u529b\u3059\u308b\n    return  # \u7d42\u4e86\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649783619,
  "object": "edit"
}
2022-04-12 17:13:53.844373 fix syntax errors 3 ["\n\ndef main():\n    n, k, x = map(int, input().split())  # n: 頂点数, k: 辺数, x: 始点\n    A = list(map(int, input().split()))  # 頂点の価値\n    if x < k:  # 始点からk本以上の辺を張ることができない\n        print(-1)  # -1を出力\n        return  # 終了\n    elif k == 1:  # k == 1のとき\n        print(sum(A))  # 全ての頂点を選択したときの価値の和を出力\n        return  # 終了\n    elif k == 2:  # k == 2のとき\n        print(max(A))  # 価値が最大の頂点の値を出力\n        return  # 終了\n    elif k == 3:  # k == 3のとき\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # 始点と終点を選択するか, 最初と最後以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    elif k == 4:  # k == 4のとき\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # 始点と終点, 始点から2番目と終点から2番目の頂点を選択するか, 最初と最後から2番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    elif k == 5:  # k == 5のとき\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # 始点と終点, 始点から2番目, 3番目と終点から2番目, 3番目の頂点を選択するか, 最初と最後から2番目, 3番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    else:  # それ以外のとき\n        print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # 始点と終点, 始点から2番目, 3番目, 4番目と終点から2番目, 3番目, 4番目の頂点を選択するか, 最初と最後から2番目, 3番目, 4番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n    return  # 終了\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())  # n: 頂点数, k: 辺数, x: 始点\n    A = list(map(int, input().split()))  # 頂点の価値\n    if x < k:  # 始点からk本以上の辺を張ることができない\n        print(-1)  # -1を出力\n        return  # 終了\n    if k == 1:  # k == 1のとき\n        print(sum(A))  # 全ての頂点を選択したときの価値の和を出力\n        return  # 終了\n    if k == 2:  # k == 2のとき\n        print(max(A))  # 価値が最大の頂点の値を出力\n        return  # 終了\n    if k == 3:  # k == 3のとき\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # 始点と終点を選択するか, 最初と最後以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    if k == 4:  # k == 4のとき\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # 始点と終点, 始点から2番目と終点から2番目の頂点を選択するか, 最初と最後から2番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    if k == 5:  # k == 5のとき\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # 始点と終点, 始点から2番目, 3番目と終点から2番目, 3番目の頂点を選択するか, 最初と最後から2番目, 3番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # 始点と終点, 始点から2番目, 3番目, 4番目と終点から2番目, 3番目, 4番目の頂点を選択するか, 最初と最後から2番目, 3番目, 4番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力する\n    return  # 終了\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())  # n: 頂点数, k: 辺数, x: 始点\n    A = list(map(int, input().split()))  # 頂点の価値\n    if x < k:  # 始点からk本以上の辺を張ることができない\n        print(-1)  # -1を出力\n        return  # 終了\n    if k == 1:  # k == 1のとき\n        print(sum(A))  # 全ての頂点を選択したときの価値の和を出力\n        return  # 終了\n    if k == 2:  # k == 2のとき\n        print(max(A))  # 価値が最大の頂点の値を出力\n        return  # 終了\n    if k == 3:  # k == 3のとき\n        print(max(A[0] + A[-1], max(A[1:n-1])))  # 始点と終点を選択するか, 最初と最後以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    if k == 4:  # k == 4のとき\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))  # 始点と終点, 始点から2番目と終点から2番目の頂点を選択するか, 最初と最後から2番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    if k == 5:  # k == 5のとき\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))  # 始点と終点, 始点から2番目, 3番目と終点から2番目, 3番目の頂点を選択するか, 最初と最後から2番目, 3番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力\n        return  # 終了\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))  # 始点と終点, 始点から2番目, 3番目, 4番目と終点から2番目, 3番目, 4番目の頂点を選択するか, 最初と最後から2番目, 3番目, 4番目の頂点以外の頂点を選択するかのうち, 価値の和が大きい方を出力する\n    return  # 終了\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:14:02.388014 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if n <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649783633,
  "object": "edit"
}
2022-04-12 17:14:02.388311 fix syntax errors 3 ["\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:n-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:n-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:n-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:n-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if x <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    if n <= k:\n        print(-1)\n        return\n    if k == 1:\n        print(sum(A))\n        return\n    if k == 2:\n        print(max(A))\n        return\n    if k == 3:\n        print(max(A[0] + A[-1], max(A[1:-1])))\n        return\n    if k == 4:\n        print(max(A[0] + A[1] + A[-2] + A[-1], max(A[2:-2])))\n        return\n    if k == 5:\n        print(max(A[0] + A[1] + A[2] + A[-3] + A[-2] + A[-1], max(A[3:-3])))\n        return\n    print(max(A[0] + A[1] + A[2] + A[3] + A[-4] + A[-3] + A[-2] + A[-1], max(A[4:-4])))\n    return\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:14:02.388374 size on output set 8
