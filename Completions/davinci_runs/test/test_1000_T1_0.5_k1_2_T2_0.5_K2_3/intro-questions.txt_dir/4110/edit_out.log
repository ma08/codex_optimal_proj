2022-04-12 17:10:48.562675 num operations 2
2022-04-12 17:10:48.562693 size on input set 1
2022-04-12 17:10:57.197520 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cumsum = list(accumulate([0] + P))\n    P_cumsum.pop(0)\n    C_cumsum = list(accumulate([0] + C))\n    C_cumsum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649783448,
  "object": "edit"
}
2022-04-12 17:10:57.197751 fix spelling mistakes 3 ["\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cumsum = list(accumulate([0] + P))\n    P_cumsum.pop(0)\n    C_cumsum = list(accumulate([0] + C))\n    C_cumsum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:10:57.197881 size on output set 2
2022-04-12 17:10:57.197890 size on input set 2
2022-04-12 17:11:11.195235 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD) (\u3053\u308c\u304c\u6b63\u3057\u3044)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n    # ans = 10**10\n    # for i in range(D):\n    #     score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n    #     if score >= G:\n    #         ans = min(ans, P_cum[i])\n    #     else:\n    #         cnt = P_cum[i]\n    #         score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n    #         cnt += (P_cum[-1] - P_cum[i])\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #         else:\n    #             idx = bisect_left(C_cum[i + 1:], G - score)\n    #             ans = min(ans, cnt + idx)\n    # print(ans)\n\n    # O(DlogD)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        if C[i] == 0:\n            if P_cum[i] * 100 * (i + 1) < G:\n                idx = bisect_left(C_cum[i + 1:], G - P_cum[i] * 100 * (i + 1))\n                ans = min(ans, P_cum[i] + idx)\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649783457,
  "object": "edit"
}
2022-04-12 17:11:11.195470 fix syntax errors 3 ["\n\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(DlogD) (これが正しい)\n    ans = 10**10\n    for i in range(D):\n        score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n        if score >= G:\n            ans = min(ans, P_cum[i])\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cum = list(accumulate([0] + P))\n    P_cum.pop(0)\n\n    C_cum = list(accumulate([0] + C))\n    C_cum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n    # ans = 10**10\n    # for i in range(D):\n    #     score = C_cum[i] + 100 * (i + 1) * P_cum[i]\n    #     if score >= G:\n    #         ans = min(ans, P_cum[i])\n    #     else:\n    #         cnt = P_cum[i]\n    #         score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n    #         cnt += (P_cum[-1] - P_cum[i])\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #         else:\n    #             idx = bisect_left(C_cum[i + 1:], G - score)\n    #             ans = min(ans, cnt + idx)\n    # print(ans)\n\n    # O(DlogD)\n\n    # O(DlogD)\n    ans = 10**10\n    for i in range(D):\n        if C[i] == 0:\n            if P_cum[i] * 100 * (i + 1) < G:\n                idx = bisect_left(C_cum[i + 1:], G - P_cum[i] * 100 * (i + 1))\n                ans = min(ans, P_cum[i] + idx)\n        else:\n            cnt = P_cum[i]\n            score += 100 * (i + 1) * (P_cum[-1] - P_cum[i])\n            cnt += (P_cum[-1] - P_cum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:11:15.199184 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cumsum = list(accumulate([0] + P))\n    P_cumsum.pop(0)\n    C_cumsum = list(accumulate([0] + C))\n    C_cumsum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cumsum = list(accumulate(P))\n    C_cumsum = list(accumulate(C))\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])  # noqa\n    P = list(P)  # noqa\n    C = list(C)  # noqa\n    P_cumsum = list(accumulate([0] + P))\n    P_cumsum.pop(0)\n    C_cumsum = list(accumulate([0] + C))\n    C_cumsum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649783471,
  "object": "edit"
}
2022-04-12 17:11:15.199415 fix syntax errors 3 ["\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cumsum = list(accumulate([0] + P))\n    P_cumsum.pop(0)\n    C_cumsum = list(accumulate([0] + C))\n    C_cumsum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])\n    P = list(P)\n    C = list(C)\n    P_cumsum = list(accumulate(P))\n    C_cumsum = list(accumulate(C))\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "\n# -*- coding: utf-8 -*-\n\ndef main():\n    from sys import stdin\n    from itertools import accumulate\n    from bisect import bisect_left\n\n    readline = stdin.readline\n\n    D, G = map(int, readline().split())\n    P, C = zip(*[map(int, readline().split()) for _ in range(D)])  # noqa\n    P = list(P)  # noqa\n    C = list(C)  # noqa\n    P_cumsum = list(accumulate([0] + P))\n    P_cumsum.pop(0)\n    C_cumsum = list(accumulate([0] + C))\n    C_cumsum.pop(0)\n\n    # O(D^2)\n    # ans = 10**10\n    # for i in range(2**D):\n    #     score = 0\n    #     cnt = 0\n    #     for j in range(D):\n    #         if i >> j & 1:\n    #             score += 100 * (j + 1) * P[j] + C[j]\n    #             cnt += P[j]\n    #     for j in range(D - 1, -1, -1):\n    #         if score >= G:\n    #             ans = min(ans, cnt)\n    #             break\n    #         if i >> j & 1:\n    #             continue\n    #         for k in range(P[j]):\n    #             if score >= G:\n    #                 break\n    #             score += 100 * (j + 1)\n    #             cnt += 1\n    #     else:\n    #         ans = min(ans, cnt)\n    # print(ans)\n\n    # O(D)\n    ans = 10**10\n    for i in range(D):\n        score = C_cumsum[i] + 100 * (i + 1) * P_cumsum[i]\n        if score >= G:\n            ans = min(ans, P_cumsum[i])\n        else:\n            cnt = P_cumsum[i]\n            score += 100 * (i + 1) * (P_cumsum[-1] - P_cumsum[i])\n            cnt += (P_cumsum[-1] - P_cumsum[i])\n            if score >= G:\n                ans = min(ans, cnt)\n            else:\n                idx = bisect_left(C_cumsum[i + 1:], G - score)\n                ans = min(ans, cnt + idx)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:11:15.199548 size on output set 6
2022-04-12 17:11:15.199561 num operations 2
2022-04-12 17:11:15.199567 size on input set 1
2022-04-12 17:11:17.781799 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649783475,
  "object": "edit"
}
2022-04-12 17:11:17.781992 fix spelling mistakes 3 ['\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 17:11:17.782037 size on output set 2
2022-04-12 17:11:17.782043 size on input set 2
2022-04-12 17:11:21.401863 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649783477,
  "object": "edit"
}
2022-04-12 17:11:21.402111 fix syntax errors 3 ['\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that needs to be solved in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 17:11:25.192300 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [0] * D, [0] * D\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p[i] = pi\n        c[i] = ci\n\n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # Calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points.\n    ans = float('inf')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649783481,
  "object": "edit"
}
2022-04-12 17:11:25.192482 fix syntax errors 3 ['\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [0] * D, [0] * D\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p[i] = pi\n        c[i] = ci\n\n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n\n    # calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    D, G = map(int, input().split())\n    p, c = [], []\n    for i in range(D):\n        pi, ci = map(int, input().split())\n        p.append(pi)\n        c.append(ci)\n    \n    # Calculate the minimum number of problems that need to be solved\n    # in order to have a total score of G or more points.\n    ans = float(\'inf\')\n    for i in range(2**D):\n        score = 0\n        res = 0\n        for j in range(D):\n            if (i>>j)&1:\n                score += 100 * (j+1) * p[j] + c[j]\n                res += p[j]\n        for j in range(D-1, -1, -1):\n            if (i>>j)&1 == 0:\n                for k in range(p[j]):\n                    res += 1\n                    score += 100 * (j+1)\n                    if score >= G:\n                        break\n                break\n        if score >= G:\n            ans = min(ans, res)\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 17:11:25.192592 size on output set 5
