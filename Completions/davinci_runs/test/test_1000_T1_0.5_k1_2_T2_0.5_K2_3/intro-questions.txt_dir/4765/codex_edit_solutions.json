["# -*- coding: utf-8 -*-\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff, memo):\n    if (curr_s, curr_b) in memo:\n        return memo[(curr_s, curr_b)]\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    if (curr_s, curr_b) in memo:\n        return memo[(curr_s, curr_b)]\n    a = min_diff(s, b, n, index + 1, curr_s, curr_b, diff, memo)\n    b = min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff, memo)\n    c = min(a, b)\n    memo[(curr_s, curr_b)] = c\n    return c\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000, dict()))\n", "\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n = int(input())\n\n    sourness = [0] * n\n    bitterness = [0] * n\n\n    for i in range(n):\n        line = input().split()\n        sourness[i] = int(line[0])\n        bitterness[i] = int(line[1])\n\n    min_diff = 1000000000\n\n    for i in range(2**n):\n        sour = 1\n        bitter = 0\n        for j in range(n):\n            if (i >> j) % 2 == 1:\n                sour *= sourness[j]\n                bitter += bitterness[j]\n        min_diff = min(min_diff, abs(sour - bitter))\n\n    print(min_diff)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION\n\ndef file(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(file(n, a))\n", "\n\nfrom math import sqrt\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients, d):\n    s = 1.0\n    b = 0.0\n    for i in range(n-1):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    s = round(s, d)\n    b = round(b, d)\n    minimum = abs(s-b)\n    for i in range(n-1):\n        s = round(s/ingredients[i][0], d)\n        b = round(b-ingredients[i][1], d)\n        minimum = min(minimum, abs(s-b))\n        s = round(s*ingredients[i][0], d)\n        b = round(b+ingredients[i][1], d)\n    return minimum\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients, 5))\n", "\n#SOLUTION 1\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n#SOLUTION 2\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n\n#SOLUTION 3\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n\n#SOLUTION 4\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\nprint(perket(n, a))\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsournesss = []\nbitternesss = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sournesss.append(int(line[0]))\n    bitternesss.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sournesss[j]\n            bitter += bitternesss[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "#!/usr/bin/env python3\n\nimport itertools\n\nn = int(input())\ningredient = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    ingredient.append((s, b))\n\ncombinations = list(itertools.combinations(ingredient, 1))\n\nfor i in range(2, n+1):\n    combinations.extend(list(itertools.combinations(ingredient, i)))\n\ncombinations = [list(x) for x in combinations]\n\nmin_diff = float('inf')\n\nfor combo in combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\n'''\nimport itertools\n\nn = int(input())\npark_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    park_ingredients.append((s, b))\n\npark_combinations = list(itertools.combinations(park_ingredients, 1))\n\nfor i in range(2, n+1):\n    park_combinations.extend(list(itertools.combinations(park_ingredients, i)))\n\npark_combinations = [list(x) for x in park_combinations]\n\nmin_diff = float('inf')\n\nfor combo in park_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n'''\nn = int(input())\n\ningredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    ingredients.append((s, b))\n\ncombinations = list(itertools.combinations(ingredients, 1))\n\nfor i in range(2, n+1):\n    combinations.extend(list(itertools.combinations(ingredients, i)))\n\ncombinations = [list(x) for x in combinations]\n\nmin_diff = float('inf')\n\nfor combo in combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\t# min_diff = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdiff = abs(s-b)\n\t# \t\tif diff < min_diff:\n\t# \t\t\tmin_diff = diff\n\t# print(min_diff)\n\t\n\t# min_diff = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdiff = abs(s-b)\n\t# \t\t\tif diff < min_diff:\n\t# \t\t\t\tmin_diff = diff\n\t# print(min_diff)\n\t\n\tmin_diff = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]*meal[l][1]\n\t\t\t\t\tdiff = abs(s-b)\n\t\t\t\t\tif diff < min_diff:\n\t\t\t\t\t\tmin_diff = diff\n\tprint(min_diff)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, min_diff_so_far): # s = s_i, b = b_i, n = n, index = i, curr_s = s, curr_b = b, min_diff_so_far = best\n    if index == n: # if i == n\n        return abs(curr_s - curr_b) # return |s - b|\n    if min_diff_so_far < abs(curr_s - curr_b): # if best < |s - b|\n        return min_diff_so_far # return best\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, min_diff_so_far), # return min(min_diff(s_i, b_i, n, i+1, s, b, best),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], min_diff_so_far)) # min_diff(s_i, b_i, n, i+1, s * s_i, b + b_i, best))\n\nn = int(sys.stdin.readline()) # n = int(input())\ns = [] # s = []\nb = [] # b = []\nfor i in range(n): # for i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()] # s_i, b_i = [int(x) for x in input().split()]\n    s.append(s_i) # s.append(s_i)\n    b.append(b_i) # b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000)) # print(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "N = int(input())\n\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness-bitterness))\n", "\n\n# SOLUTION \n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\tprint(meal[0])\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort(key=lambda x: x[0])\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0][0]\n\n    for i in range(1, n):\n        if ingredients[i][0] != ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i][0]\n\n    print(minDiffIngredient)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION\n\ndef perket(n, a): \n    if n == 1: \n        return abs(a[0][0] - a[0][1]) \n    m = 10**9 \n    for i in range(n): \n        for j in range(i+1, n): \n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1]))) \n    return m \n\nn = int(input()) \na = [] \nfor i in range(n): \n    a.append(list(map(int, input().split()))) \nprint(perket(n, a)) \n", "\n\ndef get_min_diff(perk_ingredient, n):\n    import itertools\n    perk_combinations = list(itertools.combinations(perk_ingredient, 1))\n\n    for i in range(2, n+1):\n        perk_combinations.extend(list(itertools.combinations(perk_ingredient, i)))\n\n    perk_combinations = [list(x) for x in perk_combinations]\n\n    min_diff = float('inf')\n\n    for combo in perk_combinations:\n        s_sum = 1\n        b_sum = 0\n        for ing in combo:\n            s_sum *= ing[0]\n            b_sum += ing[1]\n        diff = abs(s_sum - b_sum)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n\nn = int(input().strip())\nperk_ingredient = []\nfor _ in range(n):\n    s, b = [int(x) for x in input().strip().split()]\n    perk_ingredient.append((s, b))\n\nprint(get_min_diff(perk_ingredient, n))\n", "import sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdif = abs(s-b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n#SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1]*a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n", "\n# -*- coding: utf-8 -*-\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, diff, memo):\n    if (curr_s, curr_b) in memo:\n        return memo[(curr_s, curr_b)]\n    if index == n:\n        return abs(curr_s - curr_b)\n    if diff < abs(curr_s - curr_b):\n        return diff\n    if (curr_s, curr_b) in memo:\n        return memo[(curr_s, curr_b)]\n    a = min_diff(s, b, n, index + 1, curr_s, curr_b, diff, memo)\n    b = min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], diff, memo)\n    c = min(a, b)\n    memo[(curr_s, curr_b)] = c\n    return c\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000, dict()))\n", "\nimport sys\nn = int(sys.stdin.readline())\n\nsourness = [0] * n\nbitterness = [0] * n\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness[i] = int(line[0])\n    bitterness[i] = int(line[1])\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsournesses = []\nbitternesss = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sournesses.append(int(line[0]))\n    bitternesss.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sournesses_sum = 1\n    bitternesses_sum = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sournesses_sum *= sournesses[j]\n            bitternesses_sum += bitternesss[j]\n    min_diff = min(min_diff, abs(sournesses_sum - bitternesses_sum))\n\nprint(min_diff)\n", "\n\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, min_d, lookup):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if min_d < abs(curr_s - curr_b):\n        return min_d\n    if (curr_s, curr_b) in lookup:\n        return lookup[(curr_s, curr_b)]\n    lookup[(curr_s, curr_b)] = min(min_diff(s, b, n, index + 1, curr_s, curr_b, min_d, lookup),\n                                   min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], min_d, lookup))\n    return lookup[(curr_s, curr_b)]\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000, {}))\n", "\nimport itertools\n\nn = int(input())\npark_ingredients = []\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    park_ingredients.append((s, b))\npark_combinations = list(itertools.combinations(park_ingredients, 1))\nfor i in range(2, n+1):\n    park_combinations.extend(list(itertools.combinations(park_ingredients, i)))\n\npark_combinations = [list(x) for x in park_combinations]\n\nmin_diff = float('inf')\n\nfor combo in park_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\t# print(meal)\n\t\n\t# min_diff = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdiff = abs(s-b)\n\t# \t\tif diff < min_diff:\n\t# \t\t\tmin_diff = diff\n\t# print(min_diff)\n\t\n\t# min_diff = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t# \t\t\tdiff = abs(s-b)\n\t# \t\t\tif diff < min_diff:\n\t# \t\t\t\tmin_diff = diff\n\t# print(min_diff)\n\t\n\tmin_diff = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdiff = abs(s-b)\n\t\t\t\t\tif diff < min_diff:\n\t\t\t\t\t\tmin_diff = diff\n\tprint(min_diff)\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b):\n    if index == n: return abs(curr_s - curr_b)\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index]))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0))\n", "\n\nimport sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, min_diff_so_far):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if min_diff_so_far < abs(curr_s - curr_b):\n    if curr_s < 0 or curr_b < 0:\n        return 100000000\n        return min_diff_so_far\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, min_diff_so_far),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], min_diff_so_far))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "# SOLUTION\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10 ** 9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nprint(perket(n, a))\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    min_diff = abs(ingredients[0][0] - ingredients[0][1])\n    min_diff_ingredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_ingredient = ingredients[i]\n\n    print(min_diff)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, min_diff_so_far, memo):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if min_diff_so_far < abs(curr_s - curr_b):\n        return min_diff_so_far\n    if memo[index][curr_s][curr_b] != -1:\n        return memo[index][curr_s][curr_b]\n    memo[index][curr_s][curr_b] = min(min_diff(s, b, n, index + 1, curr_s, curr_b, min_diff_so_far, memo),\n                                      min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], min_diff_so_far, memo))\n    return memo[index][curr_s][curr_b]\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nmemo = [[[-1 for _ in range(10000)] for _ in range(10000)] for _ in range(n + 1)]\nprint(min_diff(s, b, n, 0, 1, 0, 100000000, memo))\n", "import sys\n\ndef min_diff(s, b, n, index, curr_s, curr_b, min_d):\n    if index == n:\n        return abs(curr_s - curr_b)\n    if min_d < abs(curr_s - curr_b):\n        return min_d\n    return min(min_diff(s, b, n, index + 1, curr_s, curr_b, min_d),\n               min_diff(s, b, n, index + 1, curr_s * s[index], curr_b + b[index], min_d))\n\nn = int(sys.stdin.readline())\ns = []\nb = []\nfor i in range(n):\n    s_i, b_i = [int(x) for x in sys.stdin.readline().split()]\n    s.append(s_i)\n    b.append(b_i)\nprint(min_diff(s, b, n, 0, 1, 0, 100000000))\n", "N = int(input())\nsourness = 1\nbitterness = 0\nfor i in range(N):\n    S, B = map(int, input().split())\n    sourness *= S\n    bitterness += B\n\nprint(abs(sourness-bitterness))\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0][0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i][0]\n\n    print(minDiffIngredient)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients, s, b):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\ns = 1\nb = 0\nprint(main(n, ingredients, s, b))\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\n\tprint(meal)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort(key=lambda x: x[0])\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0][0]\n\n    for i in range(1, n):\n        diff = abs(ingredients[i][0] - ingredients[i][1])\n        if diff < minDiff:\n            minDiff = diff\n            minDiffIngredient = ingredients[i][0]\n\n    print(minDiff)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef perket(n, a):\n    if n == 1:\n        return abs(a[0][0] - a[0][1])\n    m = 10**9\n    for i in range(n):\n        for j in range(i+1, n):\n            m = min(m, abs((a[i][0]*a[j][0]) - (a[i][1] + a[j][1])))\n    return m\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "import sys\n\nimport itertools\n\nn = int(sys.stdin.readline())\nperk_ingredient = []\n\nfor i in range(n):\n    s, b = [int(x) for x in sys.stdin.readline().split()]\n    perk_ingredient.append((s, b))\n\nperk_combinations = list(itertools.combinations(perk_ingredient, 1))\n\nfor i in range(2, n+1):\n    perk_combinations.extend(list(itertools.combinations(perk_ingredient, i)))\n\nperk_combinations = [list(x) for x in perk_combinations]\n\nmin_diff = float('inf')\n\nfor combo in perk_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]), abs(ceil(s/ingredients[11][0])-b+ingredients[11][1]), abs(floor(s/ingredients[11][0])-b+ingredients[11][1]), abs(ceil(s/ingredients[12][0])-b+ingredients[12][1]), abs(floor(s/ingredients[12][0])-b+ingredients[12][1]), abs(ceil(s/ingredients[13][0])-b+ingredients[13][1]), abs(floor(s/ingredients[13][0])-b+ingredients[13][1]), abs(ceil(s/ingredients[14][0])-b+ingredients[14][1]), abs(floor(s/ingredients[14][0])-b+ingredients[14][1]), abs(ceil(s/ingredients[15][0])-b+ingredients[15][1]), abs(floor(s/ingredients[15][0])-b+ingredients[15][1]), abs(ceil(s/ingredients[16][0])-b+ingredients[16][1]), abs(floor(s/ingredients[16][0])-b+ingredients[16][1]), abs(ceil(s/ingredients[17][0])-b+ingredients[17][1]), abs(floor(s/ingredients[17][0])-b+ingredients[17][1]), abs(ceil(s/ingredients[18][0])-b+ingredients[18][1]), abs(floor(s/ingredients[18][0])-b+ingredients[18][1]), abs(ceil(s/ingredients[19][0])-b+ingredients[19][1]), abs(floor(s/ingredients[19][0])-b+ingredients[19][1]), abs(ceil(s/ingredients[20][0])-b+ingredients[20][1]), abs(floor(s/ingredients[20][0])-b+ingredients[20][1]), abs(ceil(s/ingredients[21][0])-b+ingredients[21][1]), abs(floor(s/ingredients[21][0])-b+ingredients[21][1]), abs(ceil(s/ingredients[22][0])-b+ingredients[22][1]), abs(floor(s/ingredients[22][0])-b+ingredients[22][1]), abs(ceil(s/ingredients[23][0])-b+ingredients[23][1]), abs(floor(s/ingredients[23][0])-b+ingredients[23][1]), abs(ceil(s/ingredients[24][0])-b+ingredients[24][1]), abs(floor(s/ingredients[24][0])-b+ingredients[24][1]), abs(ceil(s/ingredients[25][0])-b+ingredients[25][1]), abs(floor(s/ingredients[25][0])-b+ingredients[25][1]), abs(ceil(s/ingredients[26][0])-b+ingredients[26][1]), abs(floor(s/ingredients[26][0])-b+ingredients[26][1]), abs(ceil(s/ingredients[27][0])-b+ingredients[27][1]), abs(floor(s/ingredients[27][0])-b+ingredients[27][1]), abs(ceil(s/ingredients[28][0])-b+ingredients[28][1]), abs(floor(s/ingredients[28][0])-b+ingredients[28][1]), abs(ceil(s/ingredients[29][0])-b+ingredients[29][1]), abs(floor(s/ingredients[29][0])-b+ingredients[29][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\nfrom sys import stdin\nfrom math import ceil\n\nfrom math import floor\n\ndef main(n, ingredients):\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]),\n               abs(floor(s/ingredients[0][0])-b+ingredients[0][1]),\n               abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]),\n               abs(floor(s/ingredients[1][0])-b+ingredients[1][1]),\n               abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]),\n               abs(floor(s/ingredients[2][0])-b+ingredients[2][1]),\n               abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]),\n               abs(floor(s/ingredients[3][0])-b+ingredients[3][1]),\n               abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]),\n               abs(floor(s/ingredients[4][0])-b+ingredients[4][1]),\n               abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]),\n               abs(floor(s/ingredients[5][0])-b+ingredients[5][1]),\n               abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]),\n               abs(floor(s/ingredients[6][0])-b+ingredients[6][1]),\n               abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]),\n               abs(floor(s/ingredients[7][0])-b+ingredients[7][1]),\n               abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]),\n               abs(floor(s/ingredients[8][0])-b+ingredients[8][1]),\n               abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]),\n               abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = [0] * n\nbitterness = [0] * n\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness[i] = int(line[0])\n    bitterness[i] = int(line[1])\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sour = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sour *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sour - bitter))\n\nprint(min_diff)\n", "\nN = int(input())\n\nsourness = bitterness = 0\nfor i in range(N):\n    s, b = map(int, input().split())\n    sourness += s\n    bitterness += b\n\nprint(abs(sourness-bitterness))\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsourness = []\nbitterness = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    sourness.append(int(line[0]))\n    bitterness.append(int(line[1]))\n\nmin_diff = 1000000000\n\nfor i in range(2**n):\n    sours = 1\n    bitter = 0\n    for j in range(n):\n        if (i >> j) % 2 == 1:\n            sours *= sourness[j]\n            bitter += bitterness[j]\n    min_diff = min(min_diff, abs(sours - bitter))\n\nprint(min_diff)\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\tmin_dif = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0] * meal[j][0] * meal[k][0] * meal[l][0]\n\t\t\t\t\tb = meal[i][1] + meal[j][1] + meal[k][1] + meal[l][1]\n\t\t\t\t\tdif = abs(s - b)\n\t\t\t\t\tif dif < min_dif:\n\t\t\t\t\t\tmin_dif = dif\n\tprint(min_dif)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport itertools\n\nn = int(input())\npark_ingredients = []\n\nfor i in range(n):\n    s, b = [int(x) for x in input().split()]\n    park_ingredients.append((s, b))\n\npark_combinations = list(itertools.combinations(park_ingredients, 0))\n\nfor i in range(1, n+1):\n    park_combinations.extend(list(itertools.combinations(park_ingredients, i)))\n\npark_combinations = [list(x) for x in park_combinations]\n\nmin_diff = float('inf')\n\nfor combo in park_combinations:\n    s_sum = 1\n    b_sum = 0\n    for ing in combo:\n        s_sum *= ing[0]\n        b_sum += ing[1]\n    diff = abs(s_sum - b_sum)\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    min_diff = abs(ingredients[0][0] - ingredients[0][1])\n    min_diff_ingredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1]) # TODO: replace with abs(a-b)\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_ingredient = ingredients[i]\n\n    print(min_diff)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    # if n == 1:\n    #     return ingredients[0][1] - ingredients[0][0]\n    # else:\n    #     s = ingredients[0][0]\n    #     b = ingredients[0][1]\n    #     for i in range(1,n):\n    #         s *= ingredients[i][0]\n    #         b += ingredients[i][1]\n    #     return abs(s - b)\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]))\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\ndef main():\n    n = int(input())\n    ingredients = []\n    for i in range(n):\n        ingredients.append([int(x) for x in input().split()])\n\n    ingredients.sort()\n\n    minDiff = abs(ingredients[0][0] - ingredients[0][1])\n    minDiffIngredient = ingredients[0]\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            diff = abs(ingredients[i][0] - ingredients[i][1])\n            if diff < minDiff:\n                minDiff = diff\n                minDiffIngredient = ingredients[i]\n\n    print(minDiffIngredient[0], minDiffIngredient[1])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\n\t# print(meal)\n\n\t# min_diff = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\ts = meal[i][0]*meal[j][0]\n\t# \t\tb = meal[i][1]+meal[j][1]\n\t# \t\tdiff = abs(s-b)\n\t# \t\tif diff < min_diff:\n\t# \t\t\tmin_diff = diff\n\t# print(min_diff)\n\n\t# min_diff = 1000000000\n\t# for i in range(len(meal)):\n\t# \tfor j in range(i+1, len(meal)):\n\t# \t\tfor k in range(j+1, len(meal)):\n\t# \t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]\n\t# \t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]\n\t# \t\t\tdiff = abs(s-b)\n\t# \t\t\tif diff < min_diff:\n\t# \t\t\t\tmin_diff = diff\n\t# print(min_diff)\n\n\tmin_diff = 1000000000\n\tfor i in range(len(meal)):\n\t\tfor j in range(i+1, len(meal)):\n\t\t\tfor k in range(j+1, len(meal)):\n\t\t\t\tfor l in range(k+1, len(meal)):\n\t\t\t\t\ts = meal[i][0]*meal[j][0]*meal[k][0]*meal[l][0]\n\t\t\t\t\tb = meal[i][1]+meal[j][1]+meal[k][1]+meal[l][1]\n\t\t\t\t\tdiff = abs(s-b)\n\t\t\t\t\tif diff < min_diff:\n\t\t\t\t\t\tmin_diff = diff\n\tprint(min_diff)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nfrom sys import stdin\nfrom math import ceil\nfrom math import floor\n\ndef main(n, ingredients):\n    s = 1\n    b = 0\n    for i in range(n):\n        s *= ingredients[i][0]\n        b += ingredients[i][1]\n    return min(abs(s-b), abs(ceil(s/ingredients[0][0])-b+ingredients[0][1]), abs(floor(s/ingredients[0][0])-b+ingredients[0][1]), abs(ceil(s/ingredients[1][0])-b+ingredients[1][1]), abs(floor(s/ingredients[1][0])-b+ingredients[1][1]), abs(ceil(s/ingredients[2][0])-b+ingredients[2][1]), abs(floor(s/ingredients[2][0])-b+ingredients[2][1]), abs(ceil(s/ingredients[3][0])-b+ingredients[3][1]), abs(floor(s/ingredients[3][0])-b+ingredients[3][1]), abs(ceil(s/ingredients[4][0])-b+ingredients[4][1]), abs(floor(s/ingredients[4][0])-b+ingredients[4][1]), abs(ceil(s/ingredients[5][0])-b+ingredients[5][1]), abs(floor(s/ingredients[5][0])-b+ingredients[5][1]), abs(ceil(s/ingredients[6][0])-b+ingredients[6][1]), abs(floor(s/ingredients[6][0])-b+ingredients[6][1]), abs(ceil(s/ingredients[7][0])-b+ingredients[7][1]), abs(floor(s/ingredients[7][0])-b+ingredients[7][1]), abs(ceil(s/ingredients[8][0])-b+ingredients[8][1]), abs(floor(s/ingredients[8][0])-b+ingredients[8][1]), abs(ceil(s/ingredients[9][0])-b+ingredients[9][1]), abs(floor(s/ingredients[9][0])-b+ingredients[9][1]), abs(ceil(s/ingredients[10][0])-b+ingredients[10][1]), abs(floor(s/ingredients[10][0])-b+ingredients[10][1]), abs(ceil(s/ingredients[11][0])-b+ingredients[11][1]), abs(floor(s/ingredients[11][0])-b+ingredients[11][1]), abs(ceil(s/ingredients[12][0])-b+ingredients[12][1]), abs(floor(s/ingredients[12][0])-b+ingredients[12][1]), abs(ceil(s/ingredients[13][0])-b+ingredients[13][1]), abs(floor(s/ingredients[13][0])-b+ingredients[13][1]), abs(ceil(s/ingredients[14][0])-b+ingredients[14][1]), abs(floor(s/ingredients[14][0])-b+ingredients[14][1]), abs(ceil(s/ingredients[15][0])-b+ingredients[15][1]), abs(floor(s/ingredients[15][0])-b+ingredients[15][1]), abs(ceil(s/ingredients[16][0])-b+ingredients[16][1]), abs(floor(s/ingredients[16][0])-b+ingredients[16][1]), abs(ceil(s/ingredients[17][0])-b+ingredients[17][1]), abs(floor(s/ingredients[17][0])-b+ingredients[17][1]), abs(ceil(s/ingredients[18][0])-b+ingredients[18][1]), abs(floor(s/ingredients[18][0])-b+ingredients[18][1]), abs(ceil(s/ingredients[19][0])-b+ingredients[19][1]), abs(floor(s/ingredients[19][0])-b+ingredients[19][1]), abs(ceil(s/ingredients[20][0])-b+ingredients[20][1]), abs(floor(s/ingredients[20][0])-b+ingredients[20][1]), abs(ceil(s/ingredients[21][0])-b+ingredients[21][1]), abs(floor(s/ingredients[21][0])-b+ingredients[21][1]), abs(ceil(s/ingredients[22][0])-b+ingredients[22][1]), abs(floor(s/ingredients[22][0])-b+ingredients[22][1]), abs(ceil(s/ingredients[23][0])-b+ingredients[23][1]), abs(floor(s/ingredients[23][0])-b+ingredients[23][1]), abs(ceil(s/ingredients[24][0])-b+ingredients[24][1]), abs(floor(s/ingredients[24][0])-b+ingredients[24][1]), abs(ceil(s/ingredients[25][0])-b+ingredients[25][1]), abs(floor(s/ingredients[25][0])-b+ingredients[25][1]), abs(ceil(s/ingredients[26][0])-b+ingredients[26][1]), abs(floor(s/ingredients[26][0])-b+ingredients\n\nn = int(stdin.readline())\ningredients = []\nfor i in range(n):\n    s, b = map(int, stdin.readline().split())\n    ingredients.append([s, b])\nprint(main(n, ingredients))\n", "\n\ndef main():\n    n = int(input())\n    ingredients = []\n\n    min_diff = abs(ingredients[0][0] - ingredients[0][1])\n    min_diff_ingredient = ingredients[0]\n\n    for i in range(n):\n        line = [int(x) for x in input().split()]\n        ingredients.append(line)\n        if abs(line[0] - line[1]) < min_diff:\n            min_diff = abs(line[0] - line[1])\n            min_diff_ingredient = line\n\n    ingredients.sort()\n\n\n    for i in range(1, n):\n        if ingredients[i][0] > ingredients[i - 1][0]:\n            if abs(ingredients[i][0] - ingredients[i][1]) < min_diff:\n                min_diff = abs(ingredients[i][0] - ingredients[i][1])\n                min_diff_ingredient = ingredients[i]\n\n    print(min_diff_ingredient[0], min_diff_ingredient[1])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n\tmeal = []\n\tfor line in sys.stdin:\n\t\tmeal.append([int(x) for x in line.split()])\n\tmeal.pop(0)\n\t\n\tfor i in meal:\n\t\tprint(i)\n\nif __name__ == '__main__':\n\tmain()\n"]