["def main():\n    code = input()\n    nop_count = 0  # Number of nops\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a'))  # a = 1, b = 2, c = 3, d = 4\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef num_of_pairs(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\n\ndef main():\n    inp = list(input())\n    print(num_of_pairs(inp))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')) # a = 1, b = 2, c = 3, d = 4, e = 5\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\n    parameters = []\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a'))\n    print(math.ceil(max(parameters)/4))\n \nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    program = input()\n    num_nops = 0\n    for i in range(len(program)):\n        if (i % 4 == 0 and program[i].isupper()) or (i % 4 == 1 and program[i].islower()):\n            pass\n        elif (i % 4 == 0 and program[i].islower()) or (i % 4 == 1 and program[i].isupper()):\n            num_nops += 1\n        elif (i % 4 == 2 and program[i].isupper()) or (i % 4 == 3 and program[i].islower()):\n            num_nops += 1\n        elif (i % 4 == 2 and program[i].islower()) or (i % 4 == 3 and program[i].isupper()):\n            pass\n        elif (i % 4 == 0 and program[i].isupper()) or (i % 4 == 1 and program[i].islower()):\n            num_nops += 2\n        elif (i % 4 == 0 and program[i].islower()) or (i % 4 == 1 and program[i].isupper()):\n            pass\n        elif (i % 4 == 2 and program[i].isupper()) or (i % 4 == 3 and program[i].islower()):\n            num_nops += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nops)\n\nmain()\n", "\nfrom sys import stdin\n\ndef main():\n    lines = stdin.readlines()\n    for line in lines:\n        code = line.strip()\n        n = len(code)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        dp[1] = 0\n        dp[2] = 0\n        dp[3] = 0\n        for i in range(4, n + 1):\n            dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n        print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 4)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n]) \n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    program = input()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        elif i % 4 == 0 and program[i].islower():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n", "\nprint('hi')\n", "\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_registers(code):\n    registers = []\n    for index, char in enumerate(code):\n        if char.islower():\n            registers.append((char, index))\n    return registers\n\ndef get_nop_count(instructions, registers):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 2 != 0:\n            nop_count += 2 - inst[1] % 2\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nregisters = get_registers(code)\nnop_count = get_nop_count(instructions, registers)\nprint(nop_count)\n", "\n\ndef nop(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    input = sys.stdin.read().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4.0)].count('a'))\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions, parameters):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions, parameters)\nprint(nop_count)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()  # input\n    nop_count = 0  # Number of nops\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef num_of_pairs(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(num_of_pairs(inp))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    program = input()\n    num_nops = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].islower():\n            pass\n        elif i % 4 == 0 and program[i].isupper():\n            num_nops += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nops += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nops += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].islower():\n            num_nops += 3\n        elif i % 4 == 3 and program[i].isupper():\n            pass\n    print(num_nops)\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n        print(input())\n        print(\" \")\n    return\n\n    s = input()\n    print(s)\n    return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n        print(input())\n        print(\"\")\n    return\n\n    s = input()\n    print(s)\n    return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].islower()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 4)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0) \n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()  # input string\n    nop_count = 0  # number of nop's\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:  # if current index is not divisible by 4\n                nop_count += 4 - (index % 4)\n    print(nop_count)  # print result\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()  # input code\n    nop_count = 0  # no of padding characters\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef num_of_pairs(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = input()\n    print(num_of_pairs(inp))\n\nif __name__ == '__main__':\n    main()\n", "\ndef nop(inp: str) -> int:\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0 # nop needed to align\n    while program:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()\n", "\n\ndef get_operations(code):\n    operations = []\n    operation_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            operations.append((char, index))\n            operation_count += 1\n    return operations, operation_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(operations, parameters):\n    nop_count = 0\n    for op in operations:\n        if op[1] % 4 != 0:\n            nop_count += 4 - op[1] % 4\n    return nop_count\n\ncode = input()\noperations, operation_count = get_operations(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(operations, parameters)\nprint(nop_count)\n", "\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0) \n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    program = input()\n    num_nops = 0\n    for i in range(len(program) - 1):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        elif i % 4 == 0 and program[i].islower():\n            num_nops += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nops += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nops += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].isupper():\n            num_nops += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nops)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # n = int(input())\n    # for i in range(n):\n    #     print(i)\n    #     print(input())\n    #     print(\"\")\n    # return\n\n    # s = input()\n    # print(s)\n    # return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].islower()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef nops(inp):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if inp[i - 1].isupper():\n            dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4) if i % 4 != 0 else 0)\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nops(inp))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()\n", "\n\ndef nop(inp: str) -> int:\n    n = len(inp)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], dp[i - 1])\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - (i - 1) % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')) # a = 1, b = 2, c = 3, d = 4, etc.\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n])\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_registers(code):\n    registers = []\n    for index, char in enumerate(code):\n        if char.islower():\n            registers.append((char, index))\n    return registers\n\ndef get_nop_count(instructions, registers):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0 and inst[1] != 0:\n            nop_count += 4 - inst[1] % 4 - 1\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nregisters = get_registers(code)\nnop_count = get_nop_count(instructions, registers)\nprint(nop_count)\n", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4.0)].count('a'))\n    print(math.ceil(max(parameters)/4))\n \nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0  # nop needed to align\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i + 1)\n        print(input())\n        print(\"\\n\")\n    return\n\n    s = input()\n    print(s)\n    return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main()\n    \"\"\"\n    Main function\n    \"\"\"\n    code = raw_input()\n    nop_count = 0  # Number of nops\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport re\n\ndef main():\n    program = sys.stdin.read().strip().split('\\n')\n    print(program)\n    # nop_needed = 0\n    # while len(program) > 0:\n    #     if len(program) % 4 == 0:\n    #         program = program[4:]\n    #     else:\n    #         program = program[1:]\n    #         nop_needed += 1\n    # print(nop_needed)\n\nmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('a')\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0  # number of nops\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:  # if current index is not divisible by 4\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = dp[2] = dp[3] = 0\n    for i in range(4, n + 1): \n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0  # no of padding characters \n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    print(dp[n])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0  # number of nop's\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:  # if current index is not divisible by 4\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef get_directives(code):\n    directives = []\n    directive_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            directives.append((char, index))\n            directive_count += 1\n    return directives, directive_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions, parameters):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ndirectives, directive_count = get_directives(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(directives, parameters)\nprint(nop_count)\n", "\n\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_registers(code):\n    registers = []\n    for index, char in enumerate(code):\n        if char.islower():\n            registers.append((char, index))\n    return registers\n\ndef get_nop_count(instructions, registers):\n    nop_count = 0\n    for inst_index in instructions:\n        if inst_index % 4 != 0:\n            nop_count += 4 - inst_index % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nregisters = get_registers(code)\nnop_count = get_nop_count(instructions, registers)\nprint(nop_count)\n", "import sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4.0)].count('a'))\n    print(math.ceil(max(parameters)/4))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0  # no of padding characters\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()\n"]