["# coding: utf-8\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    good = True\n    i = 0\n    while i < n - 1:\n        if s[i] == s[i + 1]:\n            good = False\n            break\n        i += 2\n    if good:\n        print(0)\n        print(s)\n    else:\n        print(n - i)\n        print(s[:i] + s[i + 1:])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    bad = False\n    i = 0\n    while i < n-1:\n        if s[i] == s[i+1]:\n            bad = True\n            break\n        i += 2\n    if not bad:\n        print(0)\n        print(s)\n    else:\n        print(n-i)\n        print(s[:i] + s[i+1:])\n\nif __name__ == '__main__':\n    main()\n", "import sys\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\nstack = []\nfor i in range(n):\n    stack.append(s[i])\n    if len(stack) > 1 and stack[-1] == stack[-2]:\n        stack.pop()\n        stack.pop()\nprint(n - len(stack))\nprint(''.join(stack))\n", "s = input()\ns = s.replace(\" \", \"\")\nprint(s.capitalize())\n", "import sys\n\nn = int(input())\ns = input().strip()\n\nstack = []\nfor i in range(n):\n    stack.append(s[i])\n    if len(stack) > 1 and stack[-1] == stack[-2]:\n        stack.pop()\n        stack.pop()\n\nprint(n - len(stack), ''.join(stack))\n", "#!/usr/bin/python2.7\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip().split(' ')\n\nstack = [0]\nfor i in s:\n    if len(stack) > 1:\n        if i == stack[-1]:\n            stack.pop()\n        else:\n            stack.append(i)\n    else:\n        stack.append(i)\n\nprint(len(stack) - 1)\n", "# coding: utf-8\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "# coding: utf-8\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, input().split())\n    cnt = defaultdict(int)\n    for i in range(n):\n        a, b = map(int, input().split())\n        cnt[a] += 1\n        cnt[b+1] -= 1\n    ans = 0\n    cur = 0\n    for i in range(1, m+1):\n        cur += cnt[i]\n        if cur == n:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    s = input()\n    bad = False\n    i = 0\n    while i < n-1:\n        if s[i] == s[i+1]:\n            bad = True\n            break\n        i += 2\n    if not bad:\n        print(0)\n        print(s)\n    else:\n        print(n-i)\n        print(s[:i] + s[i+1:])\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\n\nstack = []\nfor i in range(n):\n    stack.append(s[i])\n    if len(stack) > 1 and stack[-1] == stack[-2]:\n        stack.pop()\n        stack.pop()\n\nprint(n - len(stack))\nprint(''.join(stack))\n", "s = input()\ns = s.replace(\" \", \"\")\nprint(s.lower())\n", "s = input()\ns = s.replace(\" \", \"\")\nprint(s.swapcase())\n", "#!/usr/bin/python3\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\n\nstack = []\nfor i in range(n):\n    stack.append(s[i])\n    if len(stack) > 1 and stack[-1] == stack[-2]: \n        stack.pop()\n        stack.pop()\n\nprint(n - len(stack))\nprint(''.join(stack))\n", "import sys\n\ndef read_string():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(read_string())\n\ndef read_words(sep=' '):\n    return read_string().split(sep)\n\ndef read_ints(sep=' '):\n    return [int(s) for s in read_words(sep)]\n\ndef solve():\n    n = read_int()\n    a = read_ints()\n    a.sort()\n    print(a[n//2])\n\nif __name__ == '__main__':\n    t = read_int()\n    for i in range(t):\n        solve()\n", "import sys\n\ndef main():\n    n = int(input())\n    s = input()\n    bad = False\n    i = 0\n    while i < n-1:\n        if s[i] == s[i+1]:\n            bad = True\n            break\n        i += 2\n    if not bad:\n        print(0)\n        print(s)\n    else:\n        print(n-i)\n        print(s[:i] + s[i+1:])\n\nif __name__ == '__main__':\n    main()\n"]