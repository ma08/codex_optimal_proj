["\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n", "\n\nbinary = input()\n\nn = len(binary)\n\noctal = \"\"\n\nfor i in range(0, n, 3):\n    if binary[i:i+3] == \"000\":\n        octal += \"0\"\n    elif binary[i:i+3] == \"001\":\n        octal += \"1\"\n    elif binary[i:i+3] == \"010\":\n        octal += \"2\"\n    elif binary[i:i+3] == \"011\":\n        octal += \"3\"\n    elif binary[i:i+3] == \"100\":\n        octal += \"4\"\n    elif binary[i:i+3] == \"101\":\n        octal += \"5\"\n    elif binary[i:i+3] == \"110\":\n        octal += \"6\"\n    elif binary[i:i+3] == \"111\":\n        octal += \"7\"\n\nprint(octal)\n", "\nbinary = input()\nbinary = binary[::-1]\nbinary = binary + (3 - len(binary) % 3) * '0'\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i + 3], 2))\nprint(int(octal[::-1]))\n", "#-----function-----\ndef convertBinToOct(binNum):\n    num = len(binNum)\n    if num % 3 == 1:\n        binNum = \"00\" + binNum\n    elif num % 3 == 2:\n        binNum = \"0\" + binNum\n    octNum = \"\"\n    for i in range(0, num, 3):\n        octNum += str(int(binNum[i:i+3], 2))\n    return octNum\n\n#-----main-----\ndef main():\n    binNum = input()\n    octNum = convertBinToOct(binNum)\n    print(octNum)\n\nmain()\n", "\n\ndef convert_binary(num):\n    binary = \"\"\n    num = \"0\"*(3 - len(num) % 3) + num\n    for i in range(0, len(num), 3):\n        binary += str(int(num[i:i + 3], 2))\n    return binary\n\nprint(convert_binary(input()))\n", "\n#%%\n\nn = int(input())\na = list(map(int, input().split()))\nsum = 0\n\nfor i in range(n):\n    for j in range(i, n):\n        sum += a[i]*a[j]\n\nprint(sum)\n", "#!/usr/bin/env python3\n\n#-----main-----\ndef main():\n\tbinNum = input()\n\tnum = len(binNum)\n\tif num % 3 == 1:\n\t\tbinNum = \"00\" + binNum\n\telif num % 3 == 2:\n\t\tbinNum = \"0\" + binNum\n\toctNum = \"\"\n\tfor i in range(0, num, 3):\n\t\toctNum += str(int(binNum[i : i+3], 2))\n\tprint(octNum)\n\nmain()\n", "\n\ndef convert_binary(num):\n    binary = \"\"\n    num = \"0\"*(3 - len(num) % 3) + num\n    for i in range(0, len(num), 3):\n        binary += str(int(num[i:i + 3], 2))\n    return binary\n\n\nprint(convert_binary(input()))\n", "\ndef convert_octal(num):\n    octal = \"\"\n    num = \"0\" * (3 - len(num) % 3) + num\n    for i in range(0, len(num), 3):\n        octal += str(int(num[i:i + 3], 2))\n    return octal\n\n\nprint(convert_octal(input()))\n", "\n\n# %%\n\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n\n#%% \n", "\n\ndef binary_to_octal(binary_number):\n    binary_number = \"0\" * (3 - len(binary_number) % 3) + binary_number\n    res = \"\"\n    for i in range(0, len(binary_number), 3):\n        res += str(int(binary_number[i:i + 3], 2))\n    return res\n\n\nprint(binary_to_octal(input()))\n", "#%%\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n\n#%%\n", "#!/usr/bin/env python3\n\n#-----main-----\ndef main():\n    binNum = input()\n    num = len(binNum)\n    if num % 3 == 1:\n        binNum = \"00\" + binNum\n    elif num % 3 == 2:\n        binNum = \"0\" + binNum\n    octNum = \"\"\n    for i in range(0, num, 3):\n        octNum += str(int(binNum[i:i+3], 2))\n    print(octNum)\n\nmain()\n", "# convert binary to octal\nbinary = input()\nbinary = binary[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\nbit = input()\nn = len(bit)\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(bit[i:i+3], 2))\nprint(octal)\n", "\n\ndef convert_octal(num):\n    octal = \"\"\n    num = \"0\"*(3-len(num) % 3) + num\n    for i in range(0, len(num), 3):\n        octal += str(int(num[i:i + 3], 2))\n    return octal\n\nprint(convert_octal(input()))\n", "\ndef convert_binary(num):\n    decimal = \"\"\n    num = \"0\"*(3-len(num)%3) + num\n    for i in range(0, len(num), 3):\n        decimal += str(int(num[i:i+3], 2))\n    return decimal\n\nprint(convert_binary(input()))\n", "\ndef convert_to_octal(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\n\ndef main():\n    binary = input()\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert_to_octal(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "\n \nbinary = input()[::-1]\n\nocta = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octa.append(binary[i:])\n    else:\n        octa.append(binary[i:i+3])\n\nocta = [str(int(x, 2)) for x in octa]\nocta = \"\".join(octa[::-1])\nprint(octa)\n", "\n\nbin = input(\"Enter binary number: \")\nn = len(bin)\n\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(bin[i:i+3], 2))\n\nprint(octal)\n", "\ndef binary_to_octal(bin):\n    bin = \"0\" * (3 - len(bin) % 3) + bin\n    res = \"\"\n    for i in range(0, len(bin), 3):\n        res += str(int(bin[i:i + 3], 2))\n    return res\n\n\nprint(binary_to_octal(input()))\n", "\ndef convert(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\ndef main():\n    binary = input()\n    octal = \"\"\n    if len(binary) % 3 == 0:\n        for i in range(0, len(binary), 3):\n            octal += convert(binary[i:i+3])\n    else:\n        binary = \"0\" + binary\n        for i in range(0, len(binary), 3):\n            octal += convert(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nbinary = input()\nbinary = binary[::-1]\nbinary = binary + (3 - len(binary) % 3) * '0'\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i + 3], 2))\n\nprint(int(octal[::-1]))\n", "bit = input()\n\nn = len(bit)\n\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(bit[i:i+3], 2))\n\nprint(octal)\n", "\n\nbin = input(\"Enter a binary number: \")\nn = len(bin)\n\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(bin[i:i+3], 2))\n\nprint(\"The Octal number is: \", octal)\n", "binary = input()\nn = len(binary)\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(binary[i:i+3], 2))\nprint(octal)\n", "\n\ndef convert_binary(num):\n    decimal = \"\"\n    num = \"0\"*(3 - len(num)%3) + num\n    for i in range(0, len(num), 3):\n        decimal += str(int(num[i:i+3], 2))\n    return decimal\n\nprint(convert_binary(input()))\n", "\nbinary = input()\nbinary = binary[::-1]\nbinary = binary+(3-len(binary)%3)*'0'\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i+3], 2))\nprint(int(octal[::-1])\n", "\nbinary = input(\"Enter a binary number: \")\nbinary = binary[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\nbinNumber = input()\noctNumber = 0\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber = octNumber * 10 + int(binNumber[i:i+3], 2)\n\nprint(octNumber)\n", "#-----function-----#\ndef binToOct(binNum):\n\tnum = len(binNum)\n\tif num % 3 == 1:\n\t\tbinNum = \"00\" + binNum\n\telif num % 3 == 2:\n\t\tbinNum = \"0\" + binNum\n\toctNum = \"\"\n\tfor i in range(0, num, 3):\n\t\toctNum += str(int(binNum[i:i+3], 2))\n\treturn octNum\n\n#-----main-----#\ndef main():\n\tbinNum = input()\n\toctNum = binToOct(binNum)\n\tprint(octNum)\n\nmain()\n", "\n\n#%%\n\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n", "#-----main-----#\ndef main():\n    binNum = input()\n    num = len(binNum)\n    if num % 3 == 1:\n        binNum = \"00\" + binNum\n    elif num % 3 == 2:\n        binNum = \"0\" + binNum\n    octNum = \"\"\n    for i in range(0, num, 3):\n        octNum += str(int(binNum[i:i+3], 2))\n    print(octNum)\n\nmain()\n", "\ndef convert(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    return \"7\"\n\ndef main():\n    binary = input()\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef binary_to_octal(bin):\n    bin = \"0\" * (3 - len(bin) % 3) + bin\n    res = \"\"\n    for i in range(0, len(bin), 3):\n        res += str(int(bin[i:i+3], 2))\n    return res\n\nprint(binary_to_octal(input()))\n", "\n\ndef convert_to_octal(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\n\ndef main():\n    binary = input()\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert_to_octal(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nbinar = input()\nbinar = binar[::-1]\nbinar = binar + (3 - len(binar) % 3) * '0' \noctl = ''\nfor i in range(0, len(binar), 3): \n    octl += str(int(binar[i:i + 3], 2))\n\nprint(int(octl[::-1]))\n", "\n\n#%%\n\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n\n#%%\n", "\nbinar = input()\nbinar = binar[::-1]\nbinar = binar + (3 - len(binar) % 3) * '0' # if len(binar) % 3 <> 0\noctl = ''\nfor i in range(0, len(binar), 3):\n    octl += str(int(binar[i:i + 3], 2))\n\nprint(int(octl[::-1]))\n", "bit = input()\nn = len(bit)\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(bit[i:i+3], 2))\nprint(octal)\n", "def octal_to_binary (n):\n    binary = ''\n    while n != 0:\n        binary = str(n % 8) + binary\n        n = n // 8\n    return binary\n\nbinar = input()\nprint(octal_to_binary(int(binar)))\n", "\nbinNumber = input() \noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n", "# convert binary to octal\n\nbinary = input()\nbinary = binary[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\n\ndef binary_to_octal(binary_num):\n    if len(binary_num) % 3 != 0:\n        binary_num = \"0\"*(3-len(binary_num)%3) + binary_num\n    res = \"\"\n    for i in range(0, len(binary_num), 3):\n        res += str(int(binary_num[i:i+3], 2))\n    return res\n\nprint(binary_to_octal(\"10101100\"))\n", "\n\ndef binary_to_octal(binary_num):\n    binary_num = \"0\" * (3 - len(binary_num) % 3) + binary_num\n    res = \"\"\n    for i in range(0, len(binary_num), 3):\n        res += str(int(binary_num[i:i + 3], 2))\n    return res\n\nprint(binary_to_octal(\"10101100\"))\n", "\n\nbin = input(\"enter binary number: \")\n\nn = len(bin)\n\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(bin[i:i+3], 2))\n\nprint(octal)\n", "\n\ndef convert(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\ndef main():\n    binary = input()\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef binary_to_octal(binary_number):\n    binary_number = \"0\"*(3-len(binary_number)%3) + binary_number\n    res = \"\"\n    for i in range(0, len(binary_number), 3):\n        res += str(int(binary_number[i:i+3], 2))\n    return res\n\nprint(binary_to_octal(input()))\n", "\nbinary = input()[::-1]\n\nocta = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octa.append(binary[i:])\n    else:\n        octa.append(binary[i:i+3])\n\nocta = [str(int(x, 2)) for x in octa]\nocta = \"\".join(octa[::-1])\nprint(octa)\n", "\ndef convert(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\ndef main():\n    binary = str(input())\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef binary_to_octal(binary_number):\n    binary_number = \"0\" * (3 - len(binary_number) % 3) + binary_number\n    res = \"\"\n    for i in range(0, len(binary_number), 3):\n        res += str(int(binary_number[i:i + 3], 2))\n    return res\n\n\nprint(binary_to_octal(input()))\n", "binary = input()\nbinary = binary[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\n#-----main-----#\n\ndef main():\n\tbinNum = input()\n\tnum = len(binNum)\n\tif num % 3 == 1:\n\t\tbinNum = \"00\" + binNum\n\telif num % 3 == 2:\n\t\tbinNum = \"0\" + binNum\n\toctNum = \"\"\n\tfor i in range(0, num, 3):\n\t\toctNum += str(int(binNum[i:i+3], 2))\n\tprint(octNum)\nmain()\n", "\nbinary = input()[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\n\ndef convert_binary(num):\n    decimal = \"\"\n    num = \"0\"*(3-len(num) % 3) + num\n    for i in range(0, len(num), 3):\n        decimal += str(int(num[i:i+3], 2))\n    return decimal\n\nprint(convert_binary(input()))\n", "\nbin_number = input()\noct_number = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n", "\"\"\"\nConvert a binary number to octal\n\"\"\"\n\ndef convert_to_octal(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\n\ndef main():\n    binary = input()\n    octal = \"\"\n    while len(binary) % 3 != 0:  # Check if the length of binary is a multiple of 3\n        # Add 0 to the left\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert_to_octal(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "\nbinary = input()\nbinary = binary[::-1]\nbinary = binary + (3 - len(binary) % 3) * '0'  # adds 0's to the end of the binary string\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i + 3], 2))\n\nprint(int(octal[::-1]))  # reverses the octal string\n\nbinary = input()\nbinary = binary[::-1]\nbinary = binary + (3 - len(binary) % 3) * '0'  # adds 0's to the end of the binary string\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i + 3], 2))\n\nprint(int(octal[::-1]))  # reverses the octal string\n", "#decimal to binary\nn=int(input())\nbinary=''\nwhile n>0:\n    binary=binary+str(n%2)\n    n=n//2\nprint(binary[::-1])\n", "\n\ndef convert_octal(num):\n    octal = \"\"\n    num = \"0\"*(3-len(num)%3) + num\n    for i in range(0, len(num), 3):\n        octal += str(int(num[i:i+3], 2))\n    return octal\n\nprint(convert_octal(input(\"Enter a binary number: \")))\n", "\nprint(oct(int(input(), 2)))\n", "\n\ndef convert_to_octal(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\": \n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\ndef main():\n    binary = input()\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert_to_octal(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n", "#-----functions-----\ndef convertBinToOct(binNum):\n\tnum = len(binNum)\n\tif num % 3 == 1:\n\t\tbinNum = \"00\" + binNum\n\telif num % 3 == 2:\n\t\tbinNum = \"0\" + binNum\n\toctNum = \"\"\n\tfor i in range(0, num, 3):\n\t\toctNum += str(int(binNum[i:i+3], 2))\n\treturn octNum\n\n#-----main-----\ndef main():\n\tbinNum = input()\n\toctNum = convertBinToOct(binNum)\n\tprint(octNum)\n\nmain()\n", "\n\ndef convert_binary(num):\n    binary = \"\"\n    num = \"0\" * (3 - len(num) % 3) + num\n    for i in range(0, len(num), 3):\n        binary += str(int(num[i:i+3], 2))\n    return binary\n\nprint(convert_binary(input()))\n", "def convertBinToOct(binNum):\n\tnum = len(binNum)\n\tif num % 3 == 1:\n\t\tbinNum = \"00\" + binNum\n\telif num % 3 == 2:\n\t\tbinNum = \"0\" + binNum\n\toctNum = \"\"\n\tfor i in range(0, num, 3):\n\t\toctNum += str(int(binNum[i:i+3], 2))\n\treturn octNum\n\ndef main():\n\tbinNum = input()\n\toctNum = convertBinToOct(binNum)\n\tprint(octNum)\n\nmain()\n", "\n\nbinary = input()[::-1]\n\nocta = []\nfor i in range(0, len(binary), 3):\n    if i + 3 > len(binary):\n        octa.append(binary[i:])\n    else:\n        octa.append(binary[i:i + 3])\n\nocta = [str(int(x, 2)) for x in octa]\nocta = \"\".join(octa[::-1])\nprint(octa)\n", "\n\ndef binary_to_octal(binary_num):\n    binary_num = \"0\" * (3 - len(binary_num) % 3) + binary_num\n    res = \"\"\n    for i in range(0, len(binary_num), 3):\n        res += str(int(binary_num[i:i + 3], 2))\n    return res\n\n\nprint(binary_to_octal(\"10101100\"))\n"]