2022-04-13 06:59:43.431402 num operations 2
2022-04-13 06:59:43.431412 size on input set 1
2022-04-13 06:59:46.251647 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    }
  ],
  "created": 1649833183,
  "object": "edit"
}
2022-04-13 06:59:46.251883 fix spelling mistakes 3 ['\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacy\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n']
2022-04-13 06:59:46.252008 size on output set 2
2022-04-13 06:59:46.252016 size on input set 2
2022-04-13 07:00:12.567383 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read input\n    num_participants = int(sys.stdin.readline())\n    vaccinated = []\n    infected = []\n    for i in range(num_participants):\n        participant = sys.stdin.readline()\n        vaccinated.append(participant[0])\n        infected.append(participant[1:])\n\n    # Calculate vaccine efficacies\n    efficacy = []\n    for i in range(3):\n        # Count infected and not infected for each group\n        num_infected_vaccinated = 0\n        num_not_infected_vaccinated = 0\n        num_infected_control = 0\n        num_not_infected_control = 0\n        for j in range(num_participants):\n            if infected[j][i] == 'Y':\n                if vaccinated[j] == 'Y':\n                    num_infected_vaccinated += 1\n                else:\n                    num_infected_control += 1\n            else:\n                if vaccinated[j] == 'Y':\n                    num_not_infected_vaccinated += 1\n                else:\n                    num_not_infected_control += 1\n        # Calculate percentage infected for each group\n        percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n        percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n        # Calculate vaccine efficacy\n        if percent_infected_vaccinated < percent_infected_control:\n            efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n        else:\n            efficacy.append(\"Not Effective\")\n\n    # Print vaccine efficacies\n    print(efficacy[0])\n    print(efficacy[1])\n    print(efficacy[2])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys, math\n \n# Read input\nnum_participants = int(sys.stdin.readline()) # Get the number of participants\nvaccinated = [] # Create an empty list to store the vaccination status of each participant\ninfected = [] # Create an empty list to store the infection status of each participant\nfor i in range(num_participants): # For each participant\n    participant = sys.stdin.readline() # Read the participant's data\n    vaccinated.append(participant[0]) # Add the vaccination status to the list\n    infected.append(participant[1:]) # Add the infection status to the list\n \n# Calculate vaccine efficacies\nefficacy = [] # Create an empty list to store the vaccine efficacy for each disease\nfor i in range(3): # For each disease\n    # Count infected and not infected for each group (vaccinated and control)\n    num_infected_vaccinated = 0 # The number of infected participants who were vaccinated\n    num_not_infected_vaccinated = 0 # The number of not infected participants who were vaccinated\n    num_infected_control = 0 # The number of infected participants who were not vaccinated\n    num_not_infected_control = 0 # The number of not infected participants who were not vaccinated\n    for j in range(num_participants): # For each participant\n        if infected[j][i] == 'Y': # If the participant is infected\n            if vaccinated[j] == 'Y': # If the participant was vaccinated\n                num_infected_vaccinated += 1 # Increment the number of infected participants who were vaccinated\n            else: # If the participant was not vaccinated\n                num_infected_control += 1 # Increment the number of infected participants who were not vaccinated\n        else: # If the participant is not infected\n            if vaccinated[j] == 'Y': # If the participant was vaccinated\n                num_not_infected_vaccinated += 1 # Increment the number of not infected participants who were vaccinated\n            else: # If the participant was not vaccinated\n                num_not_infected_control += 1 # Increment the number of not infected participants who were not vaccinated\n    # Calculate percentage infected for each group (vaccinated and control)\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated) # The percentage of vaccinated participants who were infected\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control) # The percentage of not vaccinated participants who were infected\n    # Calculate vaccine efficacy (the percentage of vaccinated participants who were not infected)\n    if percent_infected_vaccinated < percent_infected_control: # If the percentage of vaccinated participants who were infected is less than the percentage of not vaccinated participants who were infected\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100) # The vaccine is effective\n    else: # If the percentage of vaccinated participants who were infected is greater than or equal to the percentage of not vaccinated participants who were infected\n        efficacy.append(\"Not Effective\") # The vaccine is not effective\n \n# Print vaccine efficacies\nprint(efficacy[0]) # Print the vaccine efficacy for the first disease\nprint(efficacy[1]) # Print the vaccine efficacy for the second disease\nprint(efficacy[2]) # Print the vaccine efficacy for the third disease\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nnum_participants = int(input())\n\nvaccinated = input().split()\ninfected = input().split()\n\nefficacy = [0, 0, 0]\n\nfor i in range(num_participants):\n    if vaccinated[i] == 'Y':\n        if infected[i] == 'Y':\n            efficacy[0] += 1\n        else:\n            efficacy[1] += 1\n    else:\n        if infected[i] == 'Y':\n            efficacy[2] += 1\n\nfor i in range(3):\n    if efficacy[i] > 0:\n        print(100 - efficacy[i] / sum(efficacy) * 100)\n    else:\n        print('Not Effective')\n"
    }
  ],
  "created": 1649833186,
  "object": "edit"
}
2022-04-13 07:00:12.567585 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    # Read input\n    num_participants = int(sys.stdin.readline())\n    vaccinated = []\n    infected = []\n    for i in range(num_participants):\n        participant = sys.stdin.readline()\n        vaccinated.append(participant[0])\n        infected.append(participant[1:])\n\n    # Calculate vaccine efficacies\n    efficacy = []\n    for i in range(3):\n        # Count infected and not infected for each group\n        num_infected_vaccinated = 0\n        num_not_infected_vaccinated = 0\n        num_infected_control = 0\n        num_not_infected_control = 0\n        for j in range(num_participants):\n            if infected[j][i] == \'Y\':\n                if vaccinated[j] == \'Y\':\n                    num_infected_vaccinated += 1\n                else:\n                    num_infected_control += 1\n            else:\n                if vaccinated[j] == \'Y\':\n                    num_not_infected_vaccinated += 1\n                else:\n                    num_not_infected_control += 1\n        # Calculate percentage infected for each group\n        percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated)\n        percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control)\n        # Calculate vaccine efficacy\n        if percent_infected_vaccinated < percent_infected_control:\n            efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n        else:\n            efficacy.append("Not Effective")\n\n    # Print vaccine efficacies\n    print(efficacy[0])\n    print(efficacy[1])\n    print(efficacy[2])\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys, math\n \n# Read input\nnum_participants = int(sys.stdin.readline()) # Get the number of participants\nvaccinated = [] # Create an empty list to store the vaccination status of each participant\ninfected = [] # Create an empty list to store the infection status of each participant\nfor i in range(num_participants): # For each participant\n    participant = sys.stdin.readline() # Read the participant\'s data\n    vaccinated.append(participant[0]) # Add the vaccination status to the list\n    infected.append(participant[1:]) # Add the infection status to the list\n \n# Calculate vaccine efficacies\nefficacy = [] # Create an empty list to store the vaccine efficacy for each disease\nfor i in range(3): # For each disease\n    # Count infected and not infected for each group (vaccinated and control)\n    num_infected_vaccinated = 0 # The number of infected participants who were vaccinated\n    num_not_infected_vaccinated = 0 # The number of not infected participants who were vaccinated\n    num_infected_control = 0 # The number of infected participants who were not vaccinated\n    num_not_infected_control = 0 # The number of not infected participants who were not vaccinated\n    for j in range(num_participants): # For each participant\n        if infected[j][i] == \'Y\': # If the participant is infected\n            if vaccinated[j] == \'Y\': # If the participant was vaccinated\n                num_infected_vaccinated += 1 # Increment the number of infected participants who were vaccinated\n            else: # If the participant was not vaccinated\n                num_infected_control += 1 # Increment the number of infected participants who were not vaccinated\n        else: # If the participant is not infected\n            if vaccinated[j] == \'Y\': # If the participant was vaccinated\n                num_not_infected_vaccinated += 1 # Increment the number of not infected participants who were vaccinated\n            else: # If the participant was not vaccinated\n                num_not_infected_control += 1 # Increment the number of not infected participants who were not vaccinated\n    # Calculate percentage infected for each group (vaccinated and control)\n    percent_infected_vaccinated = num_infected_vaccinated / (num_infected_vaccinated + num_not_infected_vaccinated) # The percentage of vaccinated participants who were infected\n    percent_infected_control = num_infected_control / (num_infected_control + num_not_infected_control) # The percentage of not vaccinated participants who were infected\n    # Calculate vaccine efficacy (the percentage of vaccinated participants who were not infected)\n    if percent_infected_vaccinated < percent_infected_control: # If the percentage of vaccinated participants who were infected is less than the percentage of not vaccinated participants who were infected\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100) # The vaccine is effective\n    else: # If the percentage of vaccinated participants who were infected is greater than or equal to the percentage of not vaccinated participants who were infected\n        efficacy.append("Not Effective") # The vaccine is not effective\n \n# Print vaccine efficacies\nprint(efficacy[0]) # Print the vaccine efficacy for the first disease\nprint(efficacy[1]) # Print the vaccine efficacy for the second disease\nprint(efficacy[2]) # Print the vaccine efficacy for the third disease\n', "\n\nimport sys\n\nnum_participants = int(input())\n\nvaccinated = input().split()\ninfected = input().split()\n\nefficacy = [0, 0, 0]\n\nfor i in range(num_participants):\n    if vaccinated[i] == 'Y':\n        if infected[i] == 'Y':\n            efficacy[0] += 1\n        else:\n            efficacy[1] += 1\n    else:\n        if infected[i] == 'Y':\n            efficacy[2] += 1\n\nfor i in range(3):\n    if efficacy[i] > 0:\n        print(100 - efficacy[i] / sum(efficacy) * 100)\n    else:\n        print('Not Effective')\n"]
2022-04-13 07:00:32.672422 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / float(num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / float(num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100.0)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 1
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline().rstrip()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == 'Y':\n            if vaccinated[j] == 'Y':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == 'Y':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = float(num_infected_vaccinated) / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = float(num_infected_control) / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append(\"Not Effective\")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n"
    }
  ],
  "created": 1649833212,
  "object": "edit"
}
2022-04-13 07:00:32.672605 NO RESULT
2022-04-13 07:00:32.672612 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 1
}
2022-04-13 07:00:32.672720 fix syntax errors 2 ['\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = num_infected_vaccinated / float(num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = num_infected_control / float(num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100.0)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n', '\n\nimport sys\n\n# Read input\nnum_participants = int(sys.stdin.readline())\nvaccinated = []\ninfected = []\nfor i in range(num_participants):\n    participant = sys.stdin.readline().rstrip()\n    vaccinated.append(participant[0])\n    infected.append(participant[1:])\n\n# Calculate vaccine efficacies\nefficacy = []\nfor i in range(3):\n    # Count infected and not infected for each group\n    num_infected_vaccinated = 0\n    num_not_infected_vaccinated = 0\n    num_infected_control = 0\n    num_not_infected_control = 0\n    for j in range(num_participants):\n        if infected[j][i] == \'Y\':\n            if vaccinated[j] == \'Y\':\n                num_infected_vaccinated += 1\n            else:\n                num_infected_control += 1\n        else:\n            if vaccinated[j] == \'Y\':\n                num_not_infected_vaccinated += 1\n            else:\n                num_not_infected_control += 1\n    # Calculate percentage infected for each group\n    percent_infected_vaccinated = float(num_infected_vaccinated) / (num_infected_vaccinated + num_not_infected_vaccinated)\n    percent_infected_control = float(num_infected_control) / (num_infected_control + num_not_infected_control)\n    # Calculate vaccine efficacies\n    if percent_infected_vaccinated < percent_infected_control:\n        efficacy.append(100 - percent_infected_vaccinated / percent_infected_control * 100)\n    else:\n        efficacy.append("Not Effective")\n\n# Print vaccine efficacies\nprint(efficacy[0])\nprint(efficacy[1])\nprint(efficacy[2])\n']
2022-04-13 07:00:32.672760 size on output set 5
2022-04-13 07:00:32.672769 num operations 2
2022-04-13 07:00:32.672773 size on input set 1
2022-04-13 07:00:35.155274 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate2 / rate * 100)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate1 = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate1 / rate2 * 100)\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate2 / rate * 100)\n"
    }
  ],
  "created": 1649833232,
  "object": "edit"
}
2022-04-13 07:00:35.155540 fix spelling mistakes 3 ['\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate2 / rate * 100)\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate1 = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate1 / rate2 * 100)\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate2 / rate * 100)\n']
2022-04-13 07:00:35.155582 size on output set 2
2022-04-13 07:00:35.155588 size on input set 2
2022-04-13 07:00:37.851003 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate2 / rate * 100))\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\nvaccinated = []\ncontrol = []\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\nstrains = ['A', 'B', 'C']\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate2 / rate * 100)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print('Not Effective')\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - (rate2 / rate) * 100)\n"
    }
  ],
  "created": 1649833235,
  "object": "edit"
}
2022-04-13 07:00:37.851181 fix syntax errors 3 ['\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(int(100 - rate2 / rate * 100))\n', 'n = int(input())\n\nvaccinated = []\ncontrol = []\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\nstrains = [\'A\', \'B\', \'C\']\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate2 / rate * 100)\n', '\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print(\'Not Effective\')\n        continue\n    rate = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - (rate2 / rate) * 100)\n']
2022-04-13 07:00:49.235680 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate1 = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate1 / rate2 * 100, end=' ')\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = ['A', 'B', 'C']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate1 = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == 'Y':\n            count += 1\n    if count == 0:\n        print(\"Not Effective\")\n        continue\n    rate2 = count / len(control)\n    print(str(round(100 - rate1 / rate2 * 100, 2)) + \"%\")\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n\n    vaccinated = []\n    control = []\n\n    for i in range(n):\n        line = input()\n        if line[0] == 'Y':\n            vaccinated.append(line)\n        else:\n            control.append(line)\n\n    strains = ['A', 'B', 'C']\n\n    for strain in strains:\n        count = 0\n        for person in vaccinated:\n            if person[strains.index(strain) + 1] == 'Y':\n                count += 1\n        if count == 0:\n            print(\"Not Effective\")\n            continue\n        rate1 = count / len(vaccinated)\n        count = 0\n        for person in control:\n            if person[strains.index(strain) + 1] == 'Y':\n                count += 1\n        if count == 0:\n            print(\"Not Effective\")\n            continue\n        rate2 = count / len(control)\n        print(100 - rate1 / rate2 * 100)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649833237,
  "object": "edit"
}
2022-04-13 07:00:49.235950 fix syntax errors 3 ['\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate1 = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(100 - rate1 / rate2 * 100, end=\' \')\n', '\n\nn = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(n):\n    line = input()\n    if line[0] == \'Y\':\n        vaccinated.append(line)\n    else:\n        control.append(line)\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor strain in strains:\n    count = 0\n    for person in vaccinated:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate1 = count / len(vaccinated)\n    count = 0\n    for person in control:\n        if person[strains.index(strain) + 1] == \'Y\':\n            count += 1\n    if count == 0:\n        print("Not Effective")\n        continue\n    rate2 = count / len(control)\n    print(str(round(100 - rate1 / rate2 * 100, 2)) + "%")\n', '\n\ndef main():\n    n = int(input())\n\n    vaccinated = []\n    control = []\n\n    for i in range(n):\n        line = input()\n        if line[0] == \'Y\':\n            vaccinated.append(line)\n        else:\n            control.append(line)\n\n    strains = [\'A\', \'B\', \'C\']\n\n    for strain in strains:\n        count = 0\n        for person in vaccinated:\n            if person[strains.index(strain) + 1] == \'Y\':\n                count += 1\n        if count == 0:\n            print("Not Effective")\n            continue\n        rate1 = count / len(vaccinated)\n        count = 0\n        for person in control:\n            if person[strains.index(strain) + 1] == \'Y\':\n                count += 1\n        if count == 0:\n            print("Not Effective")\n            continue\n        rate2 = count / len(control)\n        print(100 - rate1 / rate2 * 100)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:00:49.235992 size on output set 6
2022-04-13 07:00:49.236009 num operations 2
2022-04-13 07:00:49.236015 size on input set 1
2022-04-13 07:00:52.573614 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649833249,
  "object": "edit"
}
2022-04-13 07:00:52.573801 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:00:52.573923 size on output set 3
2022-04-13 07:00:52.573930 size on input set 3
2022-04-13 07:00:57.189122 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100.0 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100.0 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100.0 - vaccine_percent[i] / control_percent[i] * 100.0\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections] if len(control) != 0 else [0, 0, 0]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections] if len(vaccine) != 0 else [0, 0, 0]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649833252,
  "object": "edit"
}
2022-04-13 07:00:57.189340 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100.0 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100.0 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100.0 - vaccine_percent[i] / control_percent[i] * 100.0\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccine groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentages of infected people in the control and vaccine groups\n    control_percent = [x / len(control) * 100 for x in control_infections] if len(control) != 0 else [0, 0, 0]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections] if len(vaccine) != 0 else [0, 0, 0]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:01:01.607743 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100.0 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100.0 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100.0 - vaccine_percent[i] / control_percent[i] * 100.0\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n\n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n\n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n\n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n\n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649833257,
  "object": "edit"
}
2022-04-13 07:01:01.607970 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100.0 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100.0 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100.0 - vaccine_percent[i] / control_percent[i] * 100.0\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n\n    # Find the number of infected people in the control group and vaccine group\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n\n    # Calculate the percentage of infected people in the control group and vaccine group\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n\n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n\n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:01:06.081251 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x * 100 / len(control) for x in control_infections]\n    vaccine_percent = [x * 100 / len(vaccine) for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] * 100 / control_percent[i]\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x * 100 / len(control) for x in control_infections]\n    vaccine_percent = [x * 100 / len(vaccine) for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] * 100 / control_percent[i]\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649833261,
  "object": "edit"
}
2022-04-13 07:01:06.081504 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x * 100 / len(control) for x in control_infections]\n    vaccine_percent = [x * 100 / len(vaccine) for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] * 100 / control_percent[i]\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x * 100 / len(control) for x in control_infections]\n    vaccine_percent = [x * 100 / len(vaccine) for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] * 100 / control_percent[i]\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    N = int(sys.stdin.readline())\n    control = []\n    vaccine = []\n    for i in range(N):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            vaccine.append(line[1:])\n        else:\n            control.append(line[1:])\n    \n    # Find the number of infected people in the control and vaccinate groups\n    control_infections = [0, 0, 0]\n    vaccine_infections = [0, 0, 0]\n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_infections[j] += 1\n    for i in range(len(vaccine)):\n        for j in range(3):\n            if vaccine[i][j] == 'Y':\n                vaccine_infections[j] += 1\n    \n    # Calculate the percentage of infected people in the control and vaccinate groups\n    control_percent = [x / len(control) * 100 for x in control_infections]\n    vaccine_percent = [x / len(vaccine) * 100 for x in vaccine_infections]\n    \n    # Calculate the efficacy\n    efficacy = [0, 0, 0]\n    for i in range(3):\n        if control_percent[i] == 0:\n            efficacy[i] = 'Not Effective'\n        else:\n            efficacy[i] = 100 - vaccine_percent[i] / control_percent[i] * 100\n    \n    # Output the result\n    for i in range(3):\n        print(efficacy[i])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:01:06.081617 size on output set 9
2022-04-13 07:01:06.081630 num operations 2
2022-04-13 07:01:06.081635 size on input set 1
2022-04-13 07:01:09.638088 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vac[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vac[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not Effective\")\n        else:\n            print(\"{:.6f}\".format((vac[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649833266,
  "object": "edit"
}
2022-04-13 07:01:09.638264 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vac[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vac[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not Effective")\n        else:\n            print("{:.6f}".format((vac[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:01:09.638313 size on output set 1
2022-04-13 07:01:09.638320 size on input set 1
2022-04-13 07:01:16.476766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        print(\"{:.6f}\".format((vac[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0, 0]\n    ctrl = [0, 0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(4):\n                if line[j] == 'Y':\n                    vac[j-1] += 1\n        else:\n            for j in range(4):\n                if line[j] == 'Y':\n                    ctrl[j-1] += 1\n    for i in range(4):\n        if ctrl[i] == 0:\n            print(\"Not Effective\", end=\" \")\n        else:\n            print(\"{:.6f}\".format((vac[i]/ctrl[i])*100), end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == 'Y':\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == 'Y':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print(\"Not effective\")\n        else:\n            print(\"{:.6f}\".format((vac[i]/ctrl[i])*100))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649833269,
  "object": "edit"
}
2022-04-13 07:01:16.476955 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        print("{:.6f}".format((vac[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0, 0]\n    ctrl = [0, 0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(4):\n                if line[j] == \'Y\':\n                    vac[j-1] += 1\n        else:\n            for j in range(4):\n                if line[j] == \'Y\':\n                    ctrl[j-1] += 1\n    for i in range(4):\n        if ctrl[i] == 0:\n            print("Not Effective", end=" ")\n        else:\n            print("{:.6f}".format((vac[i]/ctrl[i])*100), end=" ")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    vac = [0, 0, 0]\n    ctrl = [0, 0, 0]\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == \'Y\':\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    vac[j] += 1\n        else:\n            for j in range(3):\n                if line[j+1] == \'Y\':\n                    ctrl[j] += 1\n    for i in range(3):\n        if ctrl[i] == 0:\n            print("Not effective")\n        else:\n            print("{:.6f}".format((vac[i]/ctrl[i])*100))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:01:16.477068 size on output set 3
2022-04-13 07:01:16.477082 num operations 2
2022-04-13 07:01:16.477088 size on input set 1
2022-04-13 07:01:18.982019 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100)\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\" \")\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end = \" \")\n"
    }
  ],
  "created": 1649833276,
  "object": "edit"
}
2022-04-13 07:01:18.982189 fix spelling mistakes 3 ['\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100)\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=" ")\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end = " ")\n']
2022-04-13 07:01:18.982227 size on output set 3
2022-04-13 07:01:18.982233 size on input set 3
2022-04-13 07:01:31.219787 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(str(int(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100)) + \"%\", end = \" \")\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end = \"\")\n"
    },
    {
      "index": 2,
      "text": "N = int(input())\n\nA = []\nB = []\nC = []\n\nfor i in range(N):\n    temp = input()\n    A.append(temp[0])\n    B.append(temp[1])\n    C.append(temp[2])\n\nstrains = ['A', 'B', 'C']\n\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    if strains[i] == 'A':\n        for j in range(len(A)):\n            if A[j] == 'Y':\n                infected_v += 1\n        for j in range(len(A)):\n            if A[j] == 'N':\n                infected_u += 1\n    elif strains[i] == 'B':\n        for j in range(len(B)):\n            if B[j] == 'Y':\n                infected_v += 1\n        for j in range(len(B)):\n            if B[j] == 'N':\n                infected_u += 1\n    elif strains[i] == 'C':\n        for j in range(len(C)):\n            if C[j] == 'Y':\n                infected_v += 1\n        for j in range(len(C)):\n            if C[j] == 'N':\n                infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/N)/(infected_u/N)*100, end = \" \")\n\n\nN = int(input())\n"
    }
  ],
  "created": 1649833279,
  "object": "edit"
}
2022-04-13 07:01:31.219971 fix syntax errors 3 ['\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(str(int(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100)) + "%", end = " ")\n', '\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end = "")\n', 'N = int(input())\n\nA = []\nB = []\nC = []\n\nfor i in range(N):\n    temp = input()\n    A.append(temp[0])\n    B.append(temp[1])\n    C.append(temp[2])\n\nstrains = [\'A\', \'B\', \'C\']\n\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    if strains[i] == \'A\':\n        for j in range(len(A)):\n            if A[j] == \'Y\':\n                infected_v += 1\n        for j in range(len(A)):\n            if A[j] == \'N\':\n                infected_u += 1\n    elif strains[i] == \'B\':\n        for j in range(len(B)):\n            if B[j] == \'Y\':\n                infected_v += 1\n        for j in range(len(B)):\n            if B[j] == \'N\':\n                infected_u += 1\n    elif strains[i] == \'C\':\n        for j in range(len(C)):\n            if C[j] == \'Y\':\n                infected_v += 1\n        for j in range(len(C)):\n            if C[j] == \'N\':\n                infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/N)/(infected_u/N)*100, end = " ")\n\n\nN = int(input())\n']
2022-04-13 07:01:38.877910 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\", end=\" \")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\"\")\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\nvaccinated = [input() for i in range(N)]\nunvaccinated = [input() for i in range(N)]\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = sum(1 for j in vaccinated if j[i+1] == 'Y')\n    infected_u = sum(1 for j in unvaccinated if j[i+1] == 'Y')\n    if infected_v == 0: print(\"Not Effective\")\n    else: print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\" \")\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=\" \")\n"
    }
  ],
  "created": 1649833291,
  "object": "edit"
}
2022-04-13 07:01:38.878115 fix syntax errors 3 ['\n\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective", end=" ")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end="")\n', '\nN = int(input())\nvaccinated = [input() for i in range(N)]\nunvaccinated = [input() for i in range(N)]\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = sum(1 for j in vaccinated if j[i+1] == \'Y\')\n    infected_u = sum(1 for j in unvaccinated if j[i+1] == \'Y\')\n    if infected_v == 0: print("Not Effective")\n    else: print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=" ")\n', '\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, end=" ")\n']
2022-04-13 07:01:41.965531 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(round(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100))\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not effective\")\n    else:\n        print(round(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, 2))\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == 'Y':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = ['A', 'B', 'C']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == 'Y':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == 'Y':\n            infected_u += 1\n    if infected_v == 0:\n        print(\"Not Effective\")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, \"%\")\n"
    }
  ],
  "created": 1649833298,
  "object": "edit"
}
2022-04-13 07:01:41.965703 fix syntax errors 3 ['\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(round(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100))\n', '\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not effective")\n    else:\n        print(round(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, 2))\n', '\nN = int(input())\n\nvaccinated = []\nunvaccinated = []\n\nfor i in range(N):\n    temp = input()\n    if temp[0] == \'Y\':\n        vaccinated.append(temp)\n    else:\n        unvaccinated.append(temp)\n\nstrains = [\'A\', \'B\', \'C\']\nfor i in range(3):\n    infected_v = 0\n    infected_u = 0\n    for j in range(len(vaccinated)):\n        if vaccinated[j][i+1] == \'Y\':\n            infected_v += 1\n    for j in range(len(unvaccinated)):\n        if unvaccinated[j][i+1] == \'Y\':\n            infected_u += 1\n    if infected_v == 0:\n        print("Not Effective")\n    else:\n        print(100 - (infected_v/len(vaccinated))/(infected_u/len(unvaccinated))*100, "%")\n']
2022-04-13 07:01:41.965798 size on output set 9
2022-04-13 07:01:41.965823 num operations 2
2022-04-13 07:01:41.965828 size on input set 1
2022-04-13 07:01:46.077853 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + '%')\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n"
    }
  ],
  "created": 1649833302,
  "object": "edit"
}
2022-04-13 07:01:46.078025 fix spelling mistakes 3 ["\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + '%')\n", "\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n"]
2022-04-13 07:01:46.078061 size on output set 3
2022-04-13 07:01:46.078068 size on input set 3
2022-04-13 07:01:50.775296 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + ' %')\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: int(x[infection]), vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: int(x[infection]), control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + '%')\n"
    }
  ],
  "created": 1649833306,
  "object": "edit"
}
2022-04-13 07:01:50.775473 fix syntax errors 3 ["\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + ' %')\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: int(x[infection]), vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: int(x[infection]), control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i) + '%')\n"]
2022-04-13 07:01:55.748365 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((control_infection - vaccinated_infection)/control_infection * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    vaccinated.append(participant[1:])\n    control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: int(x[infection]), vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: int(x[infection]), control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n\n\n"
    }
  ],
  "created": 1649833310,
  "object": "edit"
}
2022-04-13 07:01:55.748542 fix syntax errors 3 ["\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((control_infection - vaccinated_infection)/control_infection * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n", "\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n", "\n\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    vaccinated.append(participant[1:])\n    control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: int(x[infection]), vaccinated)) / len(vaccinated) * 100\n    control_infection = sum(map(lambda x: int(x[infection]), control)) / len(control) * 100\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n\n\n"]
2022-04-13 07:02:05.161187 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input().split(' ')\n    if participant[0] == 'Y':\n        vaccinated.append(list(map(int, participant[1:])))\n    else:\n        control.append(list(map(int, participant[1:])))\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n"
    },
    {
      "index": 2,
      "text": "\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\ndef main():\n    N = int(input())\n\n    vaccinated = []\n    control = []\n\n    for i in range(N):\n        participant = input()\n        if participant[0] == 'Y':\n            vaccinated.append(participant[1:])\n        else:\n            control.append(participant[1:])\n\n    for i in range(3):\n        print(efficacy(i))\n\nmain()\n"
    }
  ],
  "created": 1649833315,
  "object": "edit"
}
2022-04-13 07:02:05.161430 fix syntax errors 3 ["\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input()\n    if participant[0] == 'Y':\n        vaccinated.append(participant[1:])\n    else:\n        control.append(participant[1:])\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100) + '%'\n\nfor i in range(3):\n    print(efficacy(i))\n", "\nN = int(input())\n\nvaccinated = []\ncontrol = []\n\nfor i in range(N):\n    participant = input().split(' ')\n    if participant[0] == 'Y':\n        vaccinated.append(list(map(int, participant[1:])))\n    else:\n        control.append(list(map(int, participant[1:])))\n\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\nfor i in range(3):\n    print(efficacy(i))\n", "\ndef efficacy(infection):\n    vaccinated_infection = sum(map(lambda x: x[infection], vaccinated)) / len(vaccinated)\n    control_infection = sum(map(lambda x: x[infection], control)) / len(control)\n    if vaccinated_infection >= control_infection:\n        return 'Not Effective'\n    else:\n        return str((1 - vaccinated_infection/control_infection) * 100)\n\ndef main():\n    N = int(input())\n\n    vaccinated = []\n    control = []\n\n    for i in range(N):\n        participant = input()\n        if participant[0] == 'Y':\n            vaccinated.append(participant[1:])\n        else:\n            control.append(participant[1:])\n\n    for i in range(3):\n        print(efficacy(i))\n\nmain()\n"]
2022-04-13 07:02:05.161552 size on output set 9
2022-04-13 07:02:05.161573 num operations 2
2022-04-13 07:02:05.161581 size on input set 1
2022-04-13 07:02:08.841318 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n"
    }
  ],
  "created": 1649833325,
  "object": "edit"
}
2022-04-13 07:02:08.841536 fix spelling mistakes 3 ["\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%')\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n"]
2022-04-13 07:02:08.841575 size on output set 2
2022-04-13 07:02:08.841591 size on input set 2
2022-04-13 07:02:12.512262 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}%'.format(infected[chr(ord('A') + i)] / len(control) * 100))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%', end = '\\n')\n"
    }
  ],
  "created": 1649833328,
  "object": "edit"
}
2022-04-13 07:02:12.512461 fix syntax errors 3 ["\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%')\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}%'.format(infected[chr(ord('A') + i)] / len(control) * 100))\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * 100) + '%', end = '\\n')\n"]
2022-04-13 07:02:16.100529 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100.0))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100) + '%')\n"
    }
  ],
  "created": 1649833332,
  "object": "edit"
}
2022-04-13 07:02:16.100704 fix syntax errors 3 ["\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100.0))\n", "\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100))\n", "\n\nimport sys\n\nvaccinated, control = [], []\n\nfor line in sys.stdin:\n    if line.startswith('N'):\n        control.append(line)\n    else:\n        vaccinated.append(line)\n\ninfected = {'A': 0, 'B': 0, 'C': 0}\nfor line in control:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] += 1\n\nfor line in vaccinated:\n    for i in range(1, 4):\n        if line[i] == 'Y':\n            infected[chr(ord('A') + i - 1)] -= 1\n\nfor i in range(3):\n    print('Not Effective' if infected[chr(ord('A') + i)] >= 0 else '{:.6f}'.format(infected[chr(ord('A') + i)] / len(control) * -100) + '%')\n"]
2022-04-13 07:02:16.100742 size on output set 6
2022-04-13 07:02:16.100753 num operations 2
2022-04-13 07:02:16.100758 size on input set 1
2022-04-13 07:02:18.526239 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    }
  ],
  "created": 1649833336,
  "object": "edit"
}
2022-04-13 07:02:18.526420 fix spelling mistakes 3 ["\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"]
2022-04-13 07:02:18.526539 size on output set 1
2022-04-13 07:02:18.526550 size on input set 1
2022-04-13 07:02:25.189593 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.2f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.2f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.2f'))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.2f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.2f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.2f'))\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y' or line[0] == 'y':\n        vaccinated[0] += 1\n        if line[1] == 'Y' or line[1] == 'y':\n            vaccinated[1] += 1\n        if line[2] == 'Y' or line[2] == 'y':\n            vaccinated[2] += 1\n        if line[3] == 'Y' or line[3] == 'y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y' or line[1] == 'y':\n            control[1] += 1\n        if line[2] == 'Y' or line[2] == 'y':\n            control[2] += 1\n        if line[3] == 'Y' or line[3] == 'y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"
    }
  ],
  "created": 1649833338,
  "object": "edit"
}
2022-04-13 07:02:25.189774 fix syntax errors 3 ["\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.2f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.2f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.2f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y':\n        vaccinated[0] += 1\n        if line[1] == 'Y':\n            vaccinated[1] += 1\n        if line[2] == 'Y':\n            vaccinated[2] += 1\n        if line[3] == 'Y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y':\n            control[1] += 1\n        if line[2] == 'Y':\n            control[2] += 1\n        if line[3] == 'Y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.2f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.2f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.2f'))\n", "\n\nN = int(input())\nvaccinated = [0,0,0,0]\ncontrol = [0,0,0,0]\n\nfor i in range(N):\n    line = input()\n    if line[0] == 'Y' or line[0] == 'y':\n        vaccinated[0] += 1\n        if line[1] == 'Y' or line[1] == 'y':\n            vaccinated[1] += 1\n        if line[2] == 'Y' or line[2] == 'y':\n            vaccinated[2] += 1\n        if line[3] == 'Y' or line[3] == 'y':\n            vaccinated[3] += 1\n    else:\n        control[0] += 1\n        if line[1] == 'Y' or line[1] == 'y':\n            control[1] += 1\n        if line[2] == 'Y' or line[2] == 'y':\n            control[2] += 1\n        if line[3] == 'Y' or line[3] == 'y':\n            control[3] += 1\n\nprint(format((vaccinated[1]/vaccinated[0])/(control[1]/control[0])*100, '.6f'))\nprint(format((vaccinated[2]/vaccinated[0])/(control[2]/control[0])*100, '.6f'))\nprint(format((vaccinated[3]/vaccinated[0])/(control[3]/control[0])*100, '.6f'))\n"]
2022-04-13 07:02:25.189814 size on output set 2
