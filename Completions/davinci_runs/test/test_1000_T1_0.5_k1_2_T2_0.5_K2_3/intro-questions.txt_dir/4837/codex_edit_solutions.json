["\n\ndef main():\n    rounds = int(raw_input())\n    sven_choices = raw_input()\n    friends = int(raw_input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(raw_input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_choice = sven_choices[i]\n        friends_choices_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_choices_in_round.count(beat_symbol(sven_choice))\n        tie_count = friends_choices_in_round.count(sven_choice)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if s[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif s[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif s[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if s[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif s[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif s[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip()\n    opponents = int(sys.stdin.readline())\n    opponent_symbols = []\n    for i in range(opponents):\n        opponent_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(opponents):\n            if opponent_symbols[j][i] == \"R\":\n                rock += 1\n            elif opponent_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock\n            largest_score += opponents - max(rock, paper, scissors\n        elif sven[i] == \"P\":\n            actual_score += paper\n            largest_score += opponents - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += opponents - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip() # Sven's symbols\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip()) # Friends' symbols\n    actual_score = 0 # Score where Sven and his friends play\n    largest_score = 0 # Score where Sven plays alone\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock # Sven beats rock\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n        elif sven[i] == \"P\":\n            actual_score += paper # Sven beats paper\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n        else:\n            actual_score += scissors # Sven beats scissors\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n'''\nRock-paper-scissors\n'''\n\ndef get_score(sven, friends):\n    #if len(sven) != len(friends[0]):\n    #    print('Error: Sven and friends have different numbers of rounds')\n    #    return -1\n    #else:\n    #    rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip()\n    opponents = int(sys.stdin.readline())\n    opponent_symbols = []\n    for i in range(opponents):\n        opponent_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(opponents):\n            if opponent_symbols[j][i] == \"R\":\n                rock += 1\n            elif opponent_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock\n            largest_score += opponents - max(rock, paper, scissors)\n        elif sven[i] == \"P\":\n            actual_score += paper\n            largest_score += opponents - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += opponents - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' in friends:\n                score += 2\n            elif 'S' in friends:\n                score += 1\n        elif sven[i] == 'P':\n            if 'R' in friends:\n                score += 2\n            elif 'P' in friends:\n                score += 1\n        elif sven[i] == 'R':\n            if 'S' in friends:\n                score += 2\n            elif 'R' in friends:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' not in friends:\n                max_score += 2\n            elif 'S' not in friends:\n                max_score += 1\n        elif sven[i] == 'P':\n            if 'R' not in friends:\n                max_score += 2\n            elif 'P' not in friends:\n                max_score += 1\n        elif sven[i] == 'R':\n            if 'S' not in friends:\n                max_score += 2\n            elif 'R' not in friends:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            for friend in friends:\n                if friend == 'P':\n                    score += 2\n                    break\n                elif friend == 'S':\n                    score += 1\n        elif Sven[i] == 'P':\n            if 'R' in friends:\n                score += 2\n            elif 'P' in friends:\n                score += 1\n        elif Sven[i] == 'R':\n            if 'S' in friends:\n                score += 2\n            elif 'R' in friends:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in friends:\n                max_score += 2\n            elif 'S' not in friends:\n                max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in friends:\n                max_score += 2\n            elif 'P' not in friends:\n                max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in friends:\n                max_score += 2\n            elif 'R' not in friends:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(n):\n        for friend in friends:\n            if s[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif s[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif s[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(n):\n        for friend in friends:\n            if s[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif s[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif s[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# import sys\n\n# def main():\n#     rounds = int(sys.stdin.readline().strip())\n#     sven = sys.stdin.readline().strip()\n#     friends = int(sys.stdin.readline().strip())\n#     max_score = 2 * rounds\n#     score = 0\n#     for i in range(friends):\n#         friend = sys.stdin.readline().strip()\n#         for j in range(rounds):\n#             if sven[j] == friend[j]:\n#                 score += 1\n#             elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n#                 score += 2\n#         max_score += 2 * rounds - 2\n#         print(score)\n#         print(max_score)\n#         score = 0\n\n# if __name__ == \"__main__\":\n#     main()\n\n# def main():\n#     rounds = int(sys.stdin.readline().strip())\n#     sven = sys.stdin.readline().strip()\n#     friends = int(sys.stdin.readline().strip())\n#     max_score = 2 * rounds\n#     score = 0\n#     for i in range(friends):\n#         friend = sys.stdin.readline().strip()\n#         for j in range(rounds):\n#             if sven[j] == friend[j]:\n#                 score += 1\n#             elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n#                 score += 2\n#         max_score += 2 * rounds - 2\n#         print(score)\n#         print(max_score)\n#         score = 0\n\n# if __name__ == \"__main__\":\n#     main()\n\n# def main():\n#     rounds = int(sys.stdin.readline().strip())\n#     sven = sys.stdin.readline().strip()\n#     friends = int(sys.stdin.readline().strip())\n#     max_score = 2 * rounds\n#     score = 0\n#     for i in range(friends):\n#         friend = sys.stdin.readline().strip()\n#         for j in range(rounds):\n#             if sven[j] == friend[j]:\n#                 score += 1\n#             elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n#                 score += 2\n#         max_score += 2 * rounds - 2\n#         print(score)\n#         print(max_score)\n#         score = 0\n\n# if __name__ == \"__main__\":\n#     main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 2 * rounds\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (\n                    sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        if score > max_score:\n            max_score = score\n        score = 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0 \n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(\"{} {}\".format(sven_score, sven_max_score))\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        if score > max_score:\n            max_score = score\n        score = 0\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        if score > max_score:\n            max_score = score\n        print(score)\n        score = 0\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip()) # number of rounds, not used\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip()) # number of friends\n\n    sven_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n    print(sven_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\n\ndef get_score(sven, friends):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        max_score += 2 * rounds\n        print(score / max_score)\n        score = 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"R\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(largest_score - actual_score)\n\nmain()\n", "\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if s[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif s[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif s[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    max_score = 0\n    for i in range(r):\n        for friend in friends:\n            if s[i] == 'R':\n                if friend[i] == 'S':\n                    max_score += 2\n            elif s[i] == 'S':\n                if friend[i] == 'P':\n                    max_score += 2\n            elif s[i] == 'P':\n                if friend[i] == 'R':\n                    max_score += 2\n    max_score += r\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(int(actual_score + largest_score))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friends_symbols = [input() for i in range(friends)]\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven_symbols[i]\n        friends_symbols_in_round = [x[i] for x in friends_symbols]\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    svens = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = svens[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))  # noqa\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(sven_score)\n    print(sven_max_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_choices = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_choice = sven_choices[i].upper()\n        if sven_choice == \"R\":\n            actual_score += friends_symbols.count(\"P\")\n            max_score += friends - friends_symbols.count(\"S\")\n        elif sven_choice == \"P\":\n            actual_score += friends_symbols.count(\"S\")\n            max_score += friends - friends_symbols.count(\"R\")\n        else:\n            actual_score += friends_symbols.count(\"R\")\n            max_score += friends - friends_symbols.count(\"P\")\n    print(actual_score)\n    print(max_score)\n    if actual_score == max_score:\n        print(\"Tie\")\n    elif actual_score > max_score:\n        print(\"Sven\")\n    else:\n        print(\"Emma\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_symbol = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round_num in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round_num] == friend_symbol[round_num]:\n                ties += 1\n            elif sven_symbol[round_num] == \"P\" and friend_symbol[round_num] == \"R\":\n                wins += 1\n            elif sven_symbol[round_num] == \"R\" and friend_symbol[round_num] == \"S\":\n                wins += 1\n            elif sven_symbol[round_num] == \"S\" and friend_symbol[round_num] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round_num in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round_num] == friend_symbol[round_num]:\n                sven_ties += 1\n            elif sven_symbol[round_num] == \"P\" and friend_symbol[round_num] == \"R\":\n                sven_wins += 1\n            elif sven_symbol[round_num] == \"R\" and friend_symbol[round_num] == \"S\":\n                sven_wins += 1\n            elif sven_symbol[round_num] == \"S\" and friend_symbol[round_num] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(sven_score)\n    print(sven_max_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    sven = list(sys.stdin.readline().strip())\n    n = int(sys.stdin.readline().strip())\n    friends = [None] * n\n    for i in range(n):\n        friends[i] = list(sys.stdin.readline().strip())\n\n    # Actual score - no cheating\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R' and friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S' and friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'P' and friend[i] == 'R':\n                    score += 2\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                elif friend[i] == 'P':\n                    score += 1\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                elif friend[i] == 'R':\n                    score += 1\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                elif friend[i] == 'S':\n                    score += 1\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    sven = input()\n    F = int(input())\n    friends_choices = []\n    for i in range(F):\n        friends_choices.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' in friends_choices:\n                score += 2\n            elif 'S' in friends_choices:\n                score += 1\n        elif sven[i] == 'P':\n            if 'R' in friends_choices:\n                score += 2\n            elif 'P' in friends_choices:\n                score += 1\n        elif sven[i] == 'R':\n            if 'S' in friends_choices:\n                score += 2\n            elif 'R' in friends_choices:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' not in friends_choices[i]:\n                max_score += 2\n            elif 'S' not in friends_choices[i]:\n                max_score += 1\n        elif sven[i] == 'P':\n            if 'R' not in friends_choices[i]:\n                max_score += 2\n            elif 'P' not in friends_choices[i]:\n                max_score += 1\n        elif sven[i] == 'R':\n            if 'S' not in friends_choices[i]:\n                max_score += 2\n            elif 'R' not in friends_choices[i]:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\n\ndef main():\n    print(input())\n    print(input())\n    print(input())\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n# Rock-paper-scissors\n\ndef get_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print('Error: Sven and friends have different numbers of rounds')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(raw_input())\n    sven_choices = raw_input()\n    friends = int(raw_input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(raw_input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_choice = sven_choices[i]\n        friends_choices_in_round = [x[i] for x in friends_symbols]\n        win_count = friends_choices_in_round.count(beat_symbol(sven_choice))\n        tie_count = friends_choices_in_round.count(sven_choice)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in friends[i]:\n                score += 2\n            elif 'S' in friends[i]:\n                score += 1\n        elif Sven[i] == 'P':\n            if 'R' in friends[i]:\n                score += 2\n            elif 'P' in friends[i]:\n                score += 1\n        elif Sven[i] == 'R':\n            if 'S' in friends[i]:\n                score += 2\n            elif 'R' in friends[i]:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in friends[i]:\n                max_score += 2\n            elif 'S' not in friends[i]:\n                max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in friends[i]:\n                max_score += 2\n            elif 'P' not in friends[i]:\n                max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in friends[i]:\n                max_score += 2\n            elif 'R' not in friends[i]:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip()) # number of rounds\n    sven = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip()) # number of friends\n    friends = []\n    for i in range(n): # get friends' moves\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven_symbols[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))  # noqa E501\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)  # noqa E501\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    sven = list(sys.stdin.readline().strip())\n    n = int(sys.stdin.readline().strip())\n    friends = [None] * n\n    for i in range(n):\n        friends[i] = list(sys.stdin.readline().strip())\n\n    # Actual score - no cheating\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R' and friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S' and friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'P' and friend[i] == 'R':\n                    score += 2\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        if score > max_score:\n            max_score = score\n        score = 0\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())  # number of rounds\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())  # number of friends\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(sven_score)\n\n    print(sven_max_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\" or sven[i] == \"S\" and friend[i] == \"P\" or sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n\n    return score\n\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\" or sven[i] == \"S\" and friend[i] == \"P\" or sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n\n    return score\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    pass\n\ndef beat_symbol(symbol):\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip() # Sven's symbols\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip()) # Friends' symbols\n    actual_score = 0 # Score where Sven and his friends play\n    largest_score = 0 # Score where Sven plays alone\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock # Sven beats rock\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n        elif sven[i] == \"P\":\n            actual_score += paper # Sven beats paper\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n        else:\n            actual_score += scissors # Sven beats scissors\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())  # number of rounds\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())  # number of friends\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend, rounds)\n        sven_max_score += max_compare(sven, friend, rounds)\n    print(sven_score)\n    print(sven_max_score)\n\n\ndef compare(sven, friend, rounds):\n    score = 0\n    for i in range(rounds):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\n\ndef max_compare(sven, friend, rounds):\n    score = 0\n    for i in range(rounds):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\n# Rock-paper-scissors\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_symbol = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round_number in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round_number] == friend_symbol[round_number]:\n                ties += 1\n            elif sven_symbol[round_number] == \"P\" and friend_symbol[round_number] == \"R\":\n                wins += 1\n            elif sven_symbol[round_number] == \"R\" and friend_symbol[round_number] == \"S\":\n                wins += 1\n            elif sven_symbol[round_number] == \"S\" and friend_symbol[round_number] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round_number in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round_number] == friend_symbol[round_number]:\n                sven_ties += 1\n            elif sven_symbol[round_number] == \"P\" and friend_symbol[round_number] == \"R\":\n                sven_wins += 1\n            elif sven_symbol[round_number] == \"R\" and friend_symbol[round_number] == \"S\":\n                sven_wins += 1\n            elif sven_symbol[round_number] == \"S\" and friend_symbol[round_number] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n", "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends, rounds):\n    score = 0\n    for i in range(rounds):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends, rounds):\n    max_score = 0\n    for i in range(rounds):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = ['']*friends_num\n    for i in range(friends_num):\n        friends[i] = str(input())\n    score = get_score(sven, friends, rounds)\n    max_score = get_max_score(sven, friends, rounds)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    sven = input()\n    F = int(input())\n    friends_choices = []\n    for i in range(F):\n        friends_choices.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            elif 'P' in friends_choices:\n                score += 2\n            elif 'S' in friends_choices:\n                score += 1\n        elif sven[i] == 'P':\n            elif 'R' in friends_choices:\n                score += 2\n            elif 'P' in friends_choices:\n                score += 1\n        elif sven[i] == 'R':\n            elif 'S' in friends_choices:\n                score += 2\n            elif 'R' in friends_choices:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            elif 'P' not in friends_choices:\n                max_score += 2\n            elif 'S' not in friends_choices:\n                max_score += 1\n        elif sven[i] == 'P':\n            elif 'R' not in friends_choices:\n                max_score += 2\n            elif 'P' not in friends:\n                max_score += 1\n        elif sven[i] == 'R':\n            elif 'S' not in friends_choices:\n                max_score += 2\n            elif 'R' not in friends:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()[:rounds]\n    friends = int(sys.stdin.readline().strip())\n    max_score = 2 * rounds\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()[:rounds]\n        for j in range(len(friend)):\n            if sven[j] == friend[j] and friend[j] == \"R\":\n                score += 2 * rounds\n            elif sven[j] == friend[j] and friend[j] == \"S\":\n                score += 2 * rounds - 1\n            elif sven[j] == friend[j] and friend[j] == \"P\":\n                score += 2 * rounds - 2\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2 * rounds - 3\n        max_score += 2 * rounds - 2\n        print(str(score) + \"/\" + str(max_score))\n        score = 0\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score.\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score.\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score, max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_symbol = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbol[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven_symbol[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven_symbol[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbol[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven_symbol[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven_symbol[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n", "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip()\n    opponents = int(sys.stdin.readline())\n    opponent_symbols = []\n    for i in range(opponents):\n        opponent_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(opponents):\n            if opponent_symbols[j][i] == \"R\":\n                rock += 1\n            elif opponent_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock\n            largest_score += opponents - max(rock, paper, scissors)\n        elif sven[i] == \"P\":\n            actual_score += paper\n            largest_score += opponents - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += opponents - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n\ndef get_score(sven, friends, rounds, friends_num):\n    score = 0\n    for i in range(rounds):\n        for j in range(friends_num):\n            if sven[i] == 'S':\n                if friends[j][i] == 'P':\n                    score += 1\n                elif friends[j][i] == 'R':\n                    score += 2\n            elif sven[i] == 'P':\n                if friends[j][i] == 'R':\n                    score += 1\n                elif friends[j][i] == 'S':\n                    score += 2\n            elif sven[i] == 'R':\n                if friends[j][i] == 'S':\n                    score += 1\n                elif friends[j][i] == 'P':\n                    score += 2\n    return score\n\ndef get_max_score(sven, friends, rounds, friends_num):\n    max_score = 0\n    for i in range(rounds):\n        for j in range(friends_num):\n            if sven[i] == 'S':\n                if friends[j][i] == 'R':\n                    max_score += 2\n                elif friends[j][i] == 'P':\n                    max_score += 1\n            elif sven[i] == 'P':\n                if friends[j][i] == 'S':\n                    max_score += 2\n                elif friends[j][i] == 'R':\n                    max_score += 1\n            elif sven[i] == 'R':\n                if friends[j][i] == 'P':\n                    max_score += 2\n                elif friends[j][i] == 'S':\n                    max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = ['']*friends_num\n    for i in range(friends_num):\n        friends[i] = str(input())\n    score = get_score(sven, friends, rounds, friends_num)\n    max_score = get_max_score(sven, friends, rounds, friends_num)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(largest_score - actual_score)\n\nmain()\n", "\n\n    print(\"How many rounds?\")\ndef main():\n    print(\"What is Sven's symbol?\")\n    rounds = int(input())\n    print(\"How many friends?\")\n    sven = input()\n    friends = int(input())\n    friend_symbols = []\n        print(\"What is friend {}'s symbol?\".format(i + 1))\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(\"Sven could have scored {} more points.\".format(largest_score - actual_score))\n\nmain()\n", "\n#\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score.\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score.\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip().upper()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip().upper())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        if score > max_score:\n            max_score = score\n        score = 0\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_symbol = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbol[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven_symbol[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven_symbol[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbol[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbol[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven_symbol[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven_symbol[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = list(input())\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(list(input()))\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven_symbols[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        print(win_count, tie_count)\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip() # Sven's symbols\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip()) # Friends' symbols\n    actual_score = 0 # Score where Sven and his friends play\n    largest_score = 0 # Score where Sven plays alone\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock # Sven beats rock\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n        elif sven[i] == \"P\":\n            actual_score += paper # Sven beats paper\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n        else:\n            actual_score += scissors # Sven beats scissors\n            largest_score += friends - max(rock, paper, scissors) # Sven beats all\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#\n# import sys\n# import math\n#\n# # Grab the pellets as fast as you can!\n#\n# def get_score(sven, friends):\n#     score = 0\n#     for i in range(len(sven)):\n#         if sven[i] == 'S':\n#             if friends[i] == 'P':\n#                 score += 1\n#             elif friends[i] == 'R':\n#                 score += 2\n#         elif sven[i] == 'P':\n#             if friends[i] == 'R':\n#                 score += 1\n#             elif friends[i] == 'S':\n#                 score += 2\n#         elif sven[i] == 'R':\n#             if friends[i] == 'S':\n#                 score += 1\n#             elif friends[i] == 'P':\n#                 score += 2\n#     return score\n#\n# def get_max_score(sven, friends):\n#     max_score = 0\n#     for i in range(len(sven)):\n#         if sven[i] == 'S':\n#             if friends[i] == 'R':\n#                 max_score += 2\n#             elif friends[i] == 'P':\n#                 max_score += 1\n#         elif sven[i] == 'P':\n#             if friends[i] == 'S':\n#                 max_score += 2\n#             elif friends[i] == 'R':\n#                 max_score += 1\n#         elif sven[i] == 'R':\n#             if friends[i] == 'P':\n#                 max_score += 2\n#             elif friends[i] == 'S':\n#                 max_score += 1\n#     return max_score\n#\n# def main():\n#     rounds = int(input())\n#     sven = str(input())\n#     friends_num = int(input())\n#     friends = []\n#     for i in range(friends_num):\n#         friends.append(str(input()))\n#     score = get_score(sven, friends)\n#     max_score = get_max_score(sven, friends)\n#     print(score)\n#     print(max_score)\n#\n# if __name__ == \"__main__\":\n#     main()\n", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 2 * rounds\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):  \n                score += 2\n        max_score += 2 * rounds - 2\n        print(score)\n        print(max_score)\n        score = 0\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    sven = list(sys.stdin.readline().strip())\n    n = int(sys.stdin.readline().strip())\n    friends = [None] * n\n    for i in range(n):\n        friends[i] = list(sys.stdin.readline().strip())\n\n    # Actual score - no cheating\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R' and friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S' and friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'P' and friend[i] == 'R':\n                    score += 2\n    print(score)\n\n    # Max score - cheating\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r * 2\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n"]