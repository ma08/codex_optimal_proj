["\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(sven_score)\n    print(sven_max_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends):\n    #if len(sven) != len(friends[0]):\n    #    print('Error: Sven and friends have different numbers of rounds')\n    #    return -1\n    #else:\n    #    rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if sven[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif sven[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif sven[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    # read input\n    R = int(input())\n    sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' in friends:\n                score += 2\n            elif 'S' in friends:\n                score += 1\n        elif sven[i] == 'P':\n            if 'R' in friends:\n                score += 2\n            elif 'P' in friends:\n                score += 1\n        elif sven[i] == 'R':\n            if 'S' in friends:\n                score += 2\n            elif 'R' in friends:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if sven[i] == 'S':\n            if 'P' not in friends:\n                max_score += 2\n            elif 'S' not in friends:\n                max_score += 1\n        elif sven[i] == 'P':\n            if 'R' not in friends:\n                max_score += 2\n            elif 'P' not in friends:\n                max_score += 1\n        elif sven[i] == 'R':\n            if 'S' not in friends:\n                max_score += 2\n            elif 'R' not in friends:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()", "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        max_score += 2 * rounds\n        print(score)\n        print(max_score)\n        score = 0\n        max_score = 0\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()"]