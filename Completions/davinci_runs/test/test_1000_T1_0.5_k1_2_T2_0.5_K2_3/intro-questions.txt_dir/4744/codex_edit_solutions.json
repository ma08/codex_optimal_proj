["\nimport math\n\ndef main():\n    v = int(input())\n    print(find_cost(v))\n\ndef find_cost(v):\n    cost = float('inf')\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0:\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    volume = int(sys.stdin.readline())\n    n = int(volume**(1/3))\n    while n**3 < volume:\n        n += 1\n    x = n\n    y = n\n    z = n\n        if x*y*z == volume:\n            break\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# CODE:\nn = int(input()) #number of tiles\n\nside1 = n #first side\nside2 = 1 #second side\n\nwhile side1 * side2 != n:\n    if side1 * side2 > n:\n        side1 -= 1\n    else:\n        side2 += 1\n\nprint(2 * (side1 + side2)) #perimeter\n", "'''\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0442\u0435\u043a\u0441\u0442, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 (\u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0432\u0430\u0436\u043d\u044b!).\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\u0412\u0432\u043e\u0434:                                           \u0412\u044b\u0432\u043e\u0434:\n6                                               1 2 3\n                                                4 5 6\n                                                7 8 9\n                                                10 11 12\n                                                13 14 15\n                                                16 17 18\n'''\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            print(i*j, end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n# CODE:\nn = int(input())\nside1 = n\nside2 = 1\nwhile side1 * side2 != n:\n    if side1 * side2 > n:\n        side1 -= 1\n    else:\n        side2 += 1\nprint(2 * (side1 + side2))\n", "\n#\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1.0/3.0))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V.\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle.\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n# file\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1/3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# CODE:\nn = int(input())  # \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0431\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043a\u0443\u0431\u0438\u043a\u0430\nside1 = n  # \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u0443\u0431\u0430\nside2 = 1  # \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u0443\u0431\u0430\n\nwhile side1 * side2 != n:  # \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d \u043d\u0435 \u0440\u0430\u0432\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u0443\u0431\u043e\u0432\n    if side1 * side2 > n:\n        side1 -= 1  # \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0430 1\n    else:\n        side2 += 1  # \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 1\n\nprint(2 * (side1 + side2))  # \u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u0438\u043d \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "import sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*6)\nmain()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3) = V^(1/3)\n# b = V^(1/3) = V^(1/3)\n# c = V^(1/3) = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c) = 2*(a^2*V^(1/3) + a*V^(2/3)^2 + V^(2/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3)*a^2 + V^(2/3)*a^2 + V^(2/3)*a^2) = 2*(V^(2/3)*a^2 + V^(2/3)*a^2 + V^(2/3)*a^2)\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3)*a^2 + V^(2/3)*a^2 + V^(2/3)*a^2) = 2*(V^(2/3)*a^2 + V^(2/3)*a^2 + V^(2/3)*a^2)\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3)*a^2 + V^(2/3)*a^2 + V^(2/3)*a^2) = 2*(V^(2/3)*a^2 + V^(2/3)*a^2 + V^(2/3)*a^2)\n\nprint(2*(math.pow(V, (2/3))*math.pow(V, (1/3))**2 + math.pow(V, (2/3))*math.pow(V, (1/3))**2 + math.pow(V, (2/3))*math.pow(V, (1/3))**2))\n", "\n\ndef main():\n    v = int(input())\n    if v == 1:\n        print(6)\n    elif v == 2:\n        print(12)\n    elif v == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(v))\n        b = math.floor(v / a)\n        if a * b < v:\n            b += 1\n        print(2 * (a + b) + 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*6)\nmain()\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*7) \n\nmain()\n", "\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(V))\n        b = math.floor(V / a)\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*V^(2/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2)\n", "import math\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(V))  # \u0448\u0438\u0440\u0438\u043d\u0430\n        b = math.floor(V / a)  # \u0432\u044b\u0441\u043e\u0442\u0430\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = int(ceil(sqrt(V)))\n        b = int(floor(V / a))\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n'''\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0442\u0435\u043a\u0441\u0442, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 (\u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0432\u0430\u0436\u043d\u044b!).\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\u0412\u0432\u043e\u0434:                                           \u0412\u044b\u0432\u043e\u0434:\n6                                               1 2 3\n                                                4 5 6\n                                                7 8 9\n                                                10 11 12\n                                                13 14 15\n                                                16 17 18\n'''\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i*j, end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport math \nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\nprint(2*(a*b + b*c + a*c))\n", "\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V.\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle.\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n# \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0432\u0432\u0435\u0440\u0445 \u0438 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0439 \u0431\u0443\u043a\u0432\u044b\nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\n\nprint(2*(a*b + b*c + a*c))\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*4)\n\nmain()\n", "\n\nimport math\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(V))  # \u0448\u0438\u0440\u0438\u043d\u0430\n        b = math.floor(V / a)  # \u0432\u044b\u0441\u043e\u0442\u0430a\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    volume = int(sys.stdin.readline())\n    n = int(volume**(1.0/3))\n    while n**3 < volume:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != volume:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V.\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3)^2 + V^(2/3)*c^2)\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3)*a^2 + V^(2/3)*a^2 + V^(2/3)*c^2)\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3)*a^2 + V^(2/3)*b^2 + V^(2/3)*c^2)\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3)*a^2 + V^(2/3)*b^2 + V^(2/3)*c^2)\n# 2*(a*b + a*c + b*c) = 2*(V^(2/3)*a^2 + V^(2/3)*b^2 + V^(2/3)*c^2)\n\nprint(2*(math.pow(V, (2/3))*math.pow(V, (1/3))**2 + math.pow(V, (2/3))*math.pow(V, (1/3))**2 + math.pow(V, (2/3))*math.pow(V, (1/3))**2))\n", "\nimport math\nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\nprint(2*(a*b + b*c + a*c))\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline().strip())\n    print(v * 4)\n\nmain()\n", "\n\n# CODE:\nn = int(input())  # \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0431\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043a\u0443\u0431\u0430\n\nside1 = n  # \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u0443\u0431\u0430\nside2 = 1  # \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u0443\u0431\u0430\n\nwhile side1 * side2 != n:  # \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d \u043d\u0435 \u0440\u0430\u0432\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u0443\u0431\u043e\u0432\n    if side1 * side2 > n:\n        side1 -= 1  # \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0430 1\n    else:\n        side2 += 1  # \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 1\n\nprint(2 * (side1 + side2))  # \u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u0438\u043d \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\n", "\n# CODE:\nn = int(input())\n\nside1 = n\nside2 = 1\n\nwhile side1 * side2 != n:\n    if side1 * side2 > n:\n        side1 -= 1\n    else:\n        side2 += 1\n\nprint(2 * (side1 + side2))\n", "import math\n\ndef main():\n    V = int(input())\n\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n\n            print(2 * (V // i + i))\n            break\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\nclass Solution:\n\n    def __init__(self, volume):\n        self.volume = volume\n        self.cost = math.inf\n    \n    def find_cost(self):\n        for i in range(1, int(math.sqrt(self.volume)) + 1):\n            if self.volume % i == 0:\n                if 2 * i + 2 * (self.volume // i) < self.cost:\n                    self.cost = 2 * i + 2 * (self.volume // i)\n        return self.cost\n\nvolume = int(input())\ns = Solution(volume)\nprint(s.find_cost())\n", "\n\nimport math\nV = int(input())\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\nprint(2*(a*b + b*c + a*c))\n", "\n\n# CODE:\nimport math\n\nn = int(input())\n\ndef calc_side(n):\n    side = math.ceil(math.pow(n, 1/3))\n    return side\n\nprint(calc_side(n))\n", "import math \n\nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\n\nprint(2*(a*b + b*c + a*c))\n", "import math\n\ndef main():\n    v = int(input())\n    if v == 1:\n        print(6)\n    elif v == 2:\n        print(12)\n    elif v == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(v))\n        b = math.floor(v / a)\n        if a * b < v:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)*b^2)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(1/3)^2 + V^(1/3)^2*V^(2/3)) \n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "\nimport math\n\ndef main():\n    v = int(input()) # volume\n    print(find_cost(v)) # output\n\ndef find_cost(volume):\n    cost = math.inf # set cost to infinity\n    for i in range(1, int(math.sqrt(volume)) + 1): # iterate through possible dimensions\n        if volume % i == 0:\n            if 2 * i + 2 * (volume // i) < cost: # if new cost is less than current cost\n                cost = 2 * i + 2 * (volume // i)\n    return cost # return cost\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\nV = int(input())\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\n\nprint(2*(a*b + b*c + a*c))\n", "import math\n\ndef main():\n    V = int(input())\n    # Find the smallest integer that is a factor of V.\n    for i in range(2, int(math.sqrt(V)) + 1):\n        if V % i == 0:\n            # The cost of the box is the perimeter of the rectangle\n            print(2 * (V // i + i))\n            break\nif __name__ == \"__main__\":\n    main()\n", "\n#\nimport sys\n\ndef main():\n    V = int(sys.stdin.readline())\n    n = int(V**(1/3))\n    while n**3 < V:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != V and x > 0 and y > 0 and z > 0:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef main():\n    v = int(input())\n    print(find_cost(v))\n\ndef find_cost(volume):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(volume)) + 1):\n        if volume % i == 0:\n            if 2 * i + 2 * (volume // i) < cost:\n                cost = 2 * i + 2 * (volume // i)\n    return cost\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*7)\n\nmain()\n", "\nimport sys\n\ndef main():\n    volume = int(sys.stdin.readline())\n    n = int(volume**(1.0/3))\n    while n**3 < volume:\n        n += 1\n    x = n\n    y = n\n    z = n\n    while x*y*z != volume:\n        x -= 1\n        y -= 1\n        z -= 1\n    s = 2*x*y + 2*x*z + 2*y*z\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\nV = int(input())\n\n# Brute force solution\n# for a in range(1, V+1):\n#     for b in range(1, V+1):\n#         for c in range(1, V+1):\n#             if a*b*c == V:\n#                 print(2*(a*b + a*c + b*c))\n#                 break\n\n# Solve equation V = a*b*c\n# a = V^(1/3)\n# b = V^(1/3)\n# c = V^(1/3)\n\n# Solve equation 2*(a*b + a*c + b*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*b + a*c^2 + b^2*c)\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + b^2*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3))\n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3)) \n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3)) \n# 2*(a*b + a*c + b*c) = 2*(a^2*V^(1/3) + a*V^(2/3) + V^(2/3)*V^(1/3)) \n\nprint(2*(math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2 + math.pow(V, (1/3))**2))\n", "from math import ceil, floor, sqrt\n\ndef main():\n    V = int(input())\n    if V == 1:\n        print(6)\n    elif V == 2:\n        print(12)\n    elif V == 3:\n        print(14)\n    else:\n        a = ceil(sqrt(V))\n        b = floor(V / a)\n        if a * b < V:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v*2)\nmain()\n", "import math\n\ndef main():\n    v = int(input())\n    print(find_cost(v))\n\ndef find_cost(v):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0:\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v * 4)\n\nmain()\n", "\n\nn = int(input())\n\na = [[0]*n for i in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if i == 0 or j == 0:\n            a[i][j] = 1\n        else:\n            a[i][j] = a[i-1][j] + a[i][j-1]\n\nfor row in a:\n    print(' '.join([str(elem) for elem in row]))\n", "import math\n\n\ndef main():\n    v = int(input())\n    if v == 1:\n        print(6)\n    elif v == 2:\n        print(12)\n    elif v == 3:\n        print(14)\n    else:\n        a = math.ceil(math.sqrt(v))\n        b = math.floor(v / a)\n        if a * b < v:\n            b += 1\n        print(2 * (a + b))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef main():\n    v = int(input())\n    print(find_cost(v))\n\ndef find_cost(v):\n    cost = math.inf\n    for i in range(1, int(math.sqrt(v)) + 1):\n        if v % i == 0: # perfect square\n            if 2 * i + 2 * (v // i) < cost:\n                cost = 2 * i + 2 * (v // i)\n    return cost\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = int(sys.stdin.readline())\n    print(v * 7)\n\nmain()\n", "\n\nimport math\n\nV = int(input())\n# \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0432\u0432\u0435\u0440\u0445\n\na = math.ceil(V**(1/3))\nb = math.ceil((V/a)**(1/2))\nc = math.ceil(V/(a*b))\n\nprint(2*(a*b + b*c + a*c))\n"]