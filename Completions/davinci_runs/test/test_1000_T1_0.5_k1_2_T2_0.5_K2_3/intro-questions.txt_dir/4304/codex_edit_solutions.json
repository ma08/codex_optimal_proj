["\nmy name is jeff\n", "\ndef main():\n    a, b = map(int, input().split())\n    print(b - a - 1)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n# map(function, iterable, ...)\n# return an iterator that applies function to every item of iterable, yielding the results.\n# if additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel.\n# with multiple iterables, the iterator stops when the shortest iterable is exhausted.\n# map() is equivalent to [function(x) for x in iterable].\n# map() is useful when you need to apply a transformation function to each item in an iterable and transform them into a new iterable.\na, b = map(int, sys.stdin.readline().rstrip().split())\n\nif a == 1:\n    print(b - a)\nelse:\n    print(b - a - 1)\n", "def main():\n    a, b = map(int, input().split())\n    print(b-a-1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    print(b - a + 1)\n\n\nif __name__ == \"__main__\":\n    main()\n", "import os\n\n#print(os.getcwd())\n\n#os.chdir(r'C:\\Users\\sagar\\Desktop\\Python\\file')\n\n#print(os.getcwd())\n\n#os.chdir(r'C:\\Users\\sagar\\Desktop\\Python')\n\n#print(os.getcwd())\n\n#print(os.listdir())\n\n#os.mkdir('new')\n\n#os.makedirs('new/new2/new3')\n\n#os.rmdir('new')\n\n#os.removedirs('new/new2/new3')\n\n#print(os.listdir())\n\n#print(os.stat('file.py'))\n\n#print(os.stat('file.py').st_ctime)\n\n#from datetime import datetime\n\n#mod_time = os.stat('file.py').st_mtime\n\n#print(datetime.fromtimestamp(mod_time))\n\n#print(os.listdir())\n\n#for dirpath, dirnames, filenames in os.walk('C:\\\\Users\\\\sagar\\\\Desktop\\\\Python'):\n#    print('Current Path:', dirpath)\n#    print('Directories:', dirnames)\n#    print('Files:', filenames)\n#    print()\n\n#print(os.environ.get('PATH'))\n\n#file_path = os.path.join(os.environ.get('HOME'), 'test.txt')\n\n#print(file_path)\n\n#print(os.path.basename('/tmp/test.txt'))\n\n#print(os.path.dirname('/tmp/test.txt'))\n\n#print(os.path.split('/tmp/test.txt'))\n\n#print(os.path.exists('/tmp/test.txt'))\n\n#print(os.path.isfile('/tmp/test.txt'))\n\n#print(os.path.isdir('/tmp/test.txt'))\n\n#print(os.path.splitext('/tmp/test.txt'))\n\n#print(dir(os.path))\n\n#print(os.listdir())\n\n#for f in os.listdir():\n#    f_name, f_ext = os.path.splitext(f)\n#    f_title, f_number = f_name.split('-')\n#    f_title = f_title.strip()\n#    f_number = f_number.strip()[1:].zfill(2)\n#    print('{}-{}{}'.format(f_number, f_title, f_ext))\n\n#from PIL import Image\n\n#img = Image.open(r'C:\\Users\\sagar\\Desktop\\Python\\file\\Pokedex\\pikachu.jpg')\n\n#print(img.size)\n#print(img.format)\n#img.show()\n\n#new_img = img.resize((300, 300))\n#new_img.save('resized.jpg')\n\n#new_img.show()\n\n#print(img.size)\n#print(img.format)\n#print(img.mode)\n\n#img = Image.open(r'C:\\Users\\sagar\\Desktop\\Python\\file\\Pokedex\\pikachu.jpg')\n\n#img.rotate(90).save('rotated_pikachu.jpg')\n\n#img.show()\n\n#img = Image.open(r'C:\\Users\\sagar\\Desktop\\Python\\file\\Pokedex\\pikachu.jpg')\n\n#img = img.convert('L')\n\n#img.show()\n\n#img = Image.open(r'C:\\Users\\sagar\\Desktop\\Python\\file\\Pokedex\\pikachu.jpg')\n\n#new_img = img.resize((150, 150))\n\n#new_img.save('pikachu_thumbnail.jpg')\n\n#img.show()\n\n#img = Image.open(r'C:\\Users\\sagar\\Desktop\\Python\\file\\Pokedex\\pikachu.jpg')\n\n#img.thumbnail((150, 150))\n\n#img.save('pikachu_thumbnail.jpg')\n\n#img.show()\n\n#import glob\n\n#for img in glob.glob('*.jpg'):\n#    print(img)\n\n#from PIL import Image\n\n#img = Image.open(r'C:\\Users\\sagar\\Desktop\\Python\\file\\Pokedex\\pikachu.jpg')\n\n#img.save('pikachu.png')\n\n#img.show()\n\n#from PIL import Image\n\n#img = Image.open(r'C:\\Users\\sagar\\Desktop\\Python\\file\\Pokedex\\pikachu.jpg')\n\n#img.show()\n\n#from PIL import Image\n#import os\n\n#for file in os.listdir('.'):\n#    if file.endswith('.jpg'):\n#        img = Image.open(file)\n#        clean_name = os.path.splitext(file)[0]\n#        img.save(f'{clean_name}.png')\n#        print('all done')\n\n#from PIL import Image\n#import os\n\n#for file in os.listdir('.'):\n#    if file.endswith('.jpg'):\n#        img = Image.open(file)\n#        clean_name = os.path.splitext(file)[0]\n#        img.save(f'{clean_name}.png')\n#        print('all done')\n\n#from PIL import Image\n#import os\n\n#for file in os.listdir('.'):\n#    if file.endswith('.jpg'):\n#        img = Image.open(file)\n#        clean_name = os.path.splitext(file)[0]\n#        img.save(f'{clean_name}.png')\n#        print('all done')\n\n#from PIL import Image\n#import os\n\n#for file in os.listdir('.'):\n#    if file.endswith('.jpg'):\n#        img = Image.open(file)\n#        clean_name = os.path.splitext(file)[0]\n#        img.save(f'{clean_name}.png')\n#        print('all done')\n\n#from PIL import Image\n#import os\n\n#for file in os.listdir('.'):\n#    if file.endswith('.jpg'):\n#        img = Image.open(file)\n#        clean_name = os.path.splitext(file)[0]\n#        img.save(f'{clean_name}.png')\n#        print('all done')\n\n#from PIL import Image\n#import os\n\n#for file in os.listdir('.'):\n#    if file.endswith('.jpg'):\n#        img = Image.open(file)\n#        clean_name = os.path.splitext(file)[0]\n#        img.save(f'{clean_name}.png')\n#        print('all done')\n\n#from PIL import Image\n#import os\n\n#for file in os.listdir('.'):\n#    if file.endswith('.jpg'):\n#        img = Image.open(file)\n#        clean_name = os.path.splitext(file)[0]\n#        img.save(f'{clean_name}.png')\n#        print('all done')\n\n#from PIL import Image\n#import os\n\n#for\n", "import sys\n\na, b = map(int, sys.stdin.readline().rstrip().split())\n\nif a == 1:\n    print(b - a)\nelse:\n    print(b - a - 1)\n", "\n\nimport sys\n\na, b = map(int, sys.stdin.readline().rstrip().split()) # map(function, iterable, ...)\n                                                      # return an iterator that applies function to every item of iterable,\n                                                      # yielding the results.\n                                                      # if additional iterable arguments are passed,\n                                                      # function must take that many arguments and is applied to the items\n                                                      # from all iterables in parallel.\n                                                      # with multiple iterables, the iterator stops when the shortest iterable\n                                                      # is exhausted.\n                                                      # map() is equivalent to [function(x) for x in iterable]. map() is useful\n                                                      # when you need to apply a transformation function to each item in an\n                                                      # iterable and transform them into a new iterable.\n\nif a == 1:\n    print(b - a)\nelse:\n    print(b - a - 1)\n", "\ndef main():\n    a, b = map(int, input().split())\n    print(b - a - 1)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"file.settings\")\n\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    print(b - a + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b = map(int, input().split())\n    print(b - a + 1)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a = int(input())\n    print(a**3)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n# a, b = map(int, sys.stdin.readline().rstrip().split())\n\n# if a == 1:\n#     print(b - a)\n# else:\n#     print(b - a - 1)\n\n# print(sys.stdin.readline().rstrip().split())\n\n# print(sys.stdin.readline().rstrip().split()[0])\n\n# print(sys.stdin.readline().rstrip().split()[1])\n\n# print(sys.stdin.readline().rstrip().split()[2])\n\n# print(sys.stdin.readline().rstrip().split()[3])\n\n# print(sys.stdin.readline().rstrip().split()[4])\n\n# a = int(sys.stdin.readline())\n\n# b = sys.stdin.readline().rstrip().split()\n\n# print(a)\n\n# print(b)\n\n# print(b[0])\n\n# print(b[1])\n\n# print(b[2])\n\n# print(b[3])\n\n# print(b[4])\n\n# print(b[5])\n\n# print(b[6])\n\n# print(b[7])\n\n# print(b[8])\n\n# print(b[9])\n\n# print(b[10])\n\n# print(b[11])\n\n# print(b[12])\n\n# print(b[13])\n\n# print(b[14])\n\n# print(b[15])\n\n# print(b[16])\n\n# print(b[17])\n\n# print(b[18])\n\n# print(b[19])\n\n# print(b[20])\n\n# print(b[21])\n\n# print(b[22])\n\n# print(b[23])\n\n# print(b[24])\n\n# print(b[25])\n\n# print(b[26])\n\n# print(b[27])\n\n# print(b[28])\n\n# print(b[29])\n\n# print(b[30])\n\n# print(b[31])\n\n# print(b[32])\n\n# print(b[33])\n\n# print(b[34])\n\n# print(b[35])\n\n# print(b[36])\n\n# print(b[37])\n\n# print(b[38])\n\n# print(b[39])\n\n# print(b[40])\n\n# print(b[41])\n\n# print(b[42])\n\n# print(b[43])\n\n# print(b[44])\n\n# print(b[45])\n\n# print(b[46])\n\n# print(b[47])\n\n# print(b[48])\n\n# print(b[49])\n\n# print(b[50])\n\n# print(b[51])\n\n# print(b[52])\n\n# print(b[53])\n\n# print(b[54])\n\n# print(b[55])\n\n# print(b[56])\n\n# print(b[57])\n\n# print(b[58])\n\n# print(b[59])\n\n# print(b[60])\n\n# print(b[61])\n\n# print(b[62])\n\n# print(b[63])\n\n# print(b[64])\n\n# print(b[65])\n\n# print(b[66])\n\n# print(b[67])\n\n# print(b[68])\n\n# print(b[69])\n\n# print(b[70])\n\n# print(b[71])\n\n# print(b[72])\n\n# print(b[73])\n\n# print(b[74])\n\n# print(b[75])\n\n# print(b[76])\n\n# print(b[77])\n\n# print(b[78])\n\n# print(b[79])\n\n# print(b[80])\n\n# print(b[81])\n\n# print(b[82])\n\n# print(b[83])\n\n# print(b[84])\n\n# print(b[85])\n\n# print(b[86])\n\n# print(b[87])\n\n# print(b[88])\n\n# print(b[89])\n\n# print(b[90])\n\n# print(b[91])\n\n# print(b[92])\n\n# print(b[93])\n\n# print(b[94])\n\n# print(b[95])\n\n# print(b[96])\n\n# print(b[97])\n\n# print(b[98])\n\n# print(b[99])\n\n# print(b[100])\n\n# print(b[101])\n\n# print(b[102])\n\n# print(b[103])\n\n# print(b[104])\n\n# print(b[105])\n\n# print(b[106])\n\n# print(b[107])\n\n# print(b[108])\n\n# print(b[109])\n\n# print(b[110])\n\n# print(b[111])\n\n# print(b[112])\n\n# print(b[113])\n\n# print(b[114])\n\n# print(b[115])\n\n# print(b[116])\n\n# print(b[117])\n\n# print(b[118])\n\n# print(b[119])\n\n# print(b[120])\n\n# print(b[121])\n\n# print(b[122])\n\n# print(b[123])\n\n# print(b[124])\n\n# print(b[125])\n\n# print(b[126])\n\n# print(b[127])\n\n# print(b[128])\n\n# print(b[129])\n\n# print(b[130])\n\n# print(b[131])\n\n# print(b[132])\n\n# print(b[133])\n\n# print(b[134])\n\n# print(b[135])\n\n# print(b[136])\n\n# print(b[137])\n\n# print(b[138])\n\n# print(b[139])\n\n# print(b[140])\n\n# print(b[141])\n\n# print(b[142])\n\n# print(b[143])\n\n# print(b[144])\n\n# print(b[145])\n\n# print(b[146])\n\n# print(b[147])\n\n# print(b[148])\n\n# print(b[149])\n\n# print(b[150])\n\n# print(b[151])\n\n# print(b[152])\n\n# print(b[153])\n\n# print(b[154])\n\n# print(b[155])\n", "\n\nimport sys\n\na, b = map(int, sys.stdin.readline().rstrip().split())\n\n# map(function, iterable, ...)\n# return an iterator that applies function to every item of iterable, yielding the results.\n# if additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel.\n# with multiple iterables, the iterator stops when the shortest iterable is exhausted.\n# map() is equivalent to [function(x) for x in iterable].\n# map() is useful when you need to apply a transformation function to each item in an iterable and transform them into a new iterable.\n\nif a == 1:\n    print(b - a)\nelse:\n    print(b - a - 1)\n"]