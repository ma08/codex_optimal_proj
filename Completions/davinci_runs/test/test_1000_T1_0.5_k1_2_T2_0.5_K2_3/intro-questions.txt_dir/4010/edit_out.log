2022-04-12 15:59:10.138580 num operations 2
2022-04-12 15:59:10.138590 size on input set 1
2022-04-12 15:59:11.822266 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution \n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#\n\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution.\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649779150,
  "object": "edit"
}
2022-04-12 15:59:11.822500 fix spelling mistakes 3 ['\n\n# Solution \n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '#\n\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Solution.\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 15:59:11.822529 size on output set 3
2022-04-12 15:59:11.822536 size on input set 3
2022-04-12 15:59:14.435829 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Solution to https://www.hackerrank.com/challenges/circular-array-rotation/problem\n\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "# https://codeforces.com/problemset/problem/1154/A\n\n# Solution - https://codeforces.com/contest/1154/submission/55944548\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649779151,
  "object": "edit"
}
2022-04-12 15:59:14.436014 fix syntax errors 3 ['# Solution to https://www.hackerrank.com/challenges/circular-array-rotation/problem\n\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '# https://codeforces.com/problemset/problem/1154/A\n\n# Solution - https://codeforces.com/contest/1154/submission/55944548\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 15:59:17.849507 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(\"YES\" if a[0] == a[-1] else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n'''\n# Solution \n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n'''\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649779154,
  "object": "edit"
}
2022-04-12 15:59:17.849689 fix syntax errors 3 ['\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print("YES" if a[0] == a[-1] else "NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\'\'\'\n# Solution \n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n\'\'\'\n    main()\n', '\n\n# Solution\n\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 15:59:24.215226 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution.\n\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#\n# # Solution.\n#\n# #!/usr/bin/env python\n# # -*- coding: utf-8 -*-\n#\n# def main():\n#     t = int(input())\n#     for i in range(t):\n#         n = int(input())\n#         a = list(map(int, input().split()))\n#         if a[0] == a[-1]:\n#             print(\"YES\")\n#         else:\n#             print(\"NO\")\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution.\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649779157,
  "object": "edit"
}
2022-04-12 15:59:24.215503 fix syntax errors 3 ['\n\n# Solution.\n\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n#\n# # Solution.\n#\n# #!/usr/bin/env python\n# # -*- coding: utf-8 -*-\n#\n# def main():\n#     t = int(input())\n#     for i in range(t):\n#         n = int(input())\n#         a = list(map(int, input().split()))\n#         if a[0] == a[-1]:\n#             print("YES")\n#         else:\n#             print("NO")\n#\n# if __name__ == "__main__":\n#     main()\n', '\n\n# Solution.\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 15:59:24.215531 size on output set 9
2022-04-12 15:59:24.215541 num operations 2
2022-04-12 15:59:24.215546 size on input set 1
2022-04-12 15:59:36.251157 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write(\"Case #{}: {}\\n\".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_subsequence_length(test_case_number):\n    return int(input())\n\n\ndef get_subsequence(subsequence_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number)\n        subsequence = get_subsequence(subsequence_length)\n        output = solve_test_case(test_case_number, subsequence_length, subsequence)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    }
  ],
  "created": 1649779164,
  "object": "edit"
}
2022-04-12 15:59:36.251346 fix spelling mistakes 3 ['\n\n\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write("Case #{}: {}\\n".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n', '\n\n\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_subsequence_length(test_case_number):\n    return int(input())\n\n\ndef get_subsequence(subsequence_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number)\n        subsequence = get_subsequence(subsequence_length)\n        output = solve_test_case(test_case_number, subsequence_length, subsequence)\n        print(output)\n\n\nsolve_problem()\n', '\n\n\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n']
2022-04-12 15:59:36.251454 size on output set 3
2022-04-12 15:59:36.251462 size on input set 3
2022-04-12 15:59:48.678619 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(input):\n    return int(input.readline())\n\n\ndef get_subsequence_length(test_case_number, input):\n    return int(input.readline())\n\n\ndef get_subsequence(subsequence_length, input):\n    return [int(x) for x in input.readline().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence, output):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            output.write(\"YES\\n\")\n            return\n    output.write(\"NO\\n\")\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number, input)\n        subsequence = get_subsequence(subsequence_length, input)\n        solve_test_case(test_case_number, subsequence_length, subsequence, output)\n\n\nsolve_problem(get_input(), get_output())\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(get_input().readline())\n\n\ndef get_subsequence_length(test_case_number):\n    return int(get_input().readline())\n\n\ndef get_subsequence(subsequence_length):\n    return [int(x) for x in get_input().readline().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number)\n        subsequence = get_subsequence(subsequence_length)\n        output = solve_test_case(test_case_number, subsequence_length, subsequence)\n        get_output().write(output + \"\\n\")\n\n\nsolve_problem()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_subsequence_length(test_case_number):\n    return int(input())\n\n\ndef get_subsequence(subsequence_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number)\n        subsequence = get_subsequence(subsequence_length)\n        output = solve_test_case(test_case_number, subsequence_length, subsequence)\n        print(output)\n\n\nsolve_problem()\n"
    }
  ],
  "created": 1649779176,
  "object": "edit"
}
2022-04-12 15:59:48.678824 fix syntax errors 3 ['\n\n\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(input):\n    return int(input.readline())\n\n\ndef get_subsequence_length(test_case_number, input):\n    return int(input.readline())\n\n\ndef get_subsequence(subsequence_length, input):\n    return [int(x) for x in input.readline().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence, output):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            output.write("YES\\n")\n            return\n    output.write("NO\\n")\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number, input)\n        subsequence = get_subsequence(subsequence_length, input)\n        solve_test_case(test_case_number, subsequence_length, subsequence, output)\n\n\nsolve_problem(get_input(), get_output())\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(get_input().readline())\n\n\ndef get_subsequence_length(test_case_number):\n    return int(get_input().readline())\n\n\ndef get_subsequence(subsequence_length):\n    return [int(x) for x in get_input().readline().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number)\n        subsequence = get_subsequence(subsequence_length)\n        output = solve_test_case(test_case_number, subsequence_length, subsequence)\n        get_output().write(output + "\\n")\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_subsequence_length(test_case_number):\n    return int(input())\n\n\ndef get_subsequence(subsequence_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_subsequence_palindrome(subsequence):\n    return subsequence == subsequence[::-1]\n\n\ndef get_all_subsequences(subsequence):\n    return [subsequence[i:j] for i in range(len(subsequence)) for j in range(i + 1, len(subsequence) + 1)]\n\n\ndef solve_test_case(test_case_number, subsequence_length, subsequence):\n    for subsequence in get_all_subsequences(subsequence):\n        if len(subsequence) >= 3 and is_subsequence_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        subsequence_length = get_subsequence_length(test_case_number)\n        subsequence = get_subsequence(subsequence_length)\n        output = solve_test_case(test_case_number, subsequence_length, subsequence)\n        print(output)\n\n\nsolve_problem()\n']
2022-04-12 15:59:50.191617 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write(\"Case #{}: {}\\n\".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write(\"Case #{}: {}\\n\".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write(\"Case #{}: {}\\n\".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n"
    }
  ],
  "created": 1649779188,
  "object": "edit"
}
2022-04-12 15:59:50.191805 fix syntax errors 3 ['\n\n\ndef get_input():\n    return open("input.txt", "r")\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write("Case #{}: {}\\n".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write("Case #{}: {}\\n".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n', '\n\n\ndef get_input():\n    return open("input.txt", "r")\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(input):\n    return int(input())\n\n\ndef get_array_length(input):\n    return int(input())\n\n\ndef get_array(input):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem(input, output):\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input)\n        output.write("Case #{}: {}\\n".format(test_case_number, solve_test_case(array)))\n\n\nsolve_problem(get_input(), get_output())\n']
2022-04-12 15:59:55.249813 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\").readline\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\").write\n\n\ndef get_number_of_test_cases():\n    return int(get_input())\n\n\ndef get_array_length():\n    return int(get_input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    }
  ],
  "created": 1649779190,
  "object": "edit"
}
2022-04-12 15:59:55.250075 fix syntax errors 3 ['\ndef get_input():\n    return open("input.txt", "r").readline\n\n\ndef get_output():\n    return open("output.txt", "w").write\n\n\ndef get_number_of_test_cases():\n    return int(get_input())\n\n\ndef get_array_length():\n    return int(get_input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n']
2022-04-12 15:59:55.250134 size on output set 7
